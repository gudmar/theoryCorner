(this["webpackJsonptheory-corner"]=this["webpackJsonptheory-corner"]||[]).push([[0],{149:function(e,t,n){"use strict";n.r(t);var o=n(2),a=n.n(o),i=n(62),r=n.n(i),s=(n(68),n(7)),c=(n(69),{summary:"box model",title:"box model",cathegory:"css",searchKeywords:"margin padding collapsed margin top-margin bottom-margin left-margin right-margin padding\n        padding-top padding-bottom padding-left padding-right border outline border-top border-right border-bottom\n        border-left box-sizing border-box content-box padding-box",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Box model"},{elementType:"Paragraph",content:"\n                        Each web page element is placed in rectangular boxes. This boxes describe elements \n                    "},{elementType:"Image",name:"boxModel_browser.png",alt:"Box model"},{elementType:"UnsignedList",content:["<b>margin:</b> This is a rectangular box describing elements outer distance from other elements \n                        on page","<b>border:</b> This is a frame surrounding element, it has its size that may be calculated into\n                        elements size, or not, depending on chosen <code>box-sizing</code>","<b>padding:</b> This is inner element spacing. Distance between border and elements content","<b>content:</b> This is space elements content takes"]},{elementType:"Paragraph",content:"\n                        There is also an <b>outline</b>, an element surrounding border of element. Outline overlaps margin,\n                        as it is never taken into account when calculating elements size. Moreover outline cannot have\n                        its top, left, right, bottom or radius set. It may however be for example solid or dashed, and have its \n                        color set.\n                    "},{elementType:"NoteWarning",content:"\n                        If element is taken out of layout with <code>position</code> equal to <code>absolute</code>,\n                        <code>fixed</code> or <code>sticky</code> margin, padding, border will exist, but \n                        will not determine elements distances to other elements on page.\n                    "},{elementType:"Image",name:"boxModel_example_1.png",alt:"Box model"}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"box-sizing"},{elementType:"Paragraph",content:"How size determined by style height and width is calculated depends on \n                    <code>box-sizing</code> property:"},{elementType:"UnsignedList",content:["<b>content-box: </b>width and height properties set only inner elements content, where \n                        margin, border and padding are not taken into account when setting height and width. So\n                        element as a whole is larger.","<b>border-box: </b>width and height properties contain padding and border of element. Margin \n                        is not taken into account.","<b>padding-box: </b>width and height properties contain padding. However border and margin\n                        are left outside."]},{elementType:"NoteWarning",content:'\n                    This is theory. In practice <code>padding-box</code> is not supported in all browsers I have. In\n                    <a href="https://css-tricks.com/almanac/properties/b/box-sizing/">one source</a> I found that \n                    this value is supported only in firefox, however in my case even this browser, with -moz and -webkit\n                    prefixes failed. Observed default behaviour (content-box) was in all cases the same as \n                    described padding-box\n                    '}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"top, left, right, bottom, radius, style"},{elementType:"Paragraph",content:"Padding, margin and border may have different size in their top, left, bottom or right part\n                    Outline has always constant size on each edge. Border may have different radiuses set to each edge \n                    corner, and there is a possiblity to create interesting effects with this. Outline does not have its \n                    radius property. However border and outline may have different style property. It may be: none, hidden,\n                    dotted, dashed, solid, double, groove, ridge, inset, outset, initial oir inherit. Outline will have \n                    the same styling in each edge, however border style may be different for each edge"},{elementType:"Image",name:"fancy_border.png",alt:"Box model"}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Collapsing margins"},{elementType:"Paragraph",content:"Lets concidere this piece of code"},{elementType:"Code",content:"\n<pre>\n&lt;style>\n    p{margin:25px;}\n&lt;/style>\n&lt;p>Paragraph 1&lt;/p>\n&lt;p>Paragraph 2&lt;/p>\n</pre>                        \n                    "},{elementType:"Paragraph",content:"Margin is set to 25px, so one could expect that as <code>p</code> are block elements \n                    distance between them in vertical cordinance would be 50px. And there is a surprice. Margins will\n                    collapse, and space will be reduced to 25px. There is a link to a marvelous article about this in\n                    a reference section of this article. But in short words:"},{elementType:"UnsignedList",content:["Only vertical margins collapse. Exception is when <code>writing-mode</code> is chenged to \n                        <code>vertical-lr</code>. In this case only horizontal margin collapses. So only <b>block direction</b>\n                        margins collapse","Only <b>adjacend</b> margins collapse. If there is a <code><br></code> between, they are no longer \n                        adjacend and they do not collapse","If margins of adjacent elements are unequal, bigger wins","If one of adjacent elements is nested, this doest not prevent collapsing. Exception is when \n                        parent of nested element has some padding.","Negative margins also collapse. Larger one wins"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Negative margins"},{elementType:"Paragraph",content:"There is a possiblity to set a negative margin value to decrease element spacing. In case\n                    a negative margin collapse with positive one, they values are added (margin 150px with -50px gives\n                        spacing equal to 100px)"}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Inline elements"},{elementType:"Paragraph",content:"\n                        How about inline elements? Yes, they also are in box model. There is a possibility, that \n                        an element will be divided. Some part of it will be in line <i>n</i>, and other part of\n                        it will be moved to line <i>n + 1</i>. In this situation this box model will be broken in \n                        place line ends and moved to next line. To learn more please refer to reference section.\n                    "},{elementType:"Image",name:"boxModel_inline.png",alt:"Box model inline element"}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"w3 org",href:"https://www.w3.org/TR/CSS2/box.html",description:"Word wide web article about box model"},{elementType:"Link",content:"Josh Comeau",href:"https://www.joshwcomeau.com/css/rules-of-margin-collapse/",description:"Great visualisation of margin collapse"},{elementType:"Link",content:"Hack mozilla",href:"https://hacks.mozilla.org/2015/03/understanding-inline-box-model/",description:"Inline elements and box model"},{elementType:"Link",content:"Fancy border generator",href:"https://9elements.github.io/fancy-border-radius/",description:"Online generator making it easy to convert plane div to fancy shapes"},{elementType:"Link",content:"Examples at gitHub",href:"https://github.com/gudmar/theoryCornerExamples",description:"Examples used on this page"}]}]});var l={summary:"specifity",title:"specifity",cathegory:"css",searchKeywords:"",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Specifity"},{elementType:"Paragraph",content:"\n                        If there is only one css selector matching an each element things are simple. But when multiple \n                        different selectors want to influence a single element, what rule should be chosen? The last one\n                        or the first one, or all of them? What should happen if rules deny each other?\n                    "},{elementType:"Image",name:"specifity.png",alt:"specifity"},{elementType:"Paragraph",content:"\n                    There are groups of css selectors, and each group is multiplied by a different factor.\n                    After multiplication points from different groups are added, and result is specifity value.\n                    "},{elementType:"UnsignedList",content:["<code>inline styling</code>: multiplied by 1000","<code>id</code> attribute: multiplied by 100","<code>class, pseudo-class, attribute selector</code>: multiplied by 10","<code>HTML tags</code>: multiplied by 1","<code>* + > ~ , :not()</code>: multiplied by 0","<code>!important</code> multiplied by 10 000. <strong>Beware</strong> this keyword should be used \n                        very reasonably. In 99.9% cases it can be avoided, and if used may cause serious probles with \n                        maintainability"]},{elementType:"Paragraph",content:"Lets look at some examples:"},{elementType:"UnsignedList",content:["<code>div</code>: 0, 0, 0, 1 => as there are no class selectors, no ids, no iniline styling, just a\n                        tag selector. Specifity is 1","<code>body>footer.col_3>div>ul>li</code> 0, 0, 1, 5 => no inline styling, no id attributes, \n                        one class selector, and five tag selectors: body, footer, div, ul, li. \n                        Specifity is 15.",'<code>&lt;div style="background-color:green"></code>: 1, 0, 0, 0 => as there is one inline styling,\n                        so specifity equals 1000',"<code>#someId#someOtherId.col_8.card.content>p>b</code>: 0, 2, 3, 2 => there are two id selectors \n                        (someId and someOtherId) three class selectors (col_9, card, content), and two tag selectors \n                        (b, p), so specifity is 232"]},{elementType:"Headline-2",content:"!important"},{elementType:"Paragraph",content:"\n                    As this keyword overrides all specifity, even inline styling, it should be used very reasonably. \n                    In most cases this keyword should be avoided, as it leads to ignoring the real issues in the HTML \n                    structure and the corresponding CSS. This is especially important when working on a bigger project \n                    in which more people are involved. In some cases <i>important<i> make code impossible to debug, \n                    as removing the it keyword from already existing CSS rule may cause other issues to appear. \n                    Important rules make it difficult to apply <i>user stylesheets</i>. So to summarize:\n                    "},{elementType:"UnsignedList",content:["<code>!important</code> hides problems existing within the HTML structure and corresponding CSS,","<code>!important</code> makes maintainability difficult or even impossible,","<strong>user stylesheets</code> will be hard or impossible to apply,"]},{elementType:"Paragraph",content:"\n                    Why <code>!important</code> keyword exists at all if it is that <i>evil</i>?</code> \n                    It is not completely the <i>dark side of the force</i>. There are a few situations it comes handy. \n                    "},{elementType:"UnsignedList",content:["Testing and debugging,","User stylesheets (browser extentions allowing a user to apply custom stylesheets to each site)","<strong>user stylesheets</strong> will be hard or impossible to apply,","Similar to user stylesheets is working with a third party code, when some CSS rules needs to be \n                        overwritten to suite your needs,","Even Bootstrap uses the important keyword. Considering a <code>hidden-sm</code> class, that \n                        hides elements on smaller devices. It must work in all circumstances. Even when other classes are\n                        applied ","There is an already finished and encapsulated element, lets call it <code>custom-input</code>,\n                        without shadow DOM applied to is. If <code>custom-input</code> is nested, and other elements\n                        start interfering with <code>custom-input</coed> css, then using <code>!important</code> may\n                        be considerated inside the <code>custom-input</code>. However it would be better to use \n                        a custom web element with shadow root instead."]},{elementType:"Paragraph",content:"\n                    <code>!important</code> cannot be applied as a selector. It is applied to each css property individually.\n                    "},{elementType:"Code",content:"\n<pre>\n.some-class{\n    display: inline-block;\n    position: relative;\n    widht: 100px;\n    height: 100px;\n    background-color: blue !important;\n}\n</pre>                    \n                    "},{elementType:"Paragraph",content:"\n                    Now every element having the <q>some-class</q> applied will be forced to have a blue background. \n                    Can it be changed? Yes, only by another <code>!important</code> keyword somewhere beneath previous \n                    usage.\n                    "},{elementType:"Headline-2",content:"Inline styling"},{elementType:"Paragraph",content:"\n                    This is considered an another bad practice, however in some cases may be useful.\n                    "},{elementType:"UnsignedList",content:["Inline stylings are difficult to alter when applied to a great number of elements,","Inline stylings are not reusable,","When applied to <i>content security policy</i> pages they will not work,","They are not applied to media queries,","They might be useful when applied with JS to style some elements. Suppose there is an\n                        element that needs to be moved by a mouse on a page. Inline styling this element with JS seems\n                        a good idea."]},{elementType:"Headline-2",content:"Conclusion"},{elementType:"Paragraph",content:"\n                    <strong>Fighting with specifity is a bad idea</strong>. Selectors needed to be applied to style some \n                    element might be quite complex, and in bigger applications they might get out of hand. \n                    So the best solution is to understand specifity, know the rules, but avoid it in the code. \n                    It is mutch better to use more classes and keep less selectors than use specifity based ones. \n                    It is a very interesting experience to build something with a css framework to see how it works. \n                    Css frameworks are reusable and generic, so classes are named in a proper way, and whey do not use \n                    specifity based selectors much.\n                    "},{elementType:"Headline-2",content:"More than one selectors have the same specifity"},{elementType:"Paragraph",content:"\n                    In this case the one that has lower position in our css file will be applied.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"css-tircks",href:"https://css-tricks.com/specifics-on-css-specificity/",description:"Nice visual explanation of specifity calculation"},{elementType:"Link",content:"developintelligence",href:"https://www.developintelligence.com/blog/2018/02/css-important-rule-use-correctly/",description:"Important good usecases"},{elementType:"Link",content:"Stackoverflow",href:"https://stackoverflow.com/questions/35709447/why-does-bootstrap-use-important-for-responsive-classes",description:"Important in bootstrap"},{elementType:"Link",content:"Content security policy - CSP",href:"https://infosec.mozilla.org/guidelines/web_security#content-security-policy",description:""}]}]};n(70);var d={summary:"selectors",title:"selectors",cathegory:"css",searchKeywords:"selector selectors combinator combinators class classes tag id pseudo-class",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Selectors and combinators"}]},{elementType:"Article",content:[{elementType:"Paragraph",content:'\n                    Selector defines element or set of elements that a set of css rules should apply to. Selectors may\n                    be joined with combinators. Which rule is chosen in case more selectors apply to some elements is \n                    determined by <a href="./#/theory/specifity">specifity</a>.\n                    '},{elementType:"Headline-2",content:"Selectors"},{elementType:"UnsignedList",content:["<code>*</code>: this selects each single element on web page","<code>article</code>, <code>section</code>, <code>div</code>, <code>span</code>, <code>a</code>, \n                        <code>i</code>, <code>strong</code> and all other html tags are tag selectors. They chose all\n                        elements with this tag name,","<code>.some-class-name</code>: a selector with a dot is a class selector. Choses each element with\n                        containing this class in class list","<code>[attribute]</code>, select all elements having the 'attribute',","<code>[attribute=\"value\"]</code>: selects all elements having the 'attribute' value equal to\n                        'value'","<code>[attribute~=\"value\"]</code> selects all elements with an 'attribute' containing the word 'value'.\n                        As word needs to be separated with pauses, then a substring <code>somevalue</code> will not be selected.\n                        Only <code>some value</code> or <code>some value some</code> or <code>value some</code> will be selected.",'<code>[attribute*="value"]</code> selects all elements with an \'attribute\' containing the <strong>\n                        substring</strong> value. In this case all selections made by <code>[attribute]~="value"</code> are \n                        contained, and moreover <code>attribute="somevaluesome"</code> will be matched.','<code>[attribute|="value"]</code> selects all elements having an attribute starting with word \'value\' \n                        immediately followed by "-" (U+002D) or being equal to \'value\', so for example \n                        <code>attr="my-attr"</code> or <code>attr="my"</code>, but not <code>myattr</code>. \n                        This selector was designed to match locale/language codes like , <i>pl</i> or <i>en-gb</i>','<code>[attribute^="value"]</code> selects all elements having the "attribute" starting with "value", \n                        so both <i>my-attr</i> and <i>myattr</i> will match','<code>[attribute$="value"]</code> selects all elements thats "attribute" value ends with a "value" \n                        word. For expample: <code>[attribute$=".pdf"]</code> is good for selecting all elements ending with a \n                        <q>.pdf</q>','<code>:first-child</code>, <code>:not(p)</code>: pseudo class selectors. To learn more please refer to \n                        <a href="./pseudo%20classes>pseudo class</a> section,','<code>:before</code>, <code>:after</code>: pseudo-element selectrs select pseudo-elements. Those\n                        elements do not exist in HTML, however they are present in DOM and they are defined in CSS. To learn \n                        more read the <a href="./#/theory/pseudo%20elements">pseudo elements</a> article.',"<code>#myId</code>: is an Id selector. Id should be an unique value in the whole, so this should \n                        select only one element if not combined with selectors comming after it"]},{elementType:"Headline-2",content:"Combinators"},{elementType:"Paragraph",content:"\n                    Combinators are used to join css selectors together.\n                    <strong>There is currently (year 2021) no possibility to selec a parent element with css</strong>\n                    "},{elementType:"UnsignedList",content:["A space &#8594; <code>div p</code> will select all p elements that are descendants of div. Chidren, their \n                        children and so on,","<code>></code> &#8594; <code>div>p</code> will select only direct children, so only <code>p</code>\n                        elements if they are direct child of div,","<code>+</code> &#8594; <code>div+p</code> matches adjacent elements, so matches a <code>p</code> \n                        element only if it is a next direct sibling of the <code>div</code>","<code>~</code> &#8594; <code>div~p</code> matches a <code>p</code> element if it s a sibling of the\n                        <code>div</code> element, but in this case it does not have to be a direct sibling, but can be \n                        placed anywhere under the same parent."]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"w3schools",href:"https://www.w3schools.com/cssref/css_selectors.asp",description:"Nice visual explanation of specifity calculation"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Combinators",description:"Combinators explanation"}]}]};var p={summary:"pseudo classes",title:"pseudo classes",searchKeywords:":dir :lang :any-link :link :visited :local-link :target :target-within :scope :hover :active\n        :focus :focus-visible :focus-within :current :past :future :playing :paused :autofill :enabled :disabled \n        :read-only :read-write :placeholder-shown :dafault :checked :indeterminate :blank :valid :invalid :in-range\n        :out-of-range :reequired :optional :user-invalid :root :empty :nth-child :nth-last-child :firslt-child :only-child\n        :nth-of-type :nth-last-of-type :first-of-type :last-of-type :only-of-type",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Pseudo classes"},{elementType:"Paragraph",content:'\n                        <b>Pseudo classes</b> allow to select an element based on its current or history state or position\n                        in DOM tree.\n                        They are not real classes added to HTML, but can be used as <a href="./selectors">css selectors</a>. \n                        For example a <code>:hover</code> pseudo class\n                        allows to select an element that has mouse over it, a <code>div:nth-child(3)</code> pseudo class\n                        allows to select an element that is a third in row child of each div. There is a great \n                        number of pseudo selectors in css, and there is no point in rewriting sources like \n                        <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes" target="_blank">\n                        developer.mozilla</a> webside, so lets focus only on some of them here.\n                    '},{elementType:"Headline-3",content:"Structural pseudo-classes"},{elementType:"Paraghraph",content:"Matches elements based on their position in DOM."},{elementType:"ExplanationList",content:[{headline:":empty",content:"Matches all elements having no children other than white spaces. <b>Beware!</b>\n                            as this matches also elements not capable of having children, like an <code>input</code>."},{headline:":nth-child(x)",content:"Matches an x child of element placed on left of this plesudo selector. If there is nothing\n                            on the left of nth-child pseudo selector, then rule will be applied as if it was <code>*:nth-child</code>\n                            For example:\n                                <ul>\n                                <li key='1'>\n                                    <code>div:nth-child(2)</code> will select all second child elements of each div,\n                                </li>\n                                <li key='3'>\n                                    <code>:nth-child(odd)</code> represents each odd element being a child of something, \n                                </li>\n                                <li key='4'>\n                                    <code>:nth-child(even)</code> each even element being a child of something\n                                </li>\n                                <li key='5'>\n                                    <code>:nth-child(5n)</code> each element that is (indexOfElement modulo 5), so each\n                                    5, 10, 15, 20, 25... 50 ... element being a child of any element\n                                </li>\n                            "},{headline:":first-child",content:"Each element that is a first child of element on the left of pseudo selector.\n                            If no element given, each element will be matched"},{headline:":last-child",content:"Each element that is a last child of element on the left of pseudo selector.\n                            If no element given, each element will be matched"},{headline:":nth-first-child(An+B)",content:"Combines first child with nth child, this would select first of all elements \n                            selected by pattern in brackets notation. Example:\n                            <ul>\n                                <li><code>:nth-first-child(5n)</code> - each 5-th child element</li>\n                                <li><code>:nth-first-child(even)</code> - each second child, as\n                                    even matches each 2n element and <q>first</q> select first of them\n                                </li>\n                            </ul>\n                            "},{headline:":nth-last-child(An+B)",content:"Combines last child with nth child, this would select last of all elements \n                            selected by pattern in brackets notation. Example:\n                            <ul>\n                                <li><code>.target:nth-last-child(5n)</code> - in case there are 34 elements that are a child\n                                of <code>.target</code> then 30-th element would be selected</li>\n                                <li><code>target:nth-last-child(even)</code> - In case of 41 elements being a child of \n                                <code>.target</code> then 40-th element will be selected\n                                </li>\n                            </ul>"},{headline:":only-child",content:"matches elements having only one child,"},{headline:":nth-of-type(An+B)",content:"Matches nth child element of type of element on the left. Example:\n                            <ul>\n                                <li><code>:nth-of-type(n)</code> will match each element in DOM</li>,\n                                <li><code>p:nth-of-type(2n)</code> will match each second 'p' child element in DOM</li>,\n                                <li><code>div:nth-of-type(3n-1)</code> every third -1 element, so 3, 5, 8 ...</li>\n                            </ul>"},{headline:":nth-last-of-type(An+B)",content:"Similar to <code>nth-of-type</code>, however matches element counting from the end:\n                            <ul>\n                                <li><code>#outlet div:nth-last-of-type(7n)</code>In case of 23 div child elements of \n                                element with id 'outlet', items 17, 10 and 3 would be chosen (indexing from 1) </li> \n                                <li><code>p:nth-last-of-type(2n-1)</code> in case of 6 child p elements, items 6, 4, 2 would be\n                                chosen (indexing from 1) </li>,\n                            </ul>"},{headline:":first-of-type, :last-of-type, :only-of-type",content:'As in example:\n                            <ul>\n                                <li><code>#outlet p:first-of-type</code> in case element has\n<pre class="alert alert-dark">\n    &lt;div id="outlet">\n        &lt;span></span>\n        &lt;input/>\n        &lt;p>\n    &lt;/div>\n</pre>    \n                                this p element will be matched, because it is the first of type,</li>      \n                                <li><code>#outlet input:only-type-of</code> in case element has\n<pre class="alert alert-dark">\n    &lt;div id="outlet">\n        &lt;span></span>\n        &lt;input/>\n        &lt;input/>\n        &lt;p>\n    &lt;/div>\n</pre>    \n                                Nothing will be selected, as input is not the only one of its type.</li>                       \n                            </ul>'}]},{elementType:"Headline-3",content:"input pseudo-classes"},{elementType:"Paraghraph",content:""},{elementType:"ExplanationList",content:[{headline:":autofill",content:"Input attribute <code>autocomplete</code> is for displaying a browser added \n                            menu with last used values of certain data type. For example last added e-mail addresses.\n                            This matches an input that was filled by chosing element from this list,"},{headline:":enabled",content:"If input is enabled, can be interacted with,"},{headline:":disabled",content:"If an input is disabled and cannot be inteacted with,"},{headline:":read-only",content:"If element cannot be filled by a user, for example contenteditable is set to false,"},{headline:":read-write",content:"If element can be edited by a user. Also contenteditable set to true,"},{headline:":placeholder-shown",content:"If element displayes a placeholder (a html attribute available only on some inputs, not\n                                on contenteditable),"},{headline:":default",content:"If element is checked by default. Element stayes default even after checking another one,"},{headline:":checked",content:"Checkbox or radio-button if it is currentl checked. This changes when other element is \n                            chosen and becomes checked, unlike in a <code>default</code> pseudo-class, as default element will\n                            not change when interacted,"},{headline:":indeterminate",content:"A checkbox may be in indeterminate state, meatning it is neither true nor false. This is \n                            like a third boolean value, and comes handy when multiple checkboxes are set by a complicated algorithm,"},{headline:":valid",content:"Matches an input with valid value,"},{headline:":invalid",content:"Matches an input that has invalid value,"},{headline:":in-range",content:"Applies to an input with range limitations, thats value is in allowed range,"},{headline:":out-of-range",content:"Applies to an input with range limitations, thats value is out of allowed range,"},{headline:":required",content:"If input, textarea, select has a required attribute,"},{headline:":optional",content:"When input, textarea, select that does not have a required attribute,"},{headline:":user-invalid",content:"An input, textarea, select with invalid input, but only if user interacted wiht it."}]},{elementType:"Headline-3",content:"User action pseudo-classes"},{elementType:"ExplanationList",content:[{headline:":hover",content:"Matches an element if mouse is placed over it"},{headline:":active",content:"Element that is being activated. On button example, active state starts when\n                            mouse button is being pressed, and finishes with mouse button up. May be used to \n                            indicate element is being pressed. Significant with mobile devices, where user does not \n                            hover over an element very often"},{headline:":focus",content:"When element was chosen with a mouse or a tab key"},{headline:":focus-visible",content:"\n                            User agent dependent. Different behaviour when an element is selected with mouse click, and\n                            different when tab key used. Visible on for example a button element."},{headline:":focus-within",content:"Should be used on parent element. If descendant gains focus, this selector matches.\n                            Can be used for example on a <code>form</code> element. When descendants gain focus, form will\n                            change styling."},{headline:":selection",content:"Matches a portion of a document selected by user, for example with press left mouse button and \n                            drag it over selected element."}]},{elementType:"Headline-3",content:"Location pseudo-classes"},{elementType:"ExplanationList",content:[{headline:":link",content:"A not visited link,"},{headline:":any-link",content:"Both: visited and not visited links,"},{headline:":target",content:'\n                            Element that is the target of the link. Useful, when link is on the same page:\n                            <span id="targetControl">\n                            <a href="#targetExample">Try it out</a>\n                            <a href="#" class="clear">Clear</a>\n                            </span>\n                            <style>\n                                #targetParent li:target{background-color: yellow;}\n                                #targetControl a{\n                                    padding:2px;border-radius: 3px;\n                                    display: inline-block;\n                                    background-color: green;\n                                    color: white;\n                                    text-decoration: none;\n                                }\n                                #targetControl a:hover{\n                                    background-color: rgb(155,220,150);\n                                }\n                                #targetControl .clear:hover{background-color:rgb(255,150,150);}\n                                #targetControl a.clear{background-color:red;}\n                            </style>\n                            <ul id="targetParent">\n                                <li>This is not the element</li>\n                                <li id ="targetExample">This is the element</li>\n                                <li>This is not the element</li>\n                            </ul>\n                            '}]},{elementType:"Headline-3",content:"Other"},{elementType:"ExplanationList",content:[{headline:":not(selector)",content:"Selects all elements that do <strong>not</strong> match the given selector.\n                            "},{headline:":host",content:"\n                            In shadow DOM matches the host of a <code>shadow-root</code>. Usable also in Angular for \n                            targeting a component from inner css file.\n                            "},{headline:":host-context(selector)",content:"\n                            In shadow DOM matches the host of a <code>shadow-root</code> only if any ancessor of the host\n                            matches the given selector. May be used to implement a dark theme,\n                            "},{headline:":is(selector, selector)",content:'Takes a selector list, and matches each element in this list. This element counts to\n                            <a href="./#/theory/specifity">specifity</a> as a class, so multiplication 10:\n                            <ul>\n                                <li><code>:is(.danger, .warning, .info) p</code> will match all of <code>.danger p</code>,\n                                <code>.warning p</code>, <code>.info p</code>.</li>\n                            </ul>\n                            '},{headline:":where(selector, selector)",content:"Exectly the same as an <code>is</code> pseudo-class, except for the fact, that\n                            it <strong>counts to specifity as 0</strong>:\n                            <ul>\n                                <li><code>:is(.danger, .warning, .info) p</code> will match all of <code>.danger p</code>,\n                                <code>.warning p</code>, <code>.info p</code>,</li>\n                            </ul>\n                            "},{headline:":first-letter",content:"Selects the first letter of each element,\n                            "},{headline:":first-line",content:"Selects the first line.\n                            "},{headline:":defined",content:"For the CWC: custom web components. If the component is defined with the \n                            <code>window.customElements.define()</code>, this will be selected. In case of \n                            <code>:not(:defined)</code> all not registered elements may be made to be transparent,\n                            "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"},{elementType:"Link",content:"W3schools tutorial",href:"https://www.w3schools.com/css/css_pseudo_classes.asp"}]}]}]};var m={summary:"pseudo elements",title:"pseudo elements",cathegory:"css",searchKeywords:"selector before after",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Pseudo elements"}]},{elementType:"Article",content:[{elementType:"Paragraph",content:"\n                        There are two elements in web design, that are not a part of the HTML. They are \n                        added to DOM only with CSS, and their behaviour is also defined with css. \n                        This elements are:\n                    "},{elementType:"UnsignedList",content:["\n                    <code>::before</code>, that is added as a sort of <i>first child</i> of the element that before is applied to,\n                    hovever this is not exectly a child element, as it is neither listed with <code>element.childNodes</code>,\n                    nor styled with pseudo-class elements\n                    ","<code>::after</code> is added as a sort of <i>last child</i> of element that it is being applied to."]},{elementType:"Paragraph",content:"\n                        Pseudo elements cannot be accessed with JS in other way than with <code>\n                        window.getComputedStyle(document.querySelector(someElement), ':before')</code>.\n                        It may be styled with JS by modifying <code>&lt;style></code> rules.\n                    "},{elementType:"NoteWarning",content:"\n                    Pseudo element will not show up, if it has no <strong>content</strong> property set. It is \n                    important to set it at least to an empty string.\n                    "},{elementType:"Headline-2",content:"Usages of pseudo elements"},{elementType:"UnsignedList",content:['\n                        A tooltip:\n\n                        </div>\n                        <style>\n                            #tooltipTarget{\n                                margin:30px;\n                                position:relative;width:100px;padding:5px;text-align:center;\n                                line-height:1.5rem;background-color:green;border-radius:4px;\n                                color:white;cursor:default;\n                            }\n                            #tooltipTarget:before{\n                                content:attr(data-tooltip);position:absolute;top:0;left:0;transform:translateY(-100%);\n                                background-color:yellow;color:black;\n                                visibility:hidden;\n                            }\n                            #tooltipTarget:hover:before{\n                                visibility:visible;\n                            }\n\n                        </style>\n                            <div id="tooltipExample">\n                            <div id="tooltipTarget" data-tooltip="Some advice">Hover me</div>\n                        </div>\n                        <div class="alert-dark alert">\n<pre>\ndiv:before{\n    position:absolute;\n    top:0;left:0;\n    transform:translateY(-100%);\n    content:attr(data-tooltip);\n    backgrond-color:yellow;\n    color:balck;\n    visibility:hidden;\n}\ndiv:hover:before{visiblity:visible;}\n</pre>\n \n                        ',"\n                        Put fancy shadow:\n\n                        <style>\n#fancyShadowExample{\n    display:flex;align-items:center;justify-items:center;justify-content:center;\n    text-align:center;\n    position:relative;\n    width: 250px;\n    height:150px;\n    background-color:#ebebeb;\n    margin: 30px;\n}\n#fancyShadowExample>span{\n    display:inline-block;\n}\n#fancyShadowExample:before,#fancyShadowExample:after{\n    position:absolute;\n    content:'';\n    width: 75px;\n    height:20px;\n    -webkit-box-shadow: 0px 25px 36px 15px rgba(0,0,0,0.36); \n    box-shadow: 0px 10px 36px 15px rgba(0,0,0,0.36);\n    bottom:10px;\n    left: 25px;\n    transform:rotate(-9deg);\n    z-index:-1;\n}\n#fancyShadowExample:after{\n    left: unset;\n    right: 25px;\n    transform:rotate(9deg);\n}\n</style>\n                        \n                        <div id=\"fancyShadowExample\">\n                            <span>Example of fancy shadow</span>\n                        </div>\n                        <div class=\"alert-dark alert\">\n<pre>\ndiv{\n    position:relative;\n    width: 150px;\n    height:250px;\n    background-color:#ebebeb;\n}\ndiv:before,div:after{\n    position:absolute;\n    content:'';\n    width: 75px;\n    height:20px;\n    -webkit-box-shadow: 0px 25px 36px 15px rgba(0,0,0,0.36); \n    box-shadow: 0px 10px 36px 15px rgba(0,0,0,0.36);\n    bottom:10px;\n    left: 25px;\n    transform:rotate(-9deg;);\n}\ndiv:after{\n    left: unset;\n    right: 25px;\n    transform:rotate(9deg;);\n}\ndiv:hover:before{visiblity:visible;}\n</pre>\n</div>\n\n                        \n                        ",'\n                        An information box:\n\n                        <style>\n                        #information-ex{\n                            margin:30px;\n                            width: 250px;\n                            position:relative;\n                            background-color: rgb(200,200,255);\n                            border-left:medium blue solid;\n                            border-radius: 5px;\n                            padding:10px;\n                            padding-left: 50px;\n                        }\n                        #information-ex:before{\n                            position:absolute;\n                            width: 30px;\n                            height:30px;\n                            content:\'!\';\n                            line-height:30px;\n                            text-align:center;\n                            background-color:blue;\n                            color:white;\n                            top:10px;\n                            left:10px;\n                            z-index:2;\n                            border-radius:50%;\n                            \n                        }\n                    </style>\n                    <div id="information-ex">\n                        <span>This box uses before element to display "!"</span>\n                    </div>\n                        <div class="alert-dark alert">\n<pre>\n\n&lt;style>\ndiv{\n    width: 250px;\n    position:relative;\n    background-color: rgb(200,200,255);\n    border-left:medium blue solid;\n    border-radius: 5px;\n    padding:10px;\n    padding-left: 50px;\n}\ndiv:before{\n    position:absolute;\n    width: 30px;\n    height:30px;\n    content:\'!\';\n    line-height:30px;\n    text-align:center;\n    background-color:blue;\n    color:white;\n    top:10px;\n    left:10px;\n    z-index:2;\n    border-radius:50%;\n}\n&lt;/style>\n&lt;div>Info box&lt;/div>\n</pre>                        \n                        </div>\n\n                        ','Pseudo elements may be used to cerate different shapes with only CSS. Here is an example:\n\n                        <style>\n                        #heart{\n                            margin: 30px;\n                            position:relative;\n                            width: 50px;\n                            height: 50px;\n                            background-color:red;\n                            transform:rotate(45deg);\n                        }\n                        #heart:before,#heart:after{\n                            width:50px;\n                            height:50px;\n                            background-color:red;\n                            position:absolute;\n                            border-radius:50%;\n                            content:\'\';\n                        }\n                        #heart:before{\n                            left:-50%;\n                        }\n                        #heart:after{\n                            top:-50%;\n                        }\n\n                    </style>\n                    <div id="heart"></div>\n                        <div class="alert-dark alert">\n<pre>\n&lt;style>\n#heart{\n    position:relative;\n    width: 50px;\n    height: 50px;\n    background-color:red;\n    transform:rotate(45deg);\n}\n#heart:before,#heart:after{\n    width:50px;\n    height:50px;\n    background-color:red;\n    position:absolute;\n    border-radius:50%;\n    content:\'\';\n}\n#heart:before{\n    left:-50%;\n}\n#heart:after{\n    top:-50%;\n}\n\n&lt;/style>\n&lt;div id="heart">&lt;/div>\n</pre>                        \n                        </div>\n\n                        ','Or a speach bubble:\n\n                        </div>\n                        <style>\n                        #speachBubbleEx{\n                            margin: 30px;\n                            width: 150px;\n                            height: 80px;\n                            display:flex;\n                            align-items: center;\n                            justify-content: center;\n                            padding:10px;\n                            background-color: #ededed;\n                            border-radius:10px;\n                            position:relative;\n                        }\n                        #speachBubbleEx:before{\n                            position:absolute;\n                            content:\'\';\n                            width: 0;\n                            height: 0;\n                            border-right: 30px solid #ededed;\n                            border-top: 15px solid transparent;\n                            border-bottom: 15px solid transparent;\n                            top: 10px;\n                            left: -30px;\n                        }\n                        </style>\n                        <div id="speachBubbleEx"> I say...</div>\n                        <div class="alert-dark alert">\n<pre>\n&lt;style>\n#speachBubbleEx{\n    width: 150px;\n    height: 80px;\n    display:flex;\n    align-items: center;\n    justify-content: center;\n    padding:10px;\n    background-color: #ededed;\n    border-radius:10px;\n    position:relative;\n}\n#speachBubbleEx:before{\n    position:absolute;\n    content:\'\';\n    width: 0;\n    height: 0;\n    border-right: 30px solid #ededed;\n    border-top: 15px solid transparent;\n    border-bottom: 15px solid transparent;\n    top: 10px;\n    left: -30px;\n}\n&lt;/style>\n&lt;div id="speachBubbleEx"> I say...&lt;/div>\n</pre>\n\n\n                        ',"Pseudo elements with keyframes animation may be used for a winding effect, where \n                        and element is constatnly winded in one direction (please see my notePad linker for example)","Pseudo elements may be used for aligning purposes"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"cssportal",href:"https://www.cssportal.com/css3-shapes/",description:"More only css shapes examples"}]}]};var h={summary:"Frontend Web Performance",title:"Frontend Web Performance",searchKeywords:"\n\n    ",cathegory:"css",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Frontend Web Performance"},{elementType:"Paragraph",content:"\n                    The browser has to render the displayed image with a quite fast ratio, of about 60fps. If the increased \n                    FPS is set, then the browser has to render the display with the 120 fps. This gives about 16ms up to 8ms\n                    for the single frame displayed on the screen to render. Then there is an overhead, that is 4ms, leaving\n                    the browser time to react of about 4ms up to 8ms. \n                    "},{elementType:"Paragraph",content:"\n                    Thankfully, not every component on the web page is rendered in the same way. There are layers, and \n                    some css properties cause only a part of the picture to render.\n                    "},{elementType:"Headline-2",content:"Pixel pipeline"},{elementType:"Paragraph",content:"\n                    <code>JS &rarr;  Style &rarr; Layout &rarr; Paint &rarr; Composite\n                    "},{elementType:"Paragraph",content:"\n                    The most to the right, the smaller the effort to repaint the view.\n                    "},{elementType:"Paragraph",content:"\n                    Taking from the left: if <code>JS</code> changes the page, it will be most expensive. \n                    If a <code>style</code> is set, then this is less expensive, but still not cheep. \n                    If a layout property (like <code>width</code>, <code>height</code>,\n                    <code>left</code>, <code>top</code>) are set, this is still quite expensive. \n                    Finaly there is <code>paint</code>, and the composite, that is the cheepest. \n                    There are also layers, that may be excluded from the rest of the document, just \n                    for the purpose to render some things faster.\n                    "},{elementType:"UnsignedList",content:["<code>JS</code>: some JS or CSS animations cause the whole view to rendered and changed,","<code>Style</code>: matching the applied css selectors and applying rules to the DOM,","<code>layout</code>: calculating the new geometry of DOM elements. The bigger the DOM the worst.\n                            Properties: width, height, top, left, right, bottom,","<code>paint</code>: draws or fills pixels in different areas of the page. Redraws shadows, background images.\n                            Properties: background-color, color, cause pixels te rerender, draw or fills in \n                        this new pixels for different areas of the page,","<code>composite</code> Combine individually painted layers together, ready to display. \n                         Properties: transform, opacity, filter. The cheepest one."]},{elementType:"Paragraph",content:"\n                    The most to the right, the smaller the effort to repaint the view.\n                    "},{elementType:"Headline-2",content:"Compositor layers"},{elementType:"Paragraph",content:"\n                    Compositor layers, are DOM elements that have been promoted by the browser to have their individual\n                    painting layers (see the medium.com in the reference section). The element on the layer may be treated\n                    independently, so the change to it does not caues the whole page to change. If only a layer is changed,\n                    then this is cheep renderning, as only one layer plus the composition process are needed.\n                    "},{elementType:"Paragraph",content:"\n                    However this process is not for free:\n                    "},{elementType:"UnsignedList",content:["Promotion of a layer costs,","Demotion of a layer costs,","Keeping layers in the memory increases RAM usage"]},{elementType:"Paragraph",content:"\n                    So there has to be a balance. There is a way to advice the browser to create a new layer, \n                    but this should never be used as a solution. Only should be used to solve already unsolvable problems.\n                    "},{elementType:"SmallHeadline",content:"\n                    <code>will-change</code> property:\n                    "},{elementType:"Paragraph",content:"\n                    This css property tells the browser, that the element will change some attributes like:\n                    "},{elementType:"UnsignedList",content:["auto","scroll-position","contents","transform","opacity","right, left, top,"]},{elementType:"Paragraph",content:"\n                  May also take values clearing its behaviour:\n                    "},{elementType:"UnsignedList",content:["inherit,","initial,","revert,","unset."]},{elementType:"NoteWarning",content:"\n                  <code>will-change</code> should never be used as a solution, as it may cause real problems to \n                  the performance issutes and memory usage. Browser already optimizes performance in a proper way.\n                  The <code>will-change<code> if used should be disactivated as soon as possible after usage.\n                    "},{elementType:"Headline-2",content:"Properties for different rendering stages"},{elementType:"UnsignedList",content:["<code>any other then the <code>opacity</code> or <code>transform</code> causes the paint to be triggered,","<code>composite</code>: opacity and transform,"]},{elementType:"Headline-2",content:"Clues"},{elementType:"UnsignedList",content:["Use <code>requestAnimationFrame(callback)</code> instead of <code>setTimeout</code> for the \n                        animations. The callback takes a timestamp argument telling about current time,","Do not use large complicated css selectors. Using <code>nth-last-child(-n+1)</code>\n                        for example causes a lot of computation,","Avoid selectors like <code>body</code> as in this case the whole page should rerender,","Try to push as much of the long duration work to the Web Workers,","Reduce complexity of the Web Workers. They should not compute for longer than 5ms during \n                        animations,","Avoid complicated nested layouts, as changes will often change the whole document,","Use <code>flexbox</code> over older <code>float</code>, <code>relative</code>, <code>absolute</code>\n                        elements,","Avoid <strong>forced synchronous layout</strong>: forcing layout calculation over the style.","Promote elements that will be animated with <code>will-change</code>","Do not promote elements if not necessry","Use <code>layers</code> and <code>performance</code> in dev-tools to examine performance issues,"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"developers.google.com",href:"https://developers.google.com/web/fundamentals/performance/rendering",description:"Great tutorial"},{elementType:"Link",content:"developer.mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame",description:"Requesting an animation frame"},{elementType:"Link",content:"medium.com",href:"https://medium.com/@matthew.costello/frontend-web-performance-the-essentials-0-61fea500b180",description:"A nice article"}]}]};var u={summary:"flexbox",title:"flexbox",searchKeywords:"\n\n    ",cathegory:"css",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Flexbox"},{elementType:"ListOfContent",content:[{id:"layouts",title:"Layouts in web design"},{id:"flexboxDirections",title:"Flexbox directions"},{id:"flexboxParentProperties",title:"Flexbox parent properties"},{id:"flexboxChildProperties",title:"Flexbox child properties"},{id:"useCases",title:"Use cases"}]},{elementType:"Headline-3",content:'<span id="layouts">Layouts in web design</span>'},{elementType:"UnsignedList",content:["tables: this is a historic approach, when js was still not developed, pages were based on \n                        static html files, there was a table, thats one column was the menu column, and the \n                        second column was the content column. The <code>&lta href... target</code> attribute indicated\n                        the id of the element that content should be displayed in (in this case the second column).\n                        In current day web pages tables should be usd to display data, not for the layouts, as there \n                        are better solutions. Moreover at present mobile devices must be taken into concideration,",'A float solution, based on elements floating to the left or right of other elements.\n                        This approach is not the best anymore due to <abbr title="User Experience">UX</abbr>\n                        issues',"Flexbox: quite up to date solution. based on elements that automatically adjust to the \n                        screen size. This approach is a single dimensional one and should be used in smaler layouts","Grid: a two-dimensional solution for the layouts"]},{elementType:"Headline-3",content:'<span id="flexboxDirections">Flexbox directions</span>'},{elementType:"SmallHeadline",content:"Main-axis"},{elementType:"UnsignedList",content:["If <code>flex-direction: row;</code> then main axis is the row (x) direction and cross \n                         axis is the column (y) direction","If <code>flex-direction: column;</code> then main axis is the column axis (y) and cross\n                        axis is the row (x) direction"]},{elementType:"SmallHeadline",content:"Cross-axis"},{elementType:"UnsignedList",content:["If <code>flex-direction: row;</code> then cross axis is the row (y) direction and main \n                         axis is the row (x) direction","If <code>flex-direction: column;</code> then cross axis is the row axis (x) and main\n                        axis is the column (y) direction"]},{elementType:"Paragraph",content:"\n                        Note that child components placement will change with the change of \n                        the <code>flex-direction</code> property.\n                    "},{elementType:"UnsignedList",content:["<code>flex-grow</code>: will grow along main axis,","<code>flex-shrink</code>: will shring along main axis","<code>flex-basis</code>: will work along the main axis"]},{elementType:"Paragraph",content:"\n                        are affected by the direction change.\n                    "},{elementType:"Headline-3",content:'<span id="flexboxParentProperties">Flexbox parent properties</span>'},{elementType:"Paragraph",content:"\n                    <code>display: flex</code> is set to the parent of elements that will be displayed in the flex way. \n                    The child elements of the flex container have their size controlled by the flex algorithm by default.\n                    By default they do not wrap, and they do reduce their size to fit into the single line. However, \n                    setting some properties may change the flexbox behaviour:\n                    "},{elementType:"UnsignedList",content:["<code>display: flex</code>: turn on the felxbox algorithm for the container, should be set on a parent element","<code>flex-direction: row/column</code>: change of the main-axis and cross-axis for the algorithm,","<code>flex-wrap: no-wrap/wrap</code>: elements will not wrap by default, will shrink to fit \n                        into a single row/column,","<code>flex-flow: column wrap/row wrap ...</code>: shortcut for the <code>flex-wrap</code>\n                        and <code>flex-direction</code> properties,","<code>justify-content</code>: how elements will be justified in the <strong>main</strong>\n                        direction. Is used both to the elements that are not wrapped and wrapped,","<code>align-items</code>: the position elements will take in the cross direction. Is for \n                        setting the content if it is in a single line, not wrapped,","<code>gap</code>, <code>row-gap</code>, <code>column-gap</code> are for setting gaps between\n                        elements of the flexbox container,"]},{elementType:"Paragraph",content:"\n                    There is a set of properties to be applied to the sigle elements being children of the flexbox container:\n                    "},{elementType:"UnsignedList",content:["<code>order: 3;</code>: items in flex container may be displayed in the different order\n                       then listed. This property indicates, on what position the element should apppear. When an element has this \n                       parameter not set, it behaves like it would be set to 0. So in case all elements are not set, and only one \n                       has this value equal to 1 then this element is placed as the last. This value may be a negative number, to \n                       set elements before all other,","<code>flex-grow: 2</code>; each child of the flexbox container, by default, grows in the same \n                       reate with the screen being resized. This growing ratio may be changed. The <code>flex-grow</code>\n                       property indicates, how many times the growing ratio needs to be multiplicated. This property has effect \n                       along the main axis,","<code>flex-shrink: 2</code>: similar to the <code>flex-growth</code> but for the shrinking\n                       property. This property has effect along the main axis,","<code>flex-basis: auto/200px...</code>: the default size of the element before the remaining\n                       space in the parent container is distributed,","<code>flex</code> is <code>flex-grow</code>, <code>flex-shrink</code>, <code>flex-basis</code>\n                       combined,","<code>align-self</code>: the element may be taken out of the default layout behaviour and set \n                       to the different position. For example all elements are aligned to the <code>flex-start</code>\n                       and one is taken out by the <code>align-self</code> and set to the <code>flex-end</code>. This \n                       element has its effect along the cross axis"]},{elementType:"Headline-3",content:'<span id="flexbox-sandbox">Flexbox sandbox</span>'},{elementType:"Paragraph",content:"Flexbox behaviours may be tested here:"},{elementType:"FlexDemo",content:[]},{elementType:"Headline-3",content:'<span id="useCases">Use cases</span>'},{elementType:"HiddenCode",content:[{info:"<code>no-wrap</code>",code:'\n                            <style>\n                            @media only screen and (max-width: 1000px){\n                                .hide-small-screen{\n                                    display:none;\n                                }\n                            }\n                            @media only screen and (max-width: 500px){\n                                .hide-v-small-screen{\n                                    display:none;\n                                }\n                            }\n                            </style>\n                            <div class="flexbox-ex-row">\n                                <div class="flexbox-ex-item"></div>\n                                <div class="flexbox-ex-item"></div>\n                                <div class="flexbox-ex-item"></div>\n                                <div class="flexbox-ex-item"></div>\n                                <div class="flexbox-ex-item"></div>\n                                <div class="flexbox-ex-item"></div>\n                                <div class="flexbox-ex-item hide-v-small-screen"></div>\n                                <div class="flexbox-ex-item hide-v-small-screen"></div>\n                                <div class="flexbox-ex-item hide-v-small-screen"></div>\n                                <div class="flexbox-ex-item hide-v-small-screen"></div>\n                                <div class="flexbox-ex-item hide-small-screen"></div>\n                                <div class="flexbox-ex-item hide-small-screen"></div>\n                                <div class="flexbox-ex-item hide-small-screen"></div>\n                                <div class="flexbox-ex-item hide-small-screen"></div>\n                                <div class="flexbox-ex-item hide-small-screen"></div>\n                                <div class="flexbox-ex-item hide-small-screen"></div>\n                                <div class="flexbox-ex-item hide-small-screen"></div>\n                            </div>\n                            '},{info:"<code>wrap</code>",code:'\n                            <style>\n                            @media only screen and (max-width: 500px){\n                                .shrink-v-small-screen {\n                                    width: 50px;\n                                }\n                            }\n                            </style>\n                            <div class="flexbox-ex-row flexbox-ex-wrap">\n                                <div class="flexbox-ex-item shrink-v-small-screen"></div>\n                                <div class="flexbox-ex-item shrink-v-small-screen"></div>\n                                <div class="flexbox-ex-item shrink-v-small-screen"></div>\n                                <div class="flexbox-ex-item shrink-v-small-screen"></div>\n                                <div class="flexbox-ex-item shrink-v-small-screen"></div>\n                                <div class="flexbox-ex-item shrink-v-small-screen"></div>\n                                <div class="flexbox-ex-item shrink-v-small-screen"></div>\n                                <div class="flexbox-ex-item shrink-v-small-screen"></div>\n                                <div class="flexbox-ex-item shrink-v-small-screen"></div>\n                                <div class="flexbox-ex-item shrink-v-small-screen"></div>\n                                <div class="flexbox-ex-item shrink-v-small-screen"></div>\n                                <div class="flexbox-ex-item shrink-v-small-screen"></div>\n                                <div class="flexbox-ex-item shrink-v-small-screen"></div>\n                            </div>                          \n                            '},{info:"<code>flexbox with fluid width</code>",code:'\n                            <style>\n                            .flexbox-ex-item-fluid{\n                                flex-grow: 1;\n                                flex-basis: 200px;\n                            }\n                            @media only screen and (max-width: 830px){\n                                .flexbox-ex-item-fluid{\n                                    flex-basis: 75px;\n                                }\n                            }\n                            </style>\n                            <div class="flexbox-ex-row flexbox-ex-wrap">\n                                <div class="flexbox-ex-item flexbox-ex-item-fluid"></div>\n                                <div class="flexbox-ex-item flexbox-ex-item-fluid"></div>\n                                <div class="flexbox-ex-item flexbox-ex-item-fluid"></div>\n                                <div class="flexbox-ex-item flexbox-ex-item-fluid"></div>\n                                <div class="flexbox-ex-item flexbox-ex-item-fluid"></div>\n                                <div class="flexbox-ex-item flexbox-ex-item-fluid"></div>\n                                <div class="flexbox-ex-item flexbox-ex-item-fluid"></div>\n                            </div>\n                            <ul>\n                                <li><code>flex-basis</code> is for setting the initial width of the flex item\n                                element. Without this elements would shrink to fit to a sigle line,</li>\n                                <li><code>flex-growth: 1</code> is for forcing each flex item to shrink or grow\n                                in the same paste. Without this property all items would have a fixed width,</li>\n                                <li><code>flex-wrap</code> on parent container is to alow elements to the next line.\n                                Without this property, elements would stay in the first line shrinking or stretching.\n                                Even if the elements <code>width</code> or <code>flex-basis</code> would be set to \n                                a fixed value, in case of <code>no-wrap</code> items would shrink or grow.</li>\n                            </ul>\n<pre>\n.flex-container{\n    display: flex;\n    flex-wrap: wrap;    \n}\n.flex-item{\n    flex-basis: 200px;\n    flex-growth: 1;\n}\n&lt;div class="flex-container">\n    &lt;div class="flex-item">&lt;/div>\n    &lt;div class="flex-item">&lt;/div>\n    &lt;div class="flex-item">&lt;/div>\n    &lt;div class="flex-item">&lt;/div>\n    &lt;div class="flex-item">&lt;/div>\n    &lt;div class="flex-item">&lt;/div>\n    &lt;div class="flex-item">&lt;/div>\n    &lt;div class="flex-item">&lt;/div>\n&lt;div>\n</pre>  \n                            '},{info:"<code>A <code>justify-items: center</code> problem</code>",code:'\n                            <style>\n                            .flexbox-ex-justify-content{\n                                justify-content: center;\n                                overflow: auto;\n                            }\n                            .flexbox-ex-items-200px{\n                                min-width: 200px;\n                                position:relative;\n                            }\n                            .max-width{\n                                max-width: 500px;\n                            }\n\n                            @media only screen and (max-width: 830px){\n                                .flexbox-ex-item-fluid{\n                                    flex-basis: 75px;\n                                }\n                            }\n                            </style>\n                            <div class="flexbox-ex-row max-width flexbox-ex-justify-content">\n                                <div class="flexbox-ex-item flexbox-ex-items-200px"></div>\n                                <div class="flexbox-ex-item flexbox-ex-items-200px"></div>\n                                <div class="flexbox-ex-item flexbox-ex-items-200px"></div>\n                                <div class="flexbox-ex-item flexbox-ex-items-200px"></div>\n                                <div class="flexbox-ex-item flexbox-ex-items-200px"></div>\n                            </div>\n                         Above example shows, that if align-content is set to <code>center</code>\n                         elements inside the flex-container are fixed width, and the sum of the\n                         flex-container childrens width is greater then the flex-container width, \n                         then some content from the start or end may not be accessable.\n<pre>\n.flex-container{\n    max-width: 500px;\n    display: flex;\n    overflow:auto;\n    justify-content: center;\n    position: relative;\n}\n.flex-item{\n    min-width: 200px;\n    height: 60px;\n    position: relative;\n}\n</pre>  \n                    The inaccessible content of <code>aligned-content: center</code> items in not quite easy to \n                    solve. Most found on stackoverflow (see references) solutions are based on getting rid of \n                    flex-center. There is one solution that uses <code>safe center</code> value, but this \n                    solution is still not implemented in other browsers than firefox.\n\n\n\n\n                    <style>\n                    .flexbox-ex-justify-content-safe{\n                        justify-content: safe center;\n                        overflow: auto;\n                    }\n                    .flexbox-ex-items-200px{\n                        min-width: 200px;\n                        position:relative;\n                    }\n                    .max-width{\n                        max-width: 500px;\n                    }\n                    </style>\n                    <div class="flexbox-ex-row max-width flexbox-ex-justify-content-safe">\n                        <div class="flexbox-ex-item flexbox-ex-items-200px"></div>\n                        <div class="flexbox-ex-item flexbox-ex-items-200px"></div>\n                        <div class="flexbox-ex-item flexbox-ex-items-200px"></div>\n                        <div class="flexbox-ex-item flexbox-ex-items-200px"></div>\n                        <div class="flexbox-ex-item flexbox-ex-items-200px"></div>\n                    </div>\n                    Above example is a <code>safe center</code> fix to the inaccissable content of the aligned center\n                    content. For now it will work only in firefox.\n                            '},{info:"<code>justify-content</code>",code:'\n                            <style>\n                            .fixed-width{\n                                position: relative;\n                                width: 50px;\n                            }\n                            .flex-j-c-start{justify-content: flex-start;}\n                            .flex-j-c-end{justify-content: flex-end;}\n                            .flex-j-c-center{justify-content: center;}\n                            .flex-j-c-between{justify-content: space-between;}\n                            .flex-j-c-around{justify-content: space-around;}\n                            .flex-j-c-evenly{justify-content: space-evenly;}\n                            @media only screen and (max-width: 1000px){\n                                .jc-small {\n                                    width: 50px;\n                                }\n                            }\n                            @media only screen and (max-width: 550px){\n                                .jc-small {\n                                    width: 30px;\n                                    height: 30px;\n                                    font-size: 1rem;\n                                }\n                            }\n                            </style>\n                            <h4><code>justify-content: flex-start;</code></h4>\n                            <div class="flexbox-ex-row flex-j-c-start">\n                                <div class="flexbox-ex-item jc-small"></div>\n                                <div class="flexbox-ex-item jc-small"></div>\n                                <div class="flexbox-ex-item jc-small"></div>\n                            </div>                          \n                            <h4><code>justify-content: flex-end;</code></h4>\n                            <div class="flexbox-ex-row flex-j-c-end">\n                                <div class="flexbox-ex-item jc-small"></div>\n                                <div class="flexbox-ex-item jc-small"></div>\n                                <div class="flexbox-ex-item jc-small"></div>\n                            </div>                          \n                            <h4><code>justify-content: center;</code></h4>\n                            <div class="flexbox-ex-row flex-j-c-center">\n                                <div class="flexbox-ex-item jc-small"></div>\n                                <div class="flexbox-ex-item jc-small"></div>\n                                <div class="flexbox-ex-item jc-small"></div>\n                            </div>                          \n                            <h4><code>justify-content: space-between;</code></h4>\n                            <div class="flexbox-ex-row  flex-j-c-between">\n                                <div class="flexbox-ex-item jc-small"></div>\n                                <div class="flexbox-ex-item jc-small"></div>\n                                <div class="flexbox-ex-item jc-small"></div>\n                            </div>                          \n                            <h4><code>justify-content: space-around;</code></h4>\n                            <div class="flexbox-ex-row flex-j-c-around">\n                                <div class="flexbox-ex-item jc-small"></div>\n                                <div class="flexbox-ex-item jc-small"></div>\n                                <div class="flexbox-ex-item jc-small"></div>\n                            </div>                          \n                            <h4><code>justify-content: space-evenly;</code></h4>\n                            <div class="flexbox-ex-row flex-j-c-evenly">\n                                <div class="flexbox-ex-item jc-small"></div>\n                                <div class="flexbox-ex-item jc-small"></div>\n                                <div class="flexbox-ex-item jc-small"></div>\n                            </div>                          \nThere is a <code>safe</code> and <code>unsafe</code> keyword that works with all <code>justify-content</code>\nvalues. The <code>safe</code> ensures, that the content will be accessable in edge cases (see \njustify-content center problem). However this works only with firefox for now.\n\n                            '},{info:"<code>align-items</code>",code:'\n                            <style>\n                            .big-wrapper{\n                                position: relative;\n                                height: 400px;\n                            }\n                            .flex-a-i-start  {align-items: flex-start;}\n                            .flex-a-i-end    {align-items: flex-end;}\n                            .flex-a-i-center {align-items: center;}\n                            .flex-a-i-stretch{align-items: stretch;}\n                            .flex-a-i-baseline {align-items: baseline;}\n                            .s1{height: 50px;} .s2{height: 150px;} .s3{height: 100px;}\n                            @media only screen and (max-width: 1000px){\n                                .jc-small-a {\n                                    width: 50px;\n                                }\n                            }\n                            @media only screen and (max-width: 550px){\n                                .jc-small-a {\n                                    width: 30px;\n                                    font-size: 1rem;\n                                }\n                                .big-wrapper{\n                                    height: 300px\n                                }\n                            }\n                            </style>\n                            <h4><code>align-items: flex-start;</code></h4>\n                            <div class="flexbox-ex-row big-wrapper flex-a-i-start">\n                                <div class="flexbox-ex-item jc-small-a s1"></div>\n                                <div class="flexbox-ex-item jc-small-a s2"></div>\n                                <div class="flexbox-ex-item jc-small-a s3"></div>\n                            </div>   \n                            <h4><code>align-items: flex-end;</code></h4>\n                            <div class="flexbox-ex-row big-wrapper flex-a-i-end">\n                                <div class="flexbox-ex-item jc-small-a s1"></div>\n                                <div class="flexbox-ex-item jc-small-a s2"></div>\n                                <div class="flexbox-ex-item jc-small-a s3"></div>\n                            </div> \n                            <h4><code>align-items: center;</code></h4>\n                            <div class="flexbox-ex-row big-wrapper flex-a-i-center">\n                                <div class="flexbox-ex-item jc-small-a s1"></div>\n                                <div class="flexbox-ex-item jc-small-a s2"></div>\n                                <div class="flexbox-ex-item jc-small-a s3"></div>\n                            </div>         \n                            <h4><code>align-items: stretch;</code></h4>\n                            <div class="flexbox-ex-row big-wrapper flex-a-i-stretch">\n                                <div class="flexbox-ex-item jc-small-a s1"></div>\n                                <div class="flexbox-ex-item jc-small-a s2"></div>\n                                <div class="flexbox-ex-item jc-small-a s3"></div>\n                            </div>      \n                            <h4><code>align-items: baseline;</code></h4>\n                            <div class="flexbox-ex-row big-wrapper flex-a-i-baseline">\n                                <div class="flexbox-ex-item jc-small-a s1"></div>\n                                <div class="flexbox-ex-item jc-small-a s2"></div>\n                                <div class="flexbox-ex-item jc-small-a s3"></div>\n                            </div>         \n   \n\n                            '},{info:"<code>align-content</code>: <code>align-items</code> is for setting\n                            elements fitting into a single line behaviour, and the <code>align-content</code>\n                            is for setting behaviour specific for content having more than just a single line.\n                            Some behaviours are related to the spaces between lines, and this will have no effect \n                            when there is only a single line, and others behaviours are related alignment between \n                            elements of different heights. This kind of behaviour will be applied to each line of \n                            ...... ???????? ",code:'\n                            <style>\n                            .big-wrapper-ac{\n                                position: relative;\n                                height: 700px;\n                            }\n                            .height-unset{height: unset;}\n                            .flex-a-c-start  {align-content: flex-start;}\n                            .flex-a-c-end    {align-content: flex-end;}\n                            .flex-a-c-center {align-content: center;}\n                            .flex-a-c-stretch{align-content: stretch;}\n                            .flex-a-c-between {align-content: space-between;}\n                            .flex-a-c-around {align-content: space-around;}\n                            .sa1{height: 50px;} .sa2{height: 80px;} .sa3{height: 90px;}.sa4{height: 75px;}\n                            @media only screen and (max-width: 1000px){\n                                .jc-small-a {\n                                    width: 50px;\n                                }\n                            }\n                            @media only screen and (max-width: 550px){\n                                .jc-small-a {\n                                    width: 30px;\n                                    font-size: 1rem;\n                                }\n                                .big-wrapper{\n                                    height: 300px\n                                }\n                            }\n                            </style>\n                            <h4><code>align-content: flex-start;</code></h4>\n                            <div class="flexbox-ex-row big-wrapper-ac flexbox-ex-wrap flex-a-c-start">\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                            </div>   \n                            <h4><code>align-content: flex-end;</code></h4>\n                            <div class="flexbox-ex-row big-wrapper-ac flexbox-ex-wrap flex-a-c-end">\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                            </div> \n                            <h4><code>align-items: center;</code></h4>\n                            <div class="flexbox-ex-row big-wrapper-ac flexbox-ex-wrap flex-a-c-center">\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                            </div>         \n                            <h4><code>align-items: stretch;</code></h4>\n                            <div class="flexbox-ex-row big-wrapper-ac flexbox-ex-wrap flex-a-c-stretch">\n                                <div class="flexbox-ex-item jc-small-a height-unset"></div>\n                                <div class="flexbox-ex-item jc-small-a height-unset"></div>\n                                <div class="flexbox-ex-item jc-small-a height-unset"></div>\n                                <div class="flexbox-ex-item jc-small-a height-unset"></div>\n                                <div class="flexbox-ex-item jc-small-a height-unset"></div>\n                                <div class="flexbox-ex-item jc-small-a height-unset"></div>\n                                <div class="flexbox-ex-item jc-small-a height-unset"></div>\n                                <div class="flexbox-ex-item jc-small-a height-unset"></div>\n                                <div class="flexbox-ex-item jc-small-a height-unset"></div>\n                                <div class="flexbox-ex-item jc-small-a height-unset"></div>\n                                <div class="flexbox-ex-item jc-small-a height-unset"></div>\n                                <div class="flexbox-ex-item jc-small-a height-unset"></div>\n                                <div class="flexbox-ex-item jc-small-a height-unset"></div>\n                                <div class="flexbox-ex-item jc-small-a height-unset"></div>\n                                <div class="flexbox-ex-item jc-small-a height-unset"></div>\n                                <div class="flexbox-ex-item jc-small-a height-unset"></div>\n                            </div>    \n                            <h4><code>align-content: space-between;</code></h4>\n                            <div class="flexbox-ex-row big-wrapper-ac flexbox-ex-wrap flex-a-c-between">\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                            </div>         \n                            <h4><code>align-content: space-around;</code></h4>\n                            <div class="flexbox-ex-row big-wrapper-ac flexbox-ex-wrap flex-a-c-around">\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                                <div class="flexbox-ex-item jc-small-a sa1"></div>\n                                <div class="flexbox-ex-item jc-small-a sa2"></div>\n                                <div class="flexbox-ex-item jc-small-a sa3"></div>\n                                <div class="flexbox-ex-item jc-small-a sa4"></div>\n                            </div>         \n   \n\n                            '}]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"css-tricks",href:"https://css-tricks.com/snippets/css/a-guide-to-flexbox/",description:"Tutorial"}]}]};var b=n(4);var g={elementType:"HiddenDescription",content:{showLegend:!1,legend:[{type:"Example",styleClasses:"btn btn-secondary text-white m-4 mb-1 mt-1",description:"Example of grid usage"}],items:[{type:"Example",title:"Constant widths",description:{elementType:"Section",content:[{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-columns: 80px 80px 80px;\n}\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:7,parentStyle:{gridTemplateColumns:"80px 80px 80px"},childStyle:{width:"60px"}}]}},{type:"Example",title:"Constant widths with column-gap & row-gap",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                    There is a <code>gap</code> property combining both: the <code>column-gap</code>\n                                    and the <code>row-gap</code> properties.\n                                    "},{elementType:"NoteWarning",content:"\n                                    In case the parent element is smaller then the content, the content will overflow.\n                                    "},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-columns: 80px 80px 80px;\n    column-gap: 40px;\n    row-gap: 60px;\n}\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:7,parentStyle:{gridTemplateColumns:"80px 80px 80px",columnGap:"40px",rowGap:"60px"},childStyle:{}}]}},{type:"Example",title:"Auto width",description:{elementType:"Section",content:[{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-columns: auto auto auto auto\n}\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:13,parentStyle:{gridTemplateColumns:"auto auto auto auto"},childStyle:{}}]}},{type:"Example",title:"Fractions",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                    Once the only chance to set a column as a part of the parent widths, was a \n                                    <code>%</code> unit. Back then it was difficult to handle situations with \n                                    gaps, a constant width column and the rest columns proportional to the parents \n                                    width (eg. <code>grid-template-column: 50px 20% 30% 50%; gap: 10px;</code>.\n                                    In this example content would overflow the parent element due to the fact, that\n                                percentages are counted from the parent total width, not the width that is left after\n                                elements with concrete width are placed and gaps distributed.)\n                                    "},{elementType:"Paragraph",content:"\n                                    Finally a fraction <code>fr</code> unit come with salvation. Fractions are \n                                    distributed after all concrete-width elements are placed, and after all gaps \n                                    are distributed, so above example could look like: \n                                    <code>grid-template-column: 50px 2fr 3fr 5fr; gap: 10px;</code>.\n                                    "},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-columns: 50px, 1fr, 2fr, 3fr;\n}\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:17,parentStyle:{gridTemplateColumns:"50px 1fr 2fr 3fr"},childStyle:{}}]}},{type:"Example",title:"minmax",maxHeight:"120rem",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                    <code>minmax(a, b)</code> creates a range of sizes, not smaller then <code>a</code>,\n                                    and not greater then <code>b</code>. For useage with <code>grid</code>. Will\n                                    adjust automatically, in case of content greater then the parent container, \n                                    content will overflow. \n                                    "},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-columns: minmax(120px, 200px) minmax(120px, 200px) minmax(120px, 200px);\n}\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:17,parentStyle:{gridTemplateColumns:"minmax(120px, 200px) minmax(120px, 200px) minmax(120px, 200px"},childStyle:{}},{elementType:"SmallHeadline",content:"Fractions"},{elementType:"Code",content:"\n                                    <code>fr</code> is a fraction unit, so the parent is divided to the number of \n                                    elements equal to the number of fractions, and columns will resize keeping the \n                                    fraction order defined in the template. In below case the minimum size of \n                                    the column will be 100px, and there is no maximum size. Important is to keep \n                                    the defined division.\n                                    "},{elementType:"NoteWarning",content:"\n                                    This example shows, that the fraction may be a <i>fraction</i>: <code>1.85fr</code>\n                                    works fine\n                                    "},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-columns: minmax(100px, 1fr) minmax(100px, 1.5fr) minmax(100px, 2fr);\n}\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:17,parentStyle:{gridTemplateColumns:"minmax(100px, 1fr) minmax(100px, 1.5fr) minmax(100px, 1.85fr)"},childStyle:{}}]}},{type:"Example",title:"repeat",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                    <code>repeat(nr, pattern)</code> is a css function to be used with the \n                                    grid layout, that repeats the <code>pattern</code> a <code>nr</code> times\n                                    so if there is the same column grid-track to be repeted, it does not have to be \n                                    repeted in code.\n                                    "},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-columns: repeat(8, 50px);\n}\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:17,parentStyle:{gridTemplateColumns:"repeat(8, 50px)"},childStyle:{}}]}},{type:"Example",title:"%",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                    Percentage of the parent <b>total</b> width, so gaps and concrete-width elements \n                                    are not substracted from the grid parent widht before dividing the parent area.\n                                    "},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-columns: 10% 20% 30% 40%;\n}\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:17,parentStyle:{gridTemplateColumns:"10% 20% 30% 40%"},childStyle:{}}]}},{type:"Example",title:"grid-auto-flow",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                    Direction in which grid children will be placed. <b>Default is row</b>.\n                                    By default elements are placed in rows, untill no slots are available. Then\n                                    next row is taken. If there is no row template available, there will be \n                                    new columns added.\n                                    "},{elementType:"Paragraph",content:"\n                                    Normally after changing <code>grid-auto-flow</code> to the <code>column</code>\n                                    value, if there is no <code>grid-template-row</code> defined, the elements \n                                    would stick to a single row overflowing the parent element. In below case \n                                    elements 0 and 1 start in line 0 and finish in the 4-th line, so this setting \n                                    determines elements being moved to next lines in case of the <code>column</code>\n                                    value.\n                                    "},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-columns: 10% 20% 30% 40%;\n    grid-auto-flow: row;\n}\n.grid-child:nth-child(1), .grid-child:nth-child(2){\n    grid-column-start: 1;\n    grid-column-end: 4;\n}\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:8,parentStyle:{gridTemplateColumns:"repeat(5, 1fr)",gridAutoFlow:"column"},childStyle:{},childByIndexStyle:{0:{gridColumnStart:1,gridColumnEnd:4},1:{gridColumnStart:1,gridColumnEnd:4}}}]}},{type:"Example",title:"column-start, column-end (child property)",maxHeight:"200rem",description:{elementType:"Section",content:[{elementType:"UnsignedList",content:["<code>grid-column-start</code> the grid-<b>line</b> where the child will start","<code>column-end</code>: the grid-<b>line</b> where the element will end,","If <code>grid-column-start</code> and <code>grid-column-end</code> indicate \n                                    more then just a single column, the element will expand,","The way the elements that are not placed with the <code>grid-column-start</code>\n                                    and <code>grid-column-end</code> properties are placed, depends on the <code>\n                                    grid-auto-flow</code>,","In case <code>grid-auto-flow</code> is <code>row</code> elements adjacend to the \n                                    elements placed with <code>grid-column-start</code> and <code>grid-column-end</code>\n                                    properties, are not take out of the flow, and do not fill gaps. They are placed \n                                    after the elements influenced by the <code>grid-column-start</code>/<code>end</code>\n                                    properties,","In case of <code>grid-auto-flow</code> equal to <code>column</code> or having a \n                                    <code>dense</code> value siblings of the elements affected with <code>grid-column-start</code>\n                                    and <code>grid-column-end</code> properties will be placed in gaps,","Lines are numerated from 1, not from 0."]},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-columns: 10% auto 1fr 40%;\n}\n.grid-child:nth-child(2){grid-column-start: 1;};\n.grid-child:nth-child(8){grid-column-start: 1; grid-column-end: 3};\n.grid-child:nth-child(14){grid-column-end: 5};\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:17,parentHeight:500,parentStyle:{gridTemplateColumns:"10% auto 1fr 40%"},childStyle:{},childByIndexStyle:{2:{gridColumnStart:1},8:{gridColumnStart:1,gridColumnEnd:4},14:{gridColumnEnd:5}}},{elementType:"Separate",content:"A negative number"},{elementType:"Paragraph",content:"\n                                    Grid start may be a negative number, then it starts from the \n                                    <code>nrOfChildren.lenght - gridColumnStart</code>\n                                    "},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-columns: repeat(auto, 4);\n}\n.grid-child:nth-child(2){grid-column-start: -1;};\n\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:7,parentStyle:{gridTemplateColumns:"10% auto 1fr 40%"},childStyle:{},childByIndexStyle:{0:{gridColumnStart:-1}}},{elementType:"Separate",content:"The same start and end position"},{elementType:"Paragraph",content:"\n                                    In below case all elements start in first column-line and the first row-line. So they overlap.\n                                    One is on the top of another.\n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:17,maxHeight:240,parentStyle:{gridTemplateColumns:"[linename1] 100px [linename2 linename3] 150px [linename4] 170px",gridTemplateRows:"[ylinename1] 50px 60px 60px"},childStyle:{gridColumnStart:"linename1",gridRowStart:"ylinename1"}}]}},{type:"Example",title:"names",maxHeight:"240rem",description:{elementType:"Section",content:[{elementType:"UnsignedList",content:["Each grid <b>line</b> may be given a custom name, or even a few names.","Grid-lines, not grid-trackes are named.","Lines may be referred in <code>grid-column-start</code> and <code>grid-column-end</code>\n                                    with the name instead of the number:"]},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    gird-template-columns: [linename1] 100px [linename2 linename3] 150px, [linename4] 170px;\n}\n.grid-child{\n    grid-column-start:nth-child(1):{grid-column-start:linename1; grid-column-end:linename5;}\n    grid-column-start:nth-child(2):{grid-column-start:linename1; grid-column-end:linename3;}\n    grid-column-start:nth-child(3):{grid-column-start:linename1; grid-column-end:linename4;}\n}\n</pre>                                    \n                                    "},{elementType:"UnsignedList",content:["<code>linename3</code> is the same as <code>linename4</code>, so\n                                         both elements end in the same place,","Lines may have more than one names,","Names are put in the square brackets,"]},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:7,parentStyle:{gridTemplateColumns:"[linename1] 100px [linename2] 150px [linename3 linename4] 170px [linename5]"},childByIndexStyle:{0:{gridColumnStart:"linename1",gridColumnEnd:"linename5"},1:{gridColumnStart:"linename1",gridColumnEnd:"linename3"},2:{gridColumnStart:"linename1",gridColumnEnd:"linename4"}},childStyle:{}}]}},{type:"Example",title:"grid-column",maxHeight:"60rem",description:{elementType:"Section",content:[{elementType:"UnsignedList",content:[]},{elementType:"Paragraph",content:"\n                                    An abbreviation for \n                                    <code>grid-column-start</code> / <code>grid-column-end</code>\n                                    "},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    gird-template-columns: repeat(5, 1fr);\n}\n.grid-child:nth-child(1){\n    grid-column: 2 / 5;\n}\n.grid-child:nth-child(1){\n    grid-column: 1 / 3;\n}\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:7,parentStyle:{gridTemplateColumns:"repeat(5, 1fr)"},childByIndexStyle:{0:{gridColumn:"2 / 5"},4:{gridColumn:"1 / 3"}},childStyle:{}}]}}]}};var f={elementType:"HiddenDescription",content:{showLegend:!1,legend:[{type:"Example",styleClasses:"btn btn-secondary text-white m-4 mb-1 mt-1 hidden",description:"Example of grid usage"}],items:[{type:"Example",title:"grid-template-rows: three rows defined",maxHeight:"220rem",description:{elementType:"Section",content:[{elementType:"UnsignedList",content:["In case no template for columns is defined, <b>all elements will be placed in the \n                                    first column</b>,","\n                                        Areas having their height set to 80px are:\n                                        <ul>\n                                            <li>Between row line 1 and 2</li>\n                                            <li>Between row line 2 and 3</li>\n                                            <li>Between row line 3 and 4</li>\n                                        </ul>\n                                        All above rows have their height set to 80px,\n                                    ","All not defined rows will have default behaviour, and will grow proportionaly to the \n                                    space left after placing the elements with defined row heights,","By default if elements don't fit into the parent, the <code>overflow</code> mechanism\n                                    is applied."]},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-rows: 80px 80px 80px;\n}\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,parentHeight:500,nrOfChildren:7,parentStyle:{gridTemplateRows:"80px 80px 80px"},childStyle:{width:"60px"}}]}},{type:"Example",title:"Auto height",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                    The hight of the grid-child element is determined by the inner text node (2rem),\n                                    and the padding property.\n                                    "},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-rows: auto auto auto auto\n}\n.grid-child{\n    padding:10px;\n}\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:4,parentStyle:{gridTemplateRows:"auto auto auto auto"},childStyle:{}}]}},{type:"Example",title:"Fractions",maxHeight:"120rem",description:{elementType:"Section",content:[{elementType:"UnsignedList",content:["Takes the <b>remaining</b> space, after substraction of all gaps and already \n                                    fixed row sizes, and divides this space among units with <code>fr</code> unit,","This is more comfortable to use then the <code>%</code> unit, as on does not \n                                    have to worry about the (for exapmle) gaps.",'<a target="_blank" href="https://css-tricks.com/introduction-fr-css-unit/">\n                                    Here</a> one may read about the example with a full screen width element \n                                    divided to four 25% elements, and a 10px gap, in this case there is an \n                                    overflow problem, so the gap should be substracted manualy,\n                                    ',"Note, that in case of more elements, and no space left for division, all\n                                    elements will stay the same size, so this property may be compared with the \n                                    <code>flex-growth</code>","<code>fr</code> may be fractions themselves, so <code>1.85fr</code> is a correct \n                                    value and will work."]},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-rows: 50px, 1fr, 2fr, 3fr;\n    gap: 10px;\n}\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:4,parentStyle:{gridTemplateRows:"50px 1fr 2fr 3fr",gap:"10px",padding:"5px"},childStyle:{}},{elementType:"Separate",content:"The same example with % instead of <code>fr</code>"},{elementType:"Paragraph",content:"\n                                    Here the 50px first elements width, padding and 10px gap should be taken into account\n                                    for the same effect that with fractions. This is not easy with css, and desires not \n                                    readable calculations. If those calculations are not considered, we will have a below \n                                    effect, where items overflow the parent,\n                                    "},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-rows: 50px 16.67% 33.33% 50%;\n    gap: 10px;\n}\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:4,parentStyle:{gridTemplateRows:" 50px 16.67% 33.33% 50%",gap:"10px",padding:"5px"},childStyle:{}}]}},{type:"Example",title:"minmax",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                    <code>minmax(a, b)</code> works exect the same way as in the <code>grid-tempate-column</code>\n                                    case: so creates a range, where the minimum element size is a, and maximum is b.\n                                    Works with grids. Please refer to the <code>grid-template-column</code> section for more\n                                    "}]}},{type:"Example",title:"repeat",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                    <code>repeat(nr, pattern)</code> works the exect same way as in the \n                                    <code>grid-template-column</code> example, so please refer to this section.\n                                    It takes the <code>pattern</code> and repeteats it <code>nr</code> of times.\n                                    "}]}},{type:"Example",title:"%",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                    Percentage of the parent height. Does not take the paddings, \n                                    gaps and elements having concrete height values (like 50px), \n                                    so <code>fr</code> units should be considerated.\n                                    <code>%<code> made more sense in times, when <code>fr</code> did not have \n                                    a wide support in most browsers.\n                                    "},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-rows: 10% 20% 30% 40%;\n}\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:17,parentStyle:{gridTemplateRows:"10% 20% 30% 40%"},childStyle:{}}]}},{type:"Example",title:"grid-row",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                    An abbreviation for <code>grid-row-start</code> / <code>grid-row-end</code>\n                                    properties.\n                                    "},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-rows: repeat(5, 1fr);\n}\n.grid-child:nth-child(1){\n    grid-row: 2 / 5;\n}\n.grid-child:nth-child(4){\n    grid-row: 1 / 3;\n}\n</pre>                                    \n                                    "},{elementType:"GridPresent",parentWidth:void 0,nrOfChildren:8,parentStyle:{gridTemplateRows:"repeat(5, 1fr)"},childStyle:{},childByIndexStyle:{0:{gridRow:"2 / 5"},4:{gridRow:"1 / 3"}}}]}}]}};var y,v,w,x=n(0),j={elementType:"HiddenDescription",content:{showLegend:!1,legend:[{type:"Example",styleClasses:"btn btn-secondary text-white m-4 mb-1 mt-1 hidden",description:"Example of grid usage"}],items:[{type:"Example",title:"Layout example",maxHeight:"220rem",description:{elementType:"Section",content:[{elementType:"UnsignedList",content:[]},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    display: grid;\n    grid-template-rows: \n        [navStart] 50px \n        [navEnd contentStart] auto \n        [contentEnd footerStart] 100px \n        [footerEnd],\n    grid-template-columns: \n        [leftStart] 1fr \n        [leftEnd contentStart] 5fr \n        [contentEnd rightStart] 1fr \n        [rightEnd]\n}\n.grid-child:nth-child(1){\n    grid-row-start: 'navStart';\n    grid-row-end: 'navEnd'; \n    grid-column-start: 'leftStart';\n    grid-column-end:'rightEnd';\n}\n.grid-child:nth-child(2){\n    grid-row-start: 'contentStart';\n    grid-row-end: 'contentEnd'; \n    grid-column-start: 'leftStart';\n    grid-column-end: 'leftEnd'\n}\n.grid-child:nth-child(3){\n    grid-row-start: 'contentStart';\n    grid-row-end: 'contentEnd';\n    grid-column-start: 'contentStart';\n    grid-column-end: 'contentEnd'\n}\n.grid-child:nth-child(4){\n    grid-row-start: 'contentStart';\n    grid-row-end: 'contentEnd';\n    grid-column-start: 'rightStart';\n    grid-column-end: 'rightEnd'\n}\n.grid-child:nth-child(5){\n    grid-row-start: 'footerStart';\n    grid-row-end: 'footerEnd';\n    grid-column-start: 'leftStart';\n    grid-column-end:'rightEnd'\n}\n\n</pre>                                    \n                                "},{elementType:"GridPresent",parentWidth:void 0,parentHeight:700,nrOfChildren:5,parentStyle:{gridTemplateRows:"[navStart] 50px [navEnd contentStart] auto \n                                        [contentEnd footerStart] 100px [footerEnd]",gridTemplateColumns:"[leftStart] 1fr [leftEnd contentStart] 5fr \n                                        [contentEnd rightStart] 1fr [rightEnd]"},childStyle:{},childByIndexStyle:{0:{gridRowStart:"navStart",gridRowEnd:"navEnd",gridColumnStart:"leftStart",gridColumnEnd:"rightEnd"},1:{gridRowStart:"contentStart",gridRowEnd:"contentEnd",gridColumnStart:"leftStart",gridColumnEnd:"leftEnd"},2:{gridRowStart:"contentStart",gridRowEnd:"contentEnd",gridColumnStart:"contentStart",gridColumnEnd:"contentEnd"},3:{gridRowStart:"contentStart",gridRowEnd:"contentEnd",gridColumnStart:"rightStart",gridColumnEnd:"rightEnd"},4:{gridRowStart:"footerStart",gridRowEnd:"footerEnd",gridColumnStart:"leftStart",gridColumnEnd:"rightEnd"}}},{elementType:"Paragraph",content:"\n                                This is not the case for <code>@media</code> and making this layout \n                                responisive. When resizing, the layout seems to work, however \n                                the structure is quite complicated and could be more readable.\n                                And here <code>grid-area</code>s come to the rescue.\n                                "}]}},{type:"Example",title:"Center: target",maxHeight:"220rem",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                Yes, this is done with grid.\n                                "},{elementType:"Code",content:"\n<pre>\n.grid-parent{\n    border-radius:'50%',\n    grid-template-columns: 'repeat(20, 1fr)',\n    grid-template-rows: 'repeat(20, 1fr)'\n}\n.grid-child{\n    borderRadius: 50%,\n    fontSize: 15px,\n    lineHeight: unset,\n    verticalAlign: top\n}\n.grid-child:nth-child(odd){\n    background-color: 'black';\n}\n.grid-child:nth-child(even){\n    background-color: 'white'; \n    color:'black'\n}\n.grid-child:nth-child(0) {\n    grid-column-start: 1;\n    grid-column-end: 21;\n    grid-row-start:  1;\n    grid-row-end: 21;\n},\n.grid-child:nth-child(1) {\n    grid-column-start: 2;\n    grid-column-end: 20; \n    grid-row-start:  2;\n    grid-row-end: 20;\n},\n.grid-child:nth-child(2) {\n    grid-column-start: 3;\n    grid-column-end: 19;\n    grid-row-start:  3;\n    grid-row-end: 19;\n},\n.grid-child:nth-child(3) {\n    grid-column-start: 4;\n    grid-column-end: 18;\n    grid-row-start:  4;\n    grid-row-end: 18;\n},\n.grid-child:nth-child(4) {\n    grid-column-start: 5;\n    grid-column-end: 17;\n    grid-row-start:  5;\n    grid-row-end: 17;\n},\n.grid-child:nth-child(5) {\n    grid-column-start: 6;\n    grid-column-end: 16;\n    grid-row-start: 6;\n    grid-row-end: 16;\n},\n.grid-child:nth-child(6) {\n    grid-column-start: 7;\n    grid-column-end: 15;\n    grid-row-start:  7;\n    grid-row-end: 15;\n},\n.grid-child:nth-child(7) {\n    grid-column-start: 8;\n    grid-column-end: 14;\n    grid-row-start: 8;\n    grid-row-end: 14;\n},\n.grid-child:nth-child(8) {\n    grid-column-start: 9;  \n    grid-column-end: 13; \n    grid-row-start: 9; \n    grid-row-end: 13;\n},\n.grid-child:nth-child(9) {\n    grid-column-start: 10; \n    grid-column-end: 12, \n    grid-row-start: 10; \n    grid-row-end: 12;\n},\n\n</pre>                                    \n                                "},(y={elementType:"GridPresent",parentWidth:void 0,nrOfChildren:10},Object(x.a)(y,"parentWidth",400),Object(x.a)(y,"parentStyle",{borderRadius:"50%",gridTemplateColumns:"repeat(20, 1fr)",gridTemplateRows:"repeat(20, 1fr)"}),Object(x.a)(y,"childStyle",{borderRadius:"50%",fontSize:"15px",lineHeight:"unset",verticalAlign:"top"}),Object(x.a)(y,"grandChildStyle",{position:"relative",top:"-12px"}),Object(x.a)(y,"childByIndexStyle",{0:{gridColumnStart:1,gridColumnEnd:21,gridRowStart:1,gridRowEnd:21,backgroundColor:"white",color:"black"},1:{gridColumnStart:2,gridColumnEnd:20,gridRowStart:2,gridRowEnd:20,backgroundColor:"black"},2:{gridColumnStart:3,gridColumnEnd:19,gridRowStart:3,gridRowEnd:19,backgroundColor:"white",color:"black"},3:{gridColumnStart:4,gridColumnEnd:18,gridRowStart:4,gridRowEnd:18,backgroundColor:"black"},4:{gridColumnStart:5,gridColumnEnd:17,gridRowStart:5,gridRowEnd:17,backgroundColor:"white",color:"black"},5:{gridColumnStart:6,gridColumnEnd:16,gridRowStart:6,gridRowEnd:16,backgroundColor:"black"},6:{gridColumnStart:7,gridColumnEnd:15,gridRowStart:7,gridRowEnd:15,backgroundColor:"white",color:"black"},7:{gridColumnStart:8,gridColumnEnd:14,gridRowStart:8,gridRowEnd:14,backgroundColor:"black"},8:{gridColumnStart:9,gridColumnEnd:13,gridRowStart:9,gridRowEnd:13,backgroundColor:"white",color:"black"},9:{gridColumnStart:10,gridColumnEnd:12,gridRowStart:10,gridRowEnd:12,backgroundColor:"black"}}),y)]}}]}};var T={elementType:"HiddenDescription",content:{showLegend:!1,legend:[{type:"Example",styleClasses:"btn btn-secondary text-white m-4 mb-1 mt-1 hidden",description:"Example of grid usage"}],items:[{type:"Example",title:"Area",maxHeight:"60rem",description:{elementType:"Section",content:[{elementType:"UnsignedList",content:[]},{elementType:"Code",content:"\n<pre>\n<pre>                            \n                                "},{elementType:"GridPresent",parentWidth:void 0,parentHeight:700,nrOfChildren:10,parentStyle:{gridTemplateAreas:'\n                                    "a a b b . . . d e"\n                                    "c c b b . . . d e"\n                                    "f f . . . . . g g"\n                                    '},childStyle:{opacity:.5},childByIndexStyle:{0:{gridArea:"a"},1:{gridArea:"2 / 6 / 3 / 7"},2:{gridArea:"b"},3:{gridArea:"c"},4:{gridArea:"d"},5:{gridArea:"e"},6:{gridArea:"f"},7:{gridArea:"g"},8:{gridArea:"1 / 1 / 3 / 4",border:"solid medium green"},9:{gridArea:"a / b"}}},{elementType:"Paragraph",content:"\n\n                                "}]}},{type:"Example",title:"Layouts: same children, different template",maxHeight:"200rem",description:{elementType:"Section",content:[{elementType:"Separate",content:"\n                                    Example 1\n                                "},{elementType:"Paragraph",content:"\n                                Thanks to the <code>grid-tamplate-area</code>, changing just one property\n                                of the grid-parent element will result in changing the whole page layout.\n                                "},{elementType:"Code",content:'\n<pre>\n.grid-parent{\n    display:grid,\n    gird-template-areas:\n        "head head head head head"\n        "nav  cont cont cont side"\n        "nav  cont cont cont side"\n        "nav  cont cont cont side"\n        "nav  cont cont cont side"\n        "nav  cont cont cont side"\n        "nav  cont cont cont side"\n        "foot foot foot foot foot"\n}\n.grid-child:nth-child(0){\n    grid-area: \'head\'; background-color: black;\n}\n.grid-child:nth-child(1){\n    grid-area: \'nav\'; background-color: gray;\n}\n.grid-child:nth-child(2){\n    grid-area: \'cont\'; background-color: blut;\n}\n.grid-child:nth-child(3){\n    grid-area: \'side\'; background-color: gray;\n}\n.grid-child:nth-child(4){\n    grid-area: \'foot\'; background-color: brown;\n}\n<pre>                            \n                                '},(v={elementType:"GridPresent",parentWidth:void 0,parentHeight:500},Object(x.a)(v,"parentWidth",500),Object(x.a)(v,"nrOfChildren",5),Object(x.a)(v,"parentStyle",{gridTemplateAreas:'\n                                    "head head head head head"\n                                    "nav  cont cont cont side"\n                                    "nav  cont cont cont side"\n                                    "nav  cont cont cont side"\n                                    "nav  cont cont cont side"\n                                    "nav  cont cont cont side"\n                                    "nav  cont cont cont side"\n                                    "foot foot foot foot foot "\n                                    '}),Object(x.a)(v,"childStyle",{}),Object(x.a)(v,"childByIndexStyle",{0:{gridArea:"head",backgroundColor:"black"},1:{gridArea:"nav",backgroundColor:"gray "},2:{gridArea:"cont",backgroundColor:"blue "},3:{gridArea:"side",backgroundColor:"gray "},4:{gridArea:"foot",backgroundColor:"brown"}}),v),{elementType:"Separate",content:"\n                                    Example 2\n                                "},{elementType:"Paragraph",content:"\n                                    A sort of a mobile version\n                                "},{elementType:"Code",content:'\n<pre>\n.grid-parent{\n    display:grid,\n    gird-template-areas:\n        "nav  head head "\n        "cont cont cont"\n        "cont cont cont"\n        "cont cont cont"\n        "cont cont cont"\n        "cont cont cont"\n        "cont cont cont"\n        "cont cont cont"\n        "side side side"\n        "foot foot foot"\n}\n.grid-child:nth-child(0){\n    grid-area: \'head\'; background-color: black;\n}\n.grid-child:nth-child(1){\n    grid-area: \'nav\'; background-color: gray;\n}\n.grid-child:nth-child(2){\n    grid-area: \'cont\'; background-color: blut;\n}\n.grid-child:nth-child(3){\n    grid-area: \'side\'; background-color: gray;\n}\n.grid-child:nth-child(4){\n    grid-area: \'foot\'; background-color: brown;\n}\n<pre>                            \n                                '},(w={elementType:"GridPresent",parentWidth:void 0,parentHeight:500},Object(x.a)(w,"parentWidth",300),Object(x.a)(w,"nrOfChildren",5),Object(x.a)(w,"parentStyle",{gridTemplateAreas:'\n                                    "nav  head head "\n                                    "cont cont cont"\n                                    "cont cont cont"\n                                    "cont cont cont"\n                                    "cont cont cont"\n                                    "cont cont cont"\n                                    "cont cont cont"\n                                    "cont cont cont"\n                                    "side side side"\n                                    "foot foot foot"\n                                    '}),Object(x.a)(w,"childStyle",{}),Object(x.a)(w,"childByIndexStyle",{0:{gridArea:"head",backgroundColor:"black"},1:{gridArea:"nav",backgroundColor:"gray "},2:{gridArea:"cont",backgroundColor:"blue "},3:{gridArea:"side",backgroundColor:"gray "},4:{gridArea:"foot",backgroundColor:"brown"}}),w),{elementType:"Paragraph",content:"\n\n                                "}]}}]}};var O={elementType:"HiddenDescription",content:{showLegend:!1,legend:[{type:"Example",styleClasses:"btn btn-secondary text-white m-4 mb-1 mt-1 hidden",description:""}],items:[{type:"Example",title:"About",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                            The pattern is:\n                            "},{elementType:"Code",content:'\n<pre>\ngrid-template:\n    "a b c" heightOfFirstRow\n    "d e f" heightOfSecondRow\n    "g h i" heightOfThirdRow \n            / firstColumnWidth secondColumnWidth thirdColumnWidth \n</pre>                            \n                            '}]}},{type:"Example",title:"Example: rows and columns set",maxHeight:"60rem",description:{elementType:"Section",content:[{elementType:"Code",content:'\n<pre>\n.grid-parent{\n    "a b c" 1fr\n    "a b c" 30px\n    "d e f" 40px / 1fr 2fr 10%\n}\n.grid-child:nth-child(0){grid-area:"a";}\n.grid-child:nth-child(1){grid-area:"b";}\n.grid-child:nth-child(2){grid-area:"c";}\n.grid-child:nth-child(3){grid-area:"d";}\n.grid-child:nth-child(4){grid-area:"e";}\n.grid-child:nth-child(5){grid-area:"f";}\n<pre>                            \n                                '},{elementType:"GridPresent",parentWidth:void 0,parentHeight:400,nrOfChildren:9,parentStyle:{gridTemplate:'\n                                        "a b c" 1fr\n                                        "a b c" 30px\n                                        "d e f" 40px / 1fr 2fr 10%\n                                    '},childStyle:{},childByIndexStyle:{1:{gridArea:"a"},2:{gridArea:"b"},3:{gridArea:"c"},4:{gridArea:"d"},5:{gridArea:"e"},6:{gridArea:"f"}}},{elementType:"Paragraph",content:"\n\n                                "}]}},{type:"Example",title:"Example: only row height set",description:{elementType:"Section",content:[{elementType:"Code",content:'\n<pre>\n.grid-parent{\n    "a b c" 1fr\n    "a b c" 30px\n    "d e f" 40px\n}\n.grid-child:nth-child(0){grid-area:"a";}\n.grid-child:nth-child(1){grid-area:"b";}\n.grid-child:nth-child(2){grid-area:"c";}\n.grid-child:nth-child(3){grid-area:"d";}\n.grid-child:nth-child(4){grid-area:"e";}\n.grid-child:nth-child(5){grid-area:"f";}\n<pre>                            \n                                '},{elementType:"GridPresent",parentWidth:void 0,parentHeight:400,nrOfChildren:9,parentStyle:{gridTemplate:'\n                                        "a b c" 1fr\n                                        "a b c" 30px\n                                        "d e f" 40px\n                                    '},childStyle:{},childByIndexStyle:{1:{gridArea:"a"},2:{gridArea:"b"},3:{gridArea:"c"},4:{gridArea:"d"},5:{gridArea:"e"},6:{gridArea:"f"}}},{elementType:"Paragraph",content:"\n\n                                "}]}},{type:"Example",title:"Example: only column width set",description:{elementType:"Section",content:[{elementType:"Code",content:'\n<pre>\n.grid-parent{\n    "a b c"\n    "a b c"\n    "d e f" / 1fr 10px 30%\n}\n.grid-child:nth-child(0){grid-area:"a";}\n.grid-child:nth-child(1){grid-area:"b";}\n.grid-child:nth-child(2){grid-area:"c";}\n.grid-child:nth-child(3){grid-area:"d";}\n.grid-child:nth-child(4){grid-area:"e";}\n.grid-child:nth-child(5){grid-area:"f";}\n<pre>                            \n                                '},{elementType:"GridPresent",parentWidth:void 0,parentHeight:400,nrOfChildren:9,parentStyle:{gridTemplate:'\n                                        "a b c" \n                                        "a b c" \n                                        "d e f" / 1fr 10px 30%\n                                    '},childStyle:{},childByIndexStyle:{1:{gridArea:"a"},2:{gridArea:"b"},3:{gridArea:"c"},4:{gridArea:"d"},5:{gridArea:"e"},6:{gridArea:"f"}}},{elementType:"Paragraph",content:"\n\n                                "}]}}]}};var S={elementType:"HiddenDescription",content:{showLegend:!1,legend:[{type:"Example",styleClasses:"btn btn-secondary text-white m-4 mb-1 mt-1 hidden",description:""}],items:[{type:"Example",title:"align-items",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                            Placing item in the relation to the grid-cell, or a container indicated \n                            by a few cells in case item is stretched along a few grid cells. \n                            <code>grid-auto-flow</code> does not influence this property.\n                            <code>flex-basis</code> may be set on the child items, but does nothing.\n                            \n                            Alowed values:\n                            "},{elementType:"UnsignedList",content:["<code>normal</code>: depends on the layout mode:\n                                <ul>\n                                    <li>absolutely-positioned layouts: like <code>start</code> or </code>stretch</code></li>\n                                    <li>static-positioned: <code>stretch</code></li>\n                                    <li>flex-items: <code>stretch</code></li>\n                                    <li>grid-items: <code>stretch</code> or <code>start</code></li>\n                                    <li>Does not apply to the block-level boxes or table cells</li>\n\n                                </ul>\n                                ","<code>flex-start</code>: possible, but use <code>start</code> instead, as this value is \n                                designed for the flex-box,","<code>center</code>: place item in the middle of the grid-track in block direction","<code>flex-end</code>: possible, but use <code>end</code> instead,","<code>start</code>: place item at the start of the grid-track in the block direction,","<code>end</code>: place item at the end of the grid-track in the block direction,","<code>self-start</code>: possible, but better to use <code>start</code>,","<code>self-end</code>: possible, but better to use <code>end</code>","<code>stretch</code>: stretches the item in the block direction,"]},{elementType:"Code",content:'\n<pre>\n.grid-parent{\n    "a b c" 1fr\n    ". b ." 1fr\n    "d e f" 1fr / auto auto auto    \n}\n</pre>                    \n                            '},{elementType:"GridPresent",parentWidth:void 0,parentHeight:400,nrOfChildren:9,parentStyle:{gridTemplate:'\n                                    "a b c" 1fr\n                                    ". b ." 1fr\n                                    "d e f" 1fr / auto auto auto\n                                ',gap:"10px"},childStyle:{},childByIndexStyle:{1:{gridArea:"a",height:"50px"},2:{gridArea:"b",height:"60px"},3:{gridArea:"c",height:"70px"},4:{gridArea:"d"},5:{gridArea:"e"},6:{gridArea:"f"}}},{elementType:"Code",content:'\n<pre>\ngrid-template:\n    "a b c" heightOfFirstRow\n    "d e f" heightOfSecondRow\n    "g h i" heightOfThirdRow \n            / firstColumnWidth secondColumnWidth thirdColumnWidth \n</pre>                            \n                            '}]}},{type:"Example",title:"Example: rows and columns set",maxHeight:"60rem",description:{elementType:"Section",content:[{elementType:"Code",content:'\n<pre>\n.grid-parent{\n    "a b c" 1fr\n    "a b c" 30px\n    "d e f" 40px / 1fr 2fr 10%\n}\n.grid-child:nth-child(0){grid-area:"a";}\n.grid-child:nth-child(1){grid-area:"b";}\n.grid-child:nth-child(2){grid-area:"c";}\n.grid-child:nth-child(3){grid-area:"d";}\n.grid-child:nth-child(4){grid-area:"e";}\n.grid-child:nth-child(5){grid-area:"f";}\n<pre>                            \n                                '},{elementType:"GridPresent",parentWidth:void 0,parentHeight:400,nrOfChildren:9,parentStyle:{gridTemplate:'\n                                        "a b c" 1fr\n                                        "a b c" 1fr\n                                        "d e f" 1fr / auto auto auto\n                                    '},childStyle:{},childByIndexStyle:{1:{gridArea:"a",flexBasis:"200px"},2:{gridArea:"b",flexBasis:"250px"},3:{gridArea:"c",flexBasis:"300px"},4:{gridArea:"d"},5:{gridArea:"e"},6:{gridArea:"f"}}},{elementType:"Paragraph",content:"\n\n                                "}]}}]}};var k={summary:"Grid",title:"Grid",searchKeywords:"\n\n    ",cathegory:"css",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Grid"},{elementType:"ListOfContent",content:[{id:"template-columns",title:"grid-template-columns"},{id:"template-rows",title:"grid-template-rows"},{id:"template-rows-columns",title:"grid-template-rows with grid-template-columns"},{id:"template-areas",title:"grid-template-areas"},{id:"grid-area",title:"grid-area"},{id:"grid-template",title:"grid-template"},{id:"place-items",title:"place-items, align-self, justify-items"}]},{elementType:"Paragraph",content:"\n                    "},{elementType:"UnsignedList",content:["<code>grid-line</code> is between grid columns or between grid rows. Lines are palces where\n                        gaps are places,","<code>grid-track</code> are where elements are placed. These are the columns and rows of the \n                        grids.","<code>grid-cell</code> is a single slot surrounded by neighbouring grid-lines","<code>grid-area</code> is a set of grid-cells surrounded by two grid-row-lines and two\n                        grid-column-lines,","<code>gutters</code> are spacings between adjacent grid-tracks. Gutters or <code>alleys</code>\n                        are gaps,","<code>block-axis</code> or column axis: grid layout is 2-dimansional. If content is placed \n                        in <code>grid-auto-flow</code> column, elements will be placed along this axis: in top to \n                        bottom direction,","<code>inline-axis</code> or row axis: if content is placed in <code>grid-auto-flow</code> row\n                        direction, elements are placed along the inline-axis."]},{elementType:"Paragraph",content:'\n                    <style>\n                        .trackExample-grid-parent{\n                            display:grid;\n                            width: 370px;\n                            background-color:gray;\n                            color: black;\n                            border-radius: 7px;\n                            grid-template-columns: 1.4rem 1fr 1.4rem 1fr 1.4rem;\n                            grid-template-rows: 1.4rem 1fr 1.4rem 1fr 1.4rem;\n                            font-family:arial;\n                            \n                        }\n                        .trackExample-grid-line-column{\n                            width: 1.4rem;\n                            writing-mode: vertical-rl;\n                            text-align:center;\n                            text-orientation: mixed;\n                            transform:rotate(180deg);\n                            line-height: 1.4rem;\n                            color:white;\n                            background-color:black;\n                            opacity:0.5;\n                        }\n                        .trackExample-grid-child{\n                            background-color: white;\n                            border-radius: 7px;\n                            color:black;\n                            position: relative;\n                            display:flex;\n                            align-items:center;\n                            justify-content:center;\n                            font-size: 1.4rem;\n                            height: 100%\n                            margin:3px;\n                        }\n                        .trackExample-grid-line-row{\n                            height: 1.4rem;\n                            color:white;\n                            line-height: 1.4rem;\n                            text-align: center;\n                            background-color:black;\n                            opacity:0.5;\n                        }\n                        .trackExample-grid-line-row-space{\n                            background-color:black;\n                            opacity:0.5;\n                        }\n                        .trackExample-spacing{\n                            position:relative;\n                            height:1rem;\n                        }\n                        .column{flex-direction:column;}\n                    </style>\n                    <div class="trackExample-grid-parent">\n                        <div class="trackExample-grid-line-row-space"></div>\n                        <div class="trackExample-grid-line-row">Line-1-row</div>\n                        <div class="trackExample-grid-line-row-space"></div>\n                        <div class="trackExample-grid-line-row">Line-1-row</div>\n                        <div class="trackExample-grid-line-row-space"></div>\n\n                        <div class="trackExample-grid-line-column">Line-1</div>\n                        <div class="trackExample-grid-child">&larr;Grid track&rarr;</div>\n                        <div class="trackExample-grid-line-column">Line-2</div>\n                        <div class="trackExample-grid-child">&larr;Grid track&rarr;</div>\n                        <div class="trackExample-grid-line-column">Line-3</div>\n\n                        <div class="trackExample-grid-line-row-space"></div>\n                        <div class="trackExample-grid-line-row">Line-2</div>\n                        <div class="trackExample-grid-line-row-space"></div>\n                        <div class="trackExample-grid-line-row">Line-2</div>\n                        <div class="trackExample-grid-line-row-space"></div>\n\n                        <div class="trackExample-grid-line-column">Line-1</div>\n                        <div class="trackExample-grid-child column">\n                            <div class="block">&uarr;</div>\n                            <div class="block">&larr;Grid track&rarr;</div>\n                            <div class="block">&darr;</div>\n                        </div>\n                        <div class="trackExample-grid-line-column">Line-2</div>\n                        <div class="trackExample-grid-child">&larr;Grid track&rarr;</div>\n                        <div class="trackExample-grid-line-column">Line-3</div>\n\n                        <div class="trackExample-grid-line-row-space"></div>\n                        <div class="trackExample-grid-line-row">Line-3</div>\n                        <div class="trackExample-grid-line-row-space"></div>\n                        <div class="trackExample-grid-line-row">Line-3</div>\n                        <div class="trackExample-grid-line-row-space"></div>\n\n                    </div>\n\n                    <div class="trackExample-spacing"></div>\n\n                    <div class="trackExample-grid-parent">\n                        <div class="trackExample-grid-line-row-space"></div>\n                        <div class="trackExample-grid-line-row">inline-axis-row</div>\n                        <div class="trackExample-grid-line-row-space"></div>\n                        <div class="trackExample-grid-line-row">inline-axis-row</div>\n                        <div class="trackExample-grid-line-row-space"></div>\n\n                        <div class="trackExample-grid-line-column">block-axis</div>\n                        <div class="trackExample-grid-child">Grid cell</div>\n                        <div class="trackExample-grid-line-column">gutter / alley</div>\n                        <div class="trackExample-grid-child">Grid cell</div>\n                        <div class="trackExample-grid-line-column">gutter / alley</div>\n\n                        <div class="trackExample-grid-line-row-space"></div>\n                        <div class="trackExample-grid-line-row">gutter / alley</div>\n                        <div class="trackExample-grid-line-row-space"></div>\n                        <div class="trackExample-grid-line-row">gutter / alley</div>\n                        <div class="trackExample-grid-line-row-space"></div>\n\n                        <div class="trackExample-grid-line-column">block-axis</div>\n                        <div class="trackExample-grid-child">Grid cell</div>\n                        <div class="trackExample-grid-line-column">gutter / alley</div>\n                        <div class="trackExample-grid-child">Grid cell</div>\n                        <div class="trackExample-grid-line-column">gutter / alley</div>\n\n                        <div class="trackExample-grid-line-row-space"></div>\n                        <div class="trackExample-grid-line-row">gutter / alley</div>\n                        <div class="trackExample-grid-line-row-space"></div>\n                        <div class="trackExample-grid-line-row">gutter / alley</div>\n                        <div class="trackExample-grid-line-row-space"></div>\n\n                    </div>\n                    '},{elementType:"Headline-3",content:'<span="template-columns">grid-template-columns</span>'},{elementType:"UnsignedList",content:["<code>grid-auto-columns</code>","<code>grid-column-start</code>","<code>grid-column-end</code>","<code>gap</code>","<code>column-gap</code>","<code>span</code>","Line names"]},Object(b.a)({},g),{elementType:"Headline-3",content:'<span id="template-rows">grid-template-rows</span>'},{elementType:"UnsignedList",content:["<code>grid-auto-rows</code>: specifies the size of a newly created row. Put on parent element.\n                        Instead of specifying the size of each row separatly, this may be used,","<code>grid-row-start</code>: on child element, the number or name of the grid-line where \n                        the child will start","<code>grid-row-end</code>: on child element, the number or name of the grid-line where the child \n                        will end","<code>gap</code>","<code>row-gap</code>","<code>span</code>","Line names"]},Object(b.a)({},f),{elementType:"Headline-3",content:'<span id="template-rows-columns">grid-template-rows with grid-tempate-columns</span>'},Object(b.a)({},j),{elementType:"Headline-3",content:'<span id="template-areas">grid-template-area</span>'},{elementType:"UnsignedList",content:["<code>grid-template-area</code>: defines areas in a grid parent. Does position elements, but\n                        this template may be referred to from the child elements,","<code>grid-area</code>: a property of a child element, that defines to what part of the \n                        <code>grid-template-area</code> element will belong,","Layout of the page may be changed by just change of the <code>grid-template-area</code>,","A <code>grid-template-area</code> consists of a set of strings, each of them defines a \n                        single row of the temlate","A grid area is a part of the grid layout surrounded by 2 grid block lines and 2 grid row lines,\n                        so it will always be a rectangle of some sort"]},Object(b.a)({},T),{elementType:"Headline-3",content:'<span id="grid-area">grid-area</span>'},{elementType:"Paragraph",content:"\n                    <code>grid-area</code> can be one of below:\n                    "},{elementType:"UnsignedList",content:["<code>grid-area: area-name</code>: where <code>area-name</code> is specified \n                        in the <code>grid-template-area</code>. In this case the element will expand to the \n                        whole area that was defined with the <code>area-name</code> in the <code>grid-template-area</code>,","<code>grid-area: grid-row-start / grid-column-start / grid-row-end / grid-column-end</code>, \n                        where <code>grid-row-start</code>, <code>grid-column-start</code>, <code>grid-row-end</code>,\n                        <code>grid-column-end</code> are numbers indicating the grid line numbers, or are names given to the \n                        grid lines (eg. <code>grid-template-column: [someName] 1fr [someEndName]</code>,","The <code>grid-template-area</code> does not have to be defined for the <code>grid-area</code> to\n                        work. Only in this case <code>grid-area</code> property will have to be defined by the \n                        <code>grid-row-start</code>, <code>grid-column-start</code>, <code>grid-row-end</code>,\n                        <code>grid-column-end</code> pattern,","A dot <code>.</code> in the <code>grid-template-area</code> indicates the area not taken by any\n                        element, the element the is not occupied at all. However this refers to the <code>grid-area: area-name</code>\n                        pattern only. If the some child of a grid container is place with the <code>grid-row-start</code>, <code>grid-column-start</code>, <code>grid-row-end</code>,\n                        <code>grid-column-end</code> pattern, it may be placed in the <i><q>forbidden zone</q></i>,"]},{elementType:"SmallHeadline",content:"\n                        grid-area: image stale example\n                    "},{elementType:"exampleInIframe",title:"Slot example",src:"https://gudmar.github.io/theoryCornerExamples/Grid/stalePhotoGrid.html",width:"500",height:"400"},{elementType:"Code",content:'\n<pre>\n&lt;style>\nhtml{\n    overflow: auto;\n}\nbody{\n    padding:0;\n    margin:0;\n    background-image: url(\'./staleBG.png\');\n    overflow: auto;\n    position: relative;\n    width: 100vw;\n    height: 100vh;\n}\n.grid-parent{\n    width: 100vw;\n    position: relative;\n    display: grid;\n    grid-template-areas: "a a a a a"\n                         "b . . . c"\n                         "d . e . f"\n                         "g . . . h"\n                         "i i i i i";\n}\n.grid-child-a{\n    grid-area: a;\n    background-color: #777;\n    position: relative;\n    height: 20vh;\n}\n.grid-child-b{\n    grid-area: b;\n    background-color: #999;\n    height: 10vh;\n}\n.grid-child-c{\n    grid-area: c;\n    background-color: #999;\n}\n.grid-child-d{\n    grid-area: d;\n    background-color: #ddd;\n}\n.grid-child-e{\n    grid-area: e;\n    background-color: green;\n    height: 10vh;\n}\n.grid-child-f{\n    grid-area: f;\n    background-color: #ddd;\n}\n.grid-child-g{\n    grid-area: g;\n    background-color: #ddd;\n    height: 10vh;\n}\n.grid-child-h{\n    grid-area: h;\n    background-color: #ddd;\n}\n.grid-child-i{\n    grid-area: i;\n    background-color: #444;\n}\n\n.child-of-grid-i{\n    position: relative;\n    height: 100vh;\n}\n.center{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    /* align-content: center; */\n}\n.text{\n    font-family: Arial, Helvetica, sans-serif;\n    color: white;\n}\n&lt;/style>\n\n&lt;div class="grid-parent">\n&lt;div class="grid-child-a center text">&lt;h1>Lawnmower&lt;/h1>&lt;/div>\n&lt;div class="grid-child-b center text">b&lt;/div>\n&lt;div class="grid-child-c center text">c&lt;/div>\n&lt;div class="grid-child-f center text">f&lt;/div>\n&lt;div class="grid-child-g center text">g&lt;/div>\n&lt;div class="grid-child-h center text">h&lt;/div>\n&lt;div class="grid-child-i center text">\n    &lt;div class="child-of-grid-i center text">e-child&lt;/div>\n&lt;/div>\n&lt;div class="grid-child-d center text">d&lt;/div>\n&lt;div class="grid-child-e center text">e&lt;/div>\n&lt;/div>\n\n</pre>                    \n\n                    '},{elementType:"Headline-3",content:'<span id="grid-template">grid-template</span>'},{elementType:"Paragraph",content:"A shorthand property for defining <code>grid-columns</code>, \n                    <code>grid-rows</code>, <code>grid-areas</code>"},O,{elementType:"Headline-3",content:'<span id="place-items">place-items, align-items, justify-items, place-content, align-content, justify-content</span>'},{elementType:"Paragraph",content:"Works with <code>grid</code> and <code>flexbox</code>, property of the <code>grid</code>\n                    or <code>flex</code> container. Alows to align items along the <code>block</code> and <code>inline</code>\n                    directions. If the item placed in the grid-cell is smaller then the grid-cell, it may be adjusted/aligned\n                    with this properties inside the container. If the item does not have any size, it will be stratched, or \n                    located with this properties."},{elementType:"UnsignedList",content:["<code>align-items</code>: places items in the <b>block</b> direction.\n                        ","<code>justify-items</code>: places items in the row direction in relation to the \n                        track,","<code>place-items</code>: shorthand for the <code>align-items</code> and <code>justify-items</code>","<code>align-content</code>: places items in the <b>block</b> direction, however places them in \n                        the relation to the parent container, not the track (so not the single item, but the whole content)","<code>justify-content</code>: places items in the <b>row</b> direction, however places them in the\n                        relation to the parent container, not the track (so not the single item, but the whole content)","<code>place-content</code>: a shorthand property for the <code>align-content</code> and <code>\n                        justify-content</code>,","<code>align-self</code>: overwrites the <code>align-items</code> property for the \n                        specific child of a grid container it was set on. It should be applied to a grid-container \n                        child,","<code>justify-self</code>: overwrittes the <code>justify-items</code> and sets the child of a \n                        grid parent in the row-direction. Is ignored on tables and in flex."]},S]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout",description:"Index of elements"},{elementType:"Link",content:"gridbyexample",href:"https://gridbyexample.com/",description:"Good grid examples"}]}]};var C=[l,c,d,h,u,k,{summary:"position",title:"position",searchKeywords:"absolute relative static sticky fixed z-index css",cathegory:"css",content:[{elementType:"Article",content:[{elementType:"Headline",content:"About position"},{elementType:"Paragraph",content:"\n                            <b>Lorem ipsum</b> dolor sit amet, consectetur adipiscing elit. \n                            Vestibulum et lacinia arcu, ut tempor lacus. Integer euismod, est et pharetra eleifend, \n                            magna nibh congue nulla, eu ornare lacus sem eu leo. Sed aliquet tincidunt neque non tempor. \n                            Sed feugiat, massa at tempus tincidunt, tortor turpis rhoncus orci, nec cursus purus dui vel ipsum. \n                            Sed pellentesque sem nec dictum auctor. Morbi tempus lectus vitae ultrices volutpat. \n                            Vivamus convallis mauris urna. Phasellus rhoncus felis eget mi tincidunt malesuada. \n                            Pellentesque in velit viverra nunc ultrices maximus. Duis in leo dolor.             \n                        "}]}]},m,p,{summary:"tables",title:"tables",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Tables"},{elementType:"Paragraph",content:"\n                            <b>Lorem ipsum</b> dolor sit amet, consectetur adipiscing elit. \n                            Vestibulum et lacinia arcu, ut tempor lacus. Integer euismod, est et pharetra eleifend, \n                            magna nibh congue nulla, eu ornare lacus sem eu leo. Sed aliquet tincidunt neque non tempor. \n                            Sed feugiat, massa at tempus tincidunt, tortor turpis rhoncus orci, nec cursus purus dui vel ipsum. \n                            Sed pellentesque sem nec dictum auctor. Morbi tempus lectus vitae ultrices volutpat. \n                            Vivamus convallis mauris urna. Phasellus rhoncus felis eget mi tincidunt malesuada. \n                            Pellentesque in velit viverra nunc ultrices maximus. Duis in leo dolor.             \n                        "}]}]}];var A=[{summary:"validation",title:"validation",cathegory:"HTML",content:[{elementType:"Article",content:[{elementType:"NoteWarning",content:"\n                    Server side validations should not be ommited, due to front-end hacking possiblities.<br>\n                    There is an <a href='./#/theory/form%20validation%20api' target=\"_blank\"><span> JS\n                     api</span></a> that can be used for validation purposes.\n                    "},{elementType:"Headline",content:"Validating a form with HTML"},{elementType:"Paragraph",content:'\n                        Form fields mey need validation due to whole variety of reasons, from security to problems with \n                        precessing data. That is why web form due to <abbr title="Web Content Accessibility Guidelines">\n                        WCAG</abbr> standarts should inform user what data format sould be used and why data is needed.\n                        There is a possiblity to use HTML and CSS build in features to validate forms. There is an JS api\n                        that can be used in case HTML and CSS does not satisfy our needs.\n                    '}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Input"},{elementType:"Paragraph",content:"\n                        A HTML <code>&lt;input&gt;</code> field is a build in borwser web element for inputting \n                        a whole sort of variety of data. This element will change its apperance and behaviour \n                        depending on its <strong>type</strong> property. These properties may be:\n                    "},{elementType:"UnsignedList",content:['<strong>button:</strong>  <input type="button" value="Button">','<strong>checkbox:</strong>  <input type="checkbox">','<strong>color:</strong>  <input type="color">','<strong>date:</strong>  <input type="date">','<strong>datetime-local:</strong>  <input type="datetime-local">','<strong>email:</strong>  <input type="email">','<strong>file:</strong>  <input type="file">','<strong>month:</strong>  <input type="month">','<strong>number:</strong>  <input type="number">','<strong>password:</strong>  <input type="password">','<strong>radio:</strong>  <input type="radio">','<strong>range:</strong>  <input type="range">','<strong>reset:</strong>  <input type="reset">','<strong>search:</strong>  <input type="search">','<strong>submit:</strong>  <input type="submit">','<strong>tel:</strong>  <input type="tel">','<strong>text:</strong>  <input type="text">','<strong>url:</strong>  <input type="url">','<strong>week:</strong>  <input type="week">']},{elementType:"Paragraph",content:"\n                        There are some more input types not mentioned here. \n                        Please visit references section to learn more.\n                    "},{elementType:"Paragraph",content:"\n                        There is a set of input field vaildation methods available with only HTML or CSS.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"HTML vaildation possibilities"},{elementType:"UnsignedList",content:["<code>required='required'</code> can be applied to \n                        <code>text</code>,\n                        <code>serach</code>,\n                        <code>url</code>,\n                        <code>tel</code>,\n                        <code>email</code>,\n                        <code>password</code>,\n                        <code>date</code>,\n                        <code>month</code>,\n                        <code>week</code>,\n                        <code>datetime-local</code>,\n                        <code>number</code>,\n                        <code>checkbox</code>,\n                        <code>radio</code>,\n                        <code>file</code> and <code>&lt;select&gt;</code>, <code>&lt;textarea&gt;</code>\n                        In case this input is not filled, there will be a message displayed\n                        ","\n                        <code>min-length</code> and <code>max-length</code> may be applied to <code>&lt;input&gt;</code>\n                        or <code>&lt;textarea&gt;</code>, and indicates minimal and maximum length in characters.\n                        In case field is not valid there will be a message displayed and form will not be submited.\n                        ","<code>min</code>, <code>max</code> may be applied to:\n                        <code>date</code>,\n                        <code>month</code>,\n                        <code>week</code>,\n                        <code>time</code>,\n                        <code>datatime-local</code>,\n                        <code>number</code>,\n                        <code>range</code>. \n                        In case field is not valid there will be a message displayed and form will not be submited.\n                        ","<code>type</code> indicates what sort of data certain input accepts,","<code>pattern</code> uses a regular expression to specify data that are valid."]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"How to inform user that data is invalid"},{elementType:"Paragraph",content:"\n                        There is a set of CSS pseudoclasses that can be used to inform user about data invalid issue:\n                    "},{elementType:"UnsignedList",content:["<code>input:valid</code>","<code>input:invalid</code>","<code>input:required</code>","<code>input:invalid:required</code>"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation",description:"Tutorial"},{elementType:"Link",content:"Developer mozilla",href:"http://localhost:3000/theory/validation",description:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"}]}]},{summary:"semantic elements",title:"semantic elements",cathegory:"HTML",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Semantic elements"},{elementType:"Paragraph",content:"\n    \n                "}]}]},{summary:"inputs",title:"inputs",cathegory:"HTML",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Input elements"},{elementType:"Paragraph",content:"\n        \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"#",description:"Tutorial"}]}]},{summary:"iframe",title:"iframe",searchKeywords:"\n    ",cathegory:"html",content:[{elementType:"Article",content:[{elementType:"Headline",content:"iframe"},{elementType:"Paragraph",content:"\n                    An <code>iframe</code> is an element allowing to insert a foreign content into a web page. \n                    Even whole web page may be inserted. Context of the iframe is separated from \n                    the page. Iframes are useful for:\n                    "},{elementType:"UnsignedList",content:["embedding a youtube content","embedding a tweet button","embedding advertisements,","like buttons, posts, comments from the facebook,","google maps,"]},{elementType:"Paragraph",content:"\n                    There are limitations regarding iframe usage:\n                    "},{elementType:"UnsignedList",content:["The same origin policy, unless a server delivering content allows to embed some content into an\n                        iframe","no DOM interactions from outside of an iframe,","embedding advertisements,","Posting messages to an iframe possible,"]},{elementType:"SmallHeadline",content:"\n                    Attributes\n                    "},{elementType:"UnsignedList",content:["<code>width</code>: width of the iframe","<code>height</code>: height of the iframe,","<code>allow</code>: \n                        a string with listed features that embedded page is allowed to use on host page. For example:\n                        <code>camera</code>, <code>gyroscope</code>, <code>microphone</code>, <code>autoplay</code>","<code>loading</code>: <code>eager</code> or <code>lazy</code>. If eager, then will \n                        load immediately after page is loaded, if lazy, then will load only if iframe is visible,","<code>name</code>: can bind with a <code>target</code> attribute of an <code>input</code>,\n                        <code>button</code>, <code>form</code>, <code>a</code>, etc.","<code>title</code>: a meta-data tag, not visible in the iframe or UI, but important for screen readers,","<code>sandbox</code>: if empty, all restrictions are applied to the embedded page. Sandbox attribute\n                        is for losing some restrictions: \n                        <ul>\n                        <li><code>allow-forms</code></li>\n                        <li><code>allow-modals</code></li>\n                        <li><code>allow-orientation-lock</code></li>\n                        <li><code>allow-popups</code></li>\n                        <li><code>allow-same-origin</code>: if not used embedded element is treated as if it was from the different origin,</li>\n                        <li><code>allow-scripts</code> allows to run scripts,</li>\n\n                        </ul>\n                        ","<code>src</code> an url with page to embed,","<code>srcdoc</code> overrides <code>src</code>, for the html content to be displayed in the iframe,"]},{elementType:"Headline-3",content:"Examples"},{elementType:"SmallHeadline",content:"Embedding youtube content"},{elementType:"Paragraph",content:'\n                    <iframe width="400" height="300" src="https://www.youtube.com/embed/t8ljODATmqI"></iframe>\n                    '},{elementType:"Code",content:'\n                    <div class="note">\n                    The original address to the film is:\n                    </div>\n<pre>\nhttps://www.youtube.com/watch?v=t8ljODATmqI\n</pre>\n<div class="note">\nJust by changing the <code>watch?v</code> part of the link to <code>embed/</code> we get the link that needs to be \npasted as a source to the iframe\n</div>\n<pre>\n&lt;iframe src="https://www.youtube.com/embed/t8ljODATmqI">&lt;/iframe>\n</pre>\n<div class="note note-danger">\nPasting any link will not work, as server must allow fetching content from the different origin\n</div>\n\n                    '},{elementType:"SmallHeadline",content:"Embedding google map content"},{elementType:"Paragraph",content:'\n                    <iframe width="400" height="300" src=\'https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d11783.642591293943!2d16.627615215541418!3d51.61944093373232!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x4705823ece32600d%3A0xdb8dea3805d97882!2zV2llcnVzem93aWNlLCDFmmx1YsOzdw!5e0!3m2!1spl!2spl!4v1643801533121!5m2!1spl!2spl" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy"\'></iframe>\n                    '},{elementType:"Paragraph",content:"\n                    Some services have a comfortable tool for getting a link that may be pasted as an iframe src.\n                    For getting a link from google maps:          \n                    "},{elementType:"UnsignedList",content:["Go to the google maps page,","Search a place using the search box,","Find the <i>share</i> button, and click it,","Select a <q>place map</q> tab, and there will be a ready iframe text to copy."]},{elementType:"Code",content:'\n<pre>\n&lt;iframe width="400" height="300" src=\'https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d11783.642591293943!2d16.627615215541418!3d51.61944093373232!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x4705823ece32600d%3A0xdb8dea3805d97882!2zV2llcnVzem93aWNlLCDFmmx1YsOzdw!5e0!3m2!1spl!2spl!4v1643801533121!5m2!1spl!2spl" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy"\'></iframe>\n</pre>\n                    '},{elementType:"SmallHeadline",content:"Facebook"},{elementType:"Paragraph",content:'\n                    The problem with the facebook like buttons and pluggins is that to see them, user must be\n                    logged into their Facebook account, and have provided consent to the "App and Website Cookies". That\n                    is why there is no working example for the facebook,\n                    '},{elementType:"Paragraph",content:'\n                    There is a <a target="_blank" href="https://developers.facebook.com/docs/plugins/page-plugin/"> facebook \n                    developers tool</a> for generating iframes for liking buttons, comments, videos, etc.\n                    Just find a tab, insert link, click <i>Get code</i> button and select an iframe tab.\n                    '},{elementType:"SmallHeadline",content:"Twitter"},{elementType:"Paragraph",content:'\n                    <iframe height="30" src="https://platform.twitter.com/widgets/tweet_button.html"></iframe>\n                    '},{elementType:"Code",content:'\n<pre>\n&lt;iframe src="https://platform.twitter.com/widgets/tweet_button.html">&lt;/iframe>\n<div class="note">\nIt may be useful to set height attribute in this case, as iframe will have default 150px height, and this is \ntoo much for the twitter button.\n</div>\n</pre>\n                    '},{elementType:"Headline-3",content:"Content manipulation within iframe"},{elementType:"Paragraph",content:"\n                    It is not possible to get into the iframe with own css or js and manipulate it in any way.\n                    However, it is possible to post a message to the iframe. Ofcourse the iframe will have to \n                    have an implemented behavior for our message.\n                    "},{elementType:"SmallHeadline",content:"\n                    From the host to the iframe communication\n                    "},{elementType:"UnsignedList",content:["<code>document.querySelector('iframe').contentWindow</code> to get access to the iframes\n                        window object,","<code>document.querySelector('iframe').contentDocument</code> to get access to the iframes\n                        document object,","<code>e.source</code> to react to the message received from the iframe","No direct manipulation on iframe elements allowed","<code>window.onmessage</code> event handler for listening to messages from iframes,","<code>e.origin</code> may be used to tell apart iframes inside an event listener."]},{elementType:"SmallHeadline",content:"\n                    From the iframe to the host communication\n                    "},{elementType:"UnsignedList",content:["<code>window.parent.postMessage</code> to send message to the parent,","<code>window.onmessage</code> event handler for listening to messages \n                        posted by the host element,","<code>e.source.postMessage()</code> may be used to answer to messages form the parent."]},{elementType:"Code",content:"\n                    <div class=\"note\">\n                    Iframe host:\n                    </div>\n<pre>\nlet iframe = document.querySelector('iframe');\nfunction sendDataToIframe(frame, msg){\n    frame.contentWindow.postMessage(msg);\n}\nsendDataToIframe(iframe, 'Content added');\n\nwindow.onmessage = ((e)=>{\n    // receiving messages from iframe\n    if (e.origin === window.location.origin){\n        //do something with e.data\n        console.log('Message from iframe received')    \n    }\n    if (e.origin === 'https://www...'){\n        e.source.postMessage('Message received');\n    }    \n})\n</pre>         \n\n                    <div class=\"note\">\n                    Inside an iframe\n                    </div>\n<pre>\nwindow.onmessage((e)=>{\n    if (event.origin === window.location.origin){\n        let item = document.createElement('span');\n        item.innerHTML = e.data;\n        document.querySelector('body').appendChild(item)\n        e.source.postMessage('message received')\n    }\n})\nfunction informHost(msg){\n    window.parent.postMessage(msg);\n}\nfunction infromHost('pass information to the parent');\n\n</pre> \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe",description:"Iframe description"},{elementType:"Link",content:"developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Feature_Policy",description:"Feature policy"},{elementType:"Link",content:"seancdavis",href:"https://www.seancdavis.com/posts/manipulate-iframe-content/",description:"posting messages to an iframe"},{elementType:"Link",content:"Blog rocket",href:"https://blog.logrocket.com/best-practices-react-iframes/",description:"Article about iFrames"},{elementType:"Link",content:"Facebook social pluggins",href:"https://developers.facebook.com/docs/plugins",description:"Tutorial"}]}]}];var I={summary:"form validation api",title:"form validation api",searchKeywords:"valid invalid required pattern long short range input pseudoclasses",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Form validation API"},{elementType:"NoteWarning",content:'\n                        This article is an extention of a <a href="./#/theory/validation" target="_blank">HTML form validation article</a>,\n                        where HTML input elements, validation related CSS pseudoclasses and HTML validation realted\n                        attributes are introduced. If you did not get familiar with that topics please start reading from there.\n                    '},{elementType:"Paragraph",content:"\n                        HTML based validation is usable and in many cases is good enough. However not valid warning message\n                        cannot be styled, or its language cannot be changed (browser default). In order to \n                        alter styling or message content JS <strong>Constraint Validation API</strong> may be used.\n                        This API can be used on folowing elements:\n                        <code>HTMLButtonElement</code> (<code>&lt;button&gt;</code>),\n                        <code>HTMLFieldSetElement</code> (<code>&lt;fieldset&gt;</code>),\n                        <code>HTMLInputElement</code> (<code>&lt;input&gt;</code>),\n                        <code>HTMLOutputElement</code> (<code>&lt;output&gt;</code>),\n                        <code>HTMLSelectElement</code> (<code>&lt;select&gt;</code>),\n                        <code>HTMLTextAreaElement</code> (<code>&lt;textArea&gt;</code>).\n                        <strong>Constraint Validatoin API</strong> makes below properties available on listed elements:\n                    "},{elementType:"UnsignedList",content:["\n                    <code>validationMessage</code>: Message that will be displayed when input is invalid. In case\n                    input is valid this will be empty string. This property needs to be set by <code>setCustomValidity()</code>\n                    method\n                    ","<code>willValidate</code>: <code>true</code> if element will be validated when form is submitted, \n                    <code>false</code> if not.","<code>validity</code>: This will return validity state of element. This will return one of the following:\n                    <ul>\n                        <li><code>patternMismatch</code> corresponding to <code>pattern</code> property in HTML, validated with regExp,\n                        <li><code>tooLong</code> corresponding to <code>max-length</code> property in HTML, will be true if length is \n                        longer than expected. If length is too short this will still be false</li>\n                        <li><code>tooShort</code> corresponding to<code>min-length</code> property in HTML, will be true if length is\n                        shorter than expected. If length is too great, this will still be false</li>\n                        <li><code>rangeOverflow</code> corresponding to <code>max</code> property in HTML. Will be true if \n                        value in input field is greated than expected. If value is below expected value this will be false</li>\n                        <li><code>rangeUnderflow</code> corresponding to <code>min</code> property in HTML. Will be true if \n                        value of corresponding input field is not large enough, but will be false if value is too great</li>\n                        <li><code>typeMismatch</code> corresponds to HTML <code>type</code> property. \n                        will be true if value is in not proper syntax (eg. eMail or URL)</li>\n                        <li><code>valueMissing</code> corresponds to HTML <code>required</code> property. Will be true if \n                        corresponding field is empty.\n                        <li><code>valid</code> is true if all validation constraints are met</li>\n                    </ul>\n                    "]},{elementType:"Paragraph",content:"\n                    There is a set of methods that can be used with a <code>&lt;form&gt;</code> element:\n                    "},{elementType:"UnsignedList",content:["<code>checkValidity()</code>: forces validity check, returns true if field is valid, false if not.\n                        Can be used for example in input event listener","<code>reportValidity()</code>: returns true if all form input fields are valid, or false if at\n                        least one of them is not valid","<code>setCustomValidity(message)</code>: if message is a not empty string this will make\n                        validation error custom message appear on screen. This may be used to customize error message.\n                        If message is an empty string then message will not show up on the screen"]},{elementType:"Code",content:"\n<pre>\n  &lt;form>\n    &lt;input type=\"number\" id=\"number\" min=\"5\">\n    &lt;button>Submit</button>\n &lt;/form>\n\n const nrBox = document.querySelector('#number');\n const submitButton = document.querySelector('button');\n submitButton.addEventListener('click', (e)={\n     if(nrBox.vlidity.rangeUnderflow) e.target.setCustomValidity('Number is too small')\n     else e.target.setCustomValidity('');\n })\n</pre>                        \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"<form nonvalidate>"},{elementType:"Paragraph",content:"\n                    This property set on a form element will prevent build in validity check, and will prevent \n                    messages from informing what box is invalid. Hovewer css pseudoclasses like <code>:invalid</code> \n                    will still function. This allows user to customize not only messages, but also their form.\n                    Elements for displaying validation results may be placed in DOM, and filled in event listeners\n                    with customized code. For example please refer to references section of this article.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Interaction with inputs"},{elementType:"Paragraph",content:"\n                    Most of the input element values may be modifeid or checked by the <code>value</code> property. \n                    However, in case of a checkbox, a <code>checked</code> is more appropriate. \n                    "},{elementType:"NoteWarning",content:"\n                    There is a difference between an <code>checked</code> html attribute and the <code>checked</code>\n                    js object property. Setting <code>document.querySelector('[type=checkbox]').checked = true</code>\n                    will not add the <code>checked</code> html attribute. Will just toggle checkbox state.<br>\n                    The <code>checked</code> html attribute indicates if the element is checked by default. \n                    This attribute does not change with the elements state (so user interaction does not change \n                    this element. The only way to do this is to use <code>setAttribute</code> method)\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation",description:"Tutorial"}]}]};var P={summary:"DOM access methods",title:"DOM access methods",cathegory:"js",searchKeywords:"DOM getElementById getElementsByTagName querySelectorAll, getElementByClassName getElements \n    document.froms document.images document.title, document.cookie document.referrer createElement appendChild prepend\n    removeElement baseURI childNodes firstChild lastChild nextSibing previousSibling nodeName value type parentNode parentElement\n    cloneNode hasChildNodes appendCHild inserBefore isEqualNode isSameNode removeChildNode shadow innerHTML inserAdjacentHTML\n    DocumentFragment fagment",content:[{elementType:"Article",content:[{elementType:"Headline-2",content:"What is DOM?"},{elementType:"Paragraph",content:"\n                        DOM stands for <strong>Document Object Model</strong> and is a tree based representation of \n                        XML and HTML documents. In HTML DOM consists of a root Document object, that has \n                        a &lt;html> child, and &lt;html> has &lt;head> section and &lt;body> section. All elements\n                        visible on web page are situated in DOM. Each browser gives a set of useful methods that \n                        can be used to find and access elements in DOM. \n                    "},{elementType:"Headline-2",content:"Getting to DOM elements"},{elementType:"UnsignedList",content:["\n                    <code>getElementById('someId')</code>: id is a html attribute, that should be unique in whole document.\n                    This method returns an element with specified Id.\n                    ","<code>getElementsByTagName('someTag')</code>: allows to find an NodeList of all elements with specified\n                    tag name in subtree. Example tags in HTML are: <code>p</code>, <code>html</code>, <code>div</code>,\n                    <code>span</code>, <code>form</code>. There is no necessity to search whole DOM tree starting from\n                    a <code>document</code> root node, as \n                    <code>document.getElementById('someId').getElementsByTagName('p')</code> will find all <code>p</code>\n                    elements that are nested in element with id equal to 'someId'. So if we have <code>document.getElementById('someId')\n                    </code> stored in some variable already, we may start from already fonund element <code>someElement.document.getElementsByTagName...</code>","<code>querySelector('.css-selector')</code>: this method allows user to find a NodeList with\n                     <b>first element</b> matching specified <a href=\"./#/theory/selectors\">css selector</a>.","<code>querySelectorAll('.css-selector')</code>: this method returns a NodeList of elements matching\n                    specified <a href=\"./#/theory/selectors\">css selector</a> in whole subtree.","<code>getElementsByClassName('class-name')</code>: will return a NodeList of all elements having \n                    specified class","<code>getElementsByName('name')</code>: will return a NodeList of all elements having name attribute\n                    equal to name speficied as argument passed to this method","<code>element.closest('cssSelector')</code> Searches for a first parent of element, that matches \n                    the given css selector,","<code>element.matches('cssSelector')</code> ture if element would be selected by the given css selector,","<code>document.forms['someFormId']</code>: forms is a read only HTMLCollection of all forms in the document","<code>document.images</code>: readonly collection of all <code>img</code> elements in a document.","<code>document.title</code>: title element in head document. This is displayed in browser tab. Can be \n                    changed with this attribute","<code>document.cookie</code>: perhaps not related to DOM, but useful, all cookies related to this page,","<code>document.referrer</code>: also not DOM related, but returns a page that linked to current page, or null\n                    if page was accessed directly.","<code>document.querySelecotr('iframe').dontentDocument.querySelector()</code> for accessing an \n                    iframe method,"]},{elementType:"Headline-2",content:"Creating, removing, adding DOM elements, moving elements to another pareng"},{elementType:"UnsignedList",content:["\n                    <code>document.createElement('tagName')</code>: will create an element specified by a tag.\n                    This will not add element to DOM.\n                    ","<code>someElement.appendChild(createdElement)</code>: will add already created element as a last\n                    child of someElement","<code>someElement.prepent(setOfNodeObjects)</code>: inserts a set of Node objects before first child\n                    of <i>someElement</i>",'<span class="bg-warning"><code>newParent.appendChild(oldParent.childNodes[0])</code> moves an <code>child.Nodes[0]</code>\n                    element to the new parent,</span>',"<code>someElement.removeElement()</code>: removes element.","<code>element.appendChild.document.adoptNode(targetNodeFromIframe)</code> is for \n                    moving a node to the different document."]},{elementType:"Headline-2",content:"Classes"},{elementType:"Paragraph",content:"<code>class</code> is a html attribute, that may be added to any web page element.\n                    It holds a list of classes, that may be used as css selectors and used for styling purposes.\n                    There is a comfortable api for accessing and modyfing a class list: <code>classList</code>"},{elementType:"UnsignedList",content:["\n                    <code>element.classList</code>: a read only DOMTokenList, a list of classes attached to the element,\n                    ","<code>element.classList.add(someClass)</code>: adds a new element to element class list, if the\n                    someClass already exists, then does nothing,","<code>element.classList.remove(someClass)</code>: removes the someClass from elements class list. If\n                    class is not present, then does nothing,","<code>element.classList.toggle(someClass[, force])</code>: In case force flag is not defined,\n                    adds someClass in case the class is not present in the class list, or removes the class if it \n                    was present in class list. In case force is set to true, then adds class to the element if it is \n                    not present and does not remove it in case it is present, in case force is set to false, removes \n                    the element in case it is present, but does nothing if element is already absent","<code>element.classList.item(index)</code> returns the class under the target index","<code>element.classList.contains(someClass)</code> returns true if element has target class, and \n                    false in other case."]},{elementType:"Headline-2",content:"Node - abstract class"},{elementType:"Paragraph",content:"\n                        This is an abscract class, so has no instances. However other classes may extend Node class.\n                        For example HTMLElement extends Node class and inherits its behavoiurs and methods.\n                        Node has following properties:\n                    "},{elementType:"UnsignedList",content:["<code>Node.baseURI</code>: returns a string containing a base URL of document","<code>Node.childNodes</code>: returns a NodeList containing children of node or null.\n                        This returns also text and comments, and as this is a live node, all changes will ba updated","<code>Node.firstChild</code> returns a first direct child node of target element,  or null\n                        in case there are no children.","<code>Node.lastChild</code> returns a last child of target node","<code>Node.nextSibling</code> returns a next to current node child of parent node","<code>Node.previousSibling</code> returns a previous child node of current nodes parent, or null.","<code>Node.nodeName</code>: returns either node name in capital letters ('DIV') or <code>#document</code>,\n                        or <code>#text</code in case of text node.","<code>Node.value</code>: returns a value under <code>value</code> attribute of target node, or null if element\n                         has no value attribute.","<code>Node.type</code>: returns a number representing what is the type of current node: \n                            <ul>\n                            <li><code>ELEMENT_NODE</code>: 1</li><li><code>ATTRIBUTE_NODE</code>:2</li>\n                            <li><code>TEXT_NODE</code>: 3</li><li><code>CDATA_SECTION_NODE</code>: 4</li>\n                            <li><code>PROCESSING_INSTRUNCTION_NODE</code>: 7</li><li><code>COMMENT_NODE</code>: 8</li>\n                            <li><code>DOCUMENT_NODE</code>: 8</li><li><code>DOCUMENT_TLYPE_NODE</code>: 10</li>\n                            <li><code>DOCUMENT_FRAGMENT_NODE</code>: 11</li>\n                            </ul>\n                        ","<code>Node.parentNode</code>: returns a parent <strong>Node</strong> of current node, or null in case there is no parent.","<code>Node.parentElement</code>: returns a parent <strong>Element</strong> of current node, or null in case no parent.","<code>Node.textContent</code>: returns/<strong>sets</strong> text content of element and descendants. <strong>\n                        This will set text content, so <code>element.textContent = '&lt;div>'some content&lt;/div>'</code> will not\n                        create a div, but will insert this text literaly.</strong>","<code>Node.cloneNode(deep)</code>, deep is an optional parameter. If true node and its content will be clonde \n                        recursively with all descendants, if false then sahllow clone of current node will be made. <strong>Beware, \n                        as id attributes will be cloned</strong>. New clonded node will be returned.","<code>Node.hasChildNodes()</code>: true if node has child nodes, else false.","<code>Node.appendChild()</code>: known from previous section, adds target node as last child of current node.\n                        <strong>If target node points to a node attached to DOM, this node will be detached from previous position and\n                        attached to new one</strong>\n                        ","<code>Node.insertBefore()</code> inserts node given as argument before current node under current nodes parent.","<code>Node.isEqualNode()</code> compares current node with given target node. Compares types and defining data.","<code>Node.isSameNode()</code> true if target node given as argument and current node are the same nodes","<code>Node.replaceNode()</code> swaps current node with target node","<code>Node.removeChildNode()</code> removes target node if it is a child of current node."]},{elementType:"Headline-2",content:"Beware - unwanted text nodes"},{elementType:"Code",content:'\n<pre>\n    &lt;!-- A --\x3e\n    &lt;div id="Aparent">\n        &lt;div id="Achild-1">\n        &lt;div id="Achild-2">\n        &lt;div id="Achild-3">\n    &lt;/div>\n\n    &lt;!-- B --\x3e\n    &lt;div id="Bparent">&lt;div id="Bchild-1">&lt;div id="Bchild-2">&lt;div id="Bchild-3">&lt;/div>\n    &lt;script>\n        const parentA = document.getElementById(\'Aparent\');\n        const parentB = document.getElementById(\'Bparent\');\n    &lt;script>\n</pre>                    \n                    '},{elementType:"Paragraph",content:"\n                    What is the difference between those snippets? Output of <code>parentA.childNodes</code>\n                    will be [<code>text</code>, <code>div#Achild-1</code>, <code>text</code>, <code>div#Achild-2</code>,\n                    <code>text</code>, <code>div#Achild-3</code>, <code>text</code>], where <code>parentB.childNodex</code>\n                    will produce [<code>div#Bchild-1</code>, <code>div#Bchild-2</code>, <code>div#Bchild-3</code>],\n                    so in filst examplet there are additional text nodes added. First code was written with new line \n                    symbols after each <code>div</code> element for readebility, but this gives unwanted side effect\n                    not every one is avare of, as this new line symbols become additional text nodes.\n                    In second example there are no extra spaces and no extra new line symbols. It is not as easy to read \n                    this code, but no extra nodes added.\n                    "},{elementType:"Headline-2",content:"\n                    Shadow DOM\n                    "},{elementType:"Paragraph",content:"\n                    Usualy css rules apply to all elements in document. But if encapsulation is needed (for\n                    example a reusable component working with many pages and not interfering with existing css) is \n                    , there is a possiblity to create a <q>shadow DOM</p> inside DOM.\n                    Shadow DOM will be encapsulated. CSS inside shadow DOM will not affect DOM css rules,\n                    and css rules from document will not be applied to shadow DOM elements. Moreover it will not \n                    be possible to find elements inside a shadowRoot with DOM searching methods launched on \n                    <code>document</code>. To search a shadow DOM <code>shadowHost.shadowRoot.querySelectorAll...</code>\n                    needs to be used. So all DOM searching methods will have to be called from <code>shadowHost.shadowRoot</code>\n                     where shadowHost is a element hosting shadow DOM. To learn more about encapsulation and how to use shadow\n                     best way is to read about <strong>custom web components</code> - please go to references section.\n                    "},{elementType:"UnsignedList",content:["<code>let shadow = element.attachShadow({mode: 'open'/'close'})</code> to create a shadow DOM element.\n                        ","With mode open there is a possiblity to acces shadowDOM with <code>hostElement.shadowRoot</code>,\n                        when mode is closed there will be no possiblity to manipulate shadow DOM. Of course there is a way around\n                        it, but it is not straight forward."]},{elementType:"Paragraph",content:"\n                    Creating shadow DOM.\n                    "},{elementType:"Code",content:"\n<pre>\nconst someElement = document.createElement('div');\nconst shadowRoot = someElement.attachShadow({mode:'open'});\nshadowRoot.innerHTML = `&lt;style>...&lt;style>&lt;div> ... &lt;/div>`\n</pre>                    \n                    "},{elementType:"WarningNote",content:"Not every node can host a shadow root. For example an input cannot."},{elementType:"Headline-2",content:"Creating a element from a HTML string"},{elementType:"UnsignedList",content:["<code>element.innerHTML=stringWithHTML</code>","<code>element.insertAdjacentHTML('beforeend', stringWithHTML):\n                            <ul>\n                                <li>\n                                    <code>parent.insertAdjacentHTML('beforeBegin','&lt;i>&lt;/i>)</code>:\n                                    inserts a <i>i</i> element before the parent element (as adjacent sibling),\n                                </li>\n                                <li>\n                                    <code>parent.insertAdjacentHTML('afterBegin','&lt;i>&lt;/i>)</code>:\n                                    inserts a <i>i</i> element as the first child of the parent,\n                                </li>\n                                <li>\n                                    <code>parent.insertAdjacentHTML('beforeEnd','&lt;i>&lt;/i>)</code>:\n                                    inserts a <i>i</i> element as the last child of the parent,\n                                </li>\n                                <li>\n                                    <code>parent.insertAdjacentHTML('afterEnd','&lt;i>&lt;/i>)</code>:\n                                    inserts a <i>i</i> element just after the parent element (as adjacent sibling),\n                                </li>\n                            </ul>\n                            Please see an iframe example just after the code section.\n                        ","create a document fragment and append it to the DOM"]},{elementType:"Code",content:"\n<pre>\nlet elementToAdd = docuemnt.createRange().createContextualFragment(strHTML);\nhostElement.appendChild(elementToAdd)\n</pre>                    \n                    "},{elementType:"exampleInIframe",title:"insertAdjacentHTML",src:"https://gudmar.github.io/theoryCornerExamples/insertAdjacent.html",width:"500",height:"400"},{elementType:"Headline-2",content:"Document fragment"},{elementType:"Paragraph",content:"\n                    In case a part of document (a component) needs to be created and added to DOM it is good to \n                    create this document part outside DOM, and add it at once. This is due to fact, that \n                    DOM manipulation is not cheap. In this case it is good to create a <i>document fragment</i> and\n                    attach its content to DOM when finished. Document fargment is similar to DOM, the difference is\n                    it will not be visible untill not attached to DOM, and it has less manipulation methods.\n                    "},{elementType:"UnsignedList",content:["<code>DocumentFragment()</code> creates and returns a new DocumentFragment object,","<code>DocumentFragment.childElementCount</code> returns the ammount of children","<code>DocumentFragment.children</code> returns a HTMLCollection of children","<code>DocumentFragment.firstElementCHild</code> returns first child,","<code>DocumentFragment.lastElementChild</code> returns last child","<code>DocumentFragment.append(element)</code> inserts element after last document fragment child","<code>DocumentFragment.prepend(element)</code> inserts element before first document fragment child","<code>DocumentFragment.querySelector()</code> returns first node matching css selector,","<code>DocumentFragment.querySelectorAll()</code> returns a NodeList of all nodes from \n                        document fragment matching css selector","<code>DocumentFragment.replaceChildren()</code> replaces all children of the document fragment\n                        with new set of elements","<code>DocumentFragment.getElementById()</code> returns element with matched id"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"w3.org",href:"https://www.w3.org/TR/2000/WD-DOM-Level-2-HTML-20001113/html.html#ID-1689064",description:"Description of some DOM interfaces"},{elementType:"Link",content:"developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode",description:"Node abstract class description"},{elementType:"Link",content:"developers google",href:"https://developers.google.com/web/fundamentals/web-components/customelements",description:"About custom web components"}]}]};var N,E,H,M,L,D,R,F,B,U,_,W,q,z,G,V,K,$,J,X,Y,Q,Z,ee,te,ne,oe={summary:"server communication",title:"server communication",searchKeywords:"XMLHttpRequest SSE Server-Send Event WebSocket \n    HTTP HTTPS GET POST PUT HEAD DELETE TRACE OPTIONS CONNECT PATCH SSL TSL",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Server side communication"},{elementType:"Paragraph",content:"\n                    A pure front-end application might do some work, but it must be served in some way. However \n                    modern programming is cloud/web based, so there is a sort of a client side code and data \n                    is provided by a server. That is why understanding client-server side communication is necessary\n                     "},{elementType:"Paragraph",content:"\n                    It is more and more difficult to find a web page based on HTTP, as due to security reasons \n                    we got a HTTPS era. However understanding HTTP is a must, as HTTPS = HTTP + TLS or SSL, in\n                    other terms this is still HTTP, but wrapped in another protocol, Transport Layer Security (formerly\n                    known as Secure Sockets Layer). In other words HTTP is wrapped in a secure protocol at another layer.\n                    \n                     "}]},{elementType:"Article",content:[{elementType:"Headline-3",content:"HTTP overwiev"},{elementType:"UnsignedList",content:["<strong>URI</strong>: Uniform Resource Indicator. URI = URN + URL,","<strong>URL</strong>: Uniform Resource Locator, tels where a specific resource is located, does\n                    not refere to it by the name.","<storng>URN</strong>: Unifrom Resource Name, refers to the specific name of the resource, not \n                    telling mutch where to look for this resource. Example: <i>urn:isbn:0-486-27557-4</i>,","<strong>IRI</strong>: International Resource Identifier, extends URI with national languates other\n                    then English. Can be used instead of URI or URL in applications supporting IRI."]},{elementType:"Paragraph",content:"\n                        URI and URL are often used interchangebly, but they are not the same. Here we will concentrate on \n                        URL. Lets parse an example: \n                        <i><pre>http://www.some-page.pl:8080/catalog/some%20file?parameter1=value&parameter2=val2#document_fragment</pre></i>\n                    "},{elementType:"UnsignedList",content:["<code>http</code>: A protocol field. In this case the \n                    Hypertext transfer protocol, an application layer protocol (layer 7 of OSI, and layer 4 of TCP/IP model),\n                    that is used to transfer documents as text. Other protocol type in this field might be eg. ftp,","<code>www.some-page.pl</code> is domain name. This will be send to DNS server to extract IP from it,","<code>:8080</code> is a port number. As <code>www.some-page.pl</code> is a server location (like a city, street\n                        and flat number), port is a concrete application address. Application query is addressed to listens to requests\n                        on port 8080. This may be considered a certain person reachable under a city, \n                        street and number of flat address. If this is ommited in URL, it does not mean it is not present. It may be\n                        for example set by dafault. It is an important field, as a server always listens on some port,","<code>/catalog/some%20file</code> is a detailed resource location. Years ago (90s), when web pages were based on static model,\n                    this was an exact location of a html file that was to be served. \n                    In present times this is just a route. This route might be resolved by a server,\n                    but front end applications are also capable of resolving routes like this. URL accepts no spaces, so <code>%20</code> is \n                    URL encoded space symbol,","<code>?</code> is a separator, dividing URL into location section and a query section,","<code>parameter1=value</code> here we set the <code>parameter1</code> to <code>value</code>,","<code>parameter2=val</code> here some parameter <code>parameter2</code> is set to value of <code>val</code>. Both\n                    parameters are joined with a <code>&</code> separator,","Query section between <code>?</code> and <code>#</code> indicate, that URL does not point to a static html file, but\n                    to a resource route that is resolved dynamically,","<code>#document_fragment</code> is a concrete document fragmet that browser will rewind to after DOM is displayed.\n                    If someone is familiar with css selectors this may look familiar, as this is equal to a <code>[attr=id]</code> selector,","URL encoding is genius, as it is capable of encoding any data, including images."]},{elementType:"Paragraph",content:"\n                    HTTP supports a banch of request methods:\n                    "},{elementType:"UnsignedList",content:["<code>GET</code>: a method capable of only fetching data from a server,","<code>PUT</code>: update an existing resource, or create a new resource and add data to it, if\n                        resource does not exist,","<code>POST</code> creates a new resource and adds data to it. Difference between POST and PUT is,\n                        that POST is designed to always create a new resource and add data, where is PUT is designed to \n                        update data, and creates a resource if needed. So if resource exists PUT is the right method,","<code>HEAD</code> fetches only resource metadata, so no content, no body. May be used to peep if \n                        a resource is worth downloading or to allow a user to decide if it is worth downloading,","<code>DELETE</code> deletes a specified resource,","<code>CONNECT</code> is for creating a tunnel to the server identified by the target resource,","<code>OPTIONS</code> is for describing communication options for the target resource,","<code>TRACE</code> message loop-back test along the path of the target resource,","<code>PATCH</code> partial modificatoins to a resource."]},{elementType:"Headline-3",content:"Responses"},{elementType:"UnsignedList",content:["<strong>201: Created</strong>: as a response to POST or some PUT, \n                            resource was created as a result","<strong>203 Non-Authoritive Information</strong>: server got a third-party data copy. Case of 200 OK,","<strong>303 See other</strong>: server wants client to get request resource at another URI wit \n                        GET,","<strong>304 Not modified</strong>: Resource was not modified, so client should user cached version,","<strong>400 Bad request</strong>: server could not understand the request due to invalid syntax,","<strong>401 Unauthorized</strong>: Client must authenticate to get the requested response, client identity\n                        is not known to a server,","<strong>403 Forbidden</strong>: Clients identity is known to a server and client has no access rights,","<strong>404 Not found</strong>: Resource not exists. Server may chose to hide its topology by sending a \n                        403 - forbidden instead. This is most used and known code. It is good to design a custom page to \n                        display this error, and give possiblities/existing redirections there. If a static server is used, \n                        then a <code>404.html</code> page may be placed in base folder, and it will be loaded when needed,","<strong>405: Method not allowed</strong>: method is known to a server, but not allowed for the resource,\n                        for example the DELETE method may be forbidden to use on a specific resournce,","<strong>408 Request Timeout</storng> server would like to close unused connection,","<strong>409 Conflict</strong> request is in conflict with the current server state,","<strong>410 Gone</strong> resource is gone, so cached data should be removed, API should not be used anymore,","<strong>418 I'm a teapot</strong> The server refuses the attempt to brew coffee with a teapot. This is aprils fool month\n                        1998 joke :), but it really exists in standard,","<strong>429 Too many requests</stron>: client send too many requests in too short ammount of time,","<strong>451 Unavailable For legal reasons</strong>: page may be censored,","<strong>500 Internal server error</strong>: server encountered a situation it does not know how to handle","<strong>501 Not Implemented</strong>: server has no support for this method,","<strong>502 Bad Gateway</strong>: server working as a gateway got invalid response,","<strong>503 Service unavailable: </strong>: server cannot handle a request at the moment, as it is \n                         in maitenance or is overloaded. Some frilendly page should be displayed at this moment","<strong>504 Gateway Timeout</strong>: server acting as a gateway did not get a response in expected time,","<strong>508 Loop detected</strong>: Server went into an infinite loop while processing the request,","<strong>511 Network authentication required</strong>: Client needs to authenticate to gain network access,"]},{elementType:"Paragraph",content:"There are much more resopnses, and above list is just a snippet. To see all available request\n                    please go to the reference section"}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Static and dynamic"},{elementType:"Paragraph",content:"\n                        JS history started in 1996 with netscape. However before JS started becomming more popular\n                        internet pages were build as static resources. There was a folder structure, and HTML files.\n                        Pages were linked together with <code>a href</code> links. Today this approach is also \n                        possible, but pages bigger than just a one html file would not be maintainable. That is why\n                        there are other solutions. However serving static pages is still good enough for some \n                        simpler content, as JS and CSS files may be served this way. Moreover applicatoin may be \n                        build in a framework like Angular or with React and served as static files. The drwaback is \n                        however no server side, as server in this solution does not more than just serve ready files.\n                        There is no way to store data on server or exchange it between client computers. \n                        I wrote a notePad application, that can store user notes on pages, that are then grouped in \n                        sheet components. Moreover this application has a build in calendar enabling to store and manage\n                        events, and a feature allowing easy store and search user added links. Quite usable functionalities,\n                        but this is just a static page, so user data may be saved to the browser memory, or exported to a file.\n                        This data will not be synchronized even between two browsers on the same machine.</br>\n                        My notePad application uses routing system, so although it is a client site application, link in\n                        browser address bar changes when a user switches between linker, calendar and notePad. Such SPA applications\n                        are capable of parsing queries passed with URL, so it may be difficult to say if this is really only\n                        a static application.\n                    "},{elementType:"Paragraph",content:"\n                        Nowadays static servers may serve js, css and html files. They may also serve SPA. \n                        Drawback is no real server side support, as\n                        server only sends files, and does not share client data.\n                    "},{elementType:"Paragraph",content:"\n                        <strong>SPA</strong>, or a single page application is a web page quite similar to native \n                        applications. Only one HTML file is uploaded form a server, and this HTML file is modified \n                        later on with JS, so DOM may be changed entirely. You want to send a friend a link directing to a \n                        certain location is SPA? This is possible thanks to described above routing mechanism. Even \n                        http queries may be passed with URL. Does this mean SPA is a static file page? Not at all. It may be,\n                        but does not have to be. It is not efficient to download all data at once, as it will take ages and\n                        some data may be even restricted. So SPA allows user login, and lazy loading (download content only\n                        if it is needed). Mentioned Angular and React are good for creating such apps. SPA may be serverd as\n                        a static content, but may also be an application that works dynamically.\n                    "},{elementType:"Paragraph",content:"\n                        So what does dynamic server do? Sometimes it may be difficult to see this from a client perspective,\n                        as staticly served applicatoin may have lazy loaded <b>files</b> and respond to route queries. However \n                        word <i>files</i> is a key here. Dynamic server will respond to routes, and will not just serve \n                        whole files. It will serve data. So either ready HTML content, or data as for example json or XML, \n                        so client side may parse it and create some view content out of it. Server will make queries to \n                        data base, will make some calculations and send ready results, will make it possible to identify a \n                        user and send data if the user is authorized to use this data, and will store data for the user, so it is \n                        available on other machine. In other words server gets an URI and responds to it with data, not just\n                        with a static file. This is like working with an API.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"HTTPS"},{elementType:"Paragraph",content:"\n                        HTTP has a serious drawback. Lets consider user login:\n                        <i>http://some-portal.pl/login?user=johnDoe&password=myPass11</i>.\n                        After reading section about URL it is not hard to guess, that \n                        login is <i>johnDoe</i> and password is <i>myPass11</i>. So getting \n                        data passed with HTTP is not hard at all, and data passed with HTTP\n                        is not safe at all. That is why HTTP is wrapped in the TLS protocol to encript it \n                        and make things a lot more complicated. It is not important from client side what sort\n                        of communication is used. Both http and https will be handled in the same way.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Communication methods"},{elementType:"Headline-3",content:"WebSocket"},{elementType:"Paragraph",content:"\n                        Enables establishing a full-duplex connection stream between a client and a server.\n                        Ws protocol is platform independant, but in this case client is the browser. \n                        WebSocket opens a connection with a server, so communication is handled with\n                        events, making it redundant to send requests over and over again. WebSocket\n                        provides:\n                    "},{elementType:"UnsignedList",content:["Low latency in both directions,","Interoperability with HTTP,","Message oriented communication,","Event driven approach","Same origin policy enforcement","After establishing a connection with HTTP, webSocket switches to the WebSocket protocol."]},{elementType:"Paragraph",content:"\n                        Sample server side snippet:\n                    "},{elementType:"Code",content:"\n<pre>\nconst WebSocketServer = require('ws').Server\nconst wss = new WebSocketServer({ port: 8081 });\nwss.on('connection', ((ws) =&gt; {\nws.on('message', (message) =&gt; {\nconsole.log(`received: ${message}`);\n});\nws.on('end', () =&gt; {\nconsole.log('Connection terminated.');\n});\nws.send('Data from server');\n}));\n</pre>                        \n                    "},{elementType:"Paragraph",content:"\n                        And a client side snippet:\n                    "},{elementType:"Code",content:'\n<pre>\nvar ws = new WebSocket("ws://127.0.0.1:8081");\nws.onopen = function (event) {\nconsole.log(\'Connection oppened\');\nws.send("Data from client");\n};\nws.onerror = function (err) {\nconsole.log(\'error: \', err);\n}\nws.onmessage = function (event) {\nconsole.log(event.data);\n};\nws.onclose = function() {\nconsole.log("Connection closed");\n}\n</pre>                        \n                    '},{elementType:"Paragraph",content:"WebSocket browser side API description:"},{elementType:"UnsignedList",content:["<code>ws = new WebSocket(url, protocols)</code> is for establishing a connection to an\n                        <i>url</i>. <i>protocols</i> is a string or an array of strings listing sub-protocols that may \n                        be negotiated with the server. Server will pick one of those sub-protocols. Sub-protocols\n                        are custom user implemented subprotocols for exchanging eg. metadata. This field may be left \n                        empty. A <i>protocols</i> field has no effect on WebSocket protocol itself.","<code>ws.send('some data')</code> will send data to a server once a connection is established","<code>ws.readyState</code> indicates in what is the state of the web socket object. \n                        <ul>\n                            <li><strong>0: CONNECTING</strong> A socket was created, but the connection is not yet open,</li>\n                            <li><strong>1: OPEN</strong> ready to communicate,\n                            <li><strong>2: CLOSING</strong> connection is being closed,\n                            <li><strong>3: CLOSED</strong> connection is closed and could not be opened.\n                        <i>OPEN</i>\n                        </ul>","<code>ws.onopen = function(event){}</code> this is an event handler for on open event,","<code>ws.onerror = function(event){}</code> this is an event handler for an error,","<code>ws.close()</code> this <b>must</b> run on connection end,","<code>ws.onclose = function(event){}</code> is an event handler launched when connection is closed,","<code>ws.onmessage = function(event){}</code> is an evnet handler that will be run when a \n                        message occures,","<code>ws.protocol</code> is a protocol that was chosen by the server,","<code>ws.url</code> the absolute URL of the WebSocket.","<code>ws.binaryType</code> property that controls the type of binary data received,","<code>ws.bufferedAmount</code> a number of bytes of queued data,"]},{elementType:"NoteWarning",content:"\n                    Number of WebSocket connections may be limited for the whole browser up to 6 instances.\n                    "},{elementType:"Headline-3",content:"SSE or Server Send Events"},{elementType:"Paragraph",content:"\n                        An event based low latency one way connection communication technology. Allows server to update data \n                        on client side. No possibility to send data back to server. If needed other server-client \n                        communication means may be used. Hmm... Better using web-socket, as it provides \n                        bi-directional communication? Not quite, as SSE provides some unique features, like automatic reconnection,\n                        event ids and ability to send arbitrary events.\n                    "},{elementType:"Paragraph",content:"\n                        Example usege on client side:\n                    "},{elementType:"Code",content:"\n<pre>\nconst eventSource = new EventSource(\"//someApi.com/example.php\", {withCredentials: true});\neventSource.onmessage = function(event){\n    let elementToBeUpdated = document.getElementById('to-be-updated-id');\n    elementToBeUpdated.innerText = event.data;\n}\n</pre>                        \n                    "},{elementType:"Paragraph",content:"\n                        And thats it. Data will be updated in this element automatically. No need to worry about it.\n                        Below a short API descriptoin is added:\n                    "},{elementType:"UnsignedList",content:['<code>eS = new EventSource("//someAPI.com", conf) </code> is a constructor\n                        returning a SSE object. It takes and URL of our connection endpoint, and a <code>conf</code>\n                        that is an optional field being an object, and having only <code>withCredentials</code> property,\n                        that is by default set to false,\n                        ',"<code>eS.onmessage = function(event){}</code> handler for an message source event,","<code>eS.addEventListener.('customEvent', handler)</code> adds a custom event listener to\n                        an event source","<code>eS.onError = function(err)</code> an error handler,","<code>eS.close()</code> connection has to be closed by a client side if not used anymore."]},{elementType:"Headline-3",content:"XMLHttpRequest"},{elementType:"Paragraph",content:"\n                        XMLHttpRequest enables browser script data transfer with JS. It may be used to serve not \n                        only XML, but also JSON, binary and so on. XMLHttpRequest should be used asynchronously, not to \n                        block side interactions. Most simple usege would be:\n                    "},{elementType:"Code",content:"\n<pre>\nvar req = new XMLHttpRequest();\nreq.open('GET', 'http://some-example.com/', false); // false -> not async\nreq.send(null);\nif(req.status == 200)\n  dump(req.responseText);\n}\n</pre>                        \n                    "},{elementType:"Paragraph",content:"\n                        XMLHttpRequest should be used as an async function, so page is not blocked with request:\n                    "},{elementType:"Code",content:"\n<pre>\nvar req = new XMLHttpRequest();\nreq.open('GET', 'http://some-example.com/', true); // true -> an async request\nreq.onreadystatechange = function(asyncEvent) {\n    if(req.readyState == 4) {\n        if(req.status == 200) dump(req.responseText);\n        else console.error('An error with side loading occured');\n    }\n}\nreq.send(null);\n\n</pre>                        \n                    "},{elementType:"Paragraph",content:"\n                        There is a set of properties, event handlers and methods that can be used with XMLHttpRequest:\n                    "},{elementType:"UnsignedList",content:["<code>onprogress = function f(event)</code>: An event handler. Given event has properties \n                        <code>event.position</code> for\n                        indicating how much data is already downloaded, and <code>event.totalSize</code> to state\n                        how much data has to be downloaded.","<code>onerror = function f(event)</code>: for handling an error, <code>e.target.status</code>\n                        indicates a HTTP status of error,","<code>onabort</code> function that will be called if reequest is cancelled by the user,","<code>onload</code>: will be called when the request is successfully completed,","<code>onreadystatechange</code>: an event handler called whenever the readyState attribute changes,","<code>onloadend = function f(event)</code>: when load ends","<code>ontimeout = function f(event)</code>: when response does not meet time constraints","<code>overrideMimeType(newMimeType)</code>: used to force a new mime type on handled document,","<code>readyState</code>: \n                            <ul>\n                                <li><strong>0: UNSET</strong> no open() method called yet,</li>\n                                <li><strong>1: OPENED</strong> open() was called already,</li>\n                                <li><strong>2: HEADERS_RECEIVED</strong></li>\n                                <li><strong>3: LOADING</strong></li> downloading, responseText holds partial data,</li>\n                                <li><strong>4: DONE</strong></li> The operation is complete</li>\n                            <ul>\n                        ","<code>upload</code> a property returning a <code>XMLHttpRequestUpload</code> object allowing an user\n                        to monitor upload process progress. Has similar to <code>XMLHttpRequest</code> event handlers:\n                        <code>onabort</code>, <code>onerror</code>, <code>onloadend</code>, <code>onloadstart</code>,\n                        <code>onprogress</code>, <code>ontimeout</code>","<code>setRequestHeader()</code> for setting a custom HTTP request header <b>before</b> sending it,","<code>getResponseHeader()</code> for getting a response header from server,","<code>abort()</code> for aborting already opened request,"]},{elementType:"NoteWarning",content:"\n                        There is a maximum default number of XMLHttpRequest connections that may be established at the time.\n                        This is sed by default to 2, and is browser instance dependant. A user may change this, but a \n                        page developer may not. This may be altered in firefox in <code>about:config</code> in address bar\n                        and <code>network.http.max-persistent-connections-per-server</code>. In chrome it is a lot more \n                        complicated, as this will force to build a custom version of the browser form the source code.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Client-Server_overview",description:"Overwiev"},{elementType:"Link",content:"medium",href:"https://medium.com/@joekarlsson/complete-guide-to-node-client-server-communication-b156440c029",description:"Guide to client server communication"},{elementType:"Link",content:"IBM",href:"https://www.ibm.com/docs/en/cics-ts/5.3?topic=concepts-components-url",description:"The components of a URL"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/pl/docs/Web/API/XMLHttpRequest",description:"XMLHttpRequest description"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status",description:"HTTP statuses"},{elementType:"Link",content:"hpbn.co/websocket",href:"https://hpbn.co/websocket/",description:"Web-socket more detailed description"},{elementType:"Link",content:"developer Mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket",description:"API short description"}]}]};var ae={summary:"array methods",title:"array methods",searchKeywords:"array methods mutable unmutable push pop shift unshift splice slice concat forEach indexOf \n    includes find findIndex filter map sort reverse split join reduce isArray",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Array methods"},{elementType:"Paragraph",content:"\n                    "},{elementType:"NoteWarning",content:"\n                    Array indexes cannot be larger, than a number represented in 32 bit integer. If an array \n                    gets bigger, then indexes start becomming keys represented as a string\n                    "},{elementType:"UnsignedList",content:["<code>array like</code> is an object not created with an <code>Array</code> constructor, \n                        that has a non negative <code>lengtn</code> property, and some indexed properties. An\n                        array like object will be created from:\n                        <ul>\n                            <li><code>let al = {length:5}</code></li>\n                            <li><code>let al = {0: 'a', 1: 'b', 2: 'c', length:3}</code></li>\n                            <li>An object having an iterator placed under [Symbol.iterator]</li>\n                            <li>A string</li>\n                            <li>A Map object</li>\n                            <li>A Set object</li>\n                            <li>document.forms</li>\n                            <li>document.querySelectorAll('div')</li>\n                            <li>document.getElementsByTagName('body')[0].chidren</li>\n                        </ul>\n                        "]},{elementType:"ConditionalArray",headItems:["Method","Arguments","Returns","Mutating","Description"],content:[(N={},Object(x.a)(N,Symbol("title"),"Array (constructor)"),Object(x.a)(N,Symbol("code"),"\n                            \n<pre>\nlet arr1 = [1, 'string', true];\n\nlet arr2 = [];\narr2[10] = 9;\n// [,,,,,,,,,9]\n\nlet arr3 = Array(10);\n//[,,,,,,,,,,] so array with 10 empty elements\n\nlet arr4 = Array(1, 2, 3);\n//[1, 2, 3];\n\nlet arr5 = new Array(7);\n//[,,,,,,,]\n\nlet arr6 = new Array(1, 2, 3);\n//[1, 2, 3]\n\n\n</pre>                            \n                            \n                            "),Object(x.a)(N,"Method","<code>Array(size | items)</code>"),Object(x.a)(N,"Arguments","\n                                Counstructor, that is overloaded.\n                                <ul>\n                                <li>In case a single number is given <code>size</code>, an array of empty elements\n                                is returned</li>\n                                <li>In case a list of elements is given, an array containing these elements is returned</li>\n                                </ul>\n                            "),Object(x.a)(N,"Returns","A new array"),Object(x.a)(N,"Mutating","-"),Object(x.a)(N,"Description","Constructor returning a new array, a list like element"),N),(E={},Object(x.a)(E,Symbol("title"),"of"),Object(x.a)(E,Symbol("code"),"\n                            \n<pre>\n\nlet constructorExample1 = Array(5);\n// [,,,,,]\nlet constructorExample2 = Array(1, 2, 3);\n//[1, 2, 3]\nlet ofExample1 = Array.of(5);\n// [5]\nlet ofExample2 = Array.of(1, 2, 3);\n// [1, 2, 3]\n\n</pre>                            \n                            \n                            "),Object(x.a)(E,"Method","<code>of(items)</code>"),Object(x.a)(E,"Arguments","\n                            <code>items</code>: elements \n                            "),Object(x.a)(E,"Returns","A new array"),Object(x.a)(E,"Mutating","-"),Object(x.a)(E,"Description","Creates a new instance of the Array object from the given items list"),E),(H={},Object(x.a)(H,Symbol("title"),"from"),Object(x.a)(H,Symbol("code"),"\n                            \n<pre>\n\nlet arrLike1 = {length: 5};\nlet arr1 = Array.from(arrLike1);\nconsole.log(arr1);\n//[undefined, undefined, undefined, undefined, undefined]\n\nlet arrLike2 = {a: 'a', b: 'b', c: 'c', length: 3}\nlet arr2 = Array.from(arrLike2);\nconsole.log(arr2);\n//[undefined, undefined, undefined]\n\nlet arrLike3 = {0: 'a', 2: 'b', 1: 'c', length: 3}\nlet arr3 = Array.from(arrLike3);\n// ['a', 'c', 'b']\n\nlet arrLike4 = {0: 'a', 2: 'b', 1: 'c', length: 2}\nlet arr4 = Array.from(arrLike4);\n// ['a', c']\n\nlet arrLike5 = document.forms;\n\nfunction iterator(){\n    let current = 0;\n    return {\n        next: function(){\n        current++;\n        return {\n            value: current -1,\n            done: current > 4\n        }\n    }\n    }\n}\n\nlet arrLike6 = {};\narrLike6[Symbol.iterator]=iterator;\nlet arr6 = Array.from(arrLike6);\nconsole.log(arr6); \n// [0, 1, 2, 3]\n// arrLike6 becomes an arrayLike object, and becomes iterable, \n// is accessable with an Array.from and with for..of loop\n\nlet arrLike7 = document.forms;\nlet arrLike8 = document.querySelectorAll('div');\nlet arrlike9 = document.getElementsByTagName('body')[0].children\n\n\n\n</pre>                            \n                            \n                            "),Object(x.a)(H,"Method","<code>from(arrayLikeObject[, mapFunction[, thisArg]])</code>"),Object(x.a)(H,"Arguments","\n                            <ul>\n                            <li><code>arrayLikeObject</code>: elements </li>\n                            <li><code>mapFunction</code>: an <code>arrayLikeObject</code> elements \n                            transforming function, taking:<code>item</code>, <code>index</code>, <code>arr</code>,\n                            this is similar to the <code>.map</code> method of the Array</li>\n                            <li><code>thisArg</code> is an argument indicating what will be the value of <code>this</code></li>\n                            </ul>\n                            "),Object(x.a)(H,"Returns","A new array"),Object(x.a)(H,"Mutating","-"),Object(x.a)(H,"Description","Creates a new instance of the Array object from the given array like object."),H),(M={},Object(x.a)(M,Symbol("title"),"push"),Object(x.a)(M,Symbol("code"),"\n                            \n<pre>\nlet arr = [1, 2, 3];\nconsole.log(arr.push(4)); // 4\nconsole.log(arr); //[1, 2, 3, 4]\n</pre>                            \n                            \n                            "),Object(x.a)(M,"Method","<code>push(item)</code>"),Object(x.a)(M,"Arguments","item"),Object(x.a)(M,"Returns","added item"),Object(x.a)(M,"Mutating","Mutating"),Object(x.a)(M,"Description","Add a new item to the end of the array"),M),(L={},Object(x.a)(L,Symbol("title"),"pop"),Object(x.a)(L,Symbol("code"),"\n                            \n<pre>\nlet arr = [1, 2, 3];\nconsole.log(arr.pop());// 4\nconsole.log(arr); //[1, 2]\n</pre>                            \n                            \n                            "),Object(x.a)(L,"Method","<code>pop()</code>"),Object(x.a)(L,"Arguments","-"),Object(x.a)(L,"Returns","removed element"),Object(x.a)(L,"Mutating","Mutating"),Object(x.a)(L,"Description","Remove an element from the end of the array,"),L),(D={},Object(x.a)(D,Symbol("title"),"shift"),Object(x.a)(D,Symbol("code"),"\n                            \n<pre>\nlet arr = [1, 2, 3];\nconsole.log(arr.shift());// 1\nconsole.log(arr); //[2, 3]\n</pre>                            \n                            \n                            "),Object(x.a)(D,"Method","<code>shift())</code>"),Object(x.a)(D,"Arguments","-"),Object(x.a)(D,"Returns","removed element"),Object(x.a)(D,"Mutating","Mutating"),Object(x.a)(D,"Description","Remove the first element from the array"),D),(R={},Object(x.a)(R,Symbol("title"),"unshift"),Object(x.a)(R,Symbol("code"),"                    \n<pre>\nlet arr = [1, 2, 3];\nconsole.log(arr.unshift(0));// 0\nconsole.log(arr); //[0, 1, 2, 3, 4]\n</pre>                            \n                            \n                            "),Object(x.a)(R,"Method","<code>unshift()</code>"),Object(x.a)(R,"Arguments","item"),Object(x.a)(R,"Returns","added item"),Object(x.a)(R,"Mutating","Mutating"),Object(x.a)(R,"Description","Add a new item to the begining of the array"),R),(F={},Object(x.a)(F,Symbol("title"),"splice"),Object(x.a)(F,Symbol("code"),"\n                            \n<pre>\n// Delete a single element from the middle of an array:\nlet arr = [1, 2, 3, 4, 5];\nconsole.log(arr.splice(3,1));// 4\n//starting from index 0, index 3 has value 4\n// so 4 removed.\n\n// Add an element to the middle of an array:\nlet arr = [1, 2, 3, 5];\nconsole.log(arr.splice(3, 0, 4)); // []\n//Nothing removed from the array, so [] returned\nconsole.log(arr);//[1, 2, 3, 4, 5]\n\n//Adding an element far above array length\nlet arr = [1, 2, 3];\nconsole.log(arr.splice(10, 0, 1)); // []\nconsole.log(arr)\n//[1, 2, 3, 1] as there are no 10 elements in this array\n\n//Removing a not existing element\nlet arr = [1, 2, 3];\nconsole.log(arr.splice(10, 1)); // []\nconsole.log(arr)\n//[1, 2, 3] as there are no 10 elements in this array\n\n\n//Delete and add elements at the same time\nlet arr = [1, 2, 3, 4, 5];\nconsole.log(arr.splice(1, 2, 0, 0, 0));\n// [2, 3]\nconsole.log(arr);\n// [1, 0, 0, 0, 4, 5]\n\n</pre>                            \n                            \n                            "),Object(x.a)(F,"Method","<code>splice(start, nrOfDel, item...)</code>"),Object(x.a)(F,"Arguments","\n                            <ul>\n                                <li><code>start</code> index of element to start mutation of the array</li>\n                                <li><code>nrOfDel</code> nr of elements to delete starting from <code>start</code> index</li>\n                                <li><code>item..</code> items to be added after <code>start</code></li>\n                            </ul>\n                            "),Object(x.a)(F,"Returns","Array of deleted items"),Object(x.a)(F,"Mutating","Mutating"),Object(x.a)(F,"Description","Modify an array"),F),(B={},Object(x.a)(B,Symbol("title"),"slice"),Object(x.a)(B,Symbol("code"),"                    \n<pre>\nlet arr = [1,2,3,4,5];\nlet arrCopy = arr.slice(0, arr.length);\n\n//cut off first and last\nlet middle = arr.length <= 2 ? [] : arr.slice(1, arr.length-1)\n</pre>                            \n                            \n                            "),Object(x.a)(B,"Method","<code>slice(start, end)</code>"),Object(x.a)(B,"Arguments","start, end"),Object(x.a)(B,"Returns","New subarray (from start to end)"),Object(x.a)(B,"Mutating","Not mutating"),Object(x.a)(B,"Description","Returns a new subarray (from start to end)"),B),(U={},Object(x.a)(U,Symbol("title"),"concat"),Object(x.a)(U,Symbol("code"),"                    \n<pre>\nlet arr1 = [1,2,3];\nlet arr2 = [4, 5];\nlet arr3 = [6, 7];\nlet arr4 = [8];\nlet together = arr1.concat(arr2, arr3, arr4);\nconsole.log(together);\n// [1, 2, 3, 4, 5, 6, 7, 8]\n</pre>                            \n                            \n                            "),Object(x.a)(U,"Method","<code>arr1.concat(arr2, arr3...)</code>"),Object(x.a)(U,"Arguments","list of arrays"),Object(x.a)(U,"Returns","New array"),Object(x.a)(U,"Mutating","Not mutating"),Object(x.a)(U,"Description","concatenates arrays and returns a new array"),U),(_={},Object(x.a)(_,Symbol("title"),"forEach"),Object(x.a)(_,Symbol("code"),"                    \n<pre>\narr = [1, 2, 3];\narr.forEach((item, index, array)=>{\n    console.log([item, index, array]);\n})\n//[1, 0, [1,2,3]]\n//[2, 0, [1,2,3]]\n//[3, 0, [1,2,3]]\narr.forEach(()=>{console.log('dummy')})\n//dummy\n//dummy\n//dummy\n</pre>                            \n                            \n                            "),Object(x.a)(_,"Method","<code>arr.forEach(cb, thisArg)</code>"),Object(x.a)(_,"Arguments","\n                            <ul>\n                            <li><code>cb</code> a callback function taking:\n                            <ul>\n                                <li><code>item</code>: a current element</li>\n                                <li><code>index</code>: an index of current element</li>\n                                <li><code>array</code>: the whole array</li>\n                            </ul>\n                            </li>\n                            <li><code>thisArg</code>: what will be the value of <code>this</code></li>\n                            </ul>\n                            All arguments are optional\n                            "),Object(x.a)(_,"Returns","undefined"),Object(x.a)(_,"Mutating","Not mutating"),Object(x.a)(_,"Description","Runns a callback function for each element in the array."),_),(W={},Object(x.a)(W,Symbol("title"),"indexOf"),Object(x.a)(W,Symbol("code"),"                    \n<pre>\nlet arr1 = [1,2,3,4,5,6];\nconsole.log(arr1.indexOf(3));// 2;\nconsole.log(arr1.indexOf(9));//-1;\nconsole.log(arr1.indexOf(6, 3)); //5\n</pre>                            \n                            \n                            "),Object(x.a)(W,"Method","<code>arr.indexOf(item, from)</code>"),Object(x.a)(W,"Arguments","\n                            <ul>\n                                <li><code>item</code>: item to serach array for</li>\n                                <li><code>from</code>: index to start search from, optional</li>\n                            </ul>\n                            "),Object(x.a)(W,"Returns","index of found element or -1 if nothing found"),Object(x.a)(W,"Mutating","Not mutating"),Object(x.a)(W,"Description","Searches an array for a given element and returns -1 if nothing \n                            found or found element index. Uses a '===' operator."),W),(q={},Object(x.a)(q,Symbol("title"),"lastIndexOf"),Object(x.a)(q,Symbol("code"),"                    \n<pre>\nlet arr1 = [1,2,3,4,5,6];\nconsole.log(arr1.lastIndexOf(3));// 2;\nconsole.log(arr1.lastIndexOf(9));//-1;\nconsole.log(arr1.lastIndexOf(6, 3));\n// -1 as starts from 3 element from the end and in this case \n// does not find 6, as it is the first element form the end\n</pre>                            \n                            \n                            "),Object(x.a)(q,"Method","<code>arr.lastIndexOf(item, from)</code>"),Object(x.a)(q,"Arguments","\n                            <ul>\n                                <li><code>item</code>: item to serach array for</li>\n                                <li><code>from</code>: index to start search from counting from the end of the array</li>\n                            </ul>\n                            "),Object(x.a)(q,"Returns","index of found element or -1 if nothing found"),Object(x.a)(q,"Mutating","Not mutating"),Object(x.a)(q,"Description","Searches an array starting from the end for a given element and returns \n                            -1 if nothing found or found element index. Uses a '===' operator."),q),(z={},Object(x.a)(z,Symbol("title"),"includes"),Object(x.a)(z,Symbol("code"),"                    \n<pre>\nlet arr1 = [1,2,3,4,5,6];\nconsole.log(arr1.includes(3));// true;\nconsole.log(arr1.includes(9));// false;\nconsole.log(arr1.includes(6, 3)); // true;\n</pre>                            \n                            \n                            "),Object(x.a)(z,"Method","<code>arr.includes(item, from)</code>"),Object(x.a)(z,"Arguments","\n                            <ul>\n                                <li><code>item</code>: item to serach array for</li>\n                                <li><code>from</code>: index to start search from counting from the end of the array</li>\n                            </ul>\n                            "),Object(x.a)(z,"Returns","<code>true</code> if found, <code>false</code> if not."),Object(x.a)(z,"Mutating","Not mutating"),Object(x.a)(z,"Description","Searches an array starting from the end for a given element and returns \n                            -1 if nothing found or found element index. Uses a '===' operator."),z),(G={},Object(x.a)(G,Symbol("title"),"find"),Object(x.a)(G,Symbol("code"),"                    \n<pre>\nlet arr = [1,2,3,4,5,6];\nlet found = arr.find((item, index, array)=>{\n    console.log(`Searching item ${item} at ${index} of ${array.toString}`);\n    return item % 3 == 0 ? true : false;\n})\n//Searching item 1 at 0 of 1,2,3,4,5,6\n//Searching item 2 at 1 of 1,2,3,4,5,6\n//Searching item 3 at 2 of 1,2,3,4,5,6\nconsole.log(found) //3;\n</pre>                            \n                            \n                            "),Object(x.a)(G,"Method","<code>arr.find(cb[, thisArg])</code>"),Object(x.a)(G,"Arguments","\n                            <ul>\n                            <li><code>cb</code>: a callback function taking\n                            <ul>\n                                <li><code>item</code>: currently processed array item</li>\n                                <li><code>index</code>: index of currently processed item</li>\n                                <li><code>array</code>: given array</li>\n                            </ul>\n                            and returning <code>true</code> if element is found or <code>false</code>\n                            </li>\n                            <li><code>thisArg</code>: what will be the value of <code>this</code></li>\n                            </ul>\n                            "),Object(x.a)(G,"Returns","found element or <code>undefined</code> if nothing found"),Object(x.a)(G,"Mutating","Not mutating"),Object(x.a)(G,"Description","Calls a callback function on each element of the given array, and \n                            if callback returns true function stops and returns found element. If each callback\n                            execution returns false then <code>find</code> returns <code>undefined</code>"),G),(V={},Object(x.a)(V,Symbol("title"),"findIndex"),Object(x.a)(V,Symbol("code"),"                    \n<pre>\nlet arr = [1,2,3,4,5,6];\nlet found = arr.findIndex((item, index, array)=>{\n    console.log(`Searching item ${item} at ${index} of ${array.toString}`);\n    return item % 3 == 0 ? true : false;\n})\n//Searching item 1 at 0 of 1,2,3,4,5,6\n//Searching item 2 at 1 of 1,2,3,4,5,6\n//Searching item 3 at 2 of 1,2,3,4,5,6\nconsole.log(found) // 2;\n</pre>                            \n                            \n                            "),Object(x.a)(V,"Method","<code>arr.findIndex(cb[, thisArg])</code>"),Object(x.a)(V,"Arguments","\n                            <ul>\n                            <li>A callback function taking\n                            <ul>\n                                <li><code>item</code>: currently processed array item</li>\n                                <li><code>index</code>: index of currently processed item</li>\n                                <li><code>array</code>: given array</li>\n                            </ul>\n                            and returning <code>true</code> if element is found or <code>false</code>\n                            </li>\n                            <li><code>thisArg</code>: what will be the value of <code>this</code></li>\n                            </ul>\n                            "),Object(x.a)(V,"Returns","found element or -1 if nothing found"),Object(x.a)(V,"Mutating","Not mutating"),Object(x.a)(V,"Description","Calls a callback function on each element of the given array, and \n                            if callback returns true function stops and returns an index of the found element. \n                            If each callback\n                            execution returns false then <code>findIndex</code> returns <code>-1</code>"),V),(K={},Object(x.a)(K,Symbol("title"),"filter"),Object(x.a)(K,Symbol("code"),"                    \n<pre>\nlet arr = [1,2,3,4,5,6];\nlet found = arr.findIndex((item, index, array)=>{\n    console.log(`Processing item ${item} at ${index} of ${array.toString}`);\n    return item % 2 == 0 ? true : false;\n})\n//Processing item 1 at 0 of 1,2,3,4,5,6\n//Processing item 2 at 1 of 1,2,3,4,5,6\n//Processing item 3 at 2 of 1,2,3,4,5,6\n//Processing item 4 at 0 of 1,2,3,4,5,6\n//Processing item 5 at 1 of 1,2,3,4,5,6\n//Processing item 6 at 2 of 1,2,3,4,5,6\nconsole.log(found) // [2, 4, 6];\n</pre>                            \n                            \n                            "),Object(x.a)(K,"Method","<code>arr.filter(cb[, thisArg])</code>"),Object(x.a)(K,"Arguments","\n                            <ul>\n                            <li>A callback function taking\n                            <ul>\n                                <li><code>item</code>: currently processed array item</li>\n                                <li><code>index</code>: index of currently processed item</li>\n                                <li><code>array</code>: given array</li>\n                            </ul>\n                            and returning <code>true</code> if element matches or <code>false</code>\n                            </li>\n                            <li><code>thisArg</code>: what will be the value of <code>this</code></li>\n                            </ul>\n                            "),Object(x.a)(K,"Returns","Array of found elements"),Object(x.a)(K,"Mutating","Not mutating"),Object(x.a)(K,"Description","Calls a callback function for each array element. Returns an array of elements,\n                            for which the callback returned <code>true</code>"),K),($={},Object(x.a)($,Symbol("title"),"map"),Object(x.a)($,Symbol("code"),'                    \n<pre>\nlet arr = [1,2,3,4,5,6];\nlet found = arr.map((item, index, array)=>{\n    return <div>${item}</div>\n})\nconsole.log(found) \n// ["&lt;div>1&lt;/div>", "&lt;div>2&lt;/div>", "&lt;div>3&lt;/div>", \n// "&lt;div>4&lt;/div>", "&lt;div>5&lt;/div>", "&lt;div>6&lt;/div>"];\n</pre>                            \n                            \n                            '),Object(x.a)($,"Method","<code>arr.map(cb[, thisArg])</code>"),Object(x.a)($,"Arguments","\n                            <ul>\n                            <li><code>cb</code> a callback function taking:\n                            <ul>\n                                <li><code>item</code>: currently processed array item</li>\n                                <li><code>index</code>: index of currently processed item</li>\n                                <li><code>array</code>: given array</li>\n                            </ul>\n                            </li>\n                            <li><code>thisArg</code>: what will be the value of <code>this</code></li>\n                            </ul>\n                            and returning an item value for the new array\n                            "),Object(x.a)($,"Returns","Array of elements"),Object(x.a)($,"Mutating","Not mutating"),Object(x.a)($,"Description","\n                            Calls a callback function for each element of the given array and returns a new array\n                            of elements returned by the callback function.\n                            "),$),(J={},Object(x.a)(J,Symbol("title"),"sort"),Object(x.a)(J,Symbol("code"),"                    \n        <pre>\n        let arr = [3,2,5,7,3];\n        let sorted = arr.sort((a,b)=>{\n            if (a<b) return -1;\n            if (a == b) return 0;\n            return 1\n        })\n        console.log(arr);\n        //[2, 3, 3, 5, 7]\n        console.log(sorted);\n        //[2, 3, 3, 5, 7]\n        \n        </pre>                            \n                            \n                            "),Object(x.a)(J,"Method","<code>arr.sort((a, b))</code>"),Object(x.a)(J,"Arguments","\n                            A callback comparing function taking 2 elements that will be compared\n                            Callback should return:\n                            <ul>\n                                <li><code>-1</code>: if a > b</li>\n                                <li><code>0</code>: if a == b due to sorting criteria</li>\n                                <li><code>1</code>: if a < b</li>\n                            </ul>\n                            "),Object(x.a)(J,"Returns","Array of elements"),Object(x.a)(J,"Mutating","Mutating"),Object(x.a)(J,"Description","\n                            Sorts a given array, elements are compared by the callback function, the mutated, sorted array\n                            is returned.\n                            "),J),(X={},Object(x.a)(X,Symbol("title"),"reverse"),Object(x.a)(X,Symbol("code"),"                    \n        <pre>\n        let arr = [3,2,5,7,3];\n        let reversed = arr.reverse();\n        console.log(arr);\n        // [3,2,5,7,3]\n        console.log(reversed);\n        // [3,7,5,2,3]\n        console.log(Object.is(arr, reversed));\n        //true\n        \n        </pre>                            \n                            \n                            "),Object(x.a)(X,"Method","<code>arr.reverse()</code>"),Object(x.a)(X,"Arguments","-"),Object(x.a)(X,"Returns","Array of elements"),Object(x.a)(X,"Mutating","Mutating"),Object(x.a)(X,"Description","\n                            Reverses the order of the elements in given array. Mutates the array.\n                            "),X),(Y={},Object(x.a)(Y,Symbol("title"),"join"),Object(x.a)(Y,Symbol("code"),"                    \n<pre>\nlet arr = [3,2,5,7,3];\nlet joined = arr.join('=>');\nconsole.log(joined);\n// \"3=>2=>5=>7=>3\"\n</pre>                            \n                    \n                            "),Object(x.a)(Y,"Method","<code>arr.join(conjunction)</code>"),Object(x.a)(Y,"Arguments","<code>conjunction</code>: a string element that serves as a glue, is pressed between\n                            array elements"),Object(x.a)(Y,"Returns","String"),Object(x.a)(Y,"Mutating","Not mutating"),Object(x.a)(Y,"Description","\n                            Forms a string from array elements, pressing the <code>conjunction</code> between array elements.\n                            "),Y),(Q={},Object(x.a)(Q,Symbol("title"),"Array.isArray"),Object(x.a)(Q,Symbol("code"),"                    \n<pre>\nconsole.log(Array.isArray([2,3,4]));\n//true\nconsole.log(Array.isArray({a:1,b:2}));\n//false\n</pre>                            \n                    \n                            "),Object(x.a)(Q,"Method","<code>Array.isArray(arr)</code>"),Object(x.a)(Q,"Arguments","<code>arr</code>: an object/primitive that needs to be compared"),Object(x.a)(Q,"Returns","Boolean"),Object(x.a)(Q,"Mutating","Not mutating"),Object(x.a)(Q,"Description",'\n                            A static method, true if <code>arr.constructor.name==="Array"</code>\n                            '),Q),(Z={},Object(x.a)(Z,Symbol("title"),"reduce"),Object(x.a)(Z,Symbol("polifill"),"\n<pre>\n\n</pre>\n                            "),Object(x.a)(Z,Symbol("code"),"                    \n<pre>\nlet arr = [3,2,5,7,3];\nlet summ = arr.reduce((acc,element,index,arr)=>{\n    return acc + element;\n}, 0)\nconsole.log(summ / arr.length)\n\nlet average = arr.reduce((acc,element,index,arr)=>{\n    if(index < arr.length - 1){\n        return acc + element;\n    }\n    return (acc + element) / arr.length\n}, 0);\nconsole.log(average)\n</pre>                            \n                    \n                            "),Object(x.a)(Z,"Method","<code>arr.reduce(cb(acc, item[, index[, arr]])[, acc0])</code>"),Object(x.a)(Z,"Arguments","\n                            <code>cb</code>: a callback taking:\n                            <ul>\n                            <li><code>acc</code>: accumulated value, that will be passed to next cb call</li>\n                            <li><code>item</code>: currently processed array element</li>\n                            <li><code>index</code>: index of currently processed element</li>\n                            <li><code>arr</code>: whole array</li>\n                            </ul>\n                            and a <code>acc0</code> which is an accumulator initial value\n                            "),Object(x.a)(Z,"Returns","A single value"),Object(x.a)(Z,"Mutating","Not mutating"),Object(x.a)(Z,"Description","\n                            Reduces an array to a single value, defined in a callback function\n                            "),Z),(ee={},Object(x.a)(ee,Symbol("title"),"flat"),Object(x.a)(ee,Symbol("polifill"),"\n<pre>\nlet arr = [1, 2, 3, [4, 5],[[6, 7], 8], [[[9, 10]]]];\nif (!Array.prototype.flat){\n    Array.prototype.flat = function(deph){\n        let flattened = [];\n        let arr = this;\n        for (let item of this){\n            if (Array.isArray(item) && deph > 0){\n                let guts = item.flat2(deph - 1);\n                for(let gut of guts){flattened.push(gut)}\n            } else {\n                flattened.push(item)\n            }\n        }\n        return flattened\n    }\n}\nconsole.log(arr.flat(2)) //to test\n\n</pre>\n                            "),Object(x.a)(ee,Symbol("code"),"                    \n<pre>\nlet arr = [1, 2, 3, [4, 5],[[6, 7], 8], [[[9, 10]]]];\nlet flatten = arr.flat(2)\nconsole.log(flatten);\n//[1, 2, 3, 4, 5, 6, 7, 8, [9, 10]]\n\n</pre>                            \n                    \n                            "),Object(x.a)(ee,"Method","<code>arr.flat(depth)</code>"),Object(x.a)(ee,"Arguments","\n                            <code>depth</code>: a value indicating how deeply nested arrays will be flattened\n                            "),Object(x.a)(ee,"Returns","A flattened array"),Object(x.a)(ee,"Mutating","Not mutating"),Object(x.a)(ee,"Description","\n                            Takes all nested arrays and concatenates them into a single flat array\n                            "),ee),(te={},Object(x.a)(te,Symbol("title"),"every"),Object(x.a)(te,Symbol("code"),"                    \n<pre>\nlet arr = [2,4,6,8]\nlet e1 = arr.every((item)=>{\n    return item%2==true\n});//ture\nlet e2 = arr.every((item)=>{\n    if (item == 2) retrun true;\n    if (item == 4) return true;\n    if (item == 6) return true;\n    return false;\n}); //false, for 8 cb returns false\n</pre>                            \n                    \n                            "),Object(x.a)(te,"Method","<code>arr.every(cb, thisArg)</code>"),Object(x.a)(te,"Arguments","\n                            <ul>\n                            <li>\n                                <code>cb</code>: is a callback taking:\n                                <ul>\n                                    <li><code>item</code> currently processed array item,</li>\n                                    <li><code>index</code> an index of the currently processed item</li>\n                                    <li><code>arr</code> array of processed elements</li>\n                                </ul>\n                            </li>\n                            <li><code>thisArg</code>: what will be the value of <code>this</code></li>\n                            </ul>\n                            "),Object(x.a)(te,"Returns","Boolean"),Object(x.a)(te,"Mutating","Not mutating"),Object(x.a)(te,"Description","\n                            True if callback for each given array element returns <code>true</code>\n                            "),te),(ne={},Object(x.a)(ne,Symbol("title"),"some"),Object(x.a)(ne,Symbol("code"),"                    \n<pre>\nlet arr = [2,4,6,8]\nlet e1 = arr.some((item)=>{\n    return item%3==true\n});//ture\nlet e2 = arr.some((item)=>{\n    return item%5 == true;\n}); //false, none of items in array evaluates to true;\n</pre>                            \n                    \n                            "),Object(x.a)(ne,"Method","<code>arr.some(cb, thisArg)</code>"),Object(x.a)(ne,"Arguments","\n                            <ul>\n                            <li>\n                                <code>cb</code>is a callback taking:\n                                <ul>\n                                    <li><code>item</code> currently processed array item,</li>\n                                    <li><code>index</code> an index of the currently processed item</li>\n                                    <li><code>arr</code> array of processed elements</li>\n                                </ul>\n                            </li>\n                            <li><code>thisArg</code>: what will be the value of <code>this</code></li>\n                            </ul>\n                            "),Object(x.a)(ne,"Returns","Boolean"),Object(x.a)(ne,"Mutating","Not mutating"),Object(x.a)(ne,"Description","\n                            True if callback for at least one given array element returns <code>true</code>\n                            "),ne)]},{elementType:"Paragraph",content:"\n                    There is a set of methods that can be used with a <code>&lt;form&gt;</code> element:\n                    "},{elementType:"Code",content:"\n<pre>\n</pre>                        \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Methods"},{elementType:"Paragraph",content:"\n\n                    "}]}]};var ie={summary:"data types",title:"data types",searchKeywords:"\n        object array set map null undefined boolean number BigInt string symbol basic types variable well-known symbols\n        ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Data types, mutability"},{elementType:"Paragraph",content:"\n                    There are 7 primitive data types in JS: <code>null</code>, <code>undefined</code>,\n                    <code>boolean</code>, <code>number</code>, <code>string</code>, <code>symbol</code>,\n                    <code>BigInt</code>. A primitive value is unmutable, so it cannot be changed. Instead an\n                    expression <code>someVariable = 'new value'</code> does not modify a variable. It instead\n                    creates a new variable with a new value in a new place in memory, and puts it into a \n                    <code>someVariable</code> container. So <code>someVariable</code> points to a different\n                    place in memory after this operation.<br>\n                    The only other data type in JS is an <code>object</code>. All types like an <code>Array</code>, a\n                    <code>Set</code>, a <code>Map</code>, a <code>Function</code>, a <code>Date</code> and so on are\n                    <code>typeof(...) -> \"object\"</code>.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline",content:"Primitive data types"},{elementType:"UnsignedList",content:['<code>null</code> has only one value, that is <code>null</code>. It represents an intentional absence\n                        of any object value. It is treated as <strong>falsy</strong><br>\n                        <a href ="#nullUseCases" class="btn btn-primary m-3" data-bs-toggle="collapse" data-bs-target="#nullUseCases">\n                            Difference from undefined\n                        </a>\n                        <div id="nullUseCases" class="collapse m-3">\n                            <ul>\n                                <li><code>typeof null</code> "object", not "null" as every object derives from null,</li>\n                                <li><code>typeof undefined</code> "undefined",</li>\n                                <li><code>null === undefined</code> false</li>\n                                <li><code>null == undefined</code> true</li>\n                                <li><code>null === null</code> true</li>\n                                <li><code>null == null</code> true</li>\n                                <li><code>!null</code> true</li>\n                                <li><code>isNaN(1 + null)</code> false</li>\n                                <li><code>isNaN(1 + undefined</code> true</li>\n                            </ul>\n                        </div>\n                        ',"\n                        <code>undefined</code> is automaticlly assigned to variables that have just been declared but not\n                        defined. Undefined is not writable, enumerable or configurable. However, it may be used as a variable name,\n                        in this case it gets overwritten. Nevertheless overwriting undefined seems a very bad idea and should be\n                        never done. Undefined should be compared with a <i>strict equality</i> operator <code>===</code>. \n                        In case an object key does not exist its returned value will be undefined. <strong>It is better to use </storng>\n                        <code>typeof x === 'undefined'</code> in stead of <code>x === undefined</code> to avoid an error if x id not declaired.\n                        ",'<code>boolean</code>: has only two values: <code>true</code> or <code>false</code><br>\n                        <a href ="#booleanUseCases" class="btn btn-primary m-3" data-bs-toggle="collapse" data-bs-target="#booleanUseCases">\n                            Boolean detailes\n                        </a>\n                        <div id="booleanUseCases" class="collapse m-3">\n                            <ul>\n                                <li><code>let x = false</code> declaration and definition of a boolean primitive</li>\n                                <li><code>let y = new Boolean(false)</code> creates a new <code>typeof y == \'object\'</code>,\n                                    so in this case it is <strong>not a primitive</strong>. So \n                                    <code>y === true</code>, despite it was constructed with a false value. <code>y</code>\n                                    is a not empty object, and not empty objects are evaluated to true.\n                                </li>\n                                <li><code>let z = Boolean(false)</code> does not create an object anymore, \n                                as it is a call of the function, not a constructor. \n                                It casts value a given as an argument to a boolean primitive value,\n                                    so <code>z != y</code>, <code>z === false</code>\n                                </li>\n                                <li><code>Boolean(undefined)==false</code></li>\n                                <li><code>Boolean(null)==false </code></li>\n                                <li><code>Boolean(\'\')==false </code></li>\n                                <li><code>Boolean(0)==false </code></li>\n                                <li><code>Boolean({})==true </code></li>\n                                <li><code>Boolean([])==true </code></li>\n                                <li><code>!!(false)</code> does the same as <code>Boolean(false)</code>, it casts an\n                                expression to a boolean primitive</li>\n                            </ul>\n                        </div>\n                        ','<code>number</code>: is a double-precision 64-bit binary format value, that is in range \n                        <code>Number.MIN_SAFE_INTEGER</code> to <code>Number.MAX_SAFE_INTEGER</code>, so (2^52-1) to\n                        (2^53+1). There are <code>Number.MAX_VALUE</code> and <code>Number.MIN_VALUE</code>\n                        values that are in the range of approximately (5e-324) to (1.79e+308), but it is not safe to use \n                        those values, as they are a double-precision floating point approximation of the value<br>\n                        There is an <code>Infinity</code>, a global property for representing numbers greater ths number max\n                        values.<br>\n                        <a href ="#numberUseCases" class="btn btn-primary m-3" data-bs-toggle="collapse" data-bs-target="#numberUseCases">\n                            Number detailes\n                        </a>\n                        <div id="numberUseCases" class="collapse m-3">\n                            <ul>\n                                <li><code>Number.MAX_VALUE</code> property representing the largest possible numeric value\n                                    in JS (about 1.8e+308). Every value greater that this will be an <code>Infinity</code>\n                                    This is an unsafe range, as any number greater than <code>Number.MAX_SAFE_INTEGER</code>\n                                    will be approximated,\n                                </li>\n                                <li><code>Number.MIN_VALUE</code> property representing the smallest possible numeric value\n                                    in JS (about 5e-324), in other words this value is the <b>closest to 0</b> value,\n                                </li>\n                                <li><code>Number.MIN_SAFE_INTEGER</code> (-(2^53 - 1)). Any number smaller than this will\n                                    be an approximation,\n                                </li>\n                                <li><code>Number.MAX_SAFE_INTEGER</code>(2^53 + 1). Any number greater than this will\n                                    be an approximation,\n                                </li>\n                                <li><code>Infinity</code> A global object property. Is the same as <code>Number.POSITIVE_INFINITY</code></li>\n                                <li><code>Number.POSITIVE_INFINITY</code> The same as an <code>Infinity</code>\n                                    <ul>\n                                        <li><code>POSITIVE_INFINITY * POSITIVE_INFINITY == POSITIVE_INFINITY</code></li>\n                                        <li><code>NEGATIVE_INFINITY * POSITIVE_INFINITY == NEGATIVE_INFINITY</code></li>\n                                        <li><code> anyPositiveNumber / POSITIVE_INFINITY == +0</code></li>\n                                        <li><code> anyNegativeNumber / POSITIVE_INFINITY == -0</code></li>\n                                        <li><code> 0 * POSITIVE_INFINITY == NaN</code></li>\n                                        <li><code> NaN * POSITIVE_INFINITY == NaN</code></li>\n                                        <li><code>POSITIVE_INFINITY / anyNegativeNumber == NEGATIVE_INFINITY</code></li>\n                                        <li><code>POSITIVE_INFINITY / anyPositiveNumber == POSITIVE_INFINITY</code></li>\n                                        <li><code>POSITIVE_INFINITY / POSITIVE_INFINITY == NaN</code></li>\n                                        <li><code>POSITIVE_INFINITY / NEGATIVE_INFINITY == NaN</code></li>\n                                    </ul>\n                                </li>\n                                <li><code>Number.NEGATIVE_INFINITY</code> The same as a <code>-Infinity</code>\n                                    <ul>\n                                        <li><code>NEGATIVE_INFINITY * NEGATIVE_INFINITY == POSITIVE_INFINITY</code></li>\n                                        <li><code>NEGATIVE_INFINITY * anyNegativeNumber == POSITIVE_INFINITY</code></li>\n                                        <li><code>NEGATIVE_INFINITY * POSITIVE_INFINITY == NEGATIVE_INFINITY</code></li>\n                                        <li><code> anyPositiveNumber / NEGATIVE_INFINITY == -0</code></li>\n                                        <li><code> anyNegativeNumber / NEGATIVE_INFINITY == +0</code></li>\n                                        <li><code> 0 * NEGATIVE_INFINITY == NaN</code></li>\n                                        <li><code> NaN * NEGATIVE_INFINITY == NaN</code></li>\n                                        <li><code>NEGATIVE_INFINITY / anyNegativeNumebr == POSITIVE_INFINITY</code></li>\n                                        <li><code>NEGATIVE_INFINITY / anyPositiveNumebr == NEGATIVE_INFINITY</code></li>\n                                        <li><code>NEGATIVE_INFINITY / POSITIVE_INFINITY == NaN</code></li>\n                                        <li><code>NEGATIVE_INFINITY / NEGATIVE_INFINITY == NaN</code></li>\n                                    </ul>\n                                </li>                                \n                                <li><code>isFinite(x)</code> is better that <code>if (x < Infinite)</code></li>\n                                <li><code>+0 === -0</code> is true, hovewer <code> 4 / +0</code> is Infinity, and\n                                <code> 4 / -0</code> is -Infinity.</li>\n                                <li><code>Number.isSafeInteger()</code> indicates if a number given as an argument is \n                                    a safe integer\n                                </li>\n                                <li><code>isNaN()</code> indicates if the value passed as an argument is a number</li>\n                                <li><code>NaN</code> a global property representing a not a number</li>\n                            </ul>\n                        </div>\n                        ','<code>BigInt</code> is a type for representing values larger than <code>Number.MAX_SAFE_INTEGER</code>\n                        and smaller than <code>Number.MIN_SAFE_INTEGER</code>. They are said not go be bounded, but in practice\n                        they can be overflowed. BigInt numbers have an <i>n</i> at the end, so <code>let a = 1n</code> defines a\n                        BigInt variable.<br>\n                        <a href ="#bigIntUseCases" class="btn btn-primary m-3" data-bs-toggle="collapse" data-bs-target="#bigIntUseCases">\n                            BigInt detailes\n                        </a>\n                        <div id="bigIntUseCases" class="collapse m-3">\n                            <ul>\n                                <li><code>2n == 2 is true</code> BitInts can be compared with numbers, and give proper results,</li>\n                                <li><code>[4n, 6n, 10, 0, 0n].sort() == [0, 0n, 4n, 6n, 10]</code> so BigInts can be sorted together with\n                                numbers</li>\n                                <li><code>typeof 1n == \'bigint\', typeof BigInt(1) == \'bigint\'</code></li>\n                                <li><code>let a = new BigInt(1)</code><strong>!!!</strong> this is not a primitive anymore,\n                                so <code>typeof a == \'object\'</code></li>\n                                <li>BigInt primitives, objects and mixed BigInt primitives with objects \n                                may be used with operators +, -, /, *, **, %. \n                                Only one-argument + is not supported,</li>\n                                <li>BigInts and plane numbers cannot be added, subtracted, divided or multiplied,</li>\n                                <li><code>5n / 2n == 2n</code> no fractions here</li>\n                                <li>Cannot be used in JSON.stringify, unless a toJSON method is added to the BigInt prototype</li>\n                            </ul>\n                        </div>','\n                        <code>string</code> is a type for representing textual data in a set of 16-bit unsigned integer values.\n                        Please refer to the <a href="./#/theory/string%20methods">string</a> section for more information.\n                        ',"\n                        <code>symbol</code> is a type a specially designed to serve as a key for the object, as objects keys in JS\n                        may only be of a type string or symbol.<br>\n                        "]},{elementType:"NoteWarning",content:"\n                        Beware of creating primitives as objects: <code>new Boolean()</code>, <code>new Number()</code>,\n                        as this is not a primitive anymore and will cause problems.\n                    "},{elementType:"NoteWarning",content:'\n                        <code>Number.prototype.toString([redix])</code>, where radix is a number from 2 to 36.\n                        Shadows the <code>Object.prototype.toString</code> method. This method converts a number to the \n                        string representation of the object in the specified radix:</br>\n                        <code>let a = 5; a.toString(2) == "101";</code>\n                    '},{elementType:"NoteWarning",content:"\n                        Oposite to <code>Number.prototype.toString([redix])</code> would be \n                        <code>Number.parseInt(str, radix)</code> converting a string to a number with\n                        given radix.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-3",content:"Symbols"},{elementType:"Paragraph",content:"As symbols serve as keys for objects, they are a sort of a bridge between \n                    primitives and objects when talking about \n                    JS types. Of course symbols are primitives, but they purpose is to serve as a part of an object,\n                    so it is difficult not to mention objects in this section.<br> "},{elementType:"Paragraph",content:"\n                    Keys described by symbols are not plane keys, as they don't \n                    show up with <code>Object.getOwnPropertyNames()</code>, <code>Object.keys()</code> or \n                    <code>for(let key in someObject) </code>. So how to use symbols with objects?\n                    With a <strong>computed property name</strong> syntax, that allows one to get to an object value, \n                    with a key taken from a variable:\n                    "},{elementType:"Code",content:"\n<pre>\nEx 1:\nlet s1 = Symbol('someSymbol');\nlet s2 = Symbol('someSymbol');\nlet obj = {\n    aProp: 'abc',\n    bProp: 'cde',\n    [Symbol('c')]: 'efg',\n    [s1]:'hij'\n}\n\nconsole.log(Object.keys(obj));\n// ['aProp','bProp']\nconsole.log(Object.getOwnPropertyNames(obj));\n// ['aProp','bProp']\nfor(let i in obj){\n    console.log(i);\n}\n//aProp\n//bProp\nconsole.log(Object.getOwnPropertySymbols(obj));\n//[Symbol(c), Symbol(someSymbol)]\n</pre>                    \n                    "},{elementType:"Headline-3",content:"Symbol features"},{elementType:"Paragraph",content:"So now it is known how to access object symbol keyed properties, and it is known, that\n                    they are hidden if accessed in most common way. But what exactly are symbols and why to use them?"},{elementType:"Code",content:"\n<pre>\nEx 1:\nlet s1 = Symbol('someSymbol');\nlet s2 = Symbol('someSymbol');\n// s1 != s2\n\nEx2:\nalert(s1);\n// TypeError cannot conver a Symbol to a string,\nalert(s1.toString());\n// OK, displayes 'Symbol('someSymbol');\nalert(s1.description);\n// Ok, displayes 'someSymbol'\n\nEx3:\nlet s3 = Symbol(); \n//description argument optional\n\nEx4:\nlet s4 = Symbol('abc');\nconsole.log(Symbol.for('abc')); // will return a Symbol('abc') not as a string\nlet s5 = Symbol.for('cde'); // there is no such symbol, so a new one will be created and returned,\n\nEx5:\nlet globSym = Symbol.for('fgh');\nconsole.log(Symbol.keyFor(globSym)); // this will print 'fgh'\n</pre>                     \n                    "},{elementType:"UnsignedList",content:["(Ex1) Symbols are guaranteed to be unique,","(Ex2) Symbols are not by default converted to a string,","(Ex3) Description, the only argument, is optional, so in this case code will also work.\n                        A description optional field is only for debugging purposes,","(Ex4) <code>Symbol.for(key)</code> returns a symbol for the specified key or \n                        creates a new symbol and returnes it in case symbol does not exist,","(Ex5) <code>Symbol.keyFor(Symbol('keyToReturn'))</code> returns a shared symbol key from the \n                        global registry","There is a global symbol registry","There is a term <i>well-known-symbols</i> in JS, and these are keys, where we can put \n                        our own values/functions to overwritte a default object behaviour."]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Well-known symbols"},{elementType:"Paragraph",content:"As mentioned, well-known symbols allow defining or redefining of some custom\n                    defined object behavoiurs. This is for inheritance purposes, not for redefinition of \n                    existing object's behavour.\n                    "},{elementType:"Headline-3",content:"@@iterator"},{elementType:"Paragraph",content:"An iterator is a function knowing how to get to next collection item, and knowing when\n                    whole collection is already iterated through. An iterator function returns a <code>next()</code>\n                    function, that returns an object having a <code>value</code> property, keeping a next item of the\n                    collection, and a <code>done</code> property that equals to <code>fasle</code> if there are still\n                    more elements in the collection, or <code>true</code> if there are no more elements in the collection.\n                    In case of <code>done == false</code> a value field may not exist.\n                    "},{elementType:"Paragraph",content:"An object is iterable, if it has an iterator function under its <code>Symbol.iterator</code>\n                    property. Such object is capable of:\n                    "},{elementType:"UnsignedList",content:["Being used in a <code>for..of iterabelObj</code> loop,","An array may be created with a spread operator <code>[...iterableObj]</code>,","An array of elements may be created using <code>Array.from(iterableObj)</code>","In promise static methods <code>Promise.all(iterableObj)</code>, <code>Promise.race(iterableObj)</code>"]},{elementType:"Code",content:"\n<pre>\nfunction someIterator() {\n    let n = 0;\n    return {\n      next: function() {\n        n += 10;\n        return n > 100?{done:true}:{value:n, done:false};\n      }\n    };\n  }\n  let a = {};\n  a[Symbol.iterator] = someIterator;\n  //now this will work\n  for(let i of a ) {console.log(i)}\n</pre>                    \n                    "},{elementType:"Headline-3",content:"@@hasInstance"},{elementType:"Paragraph",content:"Can be used to customise an <code>instanceof</code> operator work:\n                    "},{elementType:"Code",content:"\n<pre>\n    class SomeNewType{\n        static [Symbol.hasInstance](obj){\n            return true\n        }\n    }\n    //now every existing instance of any object \n    //will be also an instance of SomeNewType\n    let arr = [2, 3];\n    arr instanceof Array; //true;\n    arr instanceof Object; // true;\n    arr instanceof SomeNewType; //true;\n</pre>                    \n                    "},{elementType:"Headline-3",content:"@@toPrimitive"},{elementType:"Paragraph",content:"If custom object [symbol.toPrimitive] holds a function returning a primitive, then \n                    this object may be used with operators like <code>+</code>, <code>-</code>, <code>==</code>.\n                    There is a <code>hint</code> property taking a suggested primitive type that object should be \n                    converted into\n                    "},{elementType:"Code",content:"\n<pre>                    \nfunction myToPrimitive(hint){\n    if (hint=='number') return 44;\n    if (hint=='string') return '44';\n    else return this.toString();\n}\nlet arr = [2, 3];\narr[Symbol.toPrimitive] = myToPrimitive;\n//now this is possible:\nlet c = arr + 5;\n</pre>\n                    "}]},{elementType:"Headline-3",content:"@@toStringTag"},{elementType:"Paragraph",content:"\n                    A <code>.toString</code> method is capable of turning arrays, numbers, booleans or dates into \n                    strings. However if a generic object is concerned, <code>{}.toString()</code> would return a \n                    <code>[object Object]</code>. If there is a need of customizing this returned tag, a <code>\n                    @@toStringTag</code> is a good key to set this custom tag. This may be needed only to work with backward\n                    compatibility. Should not be used in the present code.\n                    "},{elementType:"Code",content:'\n<pre>\nlet obj = {};\nconsole.log(obj.toString());// [Object object]\nobj[Symbol.toStringTag] = "someTag";\nconsole.log(obj.toString());// [Object someTag]\n</pre>                        \n                    '},{elementType:"Headline-3",content:"@@species"},{elementType:"Paragraph",content:"\n                    Some methods, like <code>.map()</code> belonging to Array return a object.\n                    In case of Array, object returned by the <code>.map()</code> method is Array. If there is \n                    a class <code>SomeArray</code> derived from an <code>Array</code> class, then a <code>.map()</code>\n                    would return a object of the type <code>SomeArray</code>. If there was a necessity to get an \n                    <code>Array</code> object with <code>someArrayInstence.map()</code>, the <code>SomeArray[Symbol.species]</code>\n                    would have to be set to an <code>Array</code> function. So <code>Symbol.species</code> should be used to\n                    specify a property, whose value is a constructor function used to create derived objects.\n                    \n                    "},{elementType:"Headline-3",content:"@@match, @@replace, @@serach, @@split"},{elementType:"Paragraph",content:"\n                    String prototype has methods <code>match</code>, <code>replace</code>, <code>search</code>,\n                    <code>split</code> to test a string against a regular expression. These methods may be redefined\n                    to accept values other than a <code>RegExp</code>, and <code>@@match</code>, <code>@@replace</code>,\n                    <code>@@serach</code>, <code>@@split</code> well-known symbols are keys where new functions should \n                    be placed.\n                    "},{elementType:"Paragraph",content:"\n                    If there is a necessity to create a custom class using methods \n                    <code>match</code>, <code>replace</code>, <code>search</code>,\n                    <code>@@match</code>, <code>@@replace</code>,\n                    <code>@@serach</code>, <code>@@split</code> would be a perfect place to put them.\n                    "},{elementType:"Headline-3",content:"@@isConcatSpreadable"},{elementType:"Code",content:"\n<pre>\nlet a1 = [1, 2, 3];\nlet a2 = [4, 5, 6];\nlet a3 = [7, 8, 9];\na3[Symbol.isConcatSpreadable] = false;\nlet a12 = a1.concat(a2); // [1, 2, 3, 4, 5, 6]\nlet a13 = a1.concat(a2, a3);\n//[1, 2, 3, 4, 5, 6, [7, 8, 9]]\n\n</pre>                    \n                    "},{elementType:"Paragraph",content:"\n                        If <code>@@isContentSpreadable</code> if false, then a target array is not spread \n                        in concatenation process. It stayes in the new array as an individual array.\n                    "},{elementType:"Headline-3",content:"@@unscopables"},{elementType:"Paragraph",content:"\n                    An object valuated property defined for an <code>Array</code> in ES2015. It\n                    determines what methods will be allowed to be used in a <code>with</code> binding \n                    block. As <code>unscopables</code> is defined for a whole object, value added under this key is an\n                    object:\n                    "},{elementType:"Code",content:"\n<pre>\nclass someArray extends Array{\n    constructor(){super();}\n    static get [Symbol.unscopables]() {\n        return {\n            concat: false,  //default\n            entries: true   // default\n        }\n    }\n};\nlet a = new someArray(1, 2, 3);\nwith (a){\n    concat(3); // ok\n    entries; // nok, unscoped\n}\n</pre>                    \n                    "},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",description:"null"},{elementType:"Link",content:"dmitripavlutin.com",href:"https://dmitripavlutin.com/detailed-overview-of-well-known-symbols/",description:"well-known symbols introduction with examples"}]}]};console.error("@@species from https://dmitripavlutin.com/detailed-overview-of-well-known-symbols/");var re,se,ce,le,de,pe,me,he,ue,be,ge,fe,ye,ve,we,xe,je,Te,Oe,Se,ke,Ce,Ae,Ie,Pe=n(6),Ne=[{elementType:"Headline-3",content:"comparison operators"},{elementType:"Paragraph",content:"\n            comparison operators evaluate the left and the right operand expression, compares them and \n            returns the result. The operands of the non strict comparisons (<code>==</code>, <code>!=</code>) \n            that are not of the same type are converted to the same type, usually numeric. \n        "},{elementType:"SmallHeadline",content:"Avoid non strict comparisons: <code>==</code>, <code>!=</code>"},{elementType:"Paragraph",content:"\n            The algorithm:\n        "},{elementType:"UnsignedList",content:["If both operands are of the same type, compare with strict algorithm","Undefined and null are considered equal,","If string and a number, convert to string,","If non-boolean and boolean, convert the boolean to a number and start the procedure again,","If an object is compared with a number or a string, convert the object to a primitive","If both are strings, then this is already covered, operands are of the same type and \n            are compared with a strict algorithm","If none of above, then operands are not equal"]},{elementType:"Paragraph",content:"\n            Problems:\n        "},{elementType:"UnsignedList",content:["<code>2 == true is false</code> as true is converted to 1,","<code>'2' == true is false</code>","<code>'\n\t123\r ' == 123 is true</code> and this may not be ok","<code>{} == '[object Object]' is true</code>","<code>[] == 0 is true</code>","<code>['12'] == 12 is true</code>","<code>new String('') == new String('') is false</code>","<code>NaN == NaN is false</code>, isNaN() should be used"]},{elementType:"Paragraph",content:"\n            Instead of a non strict comparison use:\n        "},{elementType:"Paragraph",content:'\n        <table class = "table">\n        <thead><tr><th>Do not use</th><th>Use</th></tr></thead>\n        <tbody>\n            <tr>\n                <td><code>if (x != null)</code></td>\n                <td><code>if (x)</code> or <code>if (x !== undefined && x != null)</code></td>\n            </tr>\n            <tr>\n                <td><code>if (x == 123)</code></td>\n                <td><code>if (Number(x) === 123)</code></td>\n            </tr>\n            <tr>\n                <td><code>isNaN == isNaN</code></td>\n                <td><code>isNaN()</code></td>\n            </tr>\n        </tbody>\n        </table>\n        '},{elementType:"ConditionalArray",headItems:["Operator","Name","Usage","Description"],content:[(re={},Object(x.a)(re,Symbol("title"),"=="),Object(x.a)(re,Symbol("code"),"\n                \n<pre>\nnull == undefined; // true\n3 == true; // false; as boolean is converted to a number,\n1 == true; // true;\n0 == false; // true;\n\n'' == false; // true;\n'1' == true; // true;\n'2' == true; // false, as true is converted to 1,\n'some string' == true // false, as true is converted to 1,\n({} == '[object Object]') // true, as object is converted to a \n// primitive using a <b>@@toStringTag</b> well known symbol\n</pre>                            \n                \n                "),Object(x.a)(re,"Operator","<code>==</code>"),Object(x.a)(re,"Name","Equal"),Object(x.a)(re,"Usage","g() == f()"),Object(x.a)(re,"Description","true if both operands are equal, if the operands are of a different type try to\n                convert them to the same type: the number type is preferred, objects are converted to \n                primitives. <strong>Use strict operator instead</strong>"),re),(se={},Object(x.a)(se,Symbol("title"),"!="),Object(x.a)(se,Symbol("code"),"\n                \n<pre>\nnull != undefined; // false\n3 != true; // true; as boolean is converted to a number,\n1 != true; // false;\n0 != false; // false;\n\n'' != false; // false;\n'1' != true; // false;\n'2' != true; // true, as true is converted to 1,\n'some string' != true // true, as true is converted to 1,\n({} != '[object Object]') // false, as object is converted to a \n// primitive using a <b>@@toStringTag</b> well known symbol\n</pre>                            \n                \n                "),Object(x.a)(se,"Operator","<code>!=</code>"),Object(x.a)(se,"Name","Equal"),Object(x.a)(se,"Usage","g() == f()"),Object(x.a)(se,"Description","true if both operands are not equal, if the operands are of a different type try to\n                convert them to the same type: the number type is preferred, objects are converted to \n                primitives. <strong>Use strict operator instead</strict>"),se),(ce={},Object(x.a)(ce,Symbol("title"),"==="),Object(x.a)(ce,Symbol("code"),"\n                \n<pre>\nNaN === NaN; // false !!\n// isNaN() should be used\n\n+0 === -0; // true;\n\n2 === 2; // true;\n2 === 1; // false;\n2 === '2' // false;\n'some caption' === 'some caption' // true;\n'some caption' === 'some caption ' // false; additional space at the end\nnull === undefined // false\n\nlet obj1 = {a:1, b:2};\nlet obj2 = {a:1, b:2};\nlet obj3 = obj1;\nobj1 === obj2; // false; the keys and values are the same,\n// the type is the same, but obj1 and obj2 refer to different\n// places in memory, these objects are not the same\nobj1 === obj3; // true; as obj3 was assigned the value obj1 is pointing to\n// so obj1 and obj3 are the same objects\n</pre>                            \n                \n                "),Object(x.a)(ce,"Operator","<code>===</code>"),Object(x.a)(ce,"Name","Strict equal"),Object(x.a)(ce,"Usage","g() === f()"),Object(x.a)(ce,"Description","Returns true, if both operands are of the same type and have the same value.\n                If objects compared, then it is compared if both variables point to the same object."),ce),(le={},Object(x.a)(le,Symbol("title"),"!=="),Object(x.a)(le,Symbol("code"),"\n                \n<pre>\n2 !== 2; // false;\n2 !== 1; // true;\n2 !== '2' // true;\n'some caption' !== 'some caption' // false;\n'some caption' !== 'some caption ' // true; additional space at the end\nnull !== undefined // true\n\nlet obj1 = {a:1, b:2};\nlet obj2 = {a:1, b:2};\nlet obj3 = obj1;\nobj1 !== obj2; // true; the keys and values are the same,\n// the type is the same, but obj1 and obj2 refere to different\n// places in memory, these objects are not the same\nobj1 !== obj3; // false; as obj3 was assigned the value obj1 is pointing to\n// so obj1 and obj3 are the same objects\n</pre>                            \n        \n                "),Object(x.a)(le,"Operator","<code>!==</code>"),Object(x.a)(le,"Name","Strict equal"),Object(x.a)(le,"Usage","g() !== f()"),Object(x.a)(le,"Description","Returns true, if both operands are not of the same type or have different value.\n                If objects compared, then it is compared if both variables point to the same object."),le),(de={},Object(x.a)(de,Symbol("title"),">"),Object(x.a)(de,Symbol("code"),"\n            <ul>\n                <li>Convert objects to primitives</li>\n                <li>Strings should be compared with the lexicographical comparison of 16-bit code units</li>\n                <li>Try to convert both operands to numbers</li>\n                <li>Symbols cannot be compared, as they are not convertible to a number</li>\n            </ul>\n                                        \n<pre>\n\n3 > 2; //true;\n[3] > [2]; // true;\n({a:2}>{a:1}); // false\n({a:2}<{a:1}); // false\n'3' > 2; // true\n'2' > 3; // false\n'a' > 'b'; // false;\n'b' > 'a'; // true;\n'bcd' > 'abc'; // true;\n'b' > '1'; // true;\n'b' > 1; // false as b is not convertible to a number\n'b' < 1; // false as b is not convertible to a number\n\nBigInts\n3n > 2n; // true;\n3n > 2; // true;\n3 > 2n; // true;\n\nUndefined\nundefined > 3; // false;\n3 > undefined; // false;\n\nNull\n3 > null; // true\ntrue > null; // true;\nnull < 'some str'; // false as not comparable\nnull > 'some str'; // false\n\nBoolean\ntrue > false; // true\ntrue > 0; // true\ntrue > '0'; // true\ntrue > 'a'; // false\ntrue < 'a'; // false, as 'a' cannot be converted to a number\n\nNaN\nNaN > 3; // false\n3 > NaN; // false\n</pre>                            \n        \n                "),Object(x.a)(de,"Operator","<code>></code>"),Object(x.a)(de,"Name","Greater than"),Object(x.a)(de,"Usage","g() > f()"),Object(x.a)(de,"Description","Returns true, left operand is greater than the right one."),de),(pe={},Object(x.a)(pe,Symbol("title"),"<"),Object(x.a)(pe,Symbol("code"),"\n            <ul>\n                <li>Convert objects to primitives</li>\n                <li>Strings should be compared with the lexicographical comparison of 16-bit code units</li>\n                <li>Try to convert both operands to numbers</li>\n                <li>Symbols cannot be compared, as they are not convertible to a number</li>\n            </ul>\n                                        \n<pre>\n2 < 3; //true;\n[1] < [2]; // true;\n({a:2}<{a:1}); // false\n({a:2}>{a:1}); // false\n'1' < 2; // true\n'2' < 1; // false\n'a' < 'b'; // false;\n'b' < 'a'; // true;\n'bcd' < 'xyz'; // true;\n'2' < 'd'; // true;\n'b' < 1; // false as b is not convertible to a number\n'b' > 1; // false as b is not convertible to a number\n\nBigInts\n1n < 2n; // true;\n1n < 2; // true;\n1 < 2n; // true;\n\nUndefined\nundefined < 3; // false;\n3 < undefined; // false;\n\nNull\nnull < 3; // true\nnull < true; // true;\nnull < 'some str'; // false as a string cannot be converted to a number\nnull > 'some str'; // false\n\nBoolean\nfalse < true; // true\n0 < true;   // true\n'0' < true;  // true\n'a' < true;  // false\n'a' > true;  // false\n\nNaN\nNaN < 3; // false\n3 > NaN; // false\n</pre>                            \n        \n                "),Object(x.a)(pe,"Operator","<code><</code>"),Object(x.a)(pe,"Name","Less than"),Object(x.a)(pe,"Usage","g() < f()"),Object(x.a)(pe,"Description","Returns true, left operand is smaller than the right one."),pe),(me={},Object(x.a)(me,Symbol("title"),"<="),Object(x.a)(me,Symbol("code"),"\n            <ul>\n                <li>Convert objects to primitives</li>\n                <li>Strings should be compared with the lexicographical comparison of 16-bit code units</li>\n                <li>Try to convert both operands to numbers</li>\n                <li>Symbols cannot be compared, as they are not convertible to a number</li>\n            </ul>\n                                        \n<pre>\nNumbers\n1 <= 2; // true;\n3 <= 3; // true;\n\nBigInt\n1n <= 2n; // true;\n3n <= 3n; // true;\n1n <= 2; // true;\n3n <= 3; // true;\n\nStrings\n'5n' <= 6; // false as '5n' is not converted into BigInt\n'abc' <= 'cde'; // true;\n'abc' <= 'abc'; // true;\n'abc' <= '0bc'; // false;\n'4' <= 4; // true;\n'a' <= 4; // false, not comparable\n'a' >= 4; // false;\n\nSymbols\nlet s1 = Symbol();\nlet s2 = Symbol();\ns1 <= s2; //Error, symbols cannot be converted to a number,\n// moreover symbols are unique, but there is no possibility to get a symbol\n// real value, so no point to compare them\n\nundefined and null\nnull >= undefined; // false;\nnull <= undefined; // false; undefined cannot be converted to a number\nnull <= true; // true;\ntrue <= null; // false\nnull <= 0; // true\n0 <= null; // true\nundefined <= 0; // false\n0 <= undefined; // false\n\nBooleans\ntrue <= false; // false;\nfalse <= true; // true;\ntrue <= 1; // true;\ntrue <= 4; // true;\ntrue <= 's'; // false\n's' <= true; // false\nnull <= false; // true;\n1n <= true; // true;\n0n <= true; // true;\n0n <= false; // true;\n1n <= false; // false;\n\n\nObjects\n({} <= {}); // TRUE\n({a:2}<={a:1}); // TRUE\n({a:1, b:2, c:3} <= {a:0}) // TRUE\n({a:1, b:2, c:3} >= {a:0}) // TRUE\n({a:1, b:2, c:3} <= []); // false\n({a:1, b:2, c:3} >= []); // true\n({a:1, b:2, c:3} <= [1, 2, 3, 4, 5]); // false\n({a:1, b:2, c:3} >= [1, 2, 3, 4, 5]); // true\n\nArrays\n[2,3] <= [1,2,3]; // false\n[2,3] >= [1,2,3]; // true\n[5] <= [5,6]; // true\n[5] >= [5,6]; // true\n// seems the first value is compared\n</pre>                            \n        \n                "),Object(x.a)(me,"Operator","<code><=</code>"),Object(x.a)(me,"Name","Less than"),Object(x.a)(me,"Usage","g() <= f()"),Object(x.a)(me,"Description","Returns true, left operand is smaller than or equal to the right one."),me),(he={},Object(x.a)(he,Symbol("title"),">="),Object(x.a)(he,Symbol("code"),"\n           Please refer to the less or equal than <code><=</code> operator examples\n                                        \n<pre>\n</pre>                            \n        \n                "),Object(x.a)(he,"Operator","<code>>=</code>"),Object(x.a)(he,"Name","Less than"),Object(x.a)(he,"Usage","g() >= f()"),Object(x.a)(he,"Description","Returns true, left operand is greater than or equal to the right one."),he)]}];var Ee,He,Me,Le,De,Re,Fe,Be,Ue,_e,We=[{elementType:"Headline-3",content:"Assignment operators"},{elementType:"Paragraph",content:"\n            Assignment operators assigns its right operand value to its left operand value.\n        "},{elementType:"ConditionalArray",headItems:["Operator","Name","Usage","Description"],content:[(ue={},Object(x.a)(ue,Symbol("title"),"="),Object(x.a)(ue,Symbol("code"),"\n                \n<pre>\nlet sum = function(acc, element){\nreturn acc + element;\n};\nlet a = 0; let b = 1; let c = 2;\nlet d = 3, e = 4; // d is 3, e is 4;\ne = a + b + [c, d, e].reduce(sum, 0);\nconsole.log(e);// 10;\n\ne = a = b = c = d;\n//e, a, b, c and d, all are equal to 3, as 'd' was 3\n//when assigned\n\nChain assignments evaluate from left to right, but then they are assigned from\nright to left:\na = (b = (c = (f() )))\nHowever, chaining assignments is discouraged, especially with <code>const</code>\n<code>let</code>, <code>var</code> it creates strange behaviours:\nlet a = b = c = 5;\nwill declare only a, and the rest (c, b) will:\n1) Not be declared at all and cause an error,\n2) May silently be declared as global variables.\n\n</pre>                            \n                \n                "),Object(x.a)(ue,"Operator","<code>=</code>"),Object(x.a)(ue,"Name","Assignment"),Object(x.a)(ue,"Usage","a = f()"),Object(x.a)(ue,"Description","Assigns the right evaluated expression to its left operand,"),ue),(be={},Object(x.a)(be,Symbol("title"),"+="),Object(x.a)(be,Symbol("code"),"          \n<pre>\nlet a = 1;\nlet b = 2\nlet c = '4';\nlet d = 'word';\nlet e = 5;\n\na += b; console.log(a); // 3;\na += c; console.log(a); \n// '34', because c was a string a gets converted to a string,\n// and the result is a string;\n\nd += a; // d is word34, as a was 34, and addition assignment \n//concatenates strings,\nb =+ a; // b is now 34, as there is no =+\n//operator in JS, so '=' is an assignment, and '+ a'\n// converts a (that was a string of 34) back to the number, so\n// b is a number of 34\n\n\n</pre>                                   \n                "),Object(x.a)(be,"Operator","<code>+=</code>"),Object(x.a)(be,"Name","Addition assignment"),Object(x.a)(be,"Usage","a += f()"),Object(x.a)(be,"Description","Adds or concatenates the evaluated expression on the right to the left operand\n                and assigns the result to the operand on the left,"),be),(ge={},Object(x.a)(ge,Symbol("title"),"-="),Object(x.a)(ge,Symbol("code"),"          \n<pre>\nlet a = 'Hello World';\na -= 'World'; // NaN, no string subtraction\nlet b = 10;\nb -= 1; // 9;\n</pre>                                   \n                "),Object(x.a)(ge,"Operator","<code>-=</code>"),Object(x.a)(ge,"Name","Subtraction assignment"),Object(x.a)(ge,"Usage","a -= f()"),Object(x.a)(ge,"Description","\n                <code>a = a - f()</code> \n                Subtracts the evaluated expression on the right from the left operand, and assigns the\n                reusult to the operand on the left,\n                "),ge),(fe={},Object(x.a)(fe,Symbol("title"),"*="),Object(x.a)(fe,Symbol("code"),"          \n<pre>\nlet a = 'Hello World';\na *= 'World'; // NaN, no string multiplicition\nlet b = 10;\nb *= 7; // 70;\n</pre>                                   \n                "),Object(x.a)(fe,"Operator","<code>*=</code>"),Object(x.a)(fe,"Name","Multiplicition assignment"),Object(x.a)(fe,"Usage","a *= f()"),Object(x.a)(fe,"Description","\n                <code>a = a * f()</code> \n                Multiplicites the evaluated expression on the right with the left operand and assigns to the \n                variable on the left,\n                "),fe),(ye={},Object(x.a)(ye,Symbol("title"),"/="),Object(x.a)(ye,Symbol("code"),"          \n<pre>\nlet a = 'Hello World';\na /= 2; // NaN, no string division\nlet b, c, d, e;\nb = c = d = e = 70;\nb /= 7; // 10;\nc /= -0; // -Infinity;\nd /= +0; // +Infinity;\n</pre>                                   \n                "),Object(x.a)(ye,"Operator","<code>/=</code>"),Object(x.a)(ye,"Name","Division assignment"),Object(x.a)(ye,"Usage","a /= f()"),Object(x.a)(ye,"Description","\n                <code>a = a / f()</code> \n                Divides the left operand by the evaluated expression on the right, and assigns the result to the\n                operand on the left,\n                "),ye),(ve={},Object(x.a)(ve,Symbol("title"),"%="),Object(x.a)(ve,Symbol("code"),"          \n<pre>\nlet a = 'Hello World';\na %= 2; // NaN, no string division\nlet b, c, d, e;\nb = c = d = e = 10;\nb /= 7; // 3;\nc /= -0; // NaN;\nd /= 0; // NaN;\n</pre>                                   \n                "),Object(x.a)(ve,"Operator","<code>%=</code>"),Object(x.a)(ve,"Name","Remainder assignment"),Object(x.a)(ve,"Usage","a %= f()"),Object(x.a)(ve,"Description","\n                <code>a = a % f()</code> \n                Divides the left operand by the evaluated expression on the right, and assigns the remainder to the\n                operand on the left,\n                "),ve),(we={},Object(x.a)(we,Symbol("title"),"**="),Object(x.a)(we,Symbol("code"),"          \n<pre>\nlet a = 'Hello World';\na **= 2; // NaN, no raising a string to any power\nlet b, c, d;\nb = c = 5;\nd = Infinity;\nb **= 3; // 125;\nb **= +0; // 1;\nd **= -0; // 1;\nb **= Infinity; // 1 ** Infinity == NaN\nc **= Infinity; // Infinity;\nd **= Infinity; // Infinity;\n</pre>                                   \n                "),Object(x.a)(we,"Operator","<code>**=</code>"),Object(x.a)(we,"Name","Exponential assignment"),Object(x.a)(we,"Usage","a **= f()"),Object(x.a)(we,"Description","\n                <code>a = a ** f()</code> \n                Raises the value of a variable to the power of the right operand and assigns the result to the\n                left operand\n                "),we),(xe={},Object(x.a)(xe,Symbol("title"),"<<="),Object(x.a)(xe,Symbol("code"),"          \n<pre>\nlet a = 5;\nlet str = 'string';\nlet inf = Infinity;\nlet boolT = true;\nlet boolF = false;\na << =2; //20;\na.toString(20); //10100\nstr <<= 4; // 0;\ninf <<= 3; // 0;\nboolT <<= 3; // 8\nboolT.toString(2); // 1000\nboolF <<= 5; // 0;\n\nlet m = -5;\nm <<= 3; // -40\n\nIn general:\nn << m is n ** (2*m)\n</pre>                                   \n                "),Object(x.a)(xe,"Operator","<code><<=</code>"),Object(x.a)(xe,"Name","Left shift assignment"),Object(x.a)(xe,"Usage","a <<= f()"),Object(x.a)(xe,"Description","\n                <code>a = a <<= f()</code> \n                Moves the specified amount of bits to the left and assigns the result to the left operand;\n                "),xe),(je={},Object(x.a)(je,Symbol("title"),">>="),Object(x.a)(je,Symbol("code"),"          \n<pre>\nlet a, b, c;\na = b = c  = 100;\nlet str = 'string';\nlet inf = Infinity;\nlet boolT = true;\nlet boolF = false;\na >>= 1; // 50;\nb >>= 2; // 25;\nc >>= 3; // 12;\nstr >>= 4; // 0;\ninf >>= 3; // 0;\nboolT >>= 0; // 1;\nboolT >>= 1; // 0;\nboolF >>= 5; // 0;\n\nlet m = -100;\nm >>= 1;//-50\n\nIn general:\nn >> m is floor(n ** (0.5 * m));\n</pre>                                   \n                "),Object(x.a)(je,"Operator","<code>>>=</code>"),Object(x.a)(je,"Name","Sign propagating right shift assignment"),Object(x.a)(je,"Usage","a >>= f()"),Object(x.a)(je,"Description","\n                <code>a = a >>= f()</code> \n                Moves the specified amount of bits to the right and assigns the result to the left operand;\n                If a negative number is processed, then the literal negative value is taken\n                "),je),(Te={},Object(x.a)(Te,Symbol("title"),">>>="),Object(x.a)(Te,Symbol("code"),"          \n<pre>\nSee representation of negative numbers section for\nmore details.\nlet positive =  100;\nlet negative = -100;\npositive >>>= 1; // 50;\nnegative >>>= 1; // 2147483598\n-100 >> 1; // -50\n\n</pre>                                   \n                "),Object(x.a)(Te,"Operator","<code>>>>=</code>"),Object(x.a)(Te,"Name","Zero-fill right shift assignment"),Object(x.a)(Te,"Usage","a >>>= f()"),Object(x.a)(Te,"Description","\n                <code>a = a >>>= f()</code> \n                Moves the specified amount of bits to the right and assigns the result to the left operand;\n                "),Te),(Oe={},Object(x.a)(Oe,Symbol("title"),"&="),Object(x.a)(Oe,Symbol("code"),"          \n<pre>\nlet a = 5; // 101;\nlet b = 2; // 010;\na &= b; // 0 & 1 is 0, so 000 is the result;\nconsole.log(a); // 0\n\nlet c = 5;\nc &= 3; // 101 and 011, common bit is 001,\nconsole.log(c); // 1\n\nlet d = -5; // 11111111111111111111111111111011\n// this is the negative number representation:\n// (a >>> 0).toString(2);\nd &= 5; // 00...00101\n//common bit of 1011 and 0101 is 0001\nconsole.log(d); // 1\n\n\n</pre>                                   \n                "),Object(x.a)(Oe,"Operator","<code>&=</code>"),Object(x.a)(Oe,"Name","Bitwise AND assignment"),Object(x.a)(Oe,"Usage","a &= f()"),Object(x.a)(Oe,"Description","\n                <code>a = a &= f()</code> \n                Takes a binary representation of both operands, does a bitwise AND operation on them \n                and assigns the result to the left operator,\n                "),Oe),(Se={},Object(x.a)(Se,Symbol("title"),"^="),Object(x.a)(Se,Symbol("code"),"          \n<pre>\n0 ^ 0 == 0;\n1 ^ 1 == 0;\n0 ^ 1 == 0;\n1 ^ 0 == 0;\nlet a = 5;\na ^= 3; // 110 is 6\nlet b = -5;\nb ^= 3; \n// 11111111111111111111111111111011 ^\n// 00000000000000000000000000000101 =\n// 11111111111111111111111111111000 \n// and that is -8\n\n</pre>                                   \n                "),Object(x.a)(Se,"Operator","<code>^=</code>"),Object(x.a)(Se,"Name","Bitwise XOR assignment"),Object(x.a)(Se,"Usage","a ^= f()"),Object(x.a)(Se,"Description","\n                <code>a = a ^= f()</code> \n                Takes a binary representation of both operands, does a bitwise XOR on them and assigns the \n                result to the left operator,\n                "),Se),(ke={},Object(x.a)(ke,Symbol("title"),"|="),Object(x.a)(ke,Symbol("code"),"          \n<pre>\nlet a = 5;\na |= 3; // 101 | 011 is 111 so 7\nlet b = -8;\nb |= 8; // -8\n// -8 is  11111111111111111111111111111000\n// +8 is  00000000000000000000000000001000\n// result 11111111111111111111111111111000\n\n</pre>                                   \n                "),Object(x.a)(ke,"Operator","<code>|=</code>"),Object(x.a)(ke,"Name","Bitwise OR assignment"),Object(x.a)(ke,"Usage","a |= f()"),Object(x.a)(ke,"Description","\n                <code>a = a |= f()</code> \n                Takes a binary representation of both operands, does a bitwise OR on them and assigns the \n                result to the left operator,\n                "),ke),(Ce={},Object(x.a)(Ce,Symbol("title"),"||="),Object(x.a)(Ce,Symbol("code"),"          \n<pre>\nfalse || false === false;\ntrue || false === true;\nfalse || true === true;\ntrue || true === true;\n\nso:\nlet a = false;\na ||= false; //false\na ||= true; //true\na ||= false; // true, as it was already true in previous step;\n\nlet b = 5;\nb ||= true; //5\nb ||= false; //5\n\nlet c = 0;\nc ||= true; // 1\n\n5 || 7 === 5;\n7 || 5 === 7;\nnull || 'something' === 'something'\n\nfalse || null === null\nfalse || undefined === undefined\nnull || false === false;\n// it is important what will be the right side operand\n\nNOTE:\nlet notChanged = 0;\nlet f = () => {\nnotChanged = 5;\nreturn true;\n}\nlet d = true;\nd ||= f();\n// notChanged is still 0,\n// as there was no need to evaluate it\n\n</pre>                                   \n                "),Object(x.a)(Ce,"Operator","<code>||=</code>"),Object(x.a)(Ce,"Name","Logical OR assignment"),Object(x.a)(Ce,"Usage","a ||= f()"),Object(x.a)(Ce,"Description","\n                <code>x = y || f()</code> <code>x || (y = z)</code>, not <code> x = x || y</code>\n                Evaluates the right side operand expression <strong>only if the left site does not \n                determine the result</strong> and assigns to x <strong>only if the right sight\n                is evaluated and would change the left site operand value</strong>. However, if the \n                right side operand is evaluated, the assertion will take place \n                <code>null || undefined === undefined</code> \n                "),Ce),(Ae={},Object(x.a)(Ae,Symbol("title"),"&&="),Object(x.a)(Ae,Symbol("code"),"          \n<pre>\nfalse && false === false;\ntrue  && false === false;\nfalse && true === false;\ntrue  && true === true;\n\nso:\nlet a = false;\na &&= false; //false\na &&= true; //false\na &&= false; // No possibility to make true out of this with &&\nlet b = true;\nb &&= true; //true\nb &&= false; //false\nb &&= true; //false, as was made false in previous line\n\nlet b = 6;\nb &&= true; // true\nb &&= false; // false\n\nlet c = true;\nc &&= 5; // 5\nc &&= false; \nc &&= 5; //false\n\n5 && 7 === 7;\n7 && 5 === 5;\nnull && 'something' === null;\n\nNOTE:\nlet notChanged = 0;\nlet f = () => {\nnotChanged = 5;\nreturn true;\n}\nlet d = false;\nd &&= f();\n// notChanged is still 0,\n// as there was no need to evaluate it\n\n</pre>                                   \n                "),Object(x.a)(Ae,"Operator","<code>&&=</code>"),Object(x.a)(Ae,"Name","Logical AND assignment"),Object(x.a)(Ae,"Usage","a &&= f()"),Object(x.a)(Ae,"Description","\n                <code>x = y && f()</code> <code>x && (y = z)</code>, not <code> x = x && y</code>\n                Evaluates the right side operand expression <strong>only if the left side does not \n                determine the result</strong> and assigns to x the x AND f() result <strong>only if\n                necessary</strong>\n                "),Ae),(Ie={},Object(x.a)(Ie,Symbol("title"),"??="),Object(x.a)(Ie,Symbol("code"),"          \n<pre>\nlet a = null;\nlet b = undefined;\na ??= undefined; \n// a is undefined\nb ??= null;\n// b is null;\na ??= 5; // a is 5\nb ??= 'val'; // b is 'val'\na ?? 7; // a is 5, as it was not undefined or null\n\nNOTE:\nlet notChanged = 0;\nlet f = () => {\nnotChanged = 5;\nreturn true;\n}\nlet d = '';\nd ??= f();\n// notChanged is still 0,\n// as there was no need to evaluate it, d was != undefined or null\n\n</pre>                                   \n                "),Object(x.a)(Ie,"Operator","<code>??=</code>"),Object(x.a)(Ie,"Name","Logical nullish assignment"),Object(x.a)(Ie,"Usage","a ??= f()"),Object(x.a)(Ie,"Description","\n                Assigns a right-hand expression only if left-hand operand is <code>null</code> or\n                <code>undefined</code>. If left-hand operand is not null or undefined the right-hand\n                expression is not evaluated at all.\n                "),Ie)]}];var qe,ze,Ge,Ve,Ke,$e,Je,Xe=[{elementType:"Headline-3",content:"Arithmetic operators"},{elementType:"Paragraph",content:"\n        Arithmetic operators take left and right operand, perform an operation and return the result. \n        In case types of the operands do not match, an attempt to convert operands to a number is being performed.\n        BigInt type will not be converted to a number by default, though <code>Number(2n)</code> works.\n        In general, if there is no possibility to convert not matching type to a number, there will be an error.\n        There is an exception, the addition operator <code>+</code> is capable of joining strings. Moreover,\n        this operator will convert numbers to strings, so <code>5 + '5' === '55'</code>\n    "},{elementType:"ConditionalArray",headItems:["Operator","Name","Usage","Description"],content:[(Ee={},Object(x.a)(Ee,Symbol("title"),"+"),Object(x.a)(Ee,Symbol("code"),"\n            <ul>\n                <li>Both numeric operands: returns a sum</li>\n                <li>At least one operand is a string: converts the second operand to string and returns a string</li>\n                <li>undefined + number is NaN</li>\n                <li>undefined + null is NaN</li>\n                <li>undefined + string is a string</li>\n                <li>null + number is the number</li>\n                <li>In case of an object (and Array) and any other operand converts to a string, where \n                object conversion is '[object Object]'</li>\n                <li>A BigInt will not be automatically converted into a number, but will be converted to \n                a string if the second operand is a string</li>\n            </ul>                   \n<pre>\n4 + 5 // 9\n4 + '5' // '45'\n\n<b>undefined and null</b>\nundefined + 5 // NaN\nundefined + null // NaN\nundefined + '5' // 'undefined5';\nnull + 5 // 5\n\n<b>Object</b>\n{a: 5} + 6; // 6, as equals to some block and a <code>+6</code> \n// a number with an unary operator <code>+</code>\n({a: 8} + 4); // '[object Object]4'\n[4] + 3; // '43'\n[3] + [4]; // '44'\n\n<b>BigInt</b>\n2n + 5; // Error, bigint will not be converted\nNumber(2n) + 5; // 7\n4n + '5'; // '45'\n\n<b>String</b>\n'abc' + 'cde' = 'abccde'\n\n</pre>                            \n            \n            "),Object(x.a)(Ee,"Operator","<code>+</code>"),Object(x.a)(Ee,"Name","Addition"),Object(x.a)(Ee,"Usage","g() + f()"),Object(x.a)(Ee,"Description","\n            In case of two number type operands returns a sum in case of two string operands returns a \n            concatenated string. In case of two different types, performes a conversion. See code section for more \n            (in case of a non mobile device click this row)\n            "),Ee),(He={},Object(x.a)(He,Symbol("title"),"-"),Object(x.a)(He,Symbol("code"),"                 \n<pre>\n5 - 6.5; // -1.5\n'5' - '4'// 1\n'5' - true; // 4\n4 - null; // 4\n\n'2n' - 1 // NaN conversion not possible\n3 - 's' // NaN conversion not possible\nundefined - null; // NaN, conversion not possible\n\n2n - 1; // Error, BigInt will not be converted by default\nNumber(2n) - 1; // 1\n\n</pre>                            \n            \n            "),Object(x.a)(He,"Operator","<code>-</code>"),Object(x.a)(He,"Name","Substraction"),Object(x.a)(He,"Usage","g() - f()"),Object(x.a)(He,"Description","\n            Evaluates operands and returns their difference. There will be an attempt to \n            convert operands to a number if they are not a number and conversion is \n            possible\n            "),He),(Me={},Object(x.a)(Me,Symbol("title"),"*"),Object(x.a)(Me,Symbol("code"),"                 \n<pre>\n5 * 6.5; // 32.5\n'5' * '4'// 20\n'5' * true; // 5\n4 ) null; // 4\n\n'2n' * 1 // NaN conversion not possible\n3 * 's' // NaN conversion not possible\nundefined * null; // NaN, conversion not possible\n\n2n * 1; // Error, BigInt will not be converted by default\nNumber(2n) * 1; // 2\n\n</pre>                            \n            \n            "),Object(x.a)(Me,"Operator","<code>*</code>"),Object(x.a)(Me,"Name","Multiplication"),Object(x.a)(Me,"Usage","g() * f()"),Object(x.a)(Me,"Description","\n            Evaluates operands and returns their product value. There will be an attempt to \n            convert operands to a number if they are not a number and conversion is \n            possible. \n            "),Me),(Le={},Object(x.a)(Le,Symbol("title"),"/"),Object(x.a)(Le,Symbol("code"),"                 \n<pre>\n5 / 6.5; // 0.7692307692307693\n'5' / '4'// 1.25\n'5' / true; // 5\n4 / null; // Infinity\n4 / Infinity; // 0\n4 / -Infinity; // -0\n\n'2n' / 1 // NaN conversion not possible\n3 / 's' // NaN conversion not possible\nundefined / null; // NaN, conversion not possible\n\n2n / 1; // Error, BigInt will not be converted by default\nNumber(2n) / 1; // 2\n\n'5' / [4]; // 1.25 as both may be converted to numbers\n'4' / [2, 33]; // NaN, as array with 2 elements will not be converted to a number\n\n</pre>                            \n            \n            "),Object(x.a)(Le,"Operator","<code>/</code>"),Object(x.a)(Le,"Name","Division"),Object(x.a)(Le,"Usage","g() / f()"),Object(x.a)(Le,"Description","\n            Evaluates operands and returns their quotient value. There will be an attempt to \n            convert operands to a number if they are not a number and conversion is \n            possible\n            "),Le),(De={},Object(x.a)(De,Symbol("title"),"%"),Object(x.a)(De,Symbol("code"),"   \n    This is not a modulo operator known from, for example Python, or Microsoft C++ (in C++ % operator may be\n    modulo or remainder, depending on the implementation).\n    <table class=\"table\">\n    <thead><tr><th>expression</th><th>Remainder</th><th>Modulo</th></tr></thead>\n    <tbody>\n        <tr><td>10 % 3</td><td>1</td><td>1</td></tr>\n        <tr><td>-10 % 3</td><td>-1</td><td>1</td></tr>\n        <tr><td>10 % -3</td><td>1</td><td>-1</td></tr>\n        <tr><td>-10 % -3</td><td>-1</td><td>-1</td></tr>\n    </tbody>\n    </table>\n    So in the <u>reminder case, the sign of the result will always be the same as the sign of the first operand</u>, \n    where in the case of the modulo the sign of the result will always be the same as the sign of the second operand.\n    The result should always be an integer, however, refer to the number representation article to learn why this \n    does not happen in all cases.\n<pre>\n 10 %  3; //  1\n-10 %  3; // -1\n 10 % -3; //  1\n-10 % -3; // -1\n\n0.2 % 0.5; // 0.2\n// But\n0.5 % 0.1; // 0.09999999999999998 :o\n// This is because it is not possible to \n// represent 0.1 in binary format without an error\n\n[-4] % [6]; // -4 - conversion to numbers\n'[-4]' % [6]; // NaN - this cannot be converted anymore\n\nInfinity % 5; // NaN\n5 % Infinity; // 5\n\n-0 % 5; // -0 - there are 2 zeros in JS\n// see number representation section to learn more\n5 % 0; // NaN\n\n1 % Number.MIN_VALUE; // 0\n// But\n1 % 0; // NaN\n\n</pre>                            \n    \n    "),Object(x.a)(De,"Operator","<code>%</code>"),Object(x.a)(De,"Name","Remainder"),Object(x.a)(De,"Usage","g() % f()"),Object(x.a)(De,"Description","\n    Evaluates operands and returns the remainder of their division operation. There will be an attempt to \n    convert operands to a number if they are not a number and the conversion is possible. <b>This is not\n    a modulo</b> operator, see code section (in not mobile devices click on a row) to learn more\n    "),De),(Re={},Object(x.a)(Re,Symbol("title"),"++"),Object(x.a)(Re,Symbol("code"),"   \n<ul>\n<li>If <code>++<</code> is a prefix operator <code>++a</code> incrementation is done before the returnment</li>\n<li>If <code>++<</code> is a postfix operator <code>a++</code> incrementation is done after the returnment</li>\n<li>Bad code because of code readability issues. It might be error prone. It is better to be more verbose.</li>\n</ul>\n<pre>\nlet i = 0;\ni++++; // SyntaxError: do not combine\n(i++)++; // SyntaxError: left side operator not correct\n++i++; // SyntaxError: again :)\nlet j = i++; //j is 0, i is 1; as if ++ is a postrix incrementation is done after returning\nlet k = ++i; //k is 2 and i is 2, as if ++ is a prefix incremetation is done before returning\n\n\nlet a = 1;\nlet b = 2;\nlet c = a++ + ++b;\n// a is 2 after this operation, but when taken to the sum operation, it was still 1\n// b is 3 and was 3 when was taken as a sum operand\n// c is 4, as a was 1 when the sum was performed, and b has already been 3\n// This might get tangled when used like this, and is error prone\n// I guess this is the reason why not to use this.\n\nThe alternative would be:\nlet c = a + (b += 1);\n\nBut this is not a straightforward syntax either, so better to be more verbose:\nlet a = 1;\nlet b = 2;\nlet b += 1;\nlet c = a + b;\nlet a += 1;\n// More lines, but better readability\n</pre>                            \n    \n    "),Object(x.a)(Re,"Operator","<code>++</code>"),Object(x.a)(Re,"Name","Remainder"),Object(x.a)(Re,"Usage","i++ or ++i"),Object(x.a)(Re,"Description","\n    Increments an operand by 1 before or after returning it. This operator is considered a <b>bad code</b> and should\n    not be used.\n    "),Re),(Fe={},Object(x.a)(Fe,Symbol("title"),"--"),Object(x.a)(Fe,Symbol("code"),"   \n<ul>\n<li>If <code>--<</code> is a prefix operator <code>--a</code> decrementation is done before the returnment</li>\n<li>If <code>--<</code> is a postfix operator <code>a--</code> decrementation is done after the returnment</li>\n<li>Bad code because of code readability issues. It might be error prone. It is better to be more verbose.</li>\n</ul>\n<pre>\nlet i = 1;\ni----; // SyntaxError: do not combine\n(i--)--; // SyntaxError: left side operator not correct\n--i--; // SyntaxError: again :)\nlet j = i--; //j is 1, i is 0; as if -- is a postrix decrementation is done after returning\nlet k = --i; //k is -1 and i is -1, as if -- is a prefix decremetation is done before returning\n\n\nlet a = 1;\nlet b = 2;\nlet c = a-- - --b;\n// a is 0 after this operation, but when taken to the sum operation, it was still 1\n// b is 1 and was 1 when was taken as a sum operand\n// c is 0, as a was 1 when the sum was performed, and b has already been 1\n// This might get tangled when used like this, and is error prone\n// I guess this is the reason why not to use this.\n\nThe alternative would be:\nlet c = a - (b -= 1);\n\nBut this is not a straightforward syntax either, so better to be more verbose:\nlet a = 1;\nlet b = 2;\nlet b -= 1;\nlet c = a - b;\nlet a -= 1;\n// More lines, but better readability\n</pre>                            \n    \n    "),Object(x.a)(Fe,"Operator","<code>++</code>"),Object(x.a)(Fe,"Name","Remainder"),Object(x.a)(Fe,"Usage","i-- or --i"),Object(x.a)(Fe,"Description","\n    Decrements an operand by 1 before or after returning it. This operator is considered a <b>bad code</b> and should\n    not be used.\n    "),Fe),(Be={},Object(x.a)(Be,Symbol("title"),"unary -"),Object(x.a)(Be,Symbol("code"),"                      \n    Normally --1 is +1, but due to the fact, that there is an <code>--</code> operator in JS this should be written \n    with brackets: <code>-(-1)</code>. However <code>-+-+-1 === -1</code> is true without any error\n<pre>\nlet a = 10;\na =- 1; // a is -1 !!! Note. This is not the same as <code>a -= 1</code>\n// In JS there is no =- operator, and this may be the cause of a bug. \nlet a = -1; // The correct way of using spaces;\n\nlet a = -+-+-1; // -1;\nlet a = ---1; // Error, should be -(--a);\n\n-'-4'; // 4\n'-+-+4' + 2; // NaN\n\n</pre>\n    "),Object(x.a)(Be,"Operator","<code>unary -</code>"),Object(x.a)(Be,"Name","Unary negation"),Object(x.a)(Be,"Usage","-i"),Object(x.a)(Be,"Description","\n    Has only a right operand. Converts the operand to the number if necessary and doable, converts a positive \n    operand to its negative substitute, and a negative operand to its positive substitute. Works like a <code>Number(a) * (-1)</code>\n    "),Be),(Ue={},Object(x.a)(Ue,Symbol("title"),"unary +"),Object(x.a)(Ue,Symbol("code"),"                      \n    Normally ++1 is +1, but due to the fact, that there is an <code>++</code> operator in JS this should be written \n    with brackets: <code>+(+1)</code>. However <code>+-+-+1 === 1</code> is true without any error. This is pure \n    theory, as it is better to write <code>1</code>\n<pre>\nlet a = 10;\nlet a =+ 1; // a is 1 !!! Note. This is not the same as <code>a += 1</code>\n// In JS there is no =+ operator, and this may be the cause of a bug. \nlet a = -1; // The correct way to use spaces;\n\nlet a = +-+-+1; // 1;\nlet a = +++1; // Error, should be +(++a);\n\n</pre>\n    "),Object(x.a)(Ue,"Operator","<code>unary +</code>"),Object(x.a)(Ue,"Name","Unary plus"),Object(x.a)(Ue,"Usage","-i"),Object(x.a)(Ue,"Description","\n    Has only a right operand. Converts the operand to the number if necessary and doable, Perform the \n    evaluation of the operand if necessary. Does nothing more, because it converts a positive number to positive,\n    and negative to the negative. May be omitted.\n    "),Ue),(_e={},Object(x.a)(_e,Symbol("title"),"**"),Object(x.a)(_e,Symbol("code"),"                      \n    In some languages (PHP, Pythom) ** has a higher precedence than unary operators. In JS if a left side operator\n    has to have an unary operator applied, it should, together with the unary operator, be surrounded with brackets.\n    \n<pre>\n2 ** 9; // 512;\n2 ** -9; //0.001953125;\n-2 ** 9; // Error\n(-2) ** 9; // -512;\n\n(-2)**1.345; // NaN; In reality, this is a complex number: (-1.18868303 - 2.24503157 i)\n// Would be calculated by Python, but not by JS\n// Is JS worst? It has not a build in mechanism, but can be done with a library:\n// https://mathjs.org/\nmath.pow(-2, 1.345); // u\xa0{re: -1.1886830266845214, im: -2.2450315667823326}\n// This is math.pow, not Math.pow!!\n\n'3' ** 4; // 81\n\n\n</pre>\n    "),Object(x.a)(_e,"Operator","<code>**</code>"),Object(x.a)(_e,"Name","Exponentiation"),Object(x.a)(_e,"Usage","a ** b"),Object(x.a)(_e,"Description","\n    <code>Math.pow(a, b)</code> except <code>**</code> accepts BigInts. Returns a power of b. \n    Left side operand may not have an unary operator directly applied.\n    "),_e)]}];var Ye,Qe,Ze,et,tt=[{elementType:"Headline-3",content:"Bitwise operators"},{elementType:"NoteWarning",content:"\n        Bitwise operators make take both: BitInts and numbers as operands. Exception is ther right shift zero-fill\n        operator. The condition is that both operands are of the same type.\n        "},{elementType:"Paragraph",content:'\n            Bitwise operators are covered in more details in the <a href="./#/theory/bitwise%20use%20cases">bitwise use cases</a>\n            article. This is just a summary.\n        '},{elementType:"UnsignedList",content:['Numbers in JS are represented in a \n            <a href = "./#/theory/number%20representation">double precision floating point representation</a>\n            However the longest it is possible they are represented on 32 bits, as an integer. Double precision\n            is applied only if the number does not fit into range -2<sup>31</sup> to 2<sup>31</sup> or becomes a \n            fraction. \n            ',"Bitwise operations are safest in the range of numbers, that can be represented on 32 bits. \n            In case of the bigger number only the last 32 bit part is taken into account: <code>~85899345925 === ~-5</code>,\n            <code>~5.35 === ~ 5<code>","There are problems when shifting with a bitwise operator with a number of bits >= 32, because in some \n            circumstances last bit is discarded, and on other occassions it becomes rewinded back to the first positions:\n            <code>5 >> 64 === 5</code>, but <code>5 >> 65 === 2</code>. This is predictable, however may be error prone."]},{elementType:"ConditionalArray",headItems:["Operator","Name","Usage","Description"],content:[(qe={},Object(x.a)(qe,Symbol("title"),"~"),Object(x.a)(qe,Symbol("code"),"\n                <ul>\n                    <li><code>~0</code>: 1</li>\n                    <li><code>~1</code>: 0</li>\n                </ul>\n\n<pre>\n~-1; // 0;\n~5; // -6; as -6 is 11111111111111111111111111111010 and -5 is 101\n~4; // -5;\n~4.32; // -5\n~(2**32); // -1, as ((2**32)>>>0) is 0, this number cannot be \n// represented on 32 bits, due to the fact, that the most significant bit is \n// a sign bit\n</pre>                            \n                "),Object(x.a)(qe,"Operator","<code>~</code>"),Object(x.a)(qe,"Name","Bitwise NOT"),Object(x.a)(qe,"Usage","~ a"),Object(x.a)(qe,"Description","Inverts bits of its operand,"),qe),(ze={},Object(x.a)(ze,Symbol("title"),"&"),Object(x.a)(ze,Symbol("code"),"\n                <ul>\n                    <li><code>0 & 0</code>: 0</li>\n                    <li><code>0 & 1</code>: 0</li>\n                    <li><code>1 & 0</code>: 0</li>\n                    <li><code>1 & 1</code>: 1</li>\n                    <li><code>A & 0</code>: 0</li>\n                    <li><code>A & ~A</code>: 0</li>\n                    <li><code>A & A</code>: A</li>\n                    <li><code>A & -1</code>: A</li>\n                </ul>\n\n<pre>\n22 & 21; // 20\n// 22 = 10110 &\n// 21 = 10101 \n// 20 = 10100\n\n22n & 21n; // 20n;\n\n22.34 & 21.32; //20\n\n</pre>                            \n                "),Object(x.a)(ze,"Operator","<code>&</code>"),Object(x.a)(ze,"Name","Bitwise AND"),Object(x.a)(ze,"Usage","a & b"),Object(x.a)(ze,"Description","Performs a logical AND operation for each bit position of operands"),ze),(Ge={},Object(x.a)(Ge,Symbol("title"),"|"),Object(x.a)(Ge,Symbol("code"),"\n                <ul>\n                    <li><code>0 | 0</code>: 0</li>\n                    <li><code>0 | 1</code>: 1</li>\n                    <li><code>1 | 0</code>: 1</li>\n                    <li><code>1 | 1</code>: 1</li>\n                    <li><code>A | 0</code>: A</li>\n                    <li><code>A | ~A</code>: -1</li>\n                    <li><code>A | A</code>: A</li>\n                    <li><code>A | -1</code>: -1</li>\n                </ul>\n\n<pre>\n22 | 21; // 23\n// 22 = 10110 |\n// 21 = 10101 \n// 20 = 10111\n\n22n | 21n; //23n\n\n22.34 | 21.32; //20\n\n</pre>                            \n                "),Object(x.a)(Ge,"Operator","<code>|</code>"),Object(x.a)(Ge,"Name","Bitwise OR"),Object(x.a)(Ge,"Usage","a | b"),Object(x.a)(Ge,"Description","Performs a logical OR operation for each bit position of operands"),Ge),(Ve={},Object(x.a)(Ve,Symbol("title"),"^"),Object(x.a)(Ve,Symbol("code"),"\n                <ul>\n                    <li><code>0 ^ 0</code>: 0</li>\n                    <li><code>0 ^ 1</code>: 1</li>\n                    <li><code>1 ^ 0</code>: 1</li>\n                    <li><code>1 ^ 1</code>: 0</li>\n                    <li><code>A ^ 0</code>: A</li>\n                    <li><code>A ^ ~A</code>: -1</li>\n                    <li><code>A ^ A</code>: 0</li>\n                    <li><code>A ^ -1</code>: ~A</li>\n                </ul>\n\n<pre>\n22 ^ 21; // 3\n// 22 = 10110 ^\n// 21 = 10101 \n// 20 = 00011\n\n22n ^ 21n; // 3n;\n\n22.34 ^ 21.32; //3\n\n</pre>                            \n                "),Object(x.a)(Ve,"Operator","<code>^</code>"),Object(x.a)(Ve,"Name","Bitwise ^"),Object(x.a)(Ve,"Usage","a ^ b"),Object(x.a)(Ve,"Description","Performs a logical XOR operation for each bit position of operands"),Ve),(Ke={},Object(x.a)(Ke,Symbol("title"),"<<"),Object(x.a)(Ke,Symbol("code"),"\n                \n\n<pre>\n// tests the replacement function\nlet left = (a, b) => {return (Math.floor(a) * (2 ** (Math.floor(b>>>0) % 32))) & -1}\nlet leftBit = (a, b) => {return a << b}\nconsole.log(left(5, 32) === leftBit(5, 32)); // true\nconsole.log(left(5, 33) === leftBit(5, 33)); // true\nconsole.log(left(5, 2) === leftBit(5, 2)); // true\nconsole.log(left(-5, 2) === leftBit(-5, 2)); // true\nconsole.log(left(5.3, 2.3) === leftBit(5.3, 2.3)); // true\nconsole.log(left(5, -1) === leftBit(5, -1)); // true\nconsole.log(left(52, -2) === leftBit(52, -2)); // true\nconsole.log(left(5, 0) === leftBit(5, 0)); // true\n\n22 << 2; // 88\n// 22 = 0010110 << 2\n// 28 = 1010100 \n\n22n << 2n; // 88n\n\n(5.5 << 2.5) === (5 << 2); //true;\n\n5 << -1; // -2147483648\n5 << -2; // 1073741824\n5 << -3; // -1610612736\n// 101 << -1 is 10000000000000000000000000000000\n// 101 << -2 is 01000000000000000000000000000000\n// 101 << -3 is 10100000000000000000000000000000\n\n\n</pre>                            \n                "),Object(x.a)(Ke,"Operator","<code><<</code>"),Object(x.a)(Ke,"Name","Left shift"),Object(x.a)(Ke,"Usage","a << b"),Object(x.a)(Ke,"Description","\n                In general:\n                <code>a << b is a * (2 ** b) </code>, in reality: <br>\n                <code>Math.floor(a) * (2 ** (Math.floor(b>>>0) % 32))) & -1</code>,<br>\n                Changes the left and right operand to the 32 integer representation, and shifts the left operand \n                bits the number of positions indicated by the right operand modulo 32 to the left.\n                \n                "),Ke),($e={},Object(x.a)($e,Symbol("title"),">>"),Object(x.a)($e,Symbol("code"),"\n                \n\n<pre>\n// tests the replacement function\nlet right = (a, b) => {\n    maskOfLeftMostZeros = b === 0?-1:2**(32-b%32)-1;\n    if (a < 0) {return (Math.floor(a / (2 ** b)) & maskOfLeftMostZeros)}\n    return (Math.floor(a >>> 0) / (2 ** (Math.floor(b>>>0) % 32))) & -1\n}\nlet rightBit = (a, b) => {\n    return a >>> b}\nconsole.log(right(5, 32) === rightBit(5, 32)); // true\nconsole.log(right(5, 33) === rightBit(5, 33)); // true\nconsole.log(right(5, 2) === rightBit(5, 2)); // true\nconsole.log(right(-5, 2) === rightBit(-5, 2)); // true\nconsole.log(right(-5, 1) === rightBit(-5, 1)); // true\nconsole.log(right(-5, 3) === rightBit(-5, 3)); // true\nconsole.log(right(-5, 4) === rightBit(-5, 4)); // true\nconsole.log(right(-5, 5) === rightBit(-5, 5)); // true\nconsole.log(right(-52, 5) === rightBit(-52, 5)); // true\nconsole.log(right(-52, 4) === rightBit(-52, 4)); // true\nconsole.log(right(-52, 3) === rightBit(-52, 3)); // true\nconsole.log(right(5.3, 2.3) === rightBit(5.3, 2.3)); // true\nconsole.log(right(5, -1) === rightBit(5, -1)); // true\nconsole.log(right(52, -2) === rightBit(52, -2)); // true\nconsole.log(right(52, -31) === rightBit(52, -31)); // true\nconsole.log(right(5, 0) === rightBit(5, 0)); // true\n\n22 >> 2; // 5\n// 22 = 0010110 >> 2\n//  5 = 0000101 \n\n22n >> 2n; // 5n;\n\n(5.5 >> 2.5) === (5 >> 2); //true;\n-5 >> 2; // -2\n-5.5 >> 2.5; // 1\n// -5 is 11111111111111111111111111111011\n// -2 is 11111111111111111111111111111110\n\n5 >> 1; // 2\n5 >> 2; // 1\n\n\n5 >> -1; // 0;\n5 >> - 2; // 0;\n5 >> - 3; // 0;\n...\n5 >> -30; // 1\n5 >> -31; // 2\n5 >> -32; // 5\n// 101 >> -30 is 00000000000000000000000000000001\n// 101 >> -31 is 00000000000000000000000000000010\n// 101 >> -32 is 00000000000000000000000000000101\n\n5 >> -1; // -1;\n5 >> -3; // -1;\n...\n5 >> -30; // -2;\n\n\n</pre>                            \n                "),Object(x.a)($e,"Operator","<code>>></code>"),Object(x.a)($e,"Name","Sign-propagating Right shift"),Object(x.a)($e,"Usage","a >> b"),Object(x.a)($e,"Description","\n                In general:\n                <code>a >> b is Math.floor(a / (2 ** b)) </code>, in reality a bit more comples.\n                Changes the left and right operand to the 32 bit integer representation, and shifts the left operand \n                bits the number of positions indicated by the right operand modulo 32 to the right.\n                \n                "),$e),(Je={},Object(x.a)(Je,Symbol("title"),">>>"),Object(x.a)(Je,Symbol("code"),"\n<pre>\n// tests the replacement function\n// let right = (a, b) => {return (Math.floor(a) / (2 ** (Math.floor(b>>>0) % 32))) & -1}\nlet right = (a, b) => {\n    if (a < 0) return Math.floor(a / (2 ** b))\n    return (Math.floor(a >> 0) / (2 ** (Math.floor(b>>>0) % 32))) & -1\n}\nlet rightBit = (a, b) => {return a >>> b}\nconsole.log(right(5, 32) === rightBit(5, 32)); // true\nconsole.log(right(5, 33) === rightBit(5, 33)); // true\nconsole.log(right(5, 2) === rightBit(5, 2)); // true\nconsole.log(right(-5, 2) === rightBit(-5, 2)); // true\nconsole.log(right(-5, 1) === rightBit(-5, 1)); // true\nconsole.log(right(-5, 3) === rightBit(-5, 3)); // true\nconsole.log(right(-5, 4) === rightBit(-5, 4)); // true\nconsole.log(right(-5, 5) === rightBit(-5, 5)); // true\nconsole.log(right(-52, 5) === rightBit(-52, 5)); // true\nconsole.log(right(-52, 4) === rightBit(-52, 4)); // true\nconsole.log(right(-52, 3) === rightBit(-52, 3)); // true\nconsole.log(right(5.3, 2.3) === rightBit(5.3, 2.3)); // true\nconsole.log(right(5, -1) === rightBit(5, -1)); // true\nconsole.log(right(52, -2) === rightBit(52, -2)); // true\nconsole.log(right(52, -31) === rightBit(52, -31)); // true\nconsole.log(right(5, 0) === rightBit(5, 0)); // true\n\n22 >>> 2; // 5\n// 22 = 0010110 >>> 2\n//  5 = 0000101 \n\n(5.5 >> 2.5) === (5 >> 2); //true;\n-5 >> 2; // 1073741822\n-5.5 >> 2.5; // 1073741822\n// -5         is 11111111111111111111111111111011\n// 1073741822 is 00111111111111111111111111111110\n\n5 >>> -1; // 0;\n5 >>> -2; // 0;\n5 >>> -3; // 0;\n...\n5 >>> -30; // 1\n5 >>> -31; // 2\n5 >>> -32; // 5\n// 101 >> -30 is 00000000000000000000000000000001\n// 101 >> -31 is 00000000000000000000000000000010\n// 101 >> -32 is 00000000000000000000000000000101\n\n</pre>                            \n                "),Object(x.a)(Je,"Operator","<code>>>></code>"),Object(x.a)(Je,"Name","Zero-fill right shift"),Object(x.a)(Je,"Usage","a >>> b"),Object(x.a)(Je,"Description","\n                This operator takes two arguments, and converts the left one to 32-bit integer if possible. \n                    The bits of the left operand will be shifted the number of positions indicated by the right \n                    operand % 32 to the right. Left most bits will be filled with zeros. <br>\n                    This is currently the only operator in JS allowing to see how the real bit representation of a \n                    negative number looks like: <code>(-5 >>> 0).toString(2)</code> will show all bits, including the\n                    sign bit. The bits that do not fit (are moved to the right of the bit with index 0) will be lost.\n                "),Je)]}];var nt,ot,at,it,rt,st,ct,lt,dt,pt,mt,ht,ut=[{elementType:"Headline-3",content:"Logical operators"},{elementType:"Paragraph",content:"\n           The expressions being operands of the logical operators evaluate from the left to the right, but only if the first\n           opearand does not determine the result. In case the first operand determines the result, it is returned, and \n           the second one is not evaluated, meaning, that side effects related to evaluation of the second operand will not \n           take place.\n        "},{elementType:"Paragraph",content:"\n           Operators <code>||</code>, <code>&&</code>, <code>??</code> return expressions, values (not only booleans),\n           and the negation <code>!</code> returns a boolean.\n        "},{elementType:"SmallHeadline",content:"What evaluates to false?"},{elementType:"Paragraph",content:"\n           <code>NaN</code>, <code>null</code>, <code>undefined</code>, <code>0</code>, <code>''</code> and \n           <code>0n</code> evaluate to <code>false</code>. The rest evaluates to true.\n        "},{elementType:"NoteWarning",content:"\n        <code>new Boolean(false)</code> evaluates to <strong>true</code>, as it is an object, not a \n        primitive\n        "},{elementType:"ConditionalArray",headItems:["Operator","Name","Usage","Description"],content:[(Ye={},Object(x.a)(Ye,Symbol("title"),"!"),Object(x.a)(Ye,Symbol("code"),"\n                <ul>\n                <li><code>!true</code>: false</li>\n                <li><code>!false</code>: true</li>\n                <ul>\n<pre>\n    !true === false\n    !false === true;\n    !-1 === false;\n    !0 === true;\n    !NaN === true;\n    !undefined === true;\n    !0n === true;\n    !null === true;\n    !'' === true;\n    ![] === false\n    !{} === false;\n\n    !!x === Boolean(x); // a conversion \n\n    let a = new Boolean(false);\n    !a === false; // a is an object\n</pre>                    \n                "),Object(x.a)(Ye,"Operator","<code>!</code>"),Object(x.a)(Ye,"Name","Logical NOT"),Object(x.a)(Ye,"Usage","!expression"),Object(x.a)(Ye,"Description","\n                <ul>\n                <li>If expression is true, returns false</li>\n                <li>If expression is false, returns true</li>\n                </ul>\n                "),Ye),(Qe={},Object(x.a)(Qe,Symbol("title"),"||"),Object(x.a)(Qe,Symbol("code"),'\n                <ul>\n                <li><code>(ex1 === true) || (ex2)</code>: ex1</li>\n                <li><code>(ex1 === false) || (ex2)</code>: ex2</li>\n                <ul>\n<pre>\n"text1" || "text2"; // "text1"\n"" || "text1"; // "text1"\n\nnull || 0; // 0;\n0 || null; // null;\n\nlet a = 3;\nlet f = ()=>{a+=1}\n1 || f(); // 1\nconsole.log(a); // 3; f not executed, as left operand was already true;\n0 || f(); // undefined, as f does not return anything;\nconsole.log(a); // 4; now f was executed\n\n</pre>                    \n                '),Object(x.a)(Qe,"Operator","<code>||</code>"),Object(x.a)(Qe,"Name","Logical OR"),Object(x.a)(Qe,"Usage","expression1 || expression2"),Object(x.a)(Qe,"Description","\n                <ul>\n                <li>If expression1 evaluates to true, returns first expression, does not evaluate expression2 at all</li>\n                <li>If expression1 evaluates to false, returns the second expression, in this case both expressions\n                are evaluated</li>\n                </ul>\n                "),Qe),(Ze={},Object(x.a)(Ze,Symbol("title"),"&&"),Object(x.a)(Ze,Symbol("code"),'\n                <ul>\n                <li><code>(ex1 === false) && (ex2)</code>: ex1</li>\n                <li><code>(ex1 === true) && (ex2)</code>: ex2</li>\n                <ul>\n<pre>\n"text1" && "text2"; // "text2"\n"" && "text1"; // ""\n\nnull && 0; // null;\n0 && null; // 0;\n\nlet a = 3;\nlet f = ()=>{a+=1}\n0 && f(); // 0\nconsole.log(a); // 3; f not executed, as left operand already determined the result;\n1 && f(); // undefined, as f does not return anything;\nconsole.log(a); // 4; now f was executed\n\n</pre>                    \n                '),Object(x.a)(Ze,"Operator","<code>&&</code>"),Object(x.a)(Ze,"Name","Logical AND"),Object(x.a)(Ze,"Usage","expression1 && expression2"),Object(x.a)(Ze,"Description","\n                <ul>\n                <li>If expression1 evaluates to false, returns first expression, does not evaluate expression2 at all</li>\n                <li>If expression1 evaluates to true, returns the second expression, in this case both expressions\n                are evaluated</li>\n                </ul>\n                "),Ze),(et={},Object(x.a)(et,Symbol("title"),"??"),Object(x.a)(et,Symbol("code"),"\n                <ul>\n                <li><code>(ex1 === (null || undefined)) ?? (ex2)</code>: ex2</li>\n                <li><code>(ex1 !== (null || undefined)) ?? (ex2 === (null || undefined))</code>: ex1</li>\n                <ul>\n<pre>\n'text1' ?? null; // 'text1'\nundefined ?? 'text1'; // 'text1'\n\nnull ?? undefined; // undefined;\nundefined ?? null; // null;\n\nfalse ?? null; // false;\n'' ?? 'text'; // 'text';\nlet a = 1;\nlet f = ()=> {a += 1};\ntrue ?? f(); // true;\nconsole.log(a); // 1, as f was not evaluated, because left side operand \n// already determined the result;\nnull ?? f(); // undefined, as f() returns nothing;\nconsole.log(a); // 2; as left operand was null, and right had to be evaluated;\n\n</pre>                    \n                "),Object(x.a)(et,"Operator","<code>??</code>"),Object(x.a)(et,"Name","Logical nullish coalescing"),Object(x.a)(et,"Usage","expression1 ?? expression2"),Object(x.a)(et,"Description","\n                <ul>\n                <li>If the left expression evaluates to something other than null or undefined, returns the \n                result of the first expression</li>\n                <li>If left expression evaluates to null or undefined, returns the result of the second expression</li>\n                </ul>\n                "),et)]}];var bt=[{elementType:"Headline-3",content:"Other operators"},{elementType:"Paragraph",content:"\n        The other operators are: a <i>conditional (ternary)</i> operator, a <i>comma</i> operator, a <i>delete</i> \n        operator, a <i>typeof</i> operator, a <i>void</i> operator, an <i>instanceof</i> operator and an <i>in</i> operator,\n        "},{elementType:"SmallHeadline",content:"Releasing memory in JS"},{elementType:"Paragraph",content:"\n        Memory management in JS is done automatically. There is no possibility to trigger manual memory release.\n        Memory may be allocated by creating a new property, variable or with a <code>new</code> operator.\n        There are two algorithms for releasing the allocated memory (garbage collection):\n        "},{elementType:"Paragraph",content:"\n        <strong>A reference counting garbage collection</strong>: if the property has any reference pointing to it\n         will not be garbage collected. There is a problem with the circular references. If an object points \n         somehow to itself, it will not be garbage collected with this algorithm.\n        "},{elementType:"Code",content:"\n<pre>\nlet obj = {\n    a: {\n        b: 3\n    }\n} // obj.a is a reference to the a property\n// obj.a.b is a reference to an b property\n\nlet x = obj.a; //now a property has two references, so\ndelete obj.a; // will make a property unavailable from the obj, \n// but it may not be garbage collected, as it is still referenced by the x variable\n\nlet obj = {\n    a: {\n        x: {val: 3},\n        y: {val: 4}\n    }\n}\nobj.a.x[ref] = obj.a.y;\nobj.a.y[ref] = obj.a.x;\ndelete obj.a\n// now a is unreachable from anywhere, as the only reference was deleted,\n// but it may not be garbage collected, as there is a cycle reference\n// This would cause a memory leak if this algorithm is applied\n\n</pre>        \n        "},{elementType:"Paragraph",content:"\n        <strong>Mark-and-sweep</strong>: a property may be garbage collected if it is not reachable from the \n        global object in any way. This approach is used since 2012, and prevents memory leaks.\n        "},{elementType:"ConditionalArray",headItems:["Operator","Name","Usage","Description"],content:[(nt={},Object(x.a)(nt,Symbol("title"),"conditional ternary"),Object(x.a)(nt,Symbol("code"),"\n<pre>\n ''?'expr1':'expr2'; expr2, as '' converts to false\n (()=>{return true})()?(()=>{return 'expr1'})():(()=>{return 'expr2'})();\n // 'expr1', as first IFEE evaluated to true;\n true?1:2;// 1;\n\n let f = () => {\n     return condition ? val1 \n        : condition2 ? val2\n        : condition3 ? val3\n        : val4;\n }\n\n// this is an example of the if .. else .. else if statement\nlet f2 = () => {\n    if (condition) {return val1}\n    else if (condition2) {return val2}\n    else if (condition3) {return val3}\n    else {return val4}\n}\n\n</pre>                    \n                "),Object(x.a)(nt,"Operator","<code>?:</code>"),Object(x.a)(nt,"Name","Conditional (ternary)"),Object(x.a)(nt,"Usage","condition ? expr1 : expr2"),Object(x.a)(nt,"Description","\n                If the condition evaluates to <code>true</code>, result is <code>expr1</code> else the result is \n                <code>expr2</code>. Can be chained into a structure similar to the <code>if..else..else if..</code>\n                "),nt),(ot={},Object(x.a)(ot,Symbol("title"),"Comma"),Object(x.a)(ot,Symbol("code"),"\n                This is not the comma from objects or arrays, this is the comma known from for example a <i>for</i>\n                operator.\n<pre>\nfor (let i=0; i < 10; i++){};\n\nfunction(){\n    ...\n    return (x +=1, x);\n} // in this example x will be incremented before it is returned\n// comma may perform an action before returning something.\n\nlet a, b, c; // declaring a set of variables;\n\nlet z = (a = 3, b = 4, c = 6); // z is 6, a is 3, b is 4, c is 6;\n\n</pre>                    \n                "),Object(x.a)(ot,"Operator","<code>,</code>"),Object(x.a)(ot,"Name","Comma"),Object(x.a)(ot,"Usage","expr1, expr2"),Object(x.a)(ot,"Description","\n                Evaluates each of the given expressions, and returns the last in the chain. May be chained.                "),ot),(at={},Object(x.a)(at,Symbol("title"),"delete"),Object(x.a)(at,Symbol("code"),"\n                Object property cannot be deleted if: \n                <ul>\n                    <li>it is not an own object property (for example it belongs somewhere to a prototype chain)</li>\n                    <li>is created with a var, let or const keyword (these properties are non-configurable)</li>\n                    <li>is a non-configurable property set in objects descriptor</li>\n                    <li>is a non-writable property set in objects descriptor</li>\n                    <li>if object is sealed or frozen its properties may not be deleted</li>\n                    <li>is an array element. In this case a value of the array index will be set to <i>empty</i>\n                    and will not be removed with the delete operator</li>\n                </ul>\n<pre>\nlet obj = {\n    a: 5,\n    b: {c: 6}\n}\n\nconsole.log(delete obj); // false, obj is set with the let keyword\n// in case of a strict mode Error\n\nconsole.log(delete b); // true, b object is garbage collected\n// no need to worry about memory releasing\nconsole.log(obj); // {a: 5}\n\nlet nonConfig = {\n    configurable: false,\n    value: 3\n}\nObject.defineProperty(obj, 'x', nonConfig);\ndelete obj.x; // false, or an error, obj.x is not configurable;\n\nlet nonWritable = {\n    writable: false,\n    value: 3\n}\n\nObject.defineProperty(obj, 'y', nonWritable);\nconsole.log(delete obj.y); // false\n\ndelete obj; // false of Error, created with let\n\n\no2 = {a: 3}\nObject.defineProperty(o2, 'x', nonConfig);\ndelete o2; // true\n\nlet s = Symbol('test');\nlet o3 = {\n    a: 3,\n    [s]: 4\n}\ndelete o3[s];\n\no2 = {a:3};\nObject.seal(o2);\ndelete o2.a; // false or error, object is sealed\n\nlet a = [1,2,3,4,5];\ndelete a[0]; // true;\n// a is [empty, 2, 3, 4, 5]\n// use a.splice(0,1) instead or arr.shift();\n\nfunction f(){};\ndelete f; // true\n\n\n\n\n</pre>                    \n                "),Object(x.a)(at,"Operator","<code>delete</code>"),Object(x.a)(at,"Name","delete"),Object(x.a)(at,"Usage","delete obj.prop"),Object(x.a)(at,"Description","\n                Removes a property from an object if this property is allowed to be removed. \n                Does not free all ocated memory. Returns <code>true</code> if the operation was successful,\n                and false in other cases. If in strict mode, if operation is nusuccessful will throw an error.\n                "),at),(it={},Object(x.a)(it,Symbol("title"),"typeof"),Object(x.a)(it,Symbol("code"),'\n                <table class="table">\n                    <thead><tr><th>Type</th><th>Result</th></tr></thead>\n                    <tbody>\n                        <tr><td>Undefined</td><td>"undefined"</td></tr>\n                        <tr><td>Null</td><td>"object"</td></tr>\n                        <tr><td>Boolean</td><td>"boolean"</td></tr>\n                        <tr><td>Number</td><td>"number"</td></tr>\n                        <tr><td>BigInt</td><td>"bigint"</td></tr>\n                        <tr><td>String</td><td>"string"</td></tr>\n                        <tr><td>Symbol</td><td>"symbol"</td></tr>\n                        <tr><td>Function</td><td>"function"</td></tr>\n                        <tr><td>Others</td><td>"object"</td></tr>\n                    </tbody>\n                </table>\n                Exceptions:\n                <ul>\n                    <li><code>typeof document.all</code> is "undefined"</li>\n                    <li><code>typeof null</code> is "object"</li>\n                </ul>\n<pre>\nlet a = new Boolean(false);\ntypeof a; // "object", the same with new Number() ...\n\ntypeof 3; // "number"\n\nlet date = Date.now();\ntypeof date; // number\nlet date2 = new Date;\ndate2.now;\ntypeof date2; // object\n\nfunction() {\n    typeof a; // ReferenceError\n    // a is in TDZ - temporal dead zone\n    // not declared with a var keyword, not hoisted\n    let a = 3;\n}\n\ntypeof /s/; // should be \'object\' but in some browsers may be \'function\'\n\n</pre>                    \n                '),Object(x.a)(it,"Operator","<code>typeof</code>"),Object(x.a)(it,"Name","typeof"),Object(x.a)(it,"Usage","typeof someProp"),Object(x.a)(it,"Description","\n                Returns a string indicating a type of the object\n                "),it),(rt={},Object(x.a)(rt,Symbol("title"),"void"),Object(x.a)(rt,Symbol("code"),'\n                Brackets should be used to mark correct precedence of the void expression:\n                <code>let a = void (expression)</code>\n\n<pre>\nvoid function iife(){}()\n// without void there would be a syntax error, \n// other method to call this is \n(function iife(){})()\n\n&lt;a href="javascript:void(0);">Clicking does nothing&lt;/a>\n&lt;a href="javascript:void(document.body.style.color=\'blue\');">change background&lt;/a>\n\nbutton.onclick = () => void someArray.pop();\n// normally this expression would return a removed element, \n// in this case returns undefined\n\nlet a = void 5 + 5; // a is nudefined\nlet b = void 5**3; // SyntaxError, \nlet b = void (3**5); // b is undefined\n\n</pre>                    \n                '),Object(x.a)(rt,"Operator","<code>void</code>"),Object(x.a)(rt,"Name","void"),Object(x.a)(rt,"Usage","void expression"),Object(x.a)(rt,"Description","\n                Evaluates the expression and returns undefined\n                "),rt),(st={},Object(x.a)(st,Symbol("title"),"in"),Object(x.a)(st,Symbol("code"),"\n                \n\n<pre>\nlet arr = [1,2,3,4];\n8 in arr; // false;\n3 in arr; // true;\n'length' in arr; // true;\nSymbol.iterator in arr; // true;\n\nlet obj = {a: 2, b: 3, c: 4}\nfor (let key of obj) { console.log(key)};\n// a, b, c\n\nfunction SomeObj(){this.a = 3}\nSomeObj.prototype.b = 4;\nSomeObj.constructor = SomeObj;\nlet instance = new SomeObj();\nfor (let key in instance) {console.log(key)}\n// a, b\n\n</pre>                    \n                "),Object(x.a)(st,"Operator","<code>in</code>"),Object(x.a)(st,"Name","in"),Object(x.a)(st,"Usage","prop in obj"),Object(x.a)(st,"Description","\n                Returns true if the property is in the specified object or its prototype chain or if <code>index in arr</code>\n                index is in the arr.\n                "),st),(ct={},Object(x.a)(ct,Symbol("title"),"instanceof"),Object(x.a)(ct,Symbol("code"),"\n                <ul>\n                <li>Primitives do not have a prototype, so a number 3 is not an instance of the <code>new Number(3)</code></li>\n                <li>If an objects instances prototype is changed, then instanceof result may change</li>\n                </ul>\n<pre>\nlet s = 'someString';\nlet so = new String('someStringObject');\ns instanceof String; // false, as s is a primitive and has no constructor\nso instanceof String; // true, so is already an object having a constructor\n\nfunction SomeConstructor(){};\nfunction Child(){\n    SomeConstructor.call(this);\n}\nChild.prototype = Object.create(SomeConstructor.prototype);\nChild.prototype.constructor = Child;\n// equals to :\n// class SomeConstructor{};\n// class Child extends SomeConstructor{constructor(){super();}}\n\nlet sc = new SomeConstructor();\nlet c = new Child();\nsc instanceof SomeConstructor; // true;\nc instanceof SomeConstructor; // true;\nc instanceof Object; // true\nc instanceof String; // false\n\nclass Shape{}\n\nclass Circle extends Shape{\n    constructor(){\n        super();\n    }\n}\n\nlet s = new Shape();\nlet cir = new Circle();\n\ncir instanceof Circle; // true\ncir instanceof Shape; // true\ncir instanceof Object; // true\ns instanceof Circle; // false\n\nObject.setPrototypeOf(cir, Object.create(String.prototype))\n\ncir instanceof Shape; // false\ncir instanceof String; // true\n\ncir.__prototype__ = Number.prototype;\n\n</pre>                    \n                "),Object(x.a)(ct,"Operator","<code>instanceof</code>"),Object(x.a)(ct,"Name","instanceof"),Object(x.a)(ct,"Usage","o instanceof SomeConstructor"),Object(x.a)(ct,"Description",'\n                Returns true if the prototype of the left side operand is the same as the prototype of the right side operand.\n                The left side operand has to be a type of "function" or an error will occur.\n                '),ct),(lt={},Object(x.a)(lt,Symbol("title"),"typeof"),Object(x.a)(lt,Symbol("code"),"\n                <ul>\n                    <li><code>Undefined</code> is <code>\"undefined\"</code>,</li>\n                    <li><code>Null</code> is <code>\"object\"</code>: an exception due to the historical reasons,</li>\n                    <li><code>Boolean</code> is <code>\"boolean\"</code>,</li>\n                    <li><code>Number</code> is <code>\"number\"</code>,</li>\n                    <li><code>BigInt</code> is <code>\"bigint\"</code>,</li>\n                    <li><code>String</code> is <code>\"string\"</code>,</li>\n                    <li><code>Symbol</code> is <code>\"symbol\"</code>,</li>\n                    <li><code>Function</code> is <code>\"function\"</code>,</li>\n                    <li>any other is <code>\"object\"</code>,</li>\n                </ul>\n<pre>\ntypeof 77 === 'number';\ntypeof(4.32) === 'number';\ntypeof Math.LN10 === 'number';\ntypeof Infinity === 'number';\ntypeof NaN === 'number';\ntypeof Number('some string') === 'number; \n// as Number returns a number, i this \n// case a <code>NaN</code>, and <code>typeof NaN === 'number'</code>\n// so this is 'number'\n\ntypeof 5n === 'bigint';\ntypeof 'some string' === 'string';\ntypeof true === 'boolean';\ntypeof !!(1); // boolean;\n\ntypeof Symbol() === 'symbol';\ntypeof Symbol.iterator === 'symbol';\n\ntypeof undefined === 'undefined';\n\nlet a; // declared not defined;\ntypeof a === 'undefined';\ntypeof b === 'undefined'; // not declared\n\ntypeof {s: ''} === 'object';\ntypeof new Data() === 'object;\ntypeof new Map() === 'object;\ntypeof /s/ === 'object';\ntypeof new Boolean(true) === 'object';\ntypeof [1,2] === 'object';\ntypeof function(){} === 'function';\ntypeof function()*{} === 'function';\ntypeof async function(){} === 'function';\n\ntypeof 3.14 + 'pi' === 'numberpi';\ntypeof 'pi' + Number === \"stringfunction Number() { [native code] }\";\n// Number is a function, it is not called, as the stirn appears first \n// it is casted to the sting value;\ntypeof Number + 'pi' === 'functionpi';\ntypeof 'pi' + 3.14 === 'string3.14';\n<div class=\"note note-danger\">\n  Above problems occur, because of the precedence. Firstly the typeof with the first argument is evaluated, and \n  then the operand after <i>+</i> is cast to the string value and the concatenation result is returned.\n  To prevent this from happening additional brackets need to be added.\n</div>\ntypeof (3.14 + 'pi') === 'string';\ntypeof ('pi' + 3.14) === 'string';\n\n\n</pre>                    \n                "),Object(x.a)(lt,"Operator","<code>typeof</code>"),Object(x.a)(lt,"Name","typeof"),Object(x.a)(lt,"Usage","typeof operand, typeof(operand)"),Object(x.a)(lt,"Description","\n                    Returns a string indicating the type of the evaluated operand.\n                "),lt),(dt={},Object(x.a)(dt,Symbol("title"),"Grouping operator (...)"),Object(x.a)(dt,Symbol("code"),"\n<pre>\n2 * 3 + 4 = 10;\n2 * (3 + 4) = 14;\n\nlet o = {a:2, b:4};\n{a, b} = o; // SyntaxError\n\nlet o = {a:2, b:4};\n({a, b} = o); // now it works\n\nfunction ifee(){}(); // SyntaxError\n(function ifee(){})(); // now it works\n\nlet a = 0; let b = 0;\nlet c = a+=1 + b+=1;\n// SyntaxError\n\nlet a = 0; let b = 0;\nlet c = (a+=1) + (b+=1);\n// now it works\n//a is 1, b is 1, c is 2;\n\nlet a = 0;\na++++; // SyntaxError\n(a++)++; // now works, but this is a bad code anyway\n\n</pre>                    \n                "),Object(x.a)(dt,"Operator","<code>(...)</code>"),Object(x.a)(dt,"Name","Grouping operator"),Object(x.a)(dt,"Usage","a * (b + c)"),Object(x.a)(dt,"Description","\n                This operator controls the precedence of evaluation in expressions. May be used to change a non\n                expression to an expression (like in the ifee call or with the object destructive operators)\n                "),dt),(pt={},Object(x.a)(pt,Symbol("title"),"new"),Object(x.a)(pt,Symbol("code"),"\n<pre>\nlet b = new Boolean(false); // Should not be used, primitives should not be constructed\n// with the new operator, as they are not primitives anymore\n\nfunction Car(make, model){\n    this.make = make;\n    this.model = model;\n}\n\nlet myCar = new Car('Subaru', 'Legacy')\nmyCar instanceof Car; // true;\n\n</pre>                    \n                "),Object(x.a)(pt,"Operator","<code>new</code>"),Object(x.a)(pt,"Name","new"),Object(x.a)(pt,"Usage","new ConstructorFunction(..)"),Object(x.a)(pt,"Description","\n                Creates a new instance of an object described by the constructor function that is delivered as an \n                operand. This operator:\n                <ul>\n                <li>Creates a new JS object</li>\n                <li>Adds a property that will link newly created object to the prototype of the constructor function,\n                that property is often named <code>__proto__</code></li>\n                <li>Binds newly created object to the <code>this</code> property in the creator function</li>\n                <li>Returns <code>this</code> if the creator function does not return anything</li>\n                <li>If the constructor function returns something this returned object becomes the newly created\n                object instead</li>\n                </ul>\n                "),pt),(mt={},Object(x.a)(mt,Symbol("title"),"await"),Object(x.a)(mt,Symbol("code"),"\n                The alternative is a <code>throw</code> method, available on the <code>Promise</code> prototype.\n                <code>then</code> works with not only async functions, and may react differently on rejection.\n                However, this does not pause the function.\n<pre>\nlet a = await 9;\nconsole.log(a); // 9\n\nlet b = await Promise.resolve(8);\nconsole.log(b); // 8\n\nlet c = await Promise.reject('error');\n// Uncaught 'error' \n\nlet d = Promise.resolve(4);\n// Unresolved promise\n</pre>\n\nBelow function immediately returns an unresolved promise, that will eventually \nresolve to the <i>undefined</i> value. However, inside there is a promise, and \nfunction pauses for 3s until this promise resolves.\n<pre>\nasync function(){\n    let prom = new Promise((resolve)=>{\n        setTimeout(()=>{resolve('done');},3000)\n    })\n    await prom;\n}\n</pre>                    \n\nBelow function immediately returns an unresolved promise, that will eventually (after 3s) \nresolve to the <i>done</i> string value.\n<pre>\nasync function(){\n    let prom = new Promise((resolve)=>{\n        setTimeout(()=>{resolve('done');},3000)\n    })\n    return await prom;\n}\n</pre>                    \n\n                "),Object(x.a)(mt,"Operator","<code>await</code>"),Object(x.a)(mt,"Name","await"),Object(x.a)(mt,"Usage","[optionalAssersion] = await somePromise"),Object(x.a)(mt,"Description","\n                    <ul>\n                    <li>May be used only in async functions</li>\n                    <li>Pauses the function until the right hand promise is resolved</li>\n                    <li>Throws an error if the promise rejects</li>\n                    <li>Returns a value that promise resolves to</li>\n                    </ul>\n                "),mt),(ht={},Object(x.a)(ht,Symbol("title"),"yield"),Object(x.a)(ht,Symbol("code"),'\n                <span class="bg-danger text-white p-1">Needs to be a function, starting with <b>functio*</b>, indicates that\n                this is a generator</span>\n                <pre>\nfunction throughArray(){\n    let a = [1, 2, 3, 4, 5];\n    for (let item of a){\n        yield item;\n    }\n}                \n                </pre>\n                <span class="bg-success text-white p-1">\n                This is good, as the function is a generator\n                this is a generator</span>\n\n                <pre>\nfunction* throughArray(){\n    let a = [1, 2, 3, 4, 5];\n    for (let item of a){\n        yield item;\n    }\n}\n\nfor (let item of throughArray()){\n    console.log(item)\n}\n\nconsole.log(throughArray().next()) // {value:1, done:false}\nconsole.log(throughArray().next()) // {value:1, done:false}\nconsole.log(throughArray().next()) // {value:1, done:false}\n//Each time a new instance is created;\n\nlet ta = throughArray();\nconsole.log(ta.next()); // {value:1, done:false}\nconsole.log(ta.next()); // {value:2, done:false}\nconsole.log(ta.next()); // {value:3, done:false}\n//Now \'ta\' is an instance of the throughArray\n\n                </pre>\n\n\n\n                <span class="bg-success text-white p-1">\n                Pauses the function</span>\n\n                <pre>\nfunction* throughArray(){\n    let a = [1, 2, 3, 4, 5];\n    let index = 0;\n    for (let item of a){\n        index++;\n        if(index == 2) yield 9;\n        yield item;\n    }\n}\n\nfor (let item of throughArray()){\n    console.log(item)\n} // 1, 9, 2, 3, 4, 5\n                </pre>\n\n\n                <span class="bg-danger text-white  p-1">\n                Throws an error and finishes the loop</span>\n\n                <pre>\nfunction* throughArray(){\n    let a = [1, 2, 3, 4, 5];\n    let index = 0;\n    for (let item of a){\n        index++;\n        if(index == 2) throw new Error(9);\n        yield item;\n    }\n}\n\nfor (let item of throughArray()){\n    console.log(item)\n} // 1, 9, 2, 3, 4, 5\n                </pre>\n\n\n                <span class="bg-danger text-white p-1">\n                No way to throw an error as the result of the yeild expression</span>\n\n                <pre>\nfunction* throughArray(){\n    let a = [1, 2, 3, 4, 5];\n    let index = 0;\n    for (let item of a){\n        index++;\n        if(index == 2) yield {throw new Error(\'someReason\'));\n        yield item;\n    }\n}\n\nfor (let item of throughArray()){\n    console.log(item)\n} // 1, 9, 2, 3, 4, 5\n                </pre>\n\n\n\n                '),Object(x.a)(ht,"Operator","<code>yield</code>"),Object(x.a)(ht,"Name","yield"),Object(x.a)(ht,"Usage","yield somePromise"),Object(x.a)(ht,"Description","\n                    <ul>\n                        <li>Should be called <b>only</b> in generator functions</li>\n                        <li>Do not call in a callback</b>\n                        <li>Returns an interface with a <code>next</code> function returning {value:..., done:...} object</li>\n                    </ul>\n                "),ht)]}];var gt=[{elementType:"Headline-3",content:"Operators precedences"},{elementType:"Paragraph",content:"\n           The highest is 20, lowest is 1\n        "},{elementType:"Paragraph",content:'\n        <table class="table">\n            <thead><tr><th>Precedence</th><th>Operators</th></tr><thead>\n            <tbody>\n                <tr>\n                    <td>20</td>\n                    <td>\n                        <ul>\n                            <li><code>(...)</code>: grouping</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>19</td>\n                    <td>\n                        <ul>\n                            <li><code>__.__</code>: dot: member access</li>\n                            <li><code>...[...]</code>: computed member access</li>\n                            <li><code>new ...(...) :</code>: new with args</li>\n                            <li><code>function() :</code>: function call</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>18</td>\n                    <td>\n                        <ul>\n                            <li><code>new ... :</code>: new with <b>no</b> args</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>17</td>\n                    <td>\n                        <ul>\n                            <li><code>...++</code>: postfix incrementation</li>\n                            <li><code>...--</code>: postfix decrementation</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>16</td>\n                    <td>\n                        <ul>\n                            <li><code>!...</code>: Logical NOT</li>\n                            <li><code>~...</code>: Bitwise NOT</li>\n                            <li><code>+...</code>: Unary plus</li>\n                            <li><code>-...</code>: Unary minus</li>\n                            <li><code>++...</code>: Prefix increment</li>\n                            <li><code>--...</code>: Prefix decrement</li>\n                            <li><code>typeof...</code>: typeof</li>\n                            <li><code>void...</code>: void</li>\n                            <li><code>delete ....</code>: delete</li>\n                            <li><code>await ...</code>: await</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>15</td>\n                    <td>\n                        <ul>\n                            <li><code>...**...</code>: Exponentiation</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>14</td>\n                    <td>\n                        <ul>\n                            <li><code>/</code>: Division</li>\n                            <li><code>*</code>: Multiplication</li>\n                            <li><code>%</code>: Reminder</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>13</td>\n                    <td>\n                        <ul>\n                            <li><code>...+...</code>: Addition</li>\n                            <li><code>...-...</code>: Substraction</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>12</td>\n                    <td>\n                        <ul>\n                            <li><code>...<<...</code>: Left shift</li>\n                            <li><code>...>>...</code>: Right shift</li>\n                            <li><code>...>>>..</code>: Bitwise Zero-fill right shift</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>11</td>\n                    <td>\n                        <ul>\n                            <li><code>...<...</code>: Less than</li>\n                            <li><code>...<=...</code>: Less than or equal</li>\n                            <li><code>...>...</code>: Greater than</li>\n                            <li><code>...>=...</code>: Greater than or equal</li>\n                            <li><code>...in...</code>: in</li>\n                            <li><code>instanceof...</code>: instanceof</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>10</td>\n                    <td>\n                        <ul>\n                            <li><code>...==...</code>: Equal</li>\n                            <li><code>...!=...</code>: Inequal</li>\n                            <li><code>...===..</code>: Strict equal</li>\n                            <li><code>...!==..</code>: Strict not equal</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>9</td>\n                    <td>\n                        <ul>\n                            <li><code>...&...</code>: Bitwise AND</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>8</td>\n                    <td>\n                        <ul>\n                            <li><code>...^...</code>: Bitwise XOR</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>7</td>\n                    <td>\n                        <ul>\n                            <li><code>...|...</code>: Bitwise OR</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>6</td>\n                    <td>\n                        <ul>\n                            <li><code>...&&...</code>: Logical AND</li>\n                        </ul>\n                    </td>\n                </tr>   \n                <tr>\n                    <td>5</td>\n                    <td>\n                        <ul>\n                            <li><code>...||...</code>: Logical OR</li>\n                        </ul>\n                    </td>\n                </tr>    \n                <tr>\n                    <td>4</td>\n                    <td>\n                        <ul>\n                            <li><code>.. ? .. : ..</code>: Conditional</li>\n                        </ul>\n                    </td>\n                </tr>    \n                <tr>\n                    <td>3</td>\n                    <td>\n                        <ul>\n                            <li><code>...=...</code>: Assignment</li>\n                            <li><code>...+=...</code>: Addition assignment</li>\n                            <li><code>...-=...</code>: Substraction assignment</li>\n                            <li><code>...*=...</code>: Multiplication assignment</li>\n                            <li><code>.../=...</code>: Division assignment</li>\n                            <li><code>...%=...</code>: Remainder assignment</li>\n                            <li><code>...**=...</code>: Exponential assignment</li>\n                            <li><code>...<<=...</code>: Left shift assignment</li>\n                            <li><code>...>>=...</code>: Right shift assignment</li>\n                            <li><code>...>>>=...</code>: Zero-fill rithg shift assignment</li>\n                            <li><code>...&=...</code>: Bitwise AND assignment</li>\n                            <li><code>...|=...</code>: Bitwise OR assignment</li>\n                            <li><code>...^=...</code>: Bitwise XOR assignment</li>\n                            <li><code>...||=...</code>: Logical OR assignment</li>\n                            <li><code>...&&=...</code>: Logical AND assignment</li>\n                            <li><code>...??=...</code>: Logical nullish assignment</li>\n                        </ul>\n                    </td>\n                </tr>       \n                <tr>\n                    <td>2</td>\n                    <td>\n                        <ul>\n                            <li><code>yield ...</code>: yield</li>\n                            <li><code>yield* ...</code>: yield*</li>\n                        </ul>\n                    </td>\n                </tr> \n                <tr>\n                    <td>1</td>\n                    <td>\n                        <ul>\n                            <li><code>.. , .. : ..</code>: Comma</li>\n                        </ul>\n                    </td>\n                </tr>                                                                                                                                                           \n            </tbody>\n        </table>\n        '}];var ft={summary:"operators",title:"operators",searchKeywords:"+ - / * = % > < << >> == === void \n    binary representation of a negative number\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Operators"},{elementType:"Paragraph",content:"\n                        \n                    "},{elementType:"UnsignedList",content:["\n                     <code>void</code>: This operator always takes an expression and evaluates it to an undefined. \n                     Can be used instead of an undefined value or to execute some JS code and return undefined, if \n                     something has to be returned,\n                    "]}].concat(Object(Pe.a)(Ne),Object(Pe.a)(Xe),Object(Pe.a)(tt),Object(Pe.a)(ut),Object(Pe.a)(We),Object(Pe.a)(bt),Object(Pe.a)(gt))},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators",description:"Tutorial"},{elementType:"Link",content:"iii-lo.tarman.pl/",href:"http://www.iii-lo.tarman.pl/informatyka/ladustrone.php?p1=informatyka&p2=44",description:"Negative number representation"},{elementType:"Link",content:"blog.logrocket.com",href:"https://blog.logrocket.com/interesting-use-cases-for-javascript-bitwise-operators/",description:"Use cases of bitwise operations"},{elementType:"Link",content:"ebhor.com",href:"https://www.ebhor.com/operator-precedence-and-associativity-in-javascript/",description:"Precedences source"}]}]};var yt={summary:"string methods",title:"string methods",searchKeywords:"string methods unmutable ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"String methods"},{elementType:"Paragraph",content:"\n                    "},{elementType:"UnsignedList",content:["\n                    "]},{elementType:"Paragraph",content:"\n                    There is a set of methods that can be used with a <code>&lt;form&gt;</code> element:\n                    "},{elementType:"Code",content:"\n<pre>\n</pre>                        \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Methods"},{elementType:"Paragraph",content:"\n\n                    "}]}]};var vt=[{elementType:"Article",content:[{elementType:"Headline-2",content:"Prototype chain"},{elementType:"Paragraph",content:"\n                Everything in JS is an object. Each object has its private property binding it to other objects.\n                This property is called a <strong>prototype</storng>. Each prototype has its own prototype.\n                The last prototype in this chain points to <code>null</code>.\n                "},{elementType:"NoteWarning",content:"\n                Prototypes of existing objects (like <code>Array</code>) should never be modified as this \n                practice breaks encapsulation. Instead a new class extending some class should be created, and\n                needed properties should be added to newly created class.<br>\n                Only situation an existing object prototype should be modified is an implementation of the \n                <i>polyfill</i>.<br>\n                Modifying the prototype of the existing object is expensive, as all objects and references\n                pointing to this object must be processed. This is the other reason for not extending the prototypes\n                of existing objects.\n                "},{elementType:"SmallHeadline",content:"A type"},{elementType:"Paragraph",content:'\n                Types in JS are: number, bigInt, string, boolean, null, undefined, symbol and object. However, when\n                speaking of objects in general, it is assumed, that each object has its own type, and this type is \n                related to this objects interface. An interface is a set of public methods and properties. So an \n                object communicates with the outside world with its interface. Two objects are said to be equal if they have \n                the same interface (due to "Design Patterns" by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides).\n                JS does not recognize different types of objects, but in Type Script this imperfection is fixed.\n                In this article it will be assumed, that two objects are of the same type if they are created with the same\n                constructor. \n                '},{elementType:"SmallHeadline",content:"__proto__"},{elementType:"UnsignedList",content:["Each object in JS holds a reference to the prototype object of its constructor,","There is a single instance of the prototype for each type of objects (for all instances \n                        created with the same constructor). Thanks to this a property added to the prototype is \n                        available in all instances,","Each object in JS has its hidden property [[Prototype]] that references that object constructor \n                    protytype","<code>__proto__</code> (not an ECMA script solution) is a property allowing to access the objects\n                    prototype. It holds, for example a setter and getter to the prototype. <code>__proto__</code> gives\n                    access to the hidden property [[Prototype]],","<code>__proto__</code> is available, but should not be used, as it is depracated. \n                    <code>Object.getPrototypeOf(o)</code>\n                    and <code>Object.setPrototypeOf(o)</code> should be used instead."]},{elementType:"Headline-3",content:"A chain"},{elementType:"Paragraph",content:"\n                In general, a prototype is an object, that allows inheritance in JS. Each function in JS has \n                a prototype object. Each object in JS has access to its constructor prototype, so each instance of the \n                certain object type has access to the same prototype. Adding a method to an object's prototype \n                makes this method accessible in each instance of this object type. Prototypes in JS are linked together,\n                forming a chain. This chain ends with the Object's prototype followed by a null. If there is a request \n                to find a property of an object, firstly the own object's methods are searched. Then, if nothing is \n                found, there is the objects prototype searched. If nothing found, then the prototypes prototype is \n                searched, and so on, until null is reached. In this case it is obvious, that the property does not \n                exist.\n                "},{elementType:"SmallHeadline",content:"An example"},{elementType:"Paragraph",content:"\n                Object => Vehicle => CombustionEngineVehicle => Car\n                "},{elementType:"Paragraph",content:"\n                Let's assume, that there is a <code>bicycle</code> object, that is an instance of a <code>Vehicle</code> \n                class. This <code>bicycle</code> has a property named <code>__proto__</code>.\n                "},{elementType:"UnsignedList",content:["The <code>__proto__</code> of the <code>bike</code> Vehicle instance, points to the Vehicle prototype","Vehicle prototype has property named <code>constructor</code> pointing to the function that constructs\n                    the vehicle object","Vehicle constructor has the <code>prototype</code> property pointing back to the prototype (back, as \n                        prototype itself points to the constructor with the constructor property)","Because the vehicles constructor is a function, it has a <code>__proto__</code> property pointing to \n                    the prototype of the function. And prototype of the function constructor points to the prototype of\n                    the object, and the prototype of the object is null,","Vehicle's <code>__proto__</code> points to the object's prototype, as Vehicle inherits by default after Object","Every object in JS finally has the prototype of the <code>Object</code> in its chain","Objects prototype points to null"]},{elementType:"Paragraph",content:"\n                Now let's examine a more complex example, with the Object => Vehicle => CombustionEngineVehicle => Car\n                inheritance.\n                "},{elementType:"Code",content:"\n<pre>\nfunction Vehicle(nrOfWheels, poweredBy){\n    this.nrOfWheels = nrOfWheels;\n    this.poweredBy = poweredBy;\n}\nVehicle.prototype.examples = ['bicycle', 'motorcycle', 'car', 'train']\nVehicle.prototype.giveExamples = function(){\n    console.log(this.examples)\n}\n\n// a static method:\nVehicle.whatSortOf = function(nrOfWheels){\n    if (nrOfWheels === 4) return 'Probably a car';\n    if (nrOfWheels === 2) return 'Probably a motorcycle or a bicycle';\n    if (nrOfWheels >= 8 && nrOfWheels % 2 === 0) return 'Could be a train';\n    return 'I don't know'\n}\n\nfunction CombustionEngineVehicle(nrOfWheels){\n    Vehicle.call(this, nrOfWheels, 'combustion engine');\n    // this.examples = ['car', 'motorcycle']\n}\nCombustionEngineVehicle.prototype = Object.create(Vehicle.prototype);\nCombustionEngineVehicle.prototype.constructor = CombustionEngineVehicle;\nCombustionEngineVehicle.prototype.examples =  ['car', 'motorcycle'];\n\nfunction Car(make, model, year){\n    CombustionEngineVehicle.call(this, 4);\n    this.make = make;\n    this.model = model;\n    this.year = year;\n    // this.examples = ['subaru impreza', 'maserati biturbo', 'ford mustang']\n}\nCar.prototype = Object.create(CombustionEngineVehicle.prototype);\nCar.prototype.constructor = Car;\nCar.prototype.examples = ['subaru impreza', 'maserati biturbo', 'ford mustang'];\nCar.prototype.introduction = function(){\n    console.log(`I am ${this.make} ${this.model} from ${this.year}`);\n}\n\nlet subaruLegacy = new Car('subaru', 'legacy', '2005');\nlet peugeot206 = new Car('peugeot', '206', '2004');\npeugeot206.examples = ['2.0 HDI', '2.0GTI', '1.1 SOHC'];\npeugeot206.introduction(); // I am peugeot 206 from 2004\n// from Car prototype\n\nObject.getOwnPropertyNames(subaruLegacy); // [\"make\", \"model\", \"year\"]\nObject.getOwnPropertyNames(peugeot206); // [\"make\", \"model\", \"year\", \"examples\"]\n// as here concrete examples were specified\npeugeot206.examples; // [\"2.0 HDI\", \"2.0GTI\", \"1.1 SOHC\"]\nsubaruLegacy.examples; // [\"subaru impreza\", \"maserati biturbo\", \"ford mustang\"]\n// taken from the prototype, as no specific for this object were added\n\npeugeot206.giveExamples(); // [\"2.0 HDI\", \"2.0GTI\", \"1.1 SOHC\"]\n// This method is taken from Vehicle prototype, as \n// it is not available neither in peugeot206, nor in the Car prototype,\n// nor in the CombustionEngine prototype.\n// Data is taken from the peugeot206 instance, as it was specified there.\n\npeugeot206.__proto__.__proto__.__proto__.__proto__ === Object.prototype; // true;\npeugeot206.__proto__.__proto__.__proto__.__proto__.__proto__ === null; // true;\n</pre>                \n                "},{elementType:"Paragraph",content:"\n                A graph describing above situation:\n                "},{elementType:"Image",name:"protoChain_carGraph.png",alt:"Prototype chain"},{elementType:"Paragraph",content:"\n                So in general:\n                "},{elementType:"UnsignedList",content:["Each object in JS has a reference to its constructors prototype (property <code>__proto__</code> that should not\n                        be used anymore, or <code>Object.getPrototypeOf(o)</code>)","Each prototype has a reference to the prototype it inherits from, until the Object is reached with its \n                    prototype reference pointing to null","Each prototype has a constructor property pointing to the constructor that creates objects with the \n                    prototype,","Each constructor has a prototype property that all instances created with the construcotr will refer to,","Each constructor has its <code>__proto__</code> pointing to the function prototype, as each constructor is \n                    a function,","The prototype property can be overridden (<code>Object.setPrototypeOf(o, pr)</code>, \n                    or depraciated <code>o.__proto__ = pr</code>,","New elements may be added to the existing prototype, but this is discouraged,","Each function in JS has a direct prototype property. This is not common, as most objects have only a \n                    reference like <code>__proto__</code>"]},{elementType:"SmallHeadline",content:"\n                The same example written with classes\n                "},{elementType:"Code",content:"\n<pre>\nclass Vehicle{\n    static whatSortOf = function(nrOfWheels){\n        if (nrOfWheels === 4) return 'Probably a car';\n        if (nrOfWheels === 2) return 'Probably a motorcycle or a bicycle';\n        if (nrOfWheels >= 8 && nrOfWheels % 2 === 0) return 'Could be a train';\n        \n        return `I don't know`\n    }\n\n    constructor(nrOfWheels, poweredBy){\n        this.nrOfWheels = nrOfWheels;\n        this.poweredBy = poweredBy;\n        this.constructor.prototype.examples = ['bicycle', 'motorcycle', 'car', 'train'];\n        this.constructor.prototype.giveExamples = function(){\n            console.log(this.examples)\n        }.bind(this);\n    }\n}\n\nclass CombustionEngineVehicle extends Vehicle{\n    constructor(nrOfWheels){\n        super(nrOfWheels, 'combustion engine');\n        this.constructor.prototype.examples = ['car', 'motorcycle'];\n    }\n    \n}\n\nclass Car extends CombustionEngineVehicle{\n    constructor(make, model, year){\n        super(4);\n        this.make = make;\n        this.model = model;\n        this.year = year;\n        this.constructor.prototype.examples = ['subaru impreza', 'maserati biturbo', 'ford mustang'];\n        this.constructor.prototype.introduction = function(){\n            console.log(`I am ${this.make} ${this.model} from ${this.year}`);\n        }.bind(this);\n    }\n}\n\n\nlet subaruLegacy = new Car('subaru', 'legacy', '2005');\n// subaruLegacy.examples = ['2.0 H4 SOHC', '2.0 H4 DOHC', '2.5 H4 DOHC Turbo', '3.0 H6']\nlet peugeot206 = new Car('peugeot', '206', '2004');\npeugeot206.examples = ['2.0 HDI', '2.0GTI', '1.1 SOHC'];\n</pre>                \n                "}]}];var wt={summary:"objects",title:"objects",searchKeywords:"computed property name syntax prototype __proto__ key value inheritance",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Objects"},{elementType:"Paragraph",content:"\n                        An object is a set of pairs: <strong>key</strong>, <strong>value</strong>, where a key may be of a \n                        type string or symbol, and value may be of any type including other object. This makes objects a great \n                        tool for storing data. Objects may get big and complicated.\n                    "},{elementType:"Code",content:"\n<pre>\n    let place = {\n        country: 'Poland',\n        city: 'Wroclaw',\n        street: 'Hubska',\n        number: 353\n    }\n    let person = {\n        firstName: 'John',\n        familyName: 'Doe',\n        gender: 'Man',\n        address: place\n    }\n</pre>                    \n        "},{elementType:"Paragraph",content:"\n                        A new property could be set to an object by calling it and new property key in brackets:\n                        <code>person['height'] = 184cm</code>, or with a dot notation: <code>person.height</code>.\n                        If the <code>heigth</code> property does not exist, it \n                        will be created under the person object. In case it would already exist, it would be \n                        overriden with a new value.\n                    "},{elementType:"Paragraph",content:"\n                        An object property may be referred in similar way it is created: by object name and \n                        a property name in brackets: <code>let gender = person['gender']</code>, or with a dot\n                        notation <code>let gender = person.gender</code>. In case a property does not exist under \n                        a person object <code>undefined</code> is returned.\n                    "},{elementType:"Paragraph",content:"\n                        If a symbol has to be used as a key, then the bracket notation is the right one:\n                        <code>person[Symbol('height')]</code>. To learn more about symbols please visit a \n                        <a href=\"./#/theory/data%20types\">data types</a> section.\n                    "},{elementType:"Paragraph",content:"Ways to access object keys."},{elementType:"UnsignedList",content:["<code>let keys = Object.keys(person)</code> is a way to get an Array of object keys,","<code>for(let key in person)</code> loop,","<code>Object.getOwnPropertyNames(someObject)</code>,","<code>Object.getOwnPropertySymbols(someObject)</code>","<code>Reflect.getOwnPropertySymbols(somObject)</code>: this gets both: symbol and string\n                        keys","There is no guarantee that keys will come up in some repetable order"]},{elementType:"Headline-3",content:"Descriptor"},{elementType:"Paragraph",content:'There is a way to hide object properties from some key listing methods, and there is a way to \n                        block object properties from being modified. There are methods like <code>Object.freeze()</code> or\n                        <code>Object.seal()</code> or <code>Object.preventExtentions()</code>, but these are described in the\n                        <a href="./#/theory/object%20methods">object methods</a> section. Here an object descriptor will be covered.'},{elementType:"UnsignedList",content:["<strong>value</strong>: this is the value property will have, by default it is <code>undefined</code>","<strong>writable</strong>: this indicates if property value may be changed with an assignment operator","<strong>enumerable</strong>: indicates if a property will show up in the <code>Object.keys()</code>\n                        or <code>for..in</code> loop,","<strong>configurable</strong>: if true, then objects descriptor property may be modified or property may\n                        be deleted,","<strong>get(){}</strong>: This is a getter, a special function that if defined, will be executed when\n                        the property appears as a right-hand operand. This functions value will be returned instead of actual \n                        property value. This function may be used if property value does not exist, and is dynamically computed, \n                        or is taken from the view (DOM) at the time it is enquired. A getter must return a value.\n                        A getter should never attempt to change any state of the application!","<strong>set(val){}</strong>: This is the function that will be executed when the property appears as a \n                        left-hand operator instead of setting a value to it. This function is called a setter. This function\n                        may be used for some side-effects when the parameter is being set. For example, it may update the view."]},{elementType:"Paragraph",content:"Getter and setter cannot be set together with a value or writable property, as if a property is \n                        set or evaluated dynamically it cannot have a static value. There are methods that should be \n                        used to set/get a property descriptor:"},{elementType:"UnsignedList",content:["\n                    <code>Object.defineProperty(obj, prop, descriptor)</code> is an Object static method that can be used\n                    to define an object property together with its descriptor. \n                    ","\n                    <code>Object.defineProperties</code> can be used to define a few properties at once:\n<pre>\n    Object.defineProperties(obj,\n        {\n            prop1: {enumerable:false, writable:false, configurable:false},\n            prop2: {enumerable:false, writable:false, configurable:false},\n            prop3: {enumerable:false, writable:false, configurable:false}\n        }\n    )\n</pre>                    \n                    \n                    ","<code>Object.getOwnPropertyDescriptor(propName)</code> returns a property descriptor object,","<code>Object.defineProperty</code> method may be used to <string>modify</code> once set \n                    property descriptor. If however object descriptor has its configurable attribute set to false this \n                    will not work,"]},{elementType:"Headline-3",content:"Constructor"},{elementType:"Paragraph",content:['\n                        An object may be created with a constructor function. It is a good practice to start a \n                        constructor name with a capital letter. Each object in JS has its constructor property.\n                        When object is created with <code>let obj = {}</code> then <code>obj.constructor.name === "Object"\n                        </code>. But if an object is created with a constructor function, then the constructor name of \n                        newly created object would be the name of the constructor function.\n                        ']},{elementType:"Code",content:"\n<pre>\nfunction Person(firstName, familyName, age){\n    this.firstName = firstName;\n    this.familyName = familyName;\n    this.age = age;\n}\n\nlet newPerson = new Person('John', 'Doe', '45');\n</pre>                    \n                    "},{elementType:"Headline-3",content:"Ways of creating new objects"},{elementType:"UnsignedList",content:["Basic syntax: <code>var obj = {prop: 'val'};","With a constructor (see above)","With a\n                        <code>\n<pre>\nvar obj = {prop: 'val'};\nvar obj2 = Object.create(obj); // obj2 inherits obj\n</pre>                        \n                        </code>\n                        ","With classes\n                        <code>\n<pre>\nclass Basic {\n    constructor(){this.prop = 'val'}\n}\nclass Extending extends Basic{\n    constructor(){\n        super(); //mandatory in class extending another class,\n        // without this no possibility to refer to this keyword\n        this.prop2 = 'val2'\n    }\n}\nlet instance = new Extending();\n</pre>                        \n                        </code>\n                        "]},{elementType:"Headline-3",content:"Methods"},{elementType:"Paragraph",content:['Object has some methods allowing its manipulation. To learn more please visit the \n                        <a href="./#/theory/object%20methods">object methods</a> section.']}]}].concat(Object(Pe.a)(vt),[{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",description:"About descriptor"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Object",description:"About Object"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/pl/docs/Web/JavaScript/Inheritance_and_the_prototype_chain",description:"Prototype chain"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto",description:"__proto__"},{elementType:"Link",content:"medium.com",href:"https://medium.com/beginners-guide-to-mobile-web-development/super-and-extends-in-javascript-es6-understanding-the-tough-parts-6120372d3420",description:"Super and Extends in JS ES6: an example of how inheritance worked before ES6"},{elementType:"Link",content:"kenneth-kin-lum.blogspot.com",href:"http://kenneth-kin-lum.blogspot.com/2012/10/javascripts-pseudo-classical.html",description:"An explanation with a readable illustration showing prototype inheritance"}]}])};var xt={summary:"object methods",title:"Object methods",searchKeywords:"static assign prototype defineProperty defineProperties freeze getOwnPropertyDescriptor getOwnPropertySymbols\n    getOwnPropertyNames getOwnPropertyDescriptor getPrototypeOf is isExtensible isFrozen isSealed keys preventExtensions seal\n    setPrototypeOf getPrototypeOf values ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Paragraph",content:"\n                    A static method or property is called not on an instance of an object, but on a constructor\n                    or class name:                    \n                    "},{elementType:"Code",content:"\n<pre>\nlet isThisAnArray = Array.isArray([1,2,3]); //a static method\nlet arrLenght = [1, 2, 3].length; // not a static method\n</pre>                    \n                    "},{elementType:"Headline",content:"Object methods and properties"},{elementType:"SmallHeadline",content:"Object.prototype"},{elementType:"Paragraph",content:"\n                    This is a static property of the Object. It may be used to add methods or properties to the Object.\n                    Because each object in JS inherits the Objects methods and properties with the prototype, \n                    a method or property added to the Object will be available in each JS object.\n                    Adding to the global prototype should be avoided, as it breaks encapsulation. Moreover, changing the \n                    prototype of existing objects is time consuming, as all code having access to this prototype is affected.\n                    "},{elementType:"Paragraph",content:"\n                    Not every object has a prototype. In most cases there is a <code>__proto__</code> object \n                    holding a setter and getter of the prototype.\n                    "},{elementType:"Code",content:"\n<pre>\nObject.prototype = ()=>{console.log('abc')};\n//now this is available in each JS object in the document,\n//including Arrays, Maps, Dates etc\n\nlet a = {};\na.prototype.someF = ()=>{};\n//error, a prototype is undefined, does not exist\n\na.__proto__.someF = ()=>{};\n//This is correct\n\nObject.getPrototypeOf(a).someF = ()=>{};\n//This is correct, but someF is available in all JS objects\n//since prototype of a is the same prototype as the Object \n//prototype\n\nfunction Creator(a){ // a constructor\n    this.a = a; \n}\nlet b = new Creator(3);\nObject.getPrototypeOf(b).someOtherF = ()=>{}\n//this is avaliable only in each object created by\n//the Creator, and each object that inherits after the Creator,\n//but not availabel in each JS object, since because a constructor\n//was used the Object.prototype is not the same as the prototype of \n//the Creator\n\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"__proto__"},{elementType:"Paragraph",content:"\n                    A non static property of an object, holds the prototype setter and getter. \n                    <code>Object.getPrototypeOf()</code> and <code>Object.setPrototypeOf()</code> should be used \n                    instead.\n                    "},{elementType:"SmallHeadline",content:"Object.assign(destination, ...sources)"},{elementType:"Paragraph",content:"\n                    Assigns all <strong>own</strong> properties and property values from sources to destination.\n                    If source has the same property value that the destination, destinations value is overridden.\n                    The key word is '<storn>assign</code>' as values are copied using getters and setters, so this\n                    is not a real copy.\n                    "},{elementType:"Code",content:"\n<pre>\nlet commonSymbol = Symbol();\nlet destination = {a: 'destinationA', [commonSymbol]:'symbolDest'};\nlet s1 = {a:'s1A', b:'s1B', [commonSymbol]: 'commonSymb1'};\nlet s2 = {a:'s2A', [commonSymbol]: 'commonSymb2'};\nlet newDestination = Object.assign(destination, s1, s2);\nconsole.log(newDestination === destination); //true\nconsole.log(destination);\n//{a: \"s2A\", b: \"s1B\", Symbol(): \"commonSymb2\"}\n\n</pre>                    \n                    "},{elementType:"NoteWarning",content:"\n                    <ul>\n                    <li>This should not be used for deep object cloning. If a object is nested, then\n                    only a reference would be passed with <code>Object.assign</code>, and attempt to \n                    alter something in a nested object part would result in changing the nested object itself,\n                    and change would be visible in the original object as well\n                    </li>\n                    <li>This does not copy property descriptors</li>\n                    <li>This does not work if the writable property of the descriptor is set to false</li>\n                    </ul>\n                    "},{elementType:"SmallHeadline",content:"Object.create(obj, properties)"},{elementType:"Paragraph",content:"\n                    Creates a new object with a prototype set to <code>obj</code>. <code>obj</code> is an \n                    object that will become the newly created objects prototype. <code>obj</code> argument is mandatory,\n                    <code>properties</code> argument is optional, and takes an object with keys as property names, and \n                    values as descriptors\n                    "},{elementType:"Code",content:"\n<pre>\nlet objA = Object.create(); // TypeError, there is a mandatory argument,\nlet objB = Object.create({}); //Ok;\nlet objC = Object.create({a: 1, b:2, c:3},\n    {\n        a: {enumerable:false, writable:false, configurable:false},\n        b: {enumerable:false, writable:false, configurable:false},\n        c: {enumerable:false, writable:false, configurable:false},\n    });//OK\n\n</pre>                    \n                    "},{elementType:"NoteWarning",content:"\n                    Beware of creating an object out of null: <code>let obj = ObjectCreate(null)</code>.\n                    This may cause difficult to debug situations, as this object has no __proto__, nore \n                    prototype. A prototype could be set with <code>Object.setPrototypeOf(obj, Object.prototype)\n                    </code> and this would solve some problems.\n                    "},{elementType:"SmallHeadline",content:"Object.defineProperty(obj, properyKey, descriptor)"},{elementType:"Paragraph",content:"\n                        Each property in JS object has a descriptor: an object with property settings:\n                    "},{elementType:"UnsignedList",content:["<code>value</code>: this key describes the value under property,","<code>writable</code>: if false then there will be no possibility to assign a new value to this \n                        property","<code>enumerable</code>: if set to false this property will not show up when accessed with <code>\n                        for..in</code>, or <code>Object.getOwnPropertyKeys</code> or <code>Object.getOwnPropertySymbols</code>,","<code>configuralble</code>: if set to false, then this property will not be able to be re-configured. None\n                        of descriptor attributes will be allowed to be changed. If set to false, this property will not be \n                        allowed to be deleted,","<code>get(){return...}<code> a getter function,","<code>set(){}</code> a setter function,"]},{elementType:"Paragraph",content:"\n                        <code>Object.defineProperty()</code> is for setting a property optionally with it \n                        descriptor. It is also used to <strong>modify</code> a property or its descriptor.\n                    "},{elementType:"NoteWarning",content:"\n                        A descriptor is not allowed to have both: (value or writable) and (getter or setter).\n                        A getter or setter does not have to be objects own properties, they may be inherited.\n                    "},{elementType:"SmallHeadline",content:"Object.defineProperties(obj, props)"},{elementType:"Paragraph",content:"\n                        Does the same as <code>Object.defineProperty()</code> but for many properties at the same time\n                    "},{elementType:"Code",content:"\n<pre>\nlet obj = {};\nObject.defineProperties(obj,\n    {\n        prop1: {enumerable:true,writable:true,value:1},\n        prop2: {enumerable:true,writable:true,value:2},\n        prop3: {enumerable:true,writable:true,value:3},\n    })\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"Object.freeze(obj)"},{elementType:"Paragraph",content:"\n                        Frozen object is not extensible, its properties are non-configurable, all its data properties \n                        are non-writable. <br>\n                        <code>Object.freeze()</code>Makes an shallow object fixed. \n                        Attempt to change, add or delete frozen objects properties \n                        will throw slient or not silent errors. Getters and setters will work, however, they will\n                        not change a value that belongs to the frozen object. Nested objects\n                        will not be frozen, so to make them fixed they need to be frozen recursively.\n                    "},{elementType:"Code",content:"\n<pre>\nlet out = 0;\nfunction Obj(a){\n    this.a = a;\n    Object.defineProperty(this, 'b', {\n        configurable: true,\n        get: ()=>{return this.a},\n        set: (val)=>{this.a = val;}\n    });\n    Object.defineProperty(this, 'c', {\n        get: ()=> {return out;},\n        set: (val)=> {out = val;}\n    });\n}\nlet obj = new Obj(3);\nobj.b = 4;\nconsole.log(obj.a); // 4;\nObject.freeze(obj);\nobj.a = 1;\nconsole.log(obj.a); // 4\nobj.b = 1;\nconsole.log(obj.b); // 4, as obj.a was not set, as obj is frozen\nobj.c = 1;\nconsole.log(out); // 1, as out is not a member of the obj.\n//Getters and setters work in frozen objects\n\n</pre>                    \n                    "},{elementType:"NoteWarning",content:"\n                    Once frozen object cannot be unfrozen.\n                    "},{elementType:"SmallHeadline",content:"Object.isFrozen(obj)"},{elementType:"Paragraph",content:"\n                    Returns <code>true</code> if an <code>obj</code> is frozen, and <code>false</code> if not.\n                    Argument of <code>Object.isFrozen()</code> should <b>not</b> be a primitive value, as a \n                    <code>TypeError</code> will be thrown.\n                    "},{elementType:"SmallHeadline",content:"Object.seal(obj)"},{elementType:"Paragraph",content:"\n                        Object property values remain mutable, however, there is no possibility to \n                        add or remove properties from the object. Prototype chain is not affected by this method,\n                        however <code>__proto__</code> is sealed as well.\n                    "},{elementType:"NoteWarning",content:"\n                    Once sealed object cannot be unsealed.\n                    "},{elementType:"SmallHeadline",content:"Object.isSealed(obj)"},{elementType:"Paragraph",content:"\n                    Returns <code>true</code> if an <code>obj</code> is sealed, and <code>false</code> if not.\n                    Argument of <code>Object.isSealed()</code> should <b>not</b> be a primitive value, as a \n                    <code>TypeError</code> will be thrown.\n                    "},{elementType:"SmallHeadline",content:"Object.preventExtensions(obj)"},{elementType:"Paragraph",content:"\n                    A object is extensible if it can have new properties added to it. <code>Object.preventExtensions()</code>\n                    makes it impossible to add new own properties to an object. It can still have properties added to the\n                    [[Prototype]], however changing the [[Prototype]] itself causes a silent <code>TypeError</code>.\n                    In the <code>Strict mode</code> this error will not be silent. \n                    "},{elementType:"Code",content:"\n<pre>\nfunction Fixed(a, b, c){\n    this.a = a;\n    this.nested = {};\n    this.nested.b = b;\n    this.nested.c = c;\n}\nlet fixed = new Fixed(1, 2, 3);\nconsole.log(fixed);\nObject.preventExtensions(fixed);\nfixed.d = 4;\n//a silent TypeError, as not in strict mode;\nObject.getPrototypeOf(fixed).f = 8;\nconsole.log(fixed.f); // 8, as added to prototype\nObject.setPrototypeOf(fixed, Object); // fail\nlet notFixed = new Fixed(5, 6, 7);\nObject.getPrototypeOf(notFixed).e = 8;\nconsole.log(notFixed.e); // e is 8\nconsole.log(fixed.e); //e is 8, as it was added to the prototype\nfixed.nested.g = 9; \nconsole.log(fixed.nested.g); // 9, as nested was not made not extensible together with fixed\n</pre>                    \n                    "},{elementType:"NoteWarning",content:"\n                    Making an object not extensible cannot be reverted.\n                    "},{elementType:"SmallHeadline",content:"Object.isExtensible(obj)"},{elementType:"Paragraph",content:"\n                    Returns <code>true</code> if an <code>obj</code> can have new properties added to it, and false if not.\n                    Argument of <code>Object.isExtensible()</code> should <b>not</b> be a primitive value, as a \n                    <code>TypeError</code> will be thrown.\n                    "},{elementType:"SmallHeadline",content:"Object.getOwnPropertyDescriptor(obj)"},{elementType:"Paragraph",content:'\n                    Returns a descriptor of object own (not inherited with a prototype) property, or\n                    undefined in case the property on this object does not exist. The descriptor is an object describing\n                    a property behaviour, and has the attributes:\n                    <code>value</code>, <code>writable</code>, <code>enumerable</code>, <code>configurable</code>,\n                    <code>get</code> and <code>set</code>. Please see an <a href = "./#/theory/object">object</a> article to learn more.\n                    '},{elementType:"SmallHeadline",content:"Object.getOwnPropertyKeys(obj)"},{elementType:"Paragraph",content:"\n                    Returns an array of own (not inherited with a prototype), string <strong>enumerable and not \n                    enumerable</strong> properties. This method does not return symbol keyed properties.\n                    "},{elementType:"SmallHeadline",content:"Object.getOwnPropertySymbols(obj)"},{elementType:"Paragraph",content:"\n                    Returns an array of own (not inherited with a prototype), symbol <strong>enumerable and not \n                    enumerable</strong> properties. This method does not return string keyed properties.\n                    "},{elementType:"SmallHeadline",content:"Object.getPrototypeOf(obj)"},{elementType:"Paragraph",content:"\n                    Returns a prototype of the given object. A new property can be added to the object with\n                    <code>Object.getPrototypeOf(obj).newProperty = value</code>\n                    "},{elementType:"SmallHeadline",content:"Object.setPrototypeOf(obj, newPrototype)"},{elementType:"Paragraph",content:"\n                    Sets a <code>newPrototype</code> as <code>obj</code> prototype.\n                    "},{elementType:"NoteWarging",content:"\n                    Changeing the [[Prototype]] is an expensive operation, as it requires the change not only to\n                    the [[Prototype]], but also to all code having access to that [[Prototype]]. It is better to\n                    create a new object with a new [[Prototype]] instead.\n                    "},{elementType:"SmallHeadline",content:"Object.is(obj1, obj2)"},{elementType:"Paragraph",content:"\n                    True if 2 objects fill one of the following conditions:\n                    "},{elementType:"UnsignedList",content:["both objects are undefined,","both objects are null,","both objects are true,","both objects are false,","both objects are stirngs and have characters in the same order,","both refer to the same place in the memory,","both are <code>+0</code>,","both are <code>-0</code>,","both are <code>NaN</code>,","both are numbers or BigInts of the same value"]},{elementType:"Code",content:"\n<pre>\nlet objA = {\n    a: 1, b:2, c:3, d: {f:4, g:5}\n}\nlet objB = {\n    a: 1, b:2, c:3, d: {f:4, g:5}\n}\nconsole.log(Object.is(objA, objB));\n\nlet objC = {a: 5};\nlet objD = {a: 5};\nconsole.log(Object.is(objC, objD));\n\nconsole.log(objA == objB); //false\nconsole.log(objA === objB);//false\n\nObject.is({}, {}); //false as not the same place in memory\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"Object.keys()"},{elementType:"Paragraph",content:"\n                    Returns an array of objects <b>own</b> and <b>enumerable</b> property names (string keys)\n                    "},{elementType:"Code",content:"\n<pre>\nlet objA = {\n    a: 1, b: 2, c: 3, [Symbol('d')]:4, [Symbol('e')]:5\n}\nconsole.log(Object.keys(objA)) // ['a', 'b', 'c']\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"Object.values()"},{elementType:"Paragraph",content:"\n                    Returns an array of objects <b>own</b> and <b>enumerable</b> property values that have keys as \n                    strings. Symbol keyed values are not included.\n                    "},{elementType:"Code",content:"\n<pre>\nlet objA = {\n    a: 1, b: 2, c: 3, [Symbol('d')]:4, [Symbol('e')]:5\n}\nconsole.log(Object.values(objA)) // ['a', 'b', 'c']\n</pre>                    \n                    "}]}]};var jt={summary:"reflect",title:"Reflect",searchKeywords:"apply construct, defineProperty deleteProperty get getOwnProperyDescriptor getPrototypeOfHas isExtensible \n    ownKeys preventExtensions set setPrototypeOf\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Reflect"},{elementType:"Paragraph",content:"\n                    <code>Reflect</code> is a non function build in object providing a set of useful, but duplicated with\n                    the <code>Object</code> and <code>Proxy</code> ones. They are even named the same way. The instance of\n                    <code>Reflect</code> cannot be created. This object provides static methods\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.apply(target, thisArg, argList)</code>"},{elementType:"Paragraph",content:"like the \n                    <code>Function.prototype.apply()</code>, where <code>target</code> is a function that will be\n                    called with the apply call."},{elementType:"SmallHeadline",content:"<code>Reflect.construct(target, argList, newTarget)</code>"},{elementType:"Paragraph",content:"like the \n                    Like a cunstructor, but this is a function. Gives an opportunity to set a new constructor, that's\n                    prototype should be used:"},{elementType:"UnsignedList",content:["<code>target</code>: object, that will be created","<code>argList</code>: an array like object","<code>newTarget</code>: optional, a constructor name, that will be set as an prototype for newly created\n                        object"]},{elementType:"Paragraph",content:"returns an instance of the newly created object"},{elementType:"SmallHeadline",content:"<code>Reflect.defineProperty(target, propKey, descriptor)</code>"},{elementType:"Paragraph",content:"\n                        Please read about the <code>Object.defineProperty()</code> for more. The difference is, that\n                        this property returns <code>true</code> if succeeded, and <code>false</code if failed. In case of the Object \n                        property this method returned the object, or throwed an error.\n                    "},{elementType:"UnsignedList",content:["<code>target</code>: target object, that property will be set on","<code>propKey</code>: The property name","<code>descriptor</code>: Similar to the Object descriptor, \n                        having: value, writable, enumerable, configurable, set and get\n                        properties describing the behaviour of the property"]},{elementType:"SmallHeadline",content:"<code>Reflect.deleteProperty(target, propKey)</code>"},{elementType:"Paragraph",content:"\n                        Similar to the non-strict <code>delete</code> operator\n                    "},{elementType:"UnsignedList",content:["<code>target</code>: target object, that property will be deleted from","<code>propKey</code>: The property name"]},{elementType:"SmallHeadline",content:"<code>Reflect.get(target, propKey[, thisArg])</code>"},{elementType:"Paragraph",content:"\n                        Similar to <code>target[propKey]</code> with the difference, that this allows \n                        to set this keyword to some other value. Useful when working with a Proxy\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.set(target, propKey[, thisArg])</code>"},{elementType:"Paragraph",content:"\n                        Similar to <code>target[propKey]</code> with the difference, that this allows \n                        to set this keyword to some other value. Useful when working with a Proxy\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.getOwnPropertyDescriptor(target, propKey[, thisArg])</code>"},{elementType:"Paragraph",content:"\n                        Similar to the Object.getPropertyOf, with the difference non object arguments are \n                        handled. This will throw an error, where Object method will return an object\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.getPrototypeOf(target)</code>"},{elementType:"Paragraph",content:"\n                    The same as <code>Object.getPrototypeOf(target)</code>\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.getPrototypeOf(target)</code>"},{elementType:"Paragraph",content:"\n                    Similar to <code>Object.setPrototypeOf(target)</code> with the difference, that this \n                    returns true if the operation was successful, and false if not, where the object method returns \n                    the object.\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.<b>has</b>(target, propKey)</code>"},{elementType:"Paragraph",content:"\n                    Returns <code>true</code> if there is a property <code>propKey</code> in the object\n                    given as the <code>target</code>\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.isExtinsable(target)</code>"},{elementType:"Paragraph",content:"\n                    The same as the <code>Object.isExtinsible()</code>, true if object can have properties added to it,\n                    and <code>false</code> if not,\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.preventExtensions(target)</code>"},{elementType:"Paragraph",content:"\n                    Makes it impossible to add any properties to the <code>target</code> object.\n                    This operation cannot be reverted.\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.ownKeys(target)</code>"},{elementType:"Paragraph",content:"\n                    Returns an array of the <code>target</code> objects keys. \n                    This returns <b>both: symbol and string keys</b>,\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",description:"Tutorial"},{elementType:"Link",content:"on github",href:"https://github.com/tvcutsem/harmony-reflect/wiki",description:"Use cases"}]}]};var Tt={summary:"this keyword",title:"this keyword",searchKeywords:"this scope",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"this"},{elementType:"Paragraph",content:"\n                        <code>this</code> is a reserved keyword, thats value depends on the context <code>this</code> keyword\n                        is used in.\n                    "},{elementType:"UnsignedList",content:["<strong>Object constructor</strong>: this context is provided with the <code>new</code> operator,"]},{elementType:"Paragraph",content:"\n                   \n                    "},{elementType:"UnsignedList",content:[""]},{elementType:"Code",content:"\n<pre>\n\n</pre>                        \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation",description:"Tutorial"}]}]};var Ot,St,kt,Ct,At,It,Pt,Nt,Et,Ht,Mt,Lt,Dt,Rt,Ft,Bt,Ut,_t,Wt,qt,zt,Gt,Vt,Kt,$t,Jt,Xt,Yt,Qt,Zt,en,tn,nn,on,an,rn,sn,cn,ln,dn,pn={summary:"proxy",title:"Proxy",searchKeywords:"getPrototypeOf setPrototypeOf isExtensible preventExtensions getOwnPropertyDescriptor \n    defineProperty has get set deleteProperty ownKeys apply constructor\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Proxy"},{elementType:"Paragraph",content:"\n                    The <code>Proxy</code> is an API allowing user to wrap an existing object to make some additional \n                    operations when Object methods are being called on this object. There is a banch of methods that \n                    the proxy allows to use. Proxy takes 2 \n                    arguments: a <code>target</code> object, and a <code>handler</code> - an object having \n                    traps. Traps are functions that will allow to implement a specific behaviour on object operations.\n                    "},{elementType:"SmallHeadline",content:"Proxy creation"},{elementType:"UnsignedList",content:["<code>let p = new Proxy(target, handler)</code>, where the <code>target</code> is an object, \n                        that will be handled \n                        by the proxy, and <code>handler</code> is a set of methods, \n                        that will be called when proxy is used,","<code>let pr = new Proxy.revocable(target, handler)</code>, where the <code>target</code>\n                        is an object, that will be handled by the proxy, <code>handler</code> is an object with \n                        traps, and <code>revocable</code> means, that the proxy may be turned off (revoked) with a\n                        call of <code>pr.revoke()</code>. Once revoked proxy is useless, and can be garbage collected, as\n                        there is no possibility to turn proxy again."]},{elementType:"SmallHeadline",content:"Traps"},{elementType:"UnsignedList",content:["<code>handler.getPrototypeOf(target)</code>, a trap for the <code>Object.getPrototypeOf()</code> method","<code>handler.setPrototypeOf(target, newPrototype)</code>, a trap for the \n                        <code>Object.setPrototypeOf()</code> method","<code>handler.isExtensible(target)</code>, a trap for the <code>Object.isExtensible()</code> method","<code>handler.preventExtensions(target)</code>, a trap for the <code>Object.preventExtensions</code> \n                        method","<code>handler.getOwnPropertyDescriptor</code> is a trap for the <code>Object.getOwnPropertyDescriptor()\n                        </code> method","<code>handler.defineProperty(target, property, descriptor)</code> \n                        is a trap for the <code>Object.defineProperty()</code> method","<code>handler.has(target, property)</code> is the trap for the <code>in</code> operator,","<code>handler.get(target, property, thisArg)</code> is a trap for getting a property with lets say an <code>=</code>\n                        operator","<code>handler.set(target, property, thisArg)</code> is a trap for setting a property,","<code>handler.deleteProperty(target, property)</code>: a trap for the delete operator,","<code>handler.ownKeys(target)</code>, a trap for the <code>Reflect.ownKeys()</code>,\n                        or <code>Object.getOwnKeyNames</code>, <code>Object.getOwnSymbols()</code> method,","<code>handler.apply(target, thisArg, argumentsList)</code> a trap for the function call,","<code>handler.construct()</code>, a trap for the <code>new</code> operator. This tarp has to\n                        return an object (not a primitive), and needs the target of this proxy to be a constructor"]},{elementType:"SmallHeadline",content:"Example"},{elementType:"UnsignedList",content:["Defining a new property on the proxy will cause a corresponding element in DOM to appear, or\n                        update if property was already defined,","Getting a property from the proxy will cause an alert message to appear,","Deleting an existing property from the proxy will cause a corresponding element from the DOM to disappear,","Note, that properties are defined under <code>proxy[someProperty]</code>, and in reality they exist under\n                        a nested object: <code>targetObject.contentStorage</code>"]},{elementType:"Code",content:"\n<pre>\nfunction Binder(outletId){\n    let form = document.forms[0];\n    form.onsubmit = submit;\n    this.outletId = outletId;\n    this.getIdFromKey = function(key){\n        return 'id'+key\n    };\n    this.contentStorage = {};\n};\nlet handler = {\n    set: function(target, key, value){\n        if (key !== 'storage'){\n            let isAlreadyAdded = Reflect.has(target.contentStorage, key);\n            let newValue = 'prop: '+key+ ' ' + 'val: '+ value;\n            if (isAlreadyAdded){\n                let elementInDom = document.getElementById(target.getIdFromKey(key));\n                elementInDom.innerText = newValue;\n            } else {\n                let newElement = document.createElement('div');\n                let outlet = document.getElementById(target.outletId);\n                newElement.setAttribute('id', target.getIdFromKey(key))\n                newElement.innerText = newValue;       \n                outlet.appendChild(newElement)\n            }\n            target.contentStorage[key] = value;\n        }\n    },\n    get: function(target, key){\n        if (key == 'storage') return target.contentStorage;\n        let elementExists = Reflect.has(target.contentStorage, key);\n        let value = null;\n        if (elementExists) value = target.contentStorage[key];\n        window.alert(\n            elementExists?'Item value is: '+ value:'Item does not exist'\n        )\n        return value;\n    },\n    deleteProperty: function(target, key){\n        console.log(target);\n        console.log(key)\n        let elementExists = Reflect.has(target.contentStorage, key);\n        if (elementExists){\n            let domElement = document.getElementById(target.getIdFromKey(key));\n            let infoText = 'Element '+domElement.innerText+' will was removed';\n            domElement.remove();\n            Reflect.deleteProperty(target.contentStorage, key);\n            console.log(target.contentStorage)\n            window.alert(infoText);\n        } else {\n            window.alert('Element '+key+' not found')\n        }\n    },\n}\n\nlet targetObject = new Binder('someId');\nlet proxy = new Proxy(targetObject, handler)\n\n</pre>                    \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Proxy",description:"Tutorial"}]}]};var mn={summary:"bitwise use cases",title:"Bitwise use cases",searchKeywords:"left shift rigth shift bitwise and or not xor masking rgb hex conversion\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Bitwise use cases"},{elementType:"Paragraph",content:"\n                    There is a set of 7 bitwise (assignment bitwise operators not counted) operators:\n                    "},{elementType:"UnsignedList",content:["<code>~</code>: NOT,","<code>&</code>: AND,","<code>|</code>: OR,","<code>^</code>: XOR,","<code><<</code>: Left shift,","<code>>></code>: sign proprgating right shift,","<code>>>></code>: Zero-fill right shift,"]},{elementType:"Paragraph",content:"\n                    Lets see some use cases of these operators. To learn more, please refer to the article from\n                    the reference section.\n                    "},{elementType:"NoteWarning",content:"\n                    Bitwise operators make take both: BitInts and numbers as operands. Exception is ther right shift zero-fill\n                    operator. The condition is that both operands are of the same type.\n                    "},{elementType:"SmallHeadline",content:"How are values in examples calculated?"},{elementType:"UnsignedList",content:["<i>Binary expression</i> and <i>Binary outcome</i>: <code>(val).toString(2)</code>","<i>>>> expression</i> and <i>>>> outcome</i>: <code>(val).toString(2 >>> 0)</code>, \n                        zero-fill right shift operator is the only way, that \n                        allow to preserve original coding of negative numbers"]},{elementType:"NoteWarning",content:"\n                    These bits work only in <code>Number</code> type, that are integers small enough to be \n                    as a 31 bit binary (sign not included, the most significant bit of the 32 bit representation is a \n                    sign bit)\n                    "},{elementType:"Headline-3",content:"<code>~</code>: NOT"},{elementType:"UnsignedList",content:["<code> ~ 1 </code>: 0,","<code> ~ 0 </code>: 1,"]},{elementType:"Paragraph",content:"\n                    This operator negates each bit of the number: \n                    "},{elementType:"ConditionalArray",headItems:["Expression","Outcome","Binary expression","Binary outcome",">>> expression",">>> outcome"],content:[(Ot={},Object(x.a)(Ot,Symbol("title"),"~"),Object(x.a)(Ot,"Expression","<code>~5</code>"),Object(x.a)(Ot,"Outcome","<code>-6</code>"),Object(x.a)(Ot,"Binary expression","101"),Object(x.a)(Ot,"Binary outcome","-110"),Object(x.a)(Ot,">>> expression","00000000000000000000000000000101"),Object(x.a)(Ot,">>> outcome","11111111111111111111111111111010"),Ot),(St={},Object(x.a)(St,Symbol("title"),"~"),Object(x.a)(St,"Expression","<code>~-1</code>"),Object(x.a)(St,"Outcome","<code>0</code>"),Object(x.a)(St,Symbol("code"),' \n                            If converted to a boolean value, this will become true.\n<pre>\n    let finder = function(itemToSearch){\n        return function(item, index){\n            if (item == itemToSearch) return true;\n            return false    \n        }\n    }\n    let arr = [0, 1, 2, 3];\n    let find3 = finder(3);\n    let find4 = finder(4);\n\n    findIndex returns -1 if does not find an element \n    meeting criteria from a callback function, and returns\n    a found element index in other cases\n\n    let isElementFound_true = ~arr.findIndex(find3);\n    // (~3 >>> 0).toString(2) == "11111111111111111111111111111100"\n    // and this is true, every  value that is != -1 \n    // after negation with bitwise NOT will be true\n\n    let isElementFound_false  = ~arr.findIndex(find4);\n    // (~-1 >>> 0).toString(2) == "00000000000000000000000000000000"\n    // NOT is perfect for converting array seach index function\n    // outcome to a boolean value\n\n</pre>                            \n                                                        '),Object(x.a)(St,"Binary expression","1"),Object(x.a)(St,"Binary outcome","-1"),Object(x.a)(St,">>> expression","11111111111111111111111111111111"),Object(x.a)(St,">>> outcome","00000000000000000000000000000000"),St),(kt={},Object(x.a)(kt,Symbol("title"),"~"),Object(x.a)(kt,"Expression","<code>~0</code>"),Object(x.a)(kt,"Outcome","<code>-1</code>"),Object(x.a)(kt,"Binary expression","1"),Object(x.a)(kt,"Binary outcome","-1"),Object(x.a)(kt,">>> expression","00000000000000000000000000000000"),Object(x.a)(kt,">>> outcome","11111111111111111111111111111111"),kt),(Ct={},Object(x.a)(Ct,Symbol("title"),"~"),Object(x.a)(Ct,"Expression","<code>~1</code>"),Object(x.a)(Ct,"Outcome","<code>-2</code>"),Object(x.a)(Ct,"Binary expression","1"),Object(x.a)(Ct,"Binary outcome","-1"),Object(x.a)(Ct,">>> expression","00000000000000000000000000000001"),Object(x.a)(Ct,">>> outcome","11111111111111111111111111111110"),Ct),(At={},Object(x.a)(At,Symbol("title"),"~"),Object(x.a)(At,"Expression","<code>~true</code>"),Object(x.a)(At,"Outcome","<code>-2</code>"),Object(x.a)(At,"Binary expression","1"),Object(x.a)(At,"Binary outcome","-1"),Object(x.a)(At,">>> expression","00000000000000000000000000000001"),Object(x.a)(At,">>> outcome","11111111111111111111111111111110"),At),(It={},Object(x.a)(It,Symbol("title"),"~"),Object(x.a)(It,"Expression","<code>~14147483690</code>"),Object(x.a)(It,Symbol("code")," \nNote that 14147483690 > 2147483647, so is greater than the greatest number that can be represented within 31 bits,\nthat is why left most bits are discarded.\n                            "),Object(x.a)(It,"Outcome","<code>-1262581803</code>"),Object(x.a)(It,"Binary expression","1001011010000010111100000101010"),Object(x.a)(It,"Binary outcome","10110100101111101000011111010101"),Object(x.a)(It,">>> expression","1101001011010000010111100000101010"),Object(x.a)(It,">>> outcome","11111111111111111111111111111110"),It)]},{elementType:"UnsignedList",content:["<code>~</code> should not be mistaken with a <code>!</code> operator, the second one \n                        negates boolean expressions, and the first one converts to binary,","<code>~array.findIndex(cb())</code> will return true or false instead of -1 or an index.\n                        Click above table <code>~-1</code> row to see more,","<code>~~val</code> could be an equivalent to <code>Math.floor(val)</code> in case the\n                        <code>val</code> is not greater than <code>2**31-1</code>"]},{elementType:"Headline-3",content:"&: AND"},{elementType:"UnsignedList",content:["<code>0 & 0 == 0;</code>,","<code>0 & 1 == 0;</code>,","<code>1 & 0 == 0;</code>,","<code>1 & 1 == 1;</code>,"]},{elementType:"SmallHeadline",content:"Useful properties"},{elementType:"UnsignedList",content:["<code>A & 0 == 0;</code>,","<code>A & ~A == 0;</code>,","<code>A & A == A;</code>,","<code>A & -1 == A;</code>,"]},{elementType:"ConditionalArray",headItems:["Expression","Outcome","Binary expression","Binary outcome",">>> expression",">>> outcome"],content:[(Pt={},Object(x.a)(Pt,Symbol("title"),"&"),Object(x.a)(Pt,"Expression","<code>192.168.255.10 & 255.255.255.0</code>"),Object(x.a)(Pt,Symbol("code")," \n                            If converted to a boolean value, this will become true.\n<pre>\nThis example is related to computer networks, a bitwise AND is used for IP masking\n192.168.255.10 == C0.A8.FF.00 ==\n11000000.10101000.11111111.00001010 &\n11111111.11111111.11111111.00000000\n-------------------------------------\n11000000.10101000.11111111.00000000\n\nand this is an address of the network,\nthis network can have hosts from \n192.168.255.1 to 192.168.255.254,\n192.168.255.255 is reserved for the broadcast address,\n192.168.255.0 is a network address.\n\n</pre>                            \n                                                        "),Object(x.a)(Pt,"Outcome","<code>192.168.255.0</code>"),Object(x.a)(Pt,"Binary expression","C0.A8.FF.00 & FF.FF.FF.00"),Object(x.a)(Pt,"Binary outcome","Click to see"),Object(x.a)(Pt,">>> expression","Click to see"),Object(x.a)(Pt,">>> outcome","Click to see"),Pt),(Nt={},Object(x.a)(Nt,Symbol("title"),"&"),Object(x.a)(Nt,"Expression","<code>#FFABCD & BLUE_FLAG</code>"),Object(x.a)(Nt,"Outcome","<code>CD</code>"),Object(x.a)(Nt,Symbol("code")," \n                            If converted to a boolean value, this will become true.\n<pre>\nAND operator is perfect for extracting red, green, blue\ningrediance from some hexadecimal format:\nlet RED_FLAG = (255 << 16);\nlet GREEN_FLAG = (255 << 8);\nlet BLUE_FLAG = (255);\n\nfunction prefixWith0(hexColorAsStr){\n    if(hexColorAsStr.length == 3){\n        let slicedStr = hexColorAsStr.split('');\n        slicedStr.unshift('');\n        return slicedStr.join('0');\n    }\n    return hexColorAsStr;\n}\n\nfunction getRed(hexColor){\n    \n    return (parseInt(hexColor,16) & RED_FLAG) >> 16\n}\nfunction getGreen(hexColor){\n    return (parseInt(hexColor,16) & GREEN_FLAG) >> 8\n}\nfunction getBlue(hexColor){\n    return parseInt(hexColor,16) & BLUE_FLAG\n}\n\nfunction hex2RGB(hexString){\n    if (hexString[1]==\"#\") hexString = hexString.substring(1);\n    hexString = prefixWith0(hexString)\n    let r = getRed(hexString);\n    let g = getGreen(hexString);\n    let b = getBlue(hexString);\n    \n    return `rgb(${r}, ${g}, ${b})`\n}\n\n</pre>                            \n                                                        "),Object(x.a)(Nt,"Binary expression","Click to see"),Object(x.a)(Nt,"Binary outcome","Click to see"),Object(x.a)(Nt,">>> expression","Click to see"),Object(x.a)(Nt,">>> outcome","Click to see"),Nt),(Et={},Object(x.a)(Et,Symbol("title"),"&"),Object(x.a)(Et,Symbol("code"),"\n<pre>\n00000000000000000000000011001000 &\n00000000000000000000000001100100 \n----------------------------------\n00000000000000000000000001000000 \n</pre>                            \n                            "),Object(x.a)(Et,"Expression","<code>200 & 100</code>"),Object(x.a)(Et,"Outcome","<code>64</code>"),Object(x.a)(Et,"Binary expression","11001000 & 1100100"),Object(x.a)(Et,"Binary outcome","1000000"),Object(x.a)(Et,">>> expression","11001000"),Object(x.a)(Et,">>> outcome","1100100"),Et),(Ht={},Object(x.a)(Ht,Symbol("title"),"&"),Object(x.a)(Ht,Symbol("code"),"\n<pre>\nfunction isEvent(int){\n    return int & 1 == 0\n}\nfunction isOdd(int){\n    return int & 0 == 1\n}\n00000000000000000000000001100101 &\n00000000000000000000000000000001 \n----------------------------------\n00000000000000000000000000000001 \n//false\n</pre>                            \n                            "),Object(x.a)(Ht,"Expression","<code>isEven(101)</code>"),Object(x.a)(Ht,"Outcome","<code>false</code>"),Object(x.a)(Ht,"Binary expression","1100101 & 1 == 0"),Object(x.a)(Ht,"Binary outcome","1"),Object(x.a)(Ht,">>> expression","1100101"),Object(x.a)(Ht,">>> outcome","1"),Ht)]},{elementType:"UnsignedList",content:["IP masking","Flags, making sure bits are turned off","Getting RGB ingredients from a hex number","Checking if a number is even or odd"]},{elementType:"Headline-3",content:"<code>|</code>: OR"},{elementType:"UnsignedList",content:["<code>0 | 0 == 0;</code>,","<code>0 | 1 == 1;</code>,","<code>1 | 0 == 1;</code>,","<code>1 | 1 == 1;</code>,"]},{elementType:"SmallHeadline",content:"Useful properties"},{elementType:"UnsignedList",content:["<code>A | 0 == A;</code>,","<code>A | ~A == -1;</code>,","<code>A | A == A;</code>,","<code>A | -1 == -1;</code>,"]},{elementType:"UnsignedList",content:["Turning on bits when calling a function with a flag","Converting RGB to Hex"]},{elementType:"SmallHeadline",content:"RGB to Hex"},{elementType:"Code",content:"\n<pre>\n    function getRed(int){\n        return (int << 16)\n    }\n    function getGreen(int){\n        return (int << 8)\n    }\n    function getBlue(int){\n        return (int << 0)\n    }\n    function rgb2Hex(str){\n        let ingredients = str.split('(')[1].split(',');\n        let r = getRed(parseInt(ingredients[0]));\n        let g = getGreen(parseInt(ingredients[1]));\n        let b = getBlue(parseInt(ingredients[2]));\n        return '#'+ (r | g | b).toString(16);\n    }\n</pre>                    \n                    "},{elementType:"Headline-3",content:"<code>^</code>: XOR"},{elementType:"UnsignedList",content:["<code>0 ^ 0 == 0;</code>,","<code>0 ^ 1 == 1;</code>,","<code>1 ^ 0 == 1;</code>,","<code>1 ^ 1 == 0;</code>,"]},{elementType:"SmallHeadline",content:"Useful properties"},{elementType:"UnsignedList",content:["<code>A ^ 0 == A;</code>,","<code>A ^ ~A == -1;</code>,","<code>A ^ A == 0;</code>,","<code>A ^ -1 == ~A;</code>,"]},{elementType:"UnsignedList",content:["Toggling bits","Color inversion"]},{elementType:"SmallHeadline",content:"Color inversion"},{elementType:"Code",content:"\n<pre>\n    function invertSingle(int){\n        return (int ^ 255)\n    }\n    function invert(str){\n        let ingredients = str.split('(')[1].split(',');\n        let r = invertSingle(parseInt(ingredients[0]));\n        let g = invertSingle(parseInt(ingredients[1]));\n        let b = invertSingle(parseInt(ingredients[2]));\n        return `rgb(${r},${g},${b})`\n    }\n    //white -> black;\n    //green -> magenta;\n    //red -> cyan;\n    //blue -> yellow;\n</pre>                    \n                    "},{elementType:"Headline-3",content:"<code><<</code>: a Left shift operator"},{elementType:"Paragraph",content:"\n                    Changes the left and right operand to the 32 integer representation, and shifts the left operand \n                    bits the number of positions indicated by the right operand modulo 32.\n                    "},{elementType:"Paragraph",content:"\n                    The behaviour of this operator may be complicated in some cases, that is why it is needed to be \n                    careful when the result would not fit into 31 bits\n                    "},{elementType:"Paragraph",content:"\n                    For simplicity: <code>a << b === a * (2 ** b)</code> but the real replacement would be:<br> \n                    Math.floor(a) * (2 ** (Math.floor(b>>>0) % 32))) & -1\n                    "},{elementType:"ConditionalArray",headItems:["Expression","Outcome","Binary expression","Binary outcome",">>> expression",">>> outcome"],content:[(Mt={},Object(x.a)(Mt,Symbol("title"),"<<"),Object(x.a)(Mt,"Expression","<code>1 << 10</code>"),Object(x.a)(Mt,"Outcome","<code>1024</code>"),Object(x.a)(Mt,"Binary expression","1"),Object(x.a)(Mt,"Binary outcome","10000000000"),Object(x.a)(Mt,">>> expression","1"),Object(x.a)(Mt,">>> outcome","10000000000"),Mt),(Lt={},Object(x.a)(Lt,Symbol("title"),"<<"),Object(x.a)(Lt,"Expression","<code>5 << 10</code>"),Object(x.a)(Lt,"Outcome","<code>5120</code>"),Object(x.a)(Lt,"Binary expression","101"),Object(x.a)(Lt,"Binary outcome","1010000000000"),Object(x.a)(Lt,">>> expression","101"),Object(x.a)(Lt,">>> outcome","1010000000000"),Lt),(Dt={},Object(x.a)(Dt,Symbol("title"),"1 << 31"),Object(x.a)(Dt,"Expression","<code>1 << 31</code>"),Object(x.a)(Dt,"Outcome","<code>-2147483648</code>"),Object(x.a)(Dt,"Binary expression","1"),Object(x.a)(Dt,"Binary outcome","-10000000000000000000000000000000"),Object(x.a)(Dt,">>> expression","00000000000000000000000000000001"),Object(x.a)(Dt,">>> outcome","10000000000000000000000000000000"),Dt),(Rt={},Object(x.a)(Rt,Symbol("title"),"1 << 32"),Object(x.a)(Rt,"Expression","<code>1 << 32</code>"),Object(x.a)(Rt,"Outcome","<code>1</code>"),Object(x.a)(Rt,Symbol("code")," \n                            Here is an example that, for example, in Chromium 90.0.4430.72 or Firefox 88.0 \n                            first bit is not forgotten. 5 << 32 === 5, so bits are moved back to their \n                            initial position                           \n                                                        "),Object(x.a)(Rt,"Binary expression","1"),Object(x.a)(Rt,"Binary outcome","1"),Object(x.a)(Rt,">>> expression","1"),Object(x.a)(Rt,">>> outcome","1"),Rt),(Ft={},Object(x.a)(Ft,Symbol("title"),"5 << 30"),Object(x.a)(Ft,"Expression","<code>5 << 30</code>"),Object(x.a)(Ft,"Outcome","<code>1073741824</code>"),Object(x.a)(Ft,Symbol("code")," \n                            Here behaviour is different from 1 << 32. One bit is forgotten, and one is moved.\n                            The conclusion is, that if there is chance that a number will fall out of the given \n                            boundaries, it is better not to use this operator, as behaviour may be \n                            hard to predict and will not be readable\n                                                        "),Object(x.a)(Ft,"Binary expression","101"),Object(x.a)(Ft,"Binary outcome","1000000000000000000000000000000"),Object(x.a)(Ft,">>> expression","101"),Object(x.a)(Ft,">>> outcome","1000000000000000000000000000000"),Ft),(Bt={},Object(x.a)(Bt,Symbol("title"),"123456789 << 32"),Object(x.a)(Bt,"Expression","<code>123456789 << 32</code>"),Object(x.a)(Bt,"Outcome","<code>123456789</code>"),Object(x.a)(Bt,Symbol("code")," \n                            In this example, all bits are rewound, as we move whole number exactly 32 bits, but \n                            please see the next example.\n                                                        "),Object(x.a)(Bt,"Binary expression","111010110111100110100010101"),Object(x.a)(Bt,"Binary outcome","111010110111100110100010101"),Object(x.a)(Bt,">>> expression","111010110111100110100010101"),Object(x.a)(Bt,">>> outcome","111010110111100110100010101"),Bt),(Ut={},Object(x.a)(Ut,Symbol("title"),"123456789 << 39"),Object(x.a)(Ut,"Expression","<code>123456789 << 39</code>"),Object(x.a)(Ut,"Outcome","<code>-1377400192</code>"),Object(x.a)(Ut,Symbol("code")," \n                            Here it is visable, that some bits are rewound (due to 32 bit shift), and some are\n                            discarded (due to the fact, that this shift is greater than 32). This example \n                            illustrates a hard to predict not readable case\n                                                        "),Object(x.a)(Ut,"Binary expression","111010110111100110100010101"),Object(x.a)(Ut,"Binary outcome","10101101111001101000101010000000"),Object(x.a)(Ut,">>> expression","111010110111100110100010101"),Object(x.a)(Ut,">>> outcome","10101101111001101000101010000000"),Ut),(_t={},Object(x.a)(_t,Symbol("title"),"5.5 << 2.5"),Object(x.a)(_t,"Expression","<code>5.5 << 2.5</code>"),Object(x.a)(_t,"Outcome","<code>20</code>"),Object(x.a)(_t,Symbol("code")," \n                            Here it is visable, that some bits are rewound (due to 32 bit shift), and some are\n                            discarded (due to the fact, that this shift is greater than 32). This example \n                            illustrates a hard to predict not readable case\n                                                        "),Object(x.a)(_t,"Binary expression","101.1"),Object(x.a)(_t,"Binary outcome","10100"),Object(x.a)(_t,">>> expression","101"),Object(x.a)(_t,">>> outcome","10100"),_t),(Wt={},Object(x.a)(Wt,Symbol("title"),"5 << -1"),Object(x.a)(Wt,"Expression","<code>5 << -1</code>"),Object(x.a)(Wt,"Outcome","<code>-2147483648</code>"),Object(x.a)(Wt,Symbol("code")," \n                            \n                                                        "),Object(x.a)(Wt,"Binary expression","101"),Object(x.a)(Wt,"Binary outcome","10000000000000000000000000000000"),Object(x.a)(Wt,">>> expression","00000000000000000000000000000101"),Object(x.a)(Wt,">>> outcome","10000000000000000000000000000000"),Wt),(qt={},Object(x.a)(qt,Symbol("title"),"5 << -2"),Object(x.a)(qt,"Expression","<code>5 << -2</code>"),Object(x.a)(qt,"Outcome","<code>1073741824</code>"),Object(x.a)(qt,Symbol("code")," \n                            \n                                                        "),Object(x.a)(qt,"Binary expression","101"),Object(x.a)(qt,"Binary outcome","01000000000000000000000000000000"),Object(x.a)(qt,">>> expression","00000000000000000000000000000101"),Object(x.a)(qt,">>> outcome","01000000000000000000000000000000"),qt),(zt={},Object(x.a)(zt,Symbol("title"),"5 << -3"),Object(x.a)(zt,"Expression","<code>5 << -3</code>"),Object(x.a)(zt,"Outcome","<code>-1610612736</code>"),Object(x.a)(zt,Symbol("code")," \n                            \n                                                        "),Object(x.a)(zt,"Binary expression","101"),Object(x.a)(zt,"Binary outcome","10100000000000000000000000000000"),Object(x.a)(zt,">>> expression","00000000000000000000000000000101"),Object(x.a)(zt,">>> outcome","10100000000000000000000000000000"),zt)]},{elementType:"Headline-3",content:"<code>>></code>: a right shift sign-propagating operator"},{elementType:"Paragraph",content:"\n                    Changes the left and right operand to the 32 bit integer representation, and shifts the left operand \n                    bits the number of positions indicated by the right operand modulo 32 to the right. \n                    This operator preserves its sign, so in case a negative number\n                    is shifted, most significant bits will be filled with 1, and in case a positive number is shifted,\n                    most significant bits will be filled with 0.\n                    "},{elementType:"Paragraph",content:"\n                    The idea of this operand can be represented by below pattern<br>\n                    <code>a >> b === Math.floor(A / (2 ** b)</code>\n                    In reality, however behaviour of this operator is slightly more complicated:\n<pre>\n<code>\nlet right = (a, b) => {\n    if (a < 0) return Math.floor(a / (2 ** b))\n    return (Math.floor(a >>> 0) / (2 ** (Math.floor(b>>>0) % 32))) & -1\n}\n// tests proving this works are in the operators article\n</code>\n</pre>\n                    "},{elementType:"ConditionalArray",headItems:["Expression","Outcome","Binary expression","Binary outcome",">>> expression",">>> outcome"],content:[(Gt={},Object(x.a)(Gt,Symbol("title"),">>"),Object(x.a)(Gt,"Expression","<code>10 >> 1</code>"),Object(x.a)(Gt,"Outcome","<code>5</code>"),Object(x.a)(Gt,"Binary expression","1010"),Object(x.a)(Gt,"Binary outcome","101"),Object(x.a)(Gt,">>> expression","1010"),Object(x.a)(Gt,">>> outcome","101"),Gt),(Vt={},Object(x.a)(Vt,Symbol("title"),">>"),Object(x.a)(Vt,"Expression","<code>10.5 >> 1.5</code>"),Object(x.a)(Vt,"Outcome","<code>5</code>"),Object(x.a)(Vt,"Binary expression","1010"),Object(x.a)(Vt,"Binary outcome","101"),Object(x.a)(Vt,">>> expression","1010"),Object(x.a)(Vt,">>> outcome","101"),Vt),(Kt={},Object(x.a)(Kt,Symbol("title"),">>"),Object(x.a)(Kt,"Expression","<code>1024 >> 10</code>"),Object(x.a)(Kt,"Outcome","<code>1</code>"),Object(x.a)(Kt,"Binary expression","10000000000"),Object(x.a)(Kt,"Binary outcome","1"),Object(x.a)(Kt,">>> expression","10000000000"),Object(x.a)(Kt,">>> outcome","1"),Kt),($t={},Object(x.a)($t,Symbol("title"),">>"),Object(x.a)($t,"Expression","<code>5120 >> 11</code>"),Object(x.a)($t,"Outcome","<code>2</code>"),Object(x.a)($t,"Binary expression","1010000000000"),Object(x.a)($t,"Binary outcome","10"),Object(x.a)($t,">>> expression","1010000000000"),Object(x.a)($t,">>> outcome","10"),$t),(Jt={},Object(x.a)(Jt,Symbol("title"),">>"),Object(x.a)(Jt,"Expression","<code>-5 >> 2</code>"),Object(x.a)(Jt,"Outcome","<code>-2</code>"),Object(x.a)(Jt,"Binary expression","-101"),Object(x.a)(Jt,"Binary outcome","-10"),Object(x.a)(Jt,">>> expression","11111111111111111111111111111011"),Object(x.a)(Jt,">>> outcome","11111111111111111111111111111110"),Jt),(Xt={},Object(x.a)(Xt,Symbol("title"),">>"),Object(x.a)(Xt,"Expression","<code>5 >> 32</code>"),Object(x.a)(Xt,"Outcome","<code>5</code>"),Object(x.a)(Xt,Symbol("code")," \n                            When moving the number n*32 bits, where n is a positive integer, \n                            the outcome is the same number\n                                                        "),Object(x.a)(Xt,"Binary expression","101"),Object(x.a)(Xt,"Binary outcome","101"),Object(x.a)(Xt,">>> expression","101"),Object(x.a)(Xt,">>> outcome","101"),Xt),(Yt={},Object(x.a)(Yt,Symbol("title"),">>"),Object(x.a)(Yt,"Expression","<code>5 >> 31</code>"),Object(x.a)(Yt,"Outcome","<code>0</code>"),Object(x.a)(Yt,Symbol("code")," \n                            All bits are discarded, none is rewound as there is a sign bit\n                                                        "),Object(x.a)(Yt,"Binary expression","101"),Object(x.a)(Yt,"Binary outcome","0"),Object(x.a)(Yt,">>> expression","101"),Object(x.a)(Yt,">>> outcome","0"),Yt),(Qt={},Object(x.a)(Qt,Symbol("title"),">>"),Object(x.a)(Qt,"Expression","<code>5 >> 33</code>"),Object(x.a)(Qt,"Outcome","<code>2</code>"),Object(x.a)(Qt,"Binary expression","101"),Object(x.a)(Qt,"Binary outcome","10"),Object(x.a)(Qt,">>> expression","101"),Object(x.a)(Qt,">>> outcome","10"),Qt),(Zt={},Object(x.a)(Zt,Symbol("title"),">>"),Object(x.a)(Zt,"Expression","<code>5 >> -1</code>"),Object(x.a)(Zt,"Outcome","<code>0</code>"),Object(x.a)(Zt,"Binary expression","101"),Object(x.a)(Zt,"Binary outcome","0"),Object(x.a)(Zt,">>> expression","101"),Object(x.a)(Zt,">>> outcome","0"),Zt),(en={},Object(x.a)(en,Symbol("title"),">>"),Object(x.a)(en,"Expression","<code>5 >> -2</code>"),Object(x.a)(en,"Outcome","<code>0</code>"),Object(x.a)(en,"Binary expression","101"),Object(x.a)(en,"Binary outcome","0"),Object(x.a)(en,">>> expression","101"),Object(x.a)(en,">>> outcome","0"),en),(tn={},Object(x.a)(tn,Symbol("title"),">>"),Object(x.a)(tn,"Expression","<code>5 >> -29</code>"),Object(x.a)(tn,"Outcome","<code>0</code>"),Object(x.a)(tn,"Binary expression","101"),Object(x.a)(tn,"Binary outcome","0"),Object(x.a)(tn,">>> expression","101"),Object(x.a)(tn,">>> outcome","0"),tn),(nn={},Object(x.a)(nn,Symbol("title"),">>"),Object(x.a)(nn,"Expression","<code>5 >> -30</code>"),Object(x.a)(nn,"Outcome","<code>1</code>"),Object(x.a)(nn,"Binary expression","101"),Object(x.a)(nn,"Binary outcome","1"),Object(x.a)(nn,">>> expression","101"),Object(x.a)(nn,">>> outcome","1"),nn),(on={},Object(x.a)(on,Symbol("title"),">>"),Object(x.a)(on,"Expression","<code>5 >> -31</code>"),Object(x.a)(on,"Outcome","<code>2</code>"),Object(x.a)(on,"Binary expression","101"),Object(x.a)(on,"Binary outcome","10"),Object(x.a)(on,">>> expression","101"),Object(x.a)(on,">>> outcome","10"),on),(an={},Object(x.a)(an,Symbol("title"),">>"),Object(x.a)(an,"Expression","<code>-5 >> -1</code>"),Object(x.a)(an,"Outcome","<code>-1</code>"),Object(x.a)(an,"Binary expression","101"),Object(x.a)(an,"Binary outcome","-1"),Object(x.a)(an,">>> expression","101"),Object(x.a)(an,">>> outcome","11111111111111111111111111111111"),an),(rn={},Object(x.a)(rn,Symbol("title"),">>"),Object(x.a)(rn,"Expression","<code>-5 >> -3</code>"),Object(x.a)(rn,"Outcome","<code>-1</code>"),Object(x.a)(rn,"Binary expression","101"),Object(x.a)(rn,"Binary outcome","-1"),Object(x.a)(rn,">>> expression","101"),Object(x.a)(rn,">>> outcome","11111111111111111111111111111111"),rn),(sn={},Object(x.a)(sn,Symbol("title"),">>"),Object(x.a)(sn,"Expression","<code>-5 >> -31</code>"),Object(x.a)(sn,"Outcome","<code>2</code>"),Object(x.a)(sn,"Binary expression","101"),Object(x.a)(sn,"Binary outcome","10"),Object(x.a)(sn,">>> expression","101"),Object(x.a)(sn,">>> outcome","10"),sn)]},{elementType:"Headline-3",content:"<code>>>></code>: a right shift zero-fill operator"},{elementType:"Paragraph",content:"\n                    This operator takes two arguments, and converts the left one to 32-bit integer if possible. \n                    The bits of the left operand will be shifted the number of positions indicated by the right \n                    operand % 32 to the right. Left most bits will be filled with zeros. <br>\n                    This is currently the only operator in JS allowing to see how the real bit representation of a \n                    negative number looks like: <code>(-5 >>> 0).toString(2)</code> will show all bits, including the\n                    sign bit. The bits that do not fit (are moved to the right of the bit with index 0) will be lost.\n                    "},{elementType:"Paragraph",content:"\n                    Conversion to the 32 bit integer (of course there is not such a primitive type in JS, but \n                    small enough integer numbers are stored in the memory in a slightly different way than other\n                    numbers)\n                    "},{elementType:"UnsignedList",content:["A number not small enough to be represented in 32 bits has its last 32 bits taken, the rest is\n                        lost","A fraction part is lost"]},{elementType:"Paragraph",content:"\n                    This operator may be described with the following function:\n<pre>\n<code>\nlet right = (a, b) => {\n    maskOfLeftMostZeros = b === 0?-1:2**(32-b%32)-1;\n    if (a < 0) {return (Math.floor(a / (2 ** b)) & maskOfLeftMostZeros)}\n    return (Math.floor(a >>> 0) / (2 ** (Math.floor(b>>>0) % 32))) & -1\n}\n</code>\n</pre>                    \n                Please find tests proving this function works in the operators article.\n                    "},{elementType:"ConditionalArray",headItems:["Expression","Outcome","Binary expression","Binary outcome",">>> expression",">>> outcome"],content:[(cn={},Object(x.a)(cn,Symbol("title"),">>>"),Object(x.a)(cn,"Expression","<code>1024 >>> 10</code>"),Object(x.a)(cn,"Outcome","<code>1</code>"),Object(x.a)(cn,"Binary expression","10000000000"),Object(x.a)(cn,"Binary outcome","1"),Object(x.a)(cn,">>> expression","10000000000"),Object(x.a)(cn,">>> outcome","1"),cn),(ln={},Object(x.a)(ln,Symbol("title"),">>>"),Object(x.a)(ln,"Expression","<code>-5 >>> 2</code>"),Object(x.a)(ln,"Outcome","<code>1073741822</code>"),Object(x.a)(ln,"Binary expression","-101"),Object(x.a)(ln,"Binary outcome","111111111111111111111111111110"),Object(x.a)(ln,">>> expression","11111111111111111111111111111011"),Object(x.a)(ln,">>> outcome","111111111111111111111111111110"),ln),(dn={},Object(x.a)(dn,Symbol("title"),">>"),Object(x.a)(dn,"Expression","<code>5 >>> 32</code>"),Object(x.a)(dn,"Outcome","<code>5</code>"),Object(x.a)(dn,Symbol("code")," \n                            When moving the number n*32 bits, where n is a positive integer, \n                            the outcome is the same number\n                                                        "),Object(x.a)(dn,"Binary expression","101"),Object(x.a)(dn,"Binary outcome","101"),Object(x.a)(dn,">>> expression","101"),Object(x.a)(dn,">>> outcome","101"),dn)]},{elementType:"NoteWarning",content:"In practice operators <<, >>, >>> accept negative right side operand values, but\n                    it is better to avoid them, as they behaviour is not readable."},{elementType:"Headline-3",content:"Masking example"},{elementType:"Code",content:"\n<pre>\n    let ODD_FLAG = 1;\n    let EVEN_FLAG = 2;\n    let DIV_3_FLAG = 4;\n    let SORT_FLAG = 8;\n    let NOT_REPEAT_FLAG = 16;\n\n    // lets create a test array;\n    let items = Array(100);\n    items.fill(0);\n    items = items.map(\n        (item,index)=>{\n            if (index > 49) return index - 49\n            //let elements repeat\n            return index\n        }\n    );\n\n    function getFromArray(array, flags){\n        let filterFlags = (item, index, array) => {\n            if ((flags & NOT_REPEAT_FLAG) && (index > 0)){\n                let wasItemBefore = ~array.slice(0,index).indexOf(item);\n                if (wasItemBefore) return false;\n            }\n            if ((flags & ODD_FLAG) && (item & 1 === 1)) return true;\n            if ((flags & EVEN_FLAG) && (item & 1 === 0)) return true;\n            if ((flags & DIV_3_FLAG) && (item % 3 === 0)) return true;\n            \n        }\n        let outcome = array.filter(filterFlags);\n        if (flags & SORT_FLAG) return outcome.sort(\n            (a, b)=>{\n                if (a < b) return -1;\n                if (a === b) return 0;\n                return 1;\n            }\n        )\n        return outcome\n    }\n\n    console.log(getFromArray(items, EVEN_FLAG | DIV_3_FLAG));\n    console.log(getFromArray(items, EVEN_FLAG | DIV_3_FLAG | SORT_FLAG));\n    console.log(getFromArray(items, EVEN_FLAG | DIV_3_FLAG | NOT_REPEAT_FLAG));\n\n    //Now lets activate all features, except for odd numbers:\n    let FLAG_NO_ODD = 65536 & (65536 ^ ODD_FLAG);\n    console.log(getFromArray(items, FLAG_NO_ODD));\n</pre>                    \n                    "},{elementType:"Paragraph",content:"\n                    Above example implements a function, that accepts an <code>array</code>, and a \n                    <code>flags</code> argument. The flags argument gives options to activate or deactivate\n                    different features:\n                    "},{elementType:"UnsignedList",content:["return odd elements of the given array,","return even elements of the given array,","return the elements of the array that can be divided by 3 with no remainder,","return elements only once, even if they repeat,","sort returned array"]},{elementType:"Paragraph",content:"\n                    Due to the clean code principles, this should be a set of functions, each doing only one thing, but\n                    here we would have 5 separate functions. To accomplish a set of tasks an array should have been\n                    declared, and 5 functions should have been called on it. A lot more code, less readable,\n                    less encapsulation and more CPU operations.\n                    That is why the implementation of a single high level public function\n                    doing a set of things an already aggregating a few lower level functions is a better \n                    solution in this case. The function from the example\n                    would take 6 arguments altogether if not for the flag usage. We could make an array and \n                    an options argument, that would be an object, but this object would still have 5 properties,\n                    and setting these arguments would not be convenient. In this case the flag pattern comes \n                    handy. The solution is readable, and thanks to usage of bitwise OR passing flags argument\n                    is also readable. Bitwise operations make it clean to introduce an additional flags, like\n                    <code>FLAG_NO_ODD</code>.\n\n                    "},{elementType:"Headline-3",content:"Microcontrollers"},{elementType:"Paragraph",content:"\n                    Perhaps not very JS oriented example, but bitwise operations are very useful when \n                    programming a microcontroller. A uC has ports, each port consists of a few legs (pins),\n                    that are physically connected, soldered to some HW. This may be lets say an LED digit \n                    display, or an H-Bridge for DC motor control. Then telling uC to run a motor in a forward\n                    direction would be like this <code>portA = portA & MOTOR_A_FORWARD</code>. Thanks to this\n                    approach we do not accidentally toggle any of pins not related to the motor A, and we do not\n                    set a dangerous state, where an H-bridge would be damaged.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"ECMAScript",href:"https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-bitwise-shift-operators",description:"Root documentation"},{elementType:"Link",content:"blog.logrocket.com",href:"https://blog.logrocket.com/interesting-use-cases-for-javascript-bitwise-operators/",description:"Some interesting bitwise operations by Glad Chinda"},{elementType:"Link",content:"stackoverflow.com",href:"https://stackoverflow.com/questions/654057/where-would-i-use-a-bitwise-operator-in-javascript",description:"Examples"}]}]};var hn,un,bn,gn,fn,yn,vn,wn,xn,jn,Tn,On,Sn,kn,Cn,An,In,Pn,Nn,En,Hn={summary:"number representation",title:"Number representation",searchKeywords:"float double floating point 32 53 64 number integer fraction negative number\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Number representation"},{elementType:"Paragraph",content:"\n                    There are two primitive number types in JS, and these are: <code>Number</code> and <code>\n                    BigInt</code>. More common in usage is a <code>Number</code> type, as it is safely represents positive \n                    integers,\n                    negative integers, and floating point positive and negative numbers in the range of -(2<sup>53</sup>-1) to\n                    2<sup>53</sup>-1. A <code>Number</code> type is capable of representing even bigger numbers (from\n                    <code>-Number.MAX_VALUE</code>, that is equal to -1.8<sup>308</sup>, to <code>Number.MAX_VALUE</code>, that\n                is equal to 1.8<sup>308</sup>, but these numbers are only an approximation of a precise value). BigInts are\n                capable of representing much bigger numbers than 2<sup>53</sup>-1, but they are less efficient and not fully \n                compatible with a <code>Number</code> type, so in most usages should be avoided. In this article we will concentrate\n                on a <code>Number</code> type only.\n                    "},{elementType:"Paragraph",content:"\n                    A <code>Number</code> type is always the <code>Number</code> type, but it may be represented internally\n                    in two different ways. The <code>Number</code> type should be represented as a double precision floating\n                    point, but if it is small enough (in range -2<sup>31</sup> to 2<sup>31</sup>) and is an\n                    integer, it will be represented only in 32 bites.\n                    "},{elementType:"Headline-2",content:'<span id = "internalIntegerRepresentation">Internal integer representation</span>'},{elementType:"UnsignedList",content:["If a number is between -2<sup>31</sup> and 2<sup>31</sup>, and","If a number is an integer, then"]},{elementType:"Paragraph",content:"it will be represented in a single precision (32 bit) plain binary format, where the most \n                    significant bit will be a sign bit. 1 is for a negative number, and a 0 is for a positive one.\n                    The number will be represented as 32 bit plain integer as long as it is possible. And there is no \n                    problem with that, as every primitive type in JS (including a <code>Number</code>) is not mutable.\n                    So if a new, bigger value is assigned under a variable, this bigger value is created from scratches\n                    anyway.\n                    "},{elementType:"Paragraph",content:"\n                    32 bit sized numbers have some features, bigger numbers do not have:\n                    "},{elementType:"UnsignedList",content:["bitwise operations may be done on these numbers,","these numbers may be an index of an array. If there is an attempt to create a bigger\n                        array, an error will occur or added values will be indexed with a string, creating key-value\n                        pairs"]},{elementType:"Paragraph",content:"\n                    But how are negative numbers represented in this plain binary notation? Simple sign will not be enough.\n                    Lets considere negative representation on a simpler - 8-bit representation example:\n                    "},{elementType:"Headline-3",content:'<span id="negativeRepresentation">Negative number representation<span>'},{elementType:"Paragraph",content:"\n                    In computer science, there is no natural way to represent a negative number \n                    , as there can be only <code>0</code> or <code>1</code>,\n                    no plus or minus sign is present. The sum of the positive and the negative numbers should always give a\n                    <code>0</code>, so even if there would be only a sign bit introduced, the solution would not be good enough:\n                    "},{elementType:"Code",content:'\n<pre>\n5 - 5 == 0; but\n   <span style="color: red">0</span>0000101\n + <span style="color: red">1</span>0000101\n----------------\n   <span style="color: red">1</span>0001010   and this is <span style="color: red">-10</span> in representation, with most significant bit being <span style="color: red">0</span>;\n</pre>                    \n                    '},{elementType:"Paragraph",content:'\n                    To solve this problem of non negative sum, there is a need to keep this most significant bit \n                    indicating the negative number, and search for the other number, that if was added to a positive\n                    equivalent, would give 0. In this case number of bits that will represent the number is important.\n                    Let us suppose, that the number of bits that will represent the number is 8. There is a pattern:\n                    <strong>2<sup>n</sup> + negativeNumber</strong>, where <strong>n</strong> is the number of bits \n                    representing the number, and the <code>negativeNumber</code> is number that needs to be converted\n                    with its minus sign, so as an example conversion of <strong>-5</strong> represented with\n                    <strong>8</strong> bits\n                    bits would be:<br>\n                    <strong>2<sup>8</sup> + (-5) = 256 - 5 = 251</strong>, and 251 converted to binary is \n                    <strong><span style="color:red">1</span>1111011</strong>. This red bit is the most significant bit \n                    meaning that this number is negative if set to 1, and positive if set to 0. Now:\n                    '},{elementType:"Code",content:'\n<pre>\n    <span style="color: red">0</span>0000101\n +  <span style="color: red">1</span>1111011\n----------------\n (<span style="color: red">1</span>)00000000\n</pre>                    \n                    '},{elementType:"Paragraph",content:"\n                    There is an overflow, one bit is out of this representation, as it becomes a 9-th\n                    bit, and number representation has only 8 bits, so it will be ignored. And if this bit is\n                    ignored, then the remaining bits are <code>00000000</code>, so equal to 0.\n                    "},{elementType:"SmallHeadline",content:"What if someone would like to represent 257 on 8 bits then?"},{elementType:"Paragraph",content:"\n                    The answer is simple. There is no 257 number in this representation. To have this number, there is a \n                    need to take more bits into account, lets say 16 to represent a single number. 8 bits represent\n                    256 possibilities with a 0 included, so from 255 to 0 or from -128 to 127. With 16 bits this would \n                    be 65536 possibilities, including 0, so 65535 to 0, or 32767 to -32768 with negative numbers. \n                    An elephant will not fit into a backpack &#128578;<br>\n                    Even in JS there is a limit to the numbers. Each number larger than the \n                    <code>Number.MAX_SAFE_INTEGER</code> or smaller than <code>-Number.MAX_SAFE_INTEGER</code> is\n                    approximated, and a number larger than <code>number.MAX_VALUE</code> or smaller then \n                    <code>Number.MIN_VALUE</code> is <code>Infinity</code> or </code>-Infinity</code>\n                    "},{elementType:"Headline-3",content:'<span id="fractionRepresentation">Fractions in binary codding<span>'},{elementType:"Paragraph",content:'\n                    <table class = "table">\n                    <thead>\n                        <tr>\n                            <th>number:</th>\n                            <th>0.1 (2<sup>-1</sup>) 0.5</th>\n                            <th>0.01 (2<sup>-2</sup>) 0.25</th>\n                            <th>0.001 (2<sup>-3</sup>) 0.125</th>\n                            <th>0.0001 (2<sup>-4</sup>) 0.0625</th>\n                            <th>Equals 0.0625</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>0.6875</td>\n                            <td>1</td>\n                            <td>0</td>\n                            <td>1</td>\n                            <td>1</td>\n                            <td>0.1011</td>\n                        </tr>\n                        <tr>\n                            <td>0.375</td>\n                            <td>0</td>\n                            <td>1</td>\n                            <td>0</td>\n                            <td>1</td>\n                            <td>0.0101</td>\n                        </tr>\n                        <tr>\n                            <td>0.5625</td>\n                            <td>1</td>\n                            <td>0</td>\n                            <td>0</td>\n                            <td>1</td>\n                            <td>0.1001</td>\n                        </tr>\n                    </tbody>\n                </table>\n                    '},{elementType:"SmallHeadline",content:"The problem with the binary fractions"},{elementType:"Paragraph",content:"If we take a decimal fraction into consideration, it always has some power of \n                    10 in the denominaror. 1/10 is 0.1, 1/5 = 2/10 is 0.2, 1/100 is 0.01. If we want to represent a\n                    fraction that's denominator is not the power of 10, then there is a problem: 1/3 = 0.333(3)\n                    This fraction will never be a precise number, it will always be an approximation with an error.\n                    "},{elementType:"Paragraph",content:"\n                    In case of binary fractions the same phenomenon appears. In this case however, it is not possible to\n                    represent a fraction, that has in denominator a number that is not a power of 2, so:\n                    1/2 = 0b0.1, 1/4 = 0b0.01, 1/8 = 0b.001, but 1/10 will be 0b0.00011(0011), so only an approximation.\n                    There is no possibility to represent some binary fractions precisely. <br>\n                    <code>0.1 + 0.2 == 0.30000000000000004</code><br>\n                    "},{elementType:"NoteWarning",content:"\n                    Fractions should not be compared. They should be rounded in some way for safety reasons\n                    "},{elementType:"Code",content:"\n<pre>                    \nfunction compareFractions(a, b){\n    let ep = 2**-53;\n    return Math.abs(a - b) < ep;\n}\n\n// This function should solve fraction comparation in JS\n</pre>\n                    "},{elementType:"Headline-2",content:"Double precision floating point representation"},{elementType:"Paragraph",content:"\n                    Number cannot be represented as a 32 bit integer if\n                    "},{elementType:"UnsignedList",content:["If is not an integer value, so if it has a fraction part","If it is out of range -(2<sup>31</sup>) to 2<sup>31</sup> (31 because one bit is reserved for \n                        a sign),"]},{elementType:"Paragraph",content:"\n                    In case a number cannot be internally represented in 32 bits, it will be stored as a <strong>\n                    double precision floating point</strong> number. It will take 2 x 32 bits (double precision) = 64 bits.\n                    In most situations a developer will not notice the difference, as this is still the same <code>Number</code>\n                    type. The difference will be noticeable when someone tries to do bitwise operations on these numbers.\n                    But how are these numbers stored in the memory?\n                    "},{elementType:"SmallHeadline",content:"Scientific notation"},{elementType:"Paragraph",content:"A number in decimal format may be represented as a:"},{elementType:"Code",content:"\n<pre>\nmantissa * 10<sup>exponent</sup>\n</pre>                    \n                    "},{elementType:"UnsignedList",content:["The <code>mantissa</code> is a significant integer. Significant means that it has no zeros on\n                        either left of right side. Only zeros in the middle are allowed. Other zeros may be cut off, and\n                        represented in the exponent part,","The <code>exponent</code> is an integer exponent. If negative, it will move the point to the left\n                        creating a fraction part of the number, and if positive it will add zeros to the end"]},{elementType:"Paragraph",content:'\n                    <table class="table">\n                        <thead>\n                        <tr><th>Decimal notation</th><th>Scientific decimal notation</th></tr>\n                        </thead>\n                        <tbody>\n                            <tr><td>0.234</td><td>234 * 10<sup>-3</sup></td></tr>\n                            <tr><td>234000</td><td>234 * 10<sup>3</sup></td></tr>\n                            <tr><td>234.567</td><td>234567 * 10<sup>-3</sup></td></tr>\n                        </tbody>\n                    </table>\n                    '},{elementType:"SmallHeadline",content:"Normalized notation"},{elementType:"Paragraph",content:"A number in decimal format may be represented as a:"},{elementType:"Code",content:"\n<pre>\nmantissa * 10<sup>exponent</sup>\n</pre>                    \n                    "},{elementType:"UnsignedList",content:["The <code>mantissa</code> is a number with a fraction part, in this notation there is only a \n                        <strong>single digit</strong> on the left side of the point. The rest of the number is the \n                        fraction part,","The <code>exponent</code> is an integer exponent. If negative, it will move the point to the left\n                        creating a fraction part of the number, and if positive it will add zeros to the end"]},{elementType:"Paragraph",content:'\n                    <table class="table">\n                        <thead>\n                        <tr><th>Decimal notation</th><th>Normalized decimal notation</th></tr>\n                        </thead>\n                        <tbody>\n                            <tr><td>0.234</td><td>2.34 * 10<sup>-1</sup></td></tr>\n                            <tr><td>234000</td><td>2.34 * 10<sup>5</sup></td></tr>\n                            <tr><td>234.567</td><td>2.34567 * 10<sup>2</sup></td></tr>\n                        </tbody>\n                    </table>\n                    '},{elementType:"Paragraph",content:"Of course, this notation is more generic, as it may be applied not only to the \n                    decimal format:"},{elementType:"Code",content:"\n<pre>\nmantissa * base<sup>exponent</sup>\n</pre>                    \n                    "},{elementType:"UnsignedList",content:["The <code>mantissa</code> is a number with a fraction part, in this notation there is only a \n                        <strong>single digit</strong> on the left side of the point. The rest of the number is the \n                        fraction part.,","\n                        <code>base</code> is a base of the calculation system. In binary it will be 2, in the hexadecimal\n                        it will be 16 (f)\n                        ","<code>exponent</code> is an integer exponent. If negative it will move the point to the left\n                        , and if positive it will move the point to the right, and finally it will add zeros to the \n                        right of the created number,"]},{elementType:"Paragraph",content:"In case of binary numbers this will look like the below example"},{elementType:"Code",content:"\n<pre>\n(-1)<sup>sign</sup> * 1.fraction * 2<sup>exponent</sup>\n</pre>                    \n                    "},{elementType:"UnsignedList",content:["<code>fraction</code> in binary number's mantissa will always start with 1, so there is only\n                        a fraction element that will change,\n                        ","<code>sign</code> is a 0 or 1 value indicating if the result will be positive or negative,\n                        ","The <code>exponent</code>  is an integer exponent. If negative, it will move the point to the left\n                        , and if positive it will move the point to the right, and finally it will add zeros to the \n                        right of the created number,"]},{elementType:"Paragraph",content:'\n                    <table class="table">\n                        <thead>\n                        <tr><th>Decimal notation</th><th>Binary</th><th>Normalized binary notation</th></tr>\n                        </thead>\n                        <tbody>\n                            <tr><td>0</td><td>0</td><td>(-1)<sup>0</sup>*1.0 * 2<sup>0</sup></td></tr>\n                            <tr><td>1</td><td>1</td><td>(-1)<sup>0</sup>*1.0 * 2<sup>1</sup></td></tr>\n                            <tr><td>5</td><td>101</td><td>(-1)<sup>0</sup>*1.01 * 2<sup>2</sup></td></tr>\n                            <tr><td>100.75</td><td>1100100.11</td><td>(-1)*<sup>0</sup> 1.10010011 * 2<sup>6</sup></td></tr>\n                            <tr><td>-5.25</td><td>-101.01</td><td>(-1)<sup>1</sup>*1.0101 * 2<sup>2</sup></td></tr>\n                        </tbody>\n                    </table>\n                    '},{elementType:"SmallHeadline",content:"Back to JS and double precision floating point representation"},{elementType:"Paragraph",content:"The number is represented with 64 bits, but only 52 of them are used for the <code>\n                    fraction</code> part:"},{elementType:"UnsignedList",content:["<code>1 bit</code> is for the sign encoding. 0 is a positive number, 1 is for the negative number,","<code>52 bits</code> are for the fraction part of the mantissa</code>,",'<code>11 bits</code> are for the exponent encoding. Exponent has one of its 11 bits reserved for the\n                        sigh notation (1 == -, 0 == +) and the rest is for encoding the exponent it self. Exponent is \n                        stored in the similar way to the <a href="#internalIntegerRepresentation">internal integer representation\n                        </a>, and negative exponent representation is similar to the <a href="#negativeRepresentation">\n                        negative number representation',"Exponent has special values: 1024 is used for an error such as NaN or Infinity, and -1023 is used for a zero\n                        (0)."]},{elementType:"Code",content:'\n<pre>\n(-1)<sup>sign</sup> x <span style="color:green">%1.</span>fraction x 2<sup>exponent</sup>\n</pre>                    \n                    '},{elementType:"UnsignedList",content:["<code>sign</code> is a single bit indicating if the number is a positive or a negative value,","<code>%</code> is just a prefix indicating that the number will be in binary</code>","<code>1.</code> is an untouchable value. All binary values in normalized notation will start with 1.","The <code>exponent</code> is indicating how many places a point will have to be moved to\n                        the left (if the exponent is negative) or to the right (if it is a positive value)"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"speakingjs.com",href:"http://speakingjs.com/es5/ch11.html",description:"Great detailed article explaining how numbers are represented in JS"},{elementType:"Link",content:"indepth.dev.com",href:"https://indepth.dev/posts/1139/here-is-what-you-need-to-know-about-javascripts-number-type",description:"Representation of numbers in JS explained"},{elementType:"Link",content:"electronics-tutorials.ws",href:"https://www.electronics-tutorials.ws/binary/binary-fractions.html",description:"Fraction representation in IT"}]}]};var Mn={summary:"destructing assignment2",title:"Destructing assignment",searchKeywords:"\n\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Destructive assignments"},{elementType:"Paragraph",content:"\n                    The destruction assignment makes it possible to unpack values from arrays and properties \n                    of objects into distinct variables. The important fact is, that both, destructive object and\n                    destructive array assignments, create copies of properties only if we do not take out the nested \n                    property\n                    "},{elementType:"Paragraph",content:"\n                    Click a table row for an example,\n                    "},{elementType:"ConditionalArray",headItems:["Target","Use case","Description"],content:[(hn={},Object(x.a)(hn,Symbol("title"),"Unpacking variables from an array"),Object(x.a)(hn,Symbol("code"),"                            \n<pre>\nlet [a, b] = [0, 1];\nconsole.log(a); // 0;\nconsole.log(b); // 1\n</pre>                                                        \n                            "),Object(x.a)(hn,"Target","Array"),Object(x.a)(hn,"Name","Unpacking variables from an array,"),Object(x.a)(hn,"Use case","Basic syntax"),Object(x.a)(hn,"Description","<code>let [a, b] = [0, 1];</code>"),hn),(un={},Object(x.a)(un,Symbol("title"),"Unpacking variables from an array"),Object(x.a)(un,Symbol("code"),"                            \n<pre>\nlet c, d, rest; // previous declaration;\n[c, d, ...rest] = [1, 2, 3, 4, 5, 6];\nconsole.log(c); // 1;\nconsole.log(d); // 2;\nconsole.log(rest); // [3, 4, 5, 6];</pre>    \n\n\nlet [e, f, g] = [1, 2, 3, 4, 5, 6];\n//e is 1, f is 2, g is 3. Values 4, 5, 6 are not assigned\n                            "),Object(x.a)(un,"Target","Array"),Object(x.a)(un,"Name","Unpacking variables from an array,"),Object(x.a)(un,"Use case","Rest"),Object(x.a)(un,"Description","<code>let [a, b, ...rest] = [0, 1, 2, 3];</code>"),un),(bn={},Object(x.a)(bn,Symbol("title"),"Unpacking variables from an array"),Object(x.a)(bn,Symbol("code"),"                            \n<pre>\nlet [h, , i] = [1, 2, 3, 4];\nconsole.log(h); //1;\nconsole.log(i);// 3; \n// 2 is omitted, as there is an empty space between h, ,i\n// 4 is omitted\n\n</pre>\n                            "),Object(x.a)(bn,"Target","Array"),Object(x.a)(bn,"Name","Unpacking variables from an array,"),Object(x.a)(bn,"Use case","Omitting array values"),Object(x.a)(bn,"Description","<code>let [a, , , c] = [0, 1, 2, 3];</code>"),bn),(gn={},Object(x.a)(gn,Symbol("title"),"Unpacking variables from an array"),Object(x.a)(gn,Symbol("code"),"                            \n<pre>\nlet arr = [1, 2]\nlet [j, k, l, m] = arr;\nconsole.log(j); // 1;\nconsole.log(k); // 2;\nconsole.log(l); // undefined;\nconsole.log(m); // undefined;\n\n</pre>\n                            "),Object(x.a)(gn,"Target","Array"),Object(x.a)(gn,"Name","Unpacking variables from an arrays,"),Object(x.a)(gn,"Use case","Too many variables in the left side operator,"),Object(x.a)(gn,"Description","<code>let let [a, b, c, d] = [0, 1];\n                            </code>"),gn),(fn={},Object(x.a)(fn,Symbol("title"),"Unpacking variables from an array"),Object(x.a)(fn,Symbol("code"),"                            \n<pre>\nlet [n=5, m=7] = [1];\n// n is 1\n// m is 7, as it was not in assigned array, \n// but had a default value\n</pre>\n                            "),Object(x.a)(fn,"Target","Array"),Object(x.a)(fn,"Name","Unpacking an array variables,"),Object(x.a)(fn,"Use case","Default values"),Object(x.a)(fn,"Description","<code>let [a = 0, b = 0] = [0, 1]</code>"),fn),(yn={},Object(x.a)(yn,Symbol("title"),"Unpacking variables from an array"),Object(x.a)(yn,Symbol("code"),"                            \n<pre>\nlet o = 1; let p = 2;\n[p, o] = [o, p];\nconsole.log(o); // 2;\nconsole.log(p); // 1;\n</pre>\n                            "),Object(x.a)(yn,"Target","Array"),Object(x.a)(yn,"Name","Unpacking an array variables,"),Object(x.a)(yn,"Use case","Swapping variables"),Object(x.a)(yn,"Description","<code>[p, o] = [o, p];</code>"),yn),(vn={},Object(x.a)(vn,Symbol("title"),"Unpacking variables from an object"),Object(x.a)(vn,Symbol("code"),"                            \n<pre>\nconst obj = {a: 1, b: 2, c: {e:3, f:4}};\nconst {a, b, c} = obj;\n// a === 1; b === 2; c === {e: 3, f: 4};\n</pre>\n                            "),Object(x.a)(vn,"Target","Object"),Object(x.a)(vn,"Name","Unpacking variables from an object,"),Object(x.a)(vn,"Use case","Basic case"),Object(x.a)(vn,"Description","<code>const {a, b} = {a:0, b:1};</code>"),vn),(wn={},Object(x.a)(wn,Symbol("title"),"Unpacking variables from an object"),Object(x.a)(wn,Symbol("code"),"                            \nInstead of writing <code>let c = 4</code> there is a possiblity to write <code>(c = 4)</code> and <code>c</code> \nvariable will be defined\n<pre>\nlet o = {a: 1, b: 2, c: 3};\n({a, b, c} = o);\nconsole.log(a); // 1;\nconsole.log(b); // 2;\nconsole.log(c); // 3;\n</pre>\n                            "),Object(x.a)(wn,"Target","Object"),Object(x.a)(wn,"Name","Unpacking variables from an object,"),Object(x.a)(wn,"Use case","Basic case with () instead of <code>let</code> or <code>const</code>)"),Object(x.a)(wn,"Description","<code>({a, b, c} = obj);</code>"),wn),(xn={},Object(x.a)(xn,Symbol("title"),"Unpacking variables from an object"),Object(x.a)(xn,Symbol("code"),"                            \n<pre>\nconst obj = {a: 1, b: 2, c: {d: 3, e: 4}};\nconst {a: newA, b: newB, c:newC} = obj;\nconsole.log(newA); // 1;\nconsole.log(newB); // 2;\nconsole.log(newC); // {d:3, e:4};\n</pre>\n                            "),Object(x.a)(xn,"Target","Object"),Object(x.a)(xn,"Name","Unpacking variables from an object,"),Object(x.a)(xn,"Use case","Object with aliases"),Object(x.a)(xn,"Description","<code>({a: aliasA, b: aliasB, c: aliasC} = obj);</code>"),xn),(jn={},Object(x.a)(jn,Symbol("title"),"Unpacking variables from an object"),Object(x.a)(jn,Symbol("code"),"                            \n<pre>\nlet obj = {\n    a: 0, b: 1, c: 3\n}\nlet key = 'c';\nlet {[key]: alias, a, b} = obj;\nconsole.log(alias); // 3;\nconsole.log(a); // 0;\n</pre>\n                            "),Object(x.a)(jn,"Target","Object"),Object(x.a)(jn,"Name","Unpacking variables from an object,"),Object(x.a)(jn,"Use case","Computed values"),Object(x.a)(jn,"Description","<code>({[key]: aliasA} = obj);</code>"),jn),(Tn={},Object(x.a)(Tn,Symbol("title"),"Unpacking variables from an object"),Object(x.a)(Tn,Symbol("code"),"                            \n<pre>\n// Default values\nconst obj = {a: 1, b: 2};\nconst {a = 0, b = 0, c = 0, d} = obj;\nconsole.log(a); // 1;\nconsole.log(b); // 2;\nconsole.log(c); // 0; this is the default value\n// used if we want to avoid the undefined value\nconsole.log(d); // undefined; no default value\n// was provided;\n</pre>\n                            "),Object(x.a)(Tn,"Target","Object"),Object(x.a)(Tn,"Name","Unpacking variables from an object,"),Object(x.a)(Tn,"Use case","Object with default values"),Object(x.a)(Tn,"Description","<code>({a = 0, b = 1} = obj);</code>"),Tn),(On={},Object(x.a)(On,Symbol("title"),"Unpacking variables from an object"),Object(x.a)(On,Symbol("code"),"                            \n<pre>\n// Default values\nconst obj = {a: 1, b: 2};\nconst {a: newA = 0, b: newB = 0, c: newC = 0} = obj;\nconsole.log(a); // error, a not defined;\nconsole.log(b); // error, b not defined;\nconsole.log(newA); // 1;\nconsole.log(newC); // 0\n</pre>\n                            "),Object(x.a)(On,"Target","Object"),Object(x.a)(On,"Name","Unpacking variables from an object,"),Object(x.a)(On,"Use case","Object with aliases and default values"),Object(x.a)(On,"Description","<code>({a: aliasA = 0, b: aliasB = 1} = obj);</code>"),On),(Sn={},Object(x.a)(Sn,Symbol("title"),"Unpacking variables from an object"),Object(x.a)(Sn,Symbol("code"),"                            \n<pre>\nconst obj = {a: 1, b: 2, c: 3, d: 4, e: 5};\nlet  {a: aliasA, b, ...rest} = obj;\nconsole.log(aliasA); // 1\nconsole.log(rest); // {c: 3, d: 4, e: 5}\nrest.c += 30;\nconsole.log(rest.c) // 33;\nconsole.log(obj.c); // 3; this is just a copy;\n</pre>\n                            "),Object(x.a)(Sn,"Target","Object"),Object(x.a)(Sn,"Name","Unpacking variables from an object,"),Object(x.a)(Sn,"Use case","Object with rest"),Object(x.a)(Sn,"Description","<code>({a: aliasA = 0, ...rest} = obj);</code>"),Sn),(kn={},Object(x.a)(kn,Symbol("title"),"Unpacking variables from an object"),Object(x.a)(kn,Symbol("code"),"                            \n<pre>\n// Getting into nested objects\nconst obj = {a: 1, b: 2, c: {d: 3, e: 4}};\nconst {a, b, c: {d, e}} = obj;\nconsole.log(a); // 1\nconsole.log(b); // 2\n//console.log(c); !!! ERROR c, it is not defined at all !!!\nconsole.log(d); // 3;\nconsole.log(e); // 4\n\n\n\n</pre>\n                            "),Object(x.a)(kn,"Target","Object"),Object(x.a)(kn,"Name","Unpacking variables from an object,"),Object(x.a)(kn,"Use case","Getting into nested objects"),Object(x.a)(kn,"Description","<code>({a: aliasA = 0, b: aliasB = 1} = obj);</code>"),kn),(Cn={},Object(x.a)(Cn,Symbol("title"),"Unpacking variables from an object"),Object(x.a)(Cn,Symbol("code"),"                            \n<pre>\nlet person = {\n    id: 0,\n    credentials:{\n        login: 'j_doe',\n        password: 'start_123'\n    }\n}\n\nasync function checkIfCredentialsValid({id, credentials: {login, password}}){\n    return await askServerIfLoginSuccess(id, login, password)\n}\n\nconsole.log(checkIfCredentialsValid(person))\n</pre>\n                            "),Object(x.a)(Cn,"Target","Object"),Object(x.a)(Cn,"Name","Unpacking variables from an object,"),Object(x.a)(Cn,"Use case","Passing object parameters to a function"),Object(x.a)(Cn,"Description","<code>f({a, nested:{b, c}}</code>"),Cn),(An={},Object(x.a)(An,Symbol("title"),"Unpacking variables from an object"),Object(x.a)(An,Symbol("code"),"                            \n<pre>\nlet drawing = {\n    shape: 'circle',\n    stroke: {\n        sColor: '#aaa',\n        sStyle: 'solid'\n    },\n    fill: {\n        fColor: '#aaa',\n        fStyle: 'solid'\n    }\n}\n\nfunction draw(\n    {\n        shape = 'rectangle', \n        stroke: {sColor = 'red', sStyle = 'solid'}, \n        fill: {fColor:'green', fStyle:'solid}\n    }){\n        if (mode === 'svg) drawSvgShape(shape, sColor, sStyle, fColor, fStyle)\n        ...\n    }\n</pre>\n                            "),Object(x.a)(An,"Target","Object"),Object(x.a)(An,"Name","Unpacking variables from an object,"),Object(x.a)(An,"Use case","Passing object parameters with default values to a function"),Object(x.a)(An,"Description","<code>f({a=1, nested={b=0, c=0}}</code>"),An),(In={},Object(x.a)(In,Symbol("title"),"Unpacking variables from an object and array"),Object(x.a)(In,Symbol("code"),"                            \n<pre>\nconst schoolClass = {\n    id: '2b',\n    superviser:'John Doe',\n    members:[\n        {firstName: 'Alfred', familyName: 'Smith'},\n        {firstName: 'Margaret', familyName: 'Willson'},\n        {firstName: 'Edgar', familyName: 'Brown'},\n        {firstName: 'Anna', familyName: 'Windsor'},\n    ]\n\n}\n\nlet {\n    id: classId,\n    members: [\n        {firstName: fName1, familyName: famName1},\n        {firstName: fName2, familyName: famName2},\n        {firstName: fName3, familyName: famName3},\n        {firstName: fName4, familyName: famName4},\n    ]\n} = schoolClass;\nconsole.log(classId); // '2b';\n// console.log(supervisor); // error, not defined\nconsole.log(fName1); // 'Alfred'\nconsole.log(fName3); // 'Edgar'\n\n</pre>\n                            "),Object(x.a)(In,"Target","Object and Array"),Object(x.a)(In,"Name","Unpacking an array and object variables,"),Object(x.a)(In,"Use case","Nested object and array destructuring"),Object(x.a)(In,"Description","Click this row to see"),In),(Pn={},Object(x.a)(Pn,Symbol("title"),"Unpacking variables from an object and array"),Object(x.a)(Pn,Symbol("code"),"                            \n<pre>\nconst schoolClass = {\n    id: '2b',\n    superviser:'John Doe',\n    members:[\n        {firstName: 'Alfred', familyName: 'Smith'},\n        {firstName: 'Margaret', familyName: 'Willson'},\n        {firstName: 'Edgar', familyName: 'Brown'},\n        {firstName: 'Anna', familyName: 'Windsor'},\n    ]\n\n}\n\nfor (const {firstName: fName, familyName: famName} of schoolClass.members){\n    console.log('Frist name: ' + fName);\n    console.log('Family name: ' + famName);\n}\n// prints properly\n\n</pre>\n                            "),Object(x.a)(Pn,"Target","Object and Array"),Object(x.a)(Pn,"Name","Unpacking an array and object variables,"),Object(x.a)(Pn,"Use case","For loop decomposition"),Object(x.a)(Pn,"Description","Click this row to see"),Pn),(Nn={},Object(x.a)(Nn,Symbol("title"),"Unpacking variables from an object and array"),Object(x.a)(Nn,Symbol("code"),"                            \n<pre>\nfunction getSymbolByKey(obj, key){\n    let symbols = Object.getOwnPropertySymbols(obj);\n    function finder(item){\n        if (item.toString() === 'Symbol('+key+')') return true;\n        return false;\n    }\n    return symbols.find(finder);\n}\n\nlet obj = {\n    a: 0, b: 2, [Symbol('ex')]: 3\n}\n\nlet exSymbol = getSymbolByKey(obj, 'ex');\n// this is the tricky part, as simple\n// obj[Symbol.for('ex')] will not work, \n// Symbol.for('ex') returns a typeof symbol, but\n// when searched in obj, there is an undefined,\n// so working with symbols is not that easy, they have to be \n// remembered somewhere, as if there were more symbols with \n// 'ex' key under obj, there would be no possibility to tell them\n// apart without keeping a registry\n\nconst {a, b, [exSymbol]: ex} = obj;\nconsole.log(a); //0\nconsole.log(b); //2\nconsole.log(ex);//3\n\n</pre>\n                            "),Object(x.a)(Nn,"Target","Object"),Object(x.a)(Nn,"Name","Unpacking variables from an object,"),Object(x.a)(Nn,"Use case","Symbol decomposition"),Object(x.a)(Nn,"Description","Click this row to see"),Nn),(En={},Object(x.a)(En,Symbol("title"),"Unpacking variables from an object and array"),Object(x.a)(En,Symbol("code"),"                            \nProperties and methods are searched for in the object's prototype chain \nas illustrated below:                            \n<pre>\n\nfunction ObjConstructor(a, b, c){\n    this.a = a;\n    this.b = b;\n    this.c = c;\n}\nObjConstructor.prototype.z = 'inherited';\nfunction NextObjConstructor(a, b, c, d, e){\n    ObjConstructor.call(this,a,b,c);\n    this.d = d;\n    this.e = e;\n}\nNextObjConstructor.prototype = Object.create(ObjConstructor.prototype);\nNextObjConstructor.prototype.constructor = NextObjConstructor\n\nlet nextInstance = new NextObjConstructor(1, 2, 3, 4, 5);\nconsole.log(nextInstance); // {a:1, b:2, c:3, d:4, e:5};\nconsole.log(nextInstance.z); // 'inherited'\n\nlet {a, z, ...rest} = nextInstance;\nconsole.log(z); // 'inherited'\n\n\n</pre>\n                            "),Object(x.a)(En,"Target","Object"),Object(x.a)(En,"Name","Unpacking variables from an object,"),Object(x.a)(En,"Use case","Searching the prototype"),Object(x.a)(En,"Description","Click this row to see"),En)]},{elementType:"NoteWarning",content:"When using object destructing, if a property \n                is not the own property of the object, the prototype \n                chain is searched for the desired property,"},{elementType:"SmallHeadline",content:"Mutations"},{elementType:"Paragraph",content:"In JS if we copy an object or an array, primitive values are copied, but nested objects\n                are passed as a reference to the place in memory, where the nested object is situated, that is why\n                in destruction assignment nested objects and arrays are passed by the reference. Modification of \n                such a property will cause a change in the original object."},{elementType:"Paragraph",content:"An array"},{elementType:"Code",content:"\n<pre>\nlet arr = [1, 2, 3, 4, 5, [6, 7]];\nlet [a, b, c, d, e, f] = arr;\nconsole.log(a); // 1;\na += 10;\nconsole.log(a); // 11;\nconsole.log(arr[0]); // still 1, \n//was not mutated, as a is a copy of arr[0];\n\nconsole.log(f); // [6, 7];\nf[0] += 10;\nconsole.log(f); // [16, 7];\nconsole.log(arr[arr.length - 1]); // [16, 7];\n// Changed, as last element of arr is a nested array, and\n// nested objects are not copied in JS, they are passed by \n// a reference instead.\n</pre> \n                "},{elementType:"Paragraph",content:"An object"},{elementType:"Code",content:"\n<pre>\nlet obj = {a: 1, b: 2, c:{d:3, e:4}};\nlet a, b, c, d, e;\n({a, b, c} = obj);\n({d, e} = obj.c);\nconsole.log(a); // 1;\na += 10; // a === 11;\nconsole.log(obj.a); // 1;\n// A copy, as this is a primitive, not a nested object;\nconsole.log(d); // 3;\nd += 10; // d === 13;\nconsole.log(obj.c); // {d: 3, e: 4};\n// Here still no change to the original nested object,\n// as d was assigned as a primitive, obj.c.d is a primitive,\n// not a nested object,\n\nc.d += 20; // c.d === 23;\nconsole.log(obj.c); // 23;\n// c is a reference pointing to the original\n// nested object being the property of obj,\n// that is why the change on c.d is visible in obj.\n\nconsole.log(d); // 13;\n// This is still 13, as mentioned before, \n// this is a copy, so no changes were made.\n\n</pre> \n                "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",description:"Tutorial"}]}]};var Ln,Dn,Rn,Fn,Bn,Un,_n,Wn,qn,zn={summary:"Iterators and generators",title:"Iterators and generators",searchKeywords:"Iterator generator yield Symbol.iterator @@iterator next'\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Iterators and generators"},{elementType:"Paragraph",content:"\n                    \n                    "},{elementType:"Headline-3",content:"Iterators"},{elementType:"Paragraph",content:"\n                    An iterator is an object, that:\n                    "},{elementType:"UnsignedList",content:["has a <code>next</code> property, that's value is a function","<code>next(singleArg)</code> takes no arguments, or a single argument, \n                        and returns an object with properties <code>done</code>\n                        and <code>value</code>","<code>value</code> property is the value of the current iteration","<code>done</code> is false if there are still elements that may be returned, and done if there\n                        are no more elements left","The last return done by the <code>next</code> function should be <code>{value: undefined, done: true}</code>","<code>singleArg</code>, a single optional argument of the next function is an argument that \n                        does nothing, unless it is implemented. It is just available inside the next function."]},{elementType:"Code",content:"\n<pre>\nlet iterator = {\n    current: 0,\n    next: function(startFrom){\n        if(startFrom) this.current = startFrom;\n        this.current += 1;\n        let isDone = this.current>15?true:false\n        if(isDone) {\n            return {done: isDone}\n        }\n        return {\n            value: this.current,\n            done: isDone\n        }\n    },\n}\n\n\nlet it = iterator;\nconsole.log(it.next(2)); // {value: 3, done: false}\nconsole.log(it.next()); // {value: 4, done: false}\nconsole.log(it.next(20)); // {done: true} value would be undefined;\n\nconsole.log([...it]); // Error, it is not iterable\n</pre>\n                    "},{elementType:"Headline-3",content:"Iterable"},{elementType:"Paragraph",content:"\n                    An object is iterable when it has a function under its property <code>[Symbol.iterator]</code>, \n                    that returns an <i>iterator interface</i>, in other words this function must return an object having \n                    a <code>next</code>\n                    property, that is a function that returns an object with properties <code>value</code> and <code>done</code>\n                    <code>value</code> is the next value of the collection, <code>done</code> is the boolean indicating if the \n                    collection is finished or not.\n                    "},{elementType:"Paragraph",content:"\n                    <code>[Symbol.iterator]</code> is often described as <code>@@Iterator</code>, a well known symbol.\n                    "},{elementType:"Paragraph",content:"\n                    Lets make an iterable from previous example:\n                    "},{elementType:"Code",content:"\n<pre>\nlet iterable = {\n    current: 0,\n    next: function(startFrom){\n        if(startFrom) this.current = startFrom;\n        this.current += 1;\n        let isDone = this.current>5?true:false\n        if(isDone) {\n            return {done: isDone}\n        }\n        return {\n            value: this.current,\n            done: isDone\n        }\n    },\n    [Symbol.iterator]: function(){\n        return this\n    }\n}\nlet it = iterable;\nfor(let i of it){\n    console.log(i)\n} // will list 1 to 5\nconsole.log(it.next(2)); // {value: 3, done: false}\n// this works only thanks to the startValue definition\nconsole.log(it.next(20)); // {done:true}\nconsole.log([...it]); // [], as iterator was already used in\n// The second console.log(([...it]) would not be empty if the function\nunder [Symbol.iterator] was wrapped in additional function) like below:\n\nlet iterableWrapped = {\n    current: 0,\n    iterator: function() {\n        let current = 0;\n        return {\n            next: function(startFrom){\n            if(startFrom) current = startFrom;\n            current += 1;\n            let isDone = current>5?true:false\n            if(isDone) {\n                return {done: isDone}\n            }\n            return {\n                value: current,\n                done: isDone\n            }\n        }\n    }\n    },\n    [Symbol.iterator]: function(){\n        return this.iterator()\n    }\n}\n\n</pre>                    \n                    "},{elementType:"Paragraph",content:"\n                    The difference is that now <code>for..of</code> syntax and the destructive operator may be used.\n                    "},{elementType:"NoteWarning",content:"\n                    Once used iterator is not automatically rewound ???\n                    "},{elementType:"SmallHeadline",content:"\n                    Example with primary numbers\n                    "},{elementType:"Code",content:"\n<pre>\nlet primaryIterator = function(){\n    let lastReturnedPrimaryNumber = 0;\n    let iterationLimit = 100;\n    let getFirstDivisor = function(nr){\n        for (let i = 2; i <= nr; i+=1){\n            if (nr % i === 0) return i;\n        }\n        return nr;\n    }\n    let isPrimary = function(nr){\n        let firstDivisor = getFirstDivisor(nr);\n        return firstDivisor === nr;\n    }\n    let getNextPrimary = function(startFrom){\n        let current = startFrom;\n        let isPrimeryFound = false;\n        while (!isPrimeryFound) {\n            current += 1;\n            isPrimeryFound = isPrimary(current);\n            if (isPrimeryFound) return current;\n        }\n    }\n    let currentIndex = -1;\n    return {\n        next: function(startFrom){\n            if (startFrom) {\n                currentIndex = 0; lastReturnedPrimaryNumber = startFrom;\n            }\n            currentIndex += 1;\n            lastReturnedPrimaryNumber = getNextPrimary(lastReturnedPrimaryNumber);\n            return currentIndex < iterationLimit ? {\n                done: false,\n                value: lastReturnedPrimaryNumber\n            } : {\n                done: true\n            }\n        }\n    }\n}\n\n// **** usage of primary interator\n\nlet primaryI =  primaryIterator();\nconsole.dir(primaryI);\nfor (let i = 0; i < 20; i++){\n    console.log(primaryI.next().value); //prints values from 1 to 67\n}\nconsole.log(primaryI.next(1000));\nfor (let i = 0; i < 20; i++){\n    console.log(primaryI.next().value); // from 1013 to 1129\n    //thanks to startFrom parameter\n}\n\n\n// **** iterable out of primary iterator\n\nlet primaryIterable = {\n    [Symbol.iterator] : primaryIterator\n}\n\nconsole.log([...primaryIterable]);\nconsole.log([...primaryIterable]); // works fine as object is iterable, not only an iterator\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// ? With previous example this does not work\nconsole.log(primaryIterable[Symbol.iterator]().next(300));\n// This prints the next primary number after 300;\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"Iterator with classes"},{elementType:"Paragraph",content:"\n                    An iterable may be created with the class syntax. <code>[Symbol.iterator]</code> property is\n                    inherited, so a class extending an iterable class is also iterable\n                    "},{elementType:"Code",content:"\n<pre>\nclass IterableClass{\n    constructor(){\n        this.current = 0;\n        this.limit = 10;\n    }\n\n    [Symbol.iterator]() {\n        return {\n            next: () => {\n            // an arrow used, so this is binded\n                this.current += 1;\n                return {\n                    done: this.current > this.limit ? true : false,\n                    value: this.current\n                }\n            }\n        }\n    }\n}\n\nlet iterInstance = new IterableClass();\nconsole.log([...iterInstance]);\n\nclass ExtendsIterableClass extends IterableClass{\n    constructor(){\n        super();\n    }\n}\n\nlet extendedIterInstance = new ExtendsIterableClass();\nconsole.log([...extendedIterInstance]);\n// [Symbol.iterator] property is inherited\n</pre>                    \n                    "},{elementType:"Headline-3",content:"Generators"},{elementType:"UnsignedList",content:["A generator is a function is marked with a <code>*</code>. For example: <code>function* f()</code>","A generator is a function, but its prototype.name is Generator, so inherits a function prototype.","A generator is not the constructor, so cannot be used by the <code>new</code> operator","A generators body is not executed instantly. When it encounters a <code>yield</code> operator,\n                    it returns the right hand value and pauses,","In case a return statement is encountered, the generator is finalized, the right hand value of the \n                    return is returned and the generator will not produce any new values,","A generator returns an iterable and iterator at the same time, so the next method may be called \n                    and the <code>for..of</code> statement may be used,","<code>function* generator([par[, par...]])</code>, parameters may be passed to a generator \n                    in purpose to parameterize returned iterator/iterable"]},{elementType:"Code",content:"\n<pre>\nfunction* generator(){\n    yield 1; yield 2; yield 3; yield 4;\n}\n\nconsole.dir(generator)\n\nlet gen = generator();\nconsole.dir(gen);\nconsole.log([...gen]); // [1,2,3]\nconsole.log([...gen]); // [] as generator was finished in the previous line\nconsole.log(gen.next().value); // undefined, as generator is finished\n\nlet gen2 = generator();\nconsole.log(gen2.next().value);\nconsole.log(gen2.return(20)); // will return {value: 20, done: true};\nconsole.log(gen2.next().value); // undefined, as return finishes a generator\n\nlet gen3 = generator();\nconsole.log(gen3.next().value);\nconsole.log(gen3.return(2)); // will return {value: 2, done: true};\nconsole.log(gen3.next().value); // undefined, as return finishes a generator\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"\n                    Example with classes\n                    "},{elementType:"Code",content:"\n<pre>\nclass GeneratorEx{\n    constructor(){\n        this.current = 0;\n    }\n\n    *generator(){\n        this.current += 1;\n        for (let i = 0; i < 10; i++){\n            yield this.current;\n        }\n        this.current = 0; // after execution rewind\n    }\n}\n</pre>                    \n                    "},{elementType:"Paragraph",content:"\n                    Or with the computed value\n                    "},{elementType:"Code",content:"\n<pre>\nclass GeneratorEx{\n    constructor(){\n        this.current = 0;\n    }\n\n    *[Symbol.iterator](){\n        this.current += 1;\n        for (let i = 0; i < 10; i++){\n            yield this.current;\n        }\n        this.current = 0; // after execution rewind\n    }\n}\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"\n                    Example with primary numbers\n                    "},{elementType:"Code",content:"\n<pre>\nfunction* primaryGenerator(){\n    let lastReturnedPrimaryNumber = 0;\n    let indexLimit = 100;\n    let getFirstDivisor = function(nr){\n        for (let i = 2; i <= nr; i+=1){\n            if (nr % i === 0) return i;\n        }\n        return nr;\n    }\n    let isPrimary = function(nr){\n        let firstDivisor = getFirstDivisor(nr);\n        return firstDivisor === nr;\n    }\n    let getNextPrimary = function(startFrom){\n        let current = startFrom;\n        let isPrimeryFound = false;\n        while (!isPrimeryFound) {\n            current += 1;\n            isPrimeryFound = isPrimary(current);\n            if (isPrimeryFound) return current;\n        }\n    }\n    for (let index = 0; index < indexLimit; index++){\n        lastReturnedPrimaryNumber = getNextPrimary(lastReturnedPrimaryNumber);\n        yield lastReturnedPrimaryNumber;\n    }\n}\n\nlet primaryGen = primaryGenerator();\nconsole.log([...primaryGen]);\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"\n                    Example with class and primary numbers\n                    "},{elementType:"Code",content:"\n<pre>\nclass PrimaryGeneratorClass {\n    constructor(){\n        this.lastReturnedPrimaryNumber = 0;\n        this.indexLimit = 100;\n    }\n    getFirstDivisor(nr){\n        for (let i = 2; i <= nr; i+=1){\n            if (nr % i === 0) return i;\n        }\n        return nr;\n    }\n    isPrimary(nr){\n        let firstDivisor = this.getFirstDivisor(nr);\n        return firstDivisor === nr;\n    }\n    getNextPrimary(startFrom){\n        let current = startFrom;\n        let isPrimeryFound = false;\n        while (!isPrimeryFound) {\n            current += 1;\n            isPrimeryFound = this.isPrimary(current);\n            if (isPrimeryFound) return current;\n        }\n    }\n    *[Symbol.iterator](startFrom){\n            let lastPrim = startFrom ?? this.lastReturnedPrimaryNumber;\n            this.lastReturnedPrimaryNumber = lastPrim;\n            for (let index = 0; index < this.indexLimit; index++){\n                this.lastReturnedPrimaryNumber = this.getNextPrimary(this.lastReturnedPrimaryNumber);\n                yield this.lastReturnedPrimaryNumber;\n            }\n            this.lastReturnedPrimaryNumber = 0;\n    }\n\n    nextTo(num){\n        return this[Symbol.iterator](num).next().value;\n    }\n    nextVal(){\n        return this[Symbol.iterator]().value;\n    }\n}\n\nlet primGenClass = new PrimaryGeneratorClass();\nconsole.log([...primGenClass]); // primary numbers from 1 to 523\nconsole.log([...primGenClass]); // primary numbers from 1 to 523\nconsole.log(primGenClass.nextTo(300)); // 307\nconsole.log([...primGenClass]); // primary numbers from 311 to 967\n// because lastReturnedNumber was set to 307 with primGenClass.nextTo(300)\n\n</pre>                    \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol",description:"Tutorial"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*",description:"A generator function"}]}]};var Gn={summary:"async",title:"Async",searchKeywords:"async asynchronous functions promise race resolve reject handler then finally catch await then\n    all\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Asynchronous functions"},{elementType:"Paragraph",content:"\n                 Not every value is known, due to communication with the server. Some data will be delivered after a time\n                 is passed, and some will not be delivered at all. When a button is clicked and data has to be \n                 downloaded from the server, the whole page and the browser should not be blocked by the fact that \n                 the application is waiting for the data, especially, that it is not guaranteed that data will be \n                 delivered at all. That is why asynchronous\n                 functions are useful. Such a function runs in the same thread the rest of the code does (as JS\n                is mainly a single thread language, one exception is for the web workers) and returns a promise \n                immediately, but the promise is in pending state. After it is known that the promise will be resolved\n                or rejected, the promise state is changed to settled: resolved or rejected.\n                    "},{elementType:"SmallHeadline",content:"The promise"},{elementType:"Paragraph",content:"\n                    The promise is an object, that may be returned instantly, when some assignment with an asynchronous\n                    value takes place. However, this object holds no value at the time it is returned. Instead, it is in\n                    <strong>pending</strong> state. Finally, it will <strong>settle</strong> \n                    changing its state to <strong>fulfilled</strong>\n                    or <strong>rejected</strong>. Meanwhile the whole application code is not blocked, so the user may scroll, interact\n                    with the page until the promise is finalized. A promise may depend on other asynchronous functions,\n                    so it may not be <strong>settled</code> until other promises are finalized. In this case there is a promise\n                    chain.\n                    "},{elementType:"Paragraph",content:"\n                    When an asynchronus function is run, and its promises are in the pending state, \n                    the non asynchronus functions are not blocked and will execute.\n                    "},{elementType:"Headline-3",content:"A async function"},{elementType:"UnsignedList",content:["Asynchronous functions cannot be constructors","Asynchronous functions always return a promise. Even if someone attempts to return a concrete value,\n                        or there is no return statement, always a promise is returned","The <code>await</code> keyword may be used to pause the function until some promise is resolved,\n                        and the concrete value is returned, or the promise is rejected,","The <code>await</code> keyword may be used only in the asynchronous function,","Asynchronous functions may be run in parallel, sequence,","In case in an <code>async</code> function nothing is returned, the function will return a\n                        pending promise, that will resolve with undefined. In case there is a value returned in the \n                        <code>async function</code>, the function will return a promise resolving to that value. In case\n                        there is a promise returned by a <code>async function</code>, this promise will be returned by\n                        the function."]},{elementType:"SmallHeadline",content:"Time measurement"},{elementType:"Paragraph",content:"\n                       Let's define a simple class for time measurements\n                    "},{elementType:"Code",content:"\n<pre>\nclass Timer{\n    constructor(){\n        this.currentTime = 0;\n        this.timer = null;\n    }\n    startTimer(){\n        this.timer = setInterval(()=>{\n            this.currentTime += 10;\n        },10)\n    }\n    stopTimer(){\n        clearInterval(this.timer);\n    }\n    resetTimer(){\n        this.currentTime = 0;\n    }\n    getCurrentTime(){\n        return this.currentTime;\n    }\n}\n</pre>\n                    "},{elementType:"SmallHeadline",content:"Async functions examples"},{elementType:"Paragraph",content:"\n                       Lets create a factory of functions returning a promise that resolves after the given time:\n                    "},{elementType:"Code",content:"\n<pre>\nlet resolveFunctionFactory = function(timeout){\n    return function(msgStart, msgEnd, msgResolve){\n        console.log(msgStart);\n        return new Promise(resolve => {\n            setTimeout(function() {\n                resolve(msgResolve);\n                console.log(msgEnd)\n            }, timeout)\n        })\n    }\n}\n</pre>                       \n                    "},{elementType:"Paragraph",content:"\n                       Now lets create two functions returning promises, that resolve after 100ms and after 150ms:\n                    "},{elementType:"Code",content:"\n<pre>\nlet resolve100Creator = resolveFunctionFactory(100);\nlet resolve150Creator = resolveFunctionFactory(150);\n</pre>                       \n                    "},{elementType:"Paragraph",content:"\n                       Async function always returns a promise: \n                    "},{elementType:"Code",content:"\n<pre>\nasync function iAlwaysReturnAPromise(){\n    return 1;\n}\nconsole.log(iAlwaysReturnAPromise()); // [Object promise]\n\nasync function iReturnPromiseEvenIfIReturnUndefined(){\n    console.log('Functions without return statement return undefined, but I return a promise, because I am async');\n}\nconsole.log(iReturnPromiseEvenIfIReturnUndefined()); // [Object promise]\n</pre>                       \n                    "},{elementType:"Paragraph",content:"\n                       <strong>Starting async function in a sequence: second after the first is finished;</strong>\n                    "},{elementType:"Code",content:"\n<pre>\nlet timer = new Timer();\n\nasync function sequentialStartRace(){\n    timer.startTimer();\n    let f1 = await resolve100(' [started] ', ' [ended] ', ' [resolved] ')\n    console.log(timer.getCurrentTime());\n    let f2 = await resolve150(' [started] ', ' [ended] ', ' [resolved] ')\n    console.log(timer.getCurrentTime());\n    timer.stopTimer();\n    return f2;\n    return 'someValue'; // in this case the promise, that after awaiting f2 \n    // would resolve to f2;\n}\n(async function wrapSequentialStart(){\n    let outcome = await sequentialStartRace();\n    console.log(outcome); // the resolved outcome of f2\n})();\n\n</pre>                       \n                    "},{elementType:"UnsignedList",content:["In above example <code>f1</code> will be launched immediately,","After 100ms from the start time will be logged: 100ms,","After the first function is finished (100ms from the function start), the second function is \n                       run","After next 150ms (so after 250ms from the function end) the second function stope execution,","The time is logged after 250 from the function start,"]},{elementType:"Paragraph",content:"\n                       <strong>Starting functions in concurrent mode:</strong>\n                    "},{elementType:"Code",content:"\n<pre>\nasync function concurrentStartRace(){\n    let timer = newTimer();\n    timer.startTimer();\n    let f1 = resolve100(' [started] ', ' [ended] ', ' [resolved] ')\n    console.log(timer.getCurrentTime()); // (1)\n    let f2 = resolve150(' [started] ', ' [ended] ', ' [resolved] ');\n    console.log(timer.getCurrentTime()); // (2)\n}\n\nconcurrentStartRace();\n</pre>               \n\n                    "},{elementType:"UnsignedList",content:["As there is no await, both functions will start in the same time period,","Time logged. Both (1) and (2) console.logs will write 2,3","The execution of the first function finishes 100ms after it was called,","The execution of the second function finishes 150ms after it was called,","Both functions finish execution after 150ms from the start"]},{elementType:"Paragraph",content:"\n                       <strong>Running functions in the <code>Promise.all</code></strong>\n                    "},{elementType:"Code",content:"\n<pre>\nasync function promiseAllRace(){\n    timer3.startTimer();\n\n    await Promise.all([\n        (async()=>{\n            let resolved = await resolve100(' start ', ' end' ,' resolved ')\n            console.log(timer.getCurrentTime(); // (1)\n        })(),\n        (async()=>{\n            let resolved = await resolve150(' start ', ' end' ,' resolved ')\n            console.log(timer.getCurrentTime()); // (2)\n        })()\n    ])\n    console.log(timer3.getCurrentTime()); // (3)\n    timer.stopTimer();\n}\n\n\npromiseAllRace();\n</pre>               \n\n                    "},{elementType:"UnsignedList",content:["Both functions will be started at the same time,","(1) will be logged after 100ms from the functions start,","(2) will be logged after 150ms from the functions start,","(3) will be logged after both functions execute, so after 150ms\n                        from the function start"]},{elementType:"Paragraph",content:"\n                       <strong>Running functions in the <code>Promise.race</code></strong>\n                    "},{elementType:"Code",content:"\n<pre>\nasync function promiseRaceRace(){\n    timer3.startTimer();\n\n    await Promise.race([\n        (async()=>{\n            let resolved = await resolve100(' start ', ' end' ,' resolved ')\n            console.log(timer.getCurrentTime(); // (1)\n        })(),\n        (async()=>{\n            let resolved = await resolve150(' start ', ' end' ,' resolved ')\n            console.log(timer.getCurrentTime()); // (2)\n        })()\n    ])\n    console.log(timer3.getCurrentTime()); // (3)\n    timer.stopTimer();\n}\npromiseRaceRace();\n</pre>               \n\n                    "},{elementType:"UnsignedList",content:["Both functions will be started at the same time,","(1) will be logged after 100ms from the functions start,","(2) will be logged after 150ms from the functions start, promise race will already be \n                       resolved by this time, so this will have no effect, but despite this, all promises given\n                       to the promise.race function are evaluated,","(3) will be logged after the first of promises finishes execution, so after 100ms\n                        from the function start"]},{elementType:"Headline-3",content:"Promise"},{elementType:"Code",content:"\n<pre>\nconst p = new Promise((resolve, reject)=>{\n    setTimeout(()=>{resolve('I am resolved')}, 20 * Math.random());\n    setTimeout(()=>{reject('I am rejected')}, 20 * Math.random());\n})\n\nPromise(executor); // in general\n\nexecutor is a function taking the resolve(someValue), and reject(reason) functions\n</pre>                    \n                    "},{elementType:"UnsignedList",content:["The <code>Promise</code> constructor takes a single function as an argument,","The <code>executor</code> (function taken as an argument of the promise constructor)\n                        takes 2 callback functions as an argument, the first is the <code>resolve</code> function, \n                        and the second is <code>rejcet function</code>","The return value of the executor is ignored","<code>resolve(msg);</code> is a function, that will be called when the promise is resolved,\n                        this function may be named in any way","<code>reject(reason);</code>: a callback that will be called in case promise is not resolved and\n                        is rejected, this function does not have to be named in this way","If the executor throws an error, then the function that awaits this promise will not be interrupted, and\n                        will not execute till the end. That is why it is important to handle errors."]},{elementType:"SmallHeadline",content:"Promise API"},{elementType:"SmallHeadline",content:"Promise states"},{elementType:"Paragraph",content:"The newly created promise is in <i>pending</i> state. Its result is <code>undefined</code>.\n                    It is said to be not settled, not fulfilled. Once the promise is resolved, its state is switched to <i>fulfilled</i>\n                    and result changes to <code>resolved</code>. If the promise is rejected, its state changes to <i>fulfilled</i>, and\n                    result to <code>rejected</code>. The promise in fulfilled state is said to be settled. A fulfilled promise can be\n                    either resolved or rejected. Once settled (fulfilled) promise cannot change its state or result."},{elementType:"Image",name:"promiseStates.png",alt:"Promise states"},{elementType:"SmallHeadline",content:"Promise chains"},{elementType:"Paragraph",content:"The promises may be chained thanks to the <code>then</code>, <code>catch</code> and <code>finally</code>\n                    methods. Each of those methods returns a promise, so even <code>finally</code> does not have to be at the \n                    end of the promise chain. The important thing is, that if the last chain link rejects, or throws an error, \n                    there will be an uncaught error. Please examine promise methods for more details."},{elementType:"ConditionalArray",headItems:["Method","Arguments","Returns","Description"],content:[(Ln={},Object(x.a)(Ln,Symbol("title"),"then"),Object(x.a)(Ln,Symbol("code"),"\n                         <ul>\n                            <li>It is important to remember, that a function that has no return, returns undefined, so in case\n                            callbacks do not return a promise, that would take time to resolve, it is immediately resolved with the \n                            <code>undefined</code> value, causing the next <code>then</code> in the chain to be launched imediatley</li>\n                         </ul>\n                         <b>Execution order: in case of resolving, first callback is executed,\nin case of rejection of the preceding function, the second callback will be executed,</b>\n\n            <pre>\n(async function executionOrder(){\n    let pOK = () => { return new Promise((resolve)=>{resolve('Resolved')}) };\n    let pNOK = () => { return new Promise((reject)=>{reject('Rejected')}) };\n\n    let resolved = pOK().then(pOK, pNOK); // resolved, as pOK is the first arg\n    let rejected = pOK().then(pNOK, pOK); // rejected, as pNOK is the first arg\n})()\n</pre>\n<b>when with values instead of functions</b>\n<pre>\n(async function valuesInsteadOfFunctions(){\n    let pOK = () => { return new Promise((resolve)=>{resolve('Resolved')}) };\n    let pNOK = () => { return new Promise((reject)=>{reject('Rejected')}) };\n\n    let resolved = pOK().then('val1', 'val2'); // \n    //will return a promise resolving to 'Resolved', as pOK returns such a promise\n    // 'val1' is not a function so will be replaced with and identity function\n    console.log(resolved)\n    let rejected = pNOK().then('val1', 'val2'); // \n    console.log(rejected)\n    //will return a promise that result will fulfill to 'Rejected', as pNOK \n    // fulfills to this value\n})()\n</pre>\n<b>Can resolve after rejection</b>\n<pre>\n(async function canResolveAfterRejection(){\n\n    let pOK = () => { \n        console.log('%cresolved', 'color:green')\n        return new Promise((resolve)=>{resolve('Resolved')}) \n    };\n    let pNOK = () => { \n        console.log('%crejected', 'color:red')\n        return new Promise((reject)=>{reject('Rejected')}) \n    };\n\n    canResolve = pOK().then(pOK,pNOK).then(pNOK,pOK).then(pOK, pNOK)\n    newLogRow(SECTION_7);\n    console.log(canResolve);\n})();\n// resolved | resolved | rejected | resolved | and the outcome is 'Resolved'\n// YES, then may be resolved event if previous outcomes were rejected.\n            </pre>                    \n                            "),Object(x.a)(Ln,"Method","<code><span>Promise.prototype</span><span>.then(onResolved[, onRejected])</span></code>"),Object(x.a)(Ln,"Arguments","\n                                <ul>\n                                    <li><code>onResolved(value)</code>: callback function to be run if the promise succeeded</li>\n                                    <li><code>onRejected(reason)</code>: callback function to be run if the promise failed</li>\n                                    <li>If <code>onResolved</code> function is replaced with a value,\n                                    then this value is replaced with an <i>identity</i> function, returning\n                                    the value that the promise that <code>then</code> was attached to resolved to</li>\n                                    <li>If an <code>onRejected</code> function is replaced with a value,\n                                    then this value is replaced with a <i>thrower</i> function, throwing an error it\n                                    received as an argument</li>\n                                    \n                                </ul>\n                            "),Object(x.a)(Ln,"Returns","\n                            Returns a <b>promise</b> resolving to the value that the <code>onResolved</code>, \n                            or to the <code>onReject</code> callback returns\n                             In particular, if \n                            the function does not return a thing, the promise resolving to undefined is returned.\n                            "),Object(x.a)(Ln,"Description","\n                             The function runs a <code>onResolved</code> or <code>onRejected</code> callback, depending on the \n                             outcome of the preceding promise. The returned value is the outcome of the executed callback.\n                            "),Ln),(Dn={},Object(x.a)(Dn,Symbol("title"),"catch"),Object(x.a)(Dn,Symbol("code"),"\n                            promise1 | catch          | final result\n                            resolved | not executed D | resolved\n                            error    | resolved       | resolved\n                            error    | rejected       | Error\n<ul>\n    <li>May be described as <code>promise1.then(undefined, onRejection)</code></li>\n   <li><code>catch</code> may be in the middle of the promise chain</li>\n   <li>If <code>catch</code> callback rejects (or throws an error) all chained <code>then</code>\n   functions will run their rejection scenario, until one of them <b>resolves</b></li>\n   <li><code>catch</code> should end the promise chain, because if the last promise rejects, there will be an\n   uncaught error</li>\n   <li>Last <code>catch</code> should end with resolve to avoid an error. Last catch should handle all possible \n   errors</li>\n   <li>If an error is thrown by one of promise callback functions, this promise will be rejected</li>\n</ul>                                                        \n                        \n<b>Catch with preceding promise resolved</b>\n            <pre>\n(async function evaluate(){\n    let pOK = function(val){ \n        return function() {console.log('Resolved'+val);return Promise.resolve(val)}\n    }\n    let pNOK = function(val){ \n        return function(){console.log('Rejected'+val);return Promise.reject(val)}\n    }\n    let outcome = pOK(0)().then(pOK(1),pNOK(1)).then(pOK(2),pNOK(2)).catch(pOK(3))\n    console.log(await outcome)\n})();\n// Resolved0 \n// Resolved1 \n// Resolved2 \n// Resolved4\n// This will execute no matter the predecessor outcome\n// 4\n// Catch not executed, as everything before passed\n            </pre>          \n            \n            \n            <b>Catch with preceding promise rejected</b>\n            <pre>\n(async function evaluate(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n        let outcome = pOK(0)()\n            .then(pNOK(1),pNOK(1))\n            .catch(pOK(2))\n            .then(pOK(3),pNOK(3))\n            .then(pOK(4),pNOK(4))\n            .finally(()=>{console.log('This will execute no matter the precedor outcome')})\n            console.log(await outcome)\n    })();   \n//Resolved0\n//Rejected1\n//Resolved2\n//Resolved3\n//Resolved4\n// This will execute no matter the predecessor outcome\n//4\n            </pre>    \n            \n            \n            <b>Catch with preceding promise rejected and catch rejected, no final catch</b>\n            There will an uncaught error occur, as it is needed to set <code>catch</code>\n            always at the end of the chain.\n            <pre>\n(async function evaluate(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n        let outcome = pOK(0)()\n            .then(pNOK(1),pNOK(1))\n            .catch(pNOK(2))\n            .then(pOK(3),pNOK(3))\n            .then(pOK(4),pNOK(4))\n            // no catch here, error will appear\n            .finally(()=>{console.log('This will execute no matter the precedor outcome')})\n            console.log(await outcome)\n})();\n//Resolved0\n//Rejected1\n//Rejected2\n//Rejected3\n//Rejected4\n// This will execute no matter the predecessor outcome\n// Uncaught (in promise) 4\n            </pre>     \n\n            <b>A Rejecting catch with preceding promise throwing error</b>\n            <pre>\n(async function evaluate(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n    let err = function(val){return function(){throw new Error(val); return Promise.resolve(val)}}\n        let outcome = pOK(0)()\n            .then(pOK(1),pNOK(1))\n            .then(err(3),pNOK(3))\n            .catch(pNOK(2))\n            .then(pOK(3),pNOK(3))\n            .then(pOK(4),pNOK(4))\n            // .catch(()=>{console.log('Catching')})\n            .finally(()=>{console.log('This will execute no matter the precedor outcome')})\n            console.log(await outcome)\n})();\n//Resolved0\n//Rejected1\n//Rejected2\n//Rejected3\n//Rejected4\n// This will execute no matter the predecessor outcome\n// Uncaught (in promise) 4\n\n\n\n            </pre>    \n                            "),Object(x.a)(Dn,"Method","<code><span>Promise.prototype</span><span>.catch(onRejected)</span></code>"),Object(x.a)(Dn,"Arguments","\n                            <code>onRejected(reason)</code> is a callback returning a promise. If this promise \n                            fulfilles to the resolved value, then whole catch is concidered resolved, if the \n                            callback throws an error, or the result promise fulfills to rejected, the whole \n                            catch is concidered rejected. If the argument of the <code>catch</code> is a value, not a\n                            function, then catch passes preceding promise result to the next function in the\n                            chain, if available.\n                            "),Object(x.a)(Dn,"Returns","\n                            Returns a <b>promise</b> fulfilling to the value that the <code>onReject</code> callback \n                            returns. In particular if \n                            the funcion does not return a thing, the promise resolving to undefined is returned.\n                            "),Object(x.a)(Dn,"Description","\n                             The function runs a <code>onRejected</code> callback, if the preceding promise fulfilled to\n                             the rejected value, and returnes a promise fulfilling with the value returned by the \n                             callback.\n                            If the preceding promise was resolved then <code>catch</code> has no \n                             effect, and the stearing is passed to the next functions in the chain\n                            "),Dn),(Rn={},Object(x.a)(Rn,Symbol("title"),"finally"),Object(x.a)(Rn,Symbol("code"),"\n            <pre>\n<b>finally in theory does not to be the last in the chain</b>\n<pre>\n(async function evaluate(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n    let err = function(val){return function(){throw new Error(val); return Promise.resolve(val)}}\n        let outcome = pOK(0)()\n            .then(pOK(1),pNOK(1))\n            .then(pOK(3),pNOK(3))\n            .catch(pNOK(2))\n            .then(pOK(3),pNOK(3))\n            .finally(pNOK('fin'))\n            .then(pOK(4),pNOK(4))\n            console.log(await outcome)\n    })();\n</pre>            \n<b>Will execute no matter the outcome of preceding promise result</b>\n<pre>\n(async function evaluate(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n    let err = function(val){return function(){throw new Error(val); return Promise.resolve(val)}}\n    \n        let outcome0 = pOK(0)()\n            .then(pOK(0),pNOK(0))\n            .finally(pOK('fin0'))\n            // Resolved1\n            // Resolvedfin1\n    \n        let outcome1 = pOK(0)()\n            .then(pOK(1),pNOK(1))\n            .finally(pNOK('fin1'))\n            // Resolved1\n            // Uncaught error -> finally failed\n    \n        let outcome2 = pOK(0)()\n            .then(pNOK(2),pNOK(2))\n            .finally(pOK('fin2'))\n            // Rejected2\n            // Resolvedfin2\n            // Uncaught error -> no catch, rejection before finally,\n            // but finally is not for catching errors\n    \n        let outcome3 = pOK(0)()\n            .then(err(3),pNOK(3))\n            .finally(pOK('fin3'))\n            // Rejected3\n            // Resolvedfin3\n            // Uncaught error -> no catch, rejection (error thrown) before finally,\n            // but finally is not for catching errors\n    \n        console.log(await outcome1); // fin1\n        console.log(await outcome2); // fin2\n        console.log(await outcome3); // fin3\n            \n    })();\n</pre>\n                            "),Object(x.a)(Rn,"Method","<code><span>Promise.prototype</span><span>.finally(onFinally)</span></code>"),Object(x.a)(Rn,"Arguments","\n                            <code>onFinally()</code> will be run no matter the predecessor rejects or resolves. The \n                            only condition for this callback to be executed is the predecessor promise finalization.\n                            "),Object(x.a)(Rn,"Returns","\n                            Returns a <b>promise</b> fulfilling to the value that the <code>onFinally</code> callback \n                            returns. In particular, if \n                            the function does not return a thing, the promise resolving to undefined is returned.\n                            "),Object(x.a)(Rn,"Description","\n                             The function runs a <code>onFinally</code> callback as soon as the preceding promise fulfills\n                             (settles). This method returns a promise, so does not have to be at the end of the promise chain.\n                             <b>This function is not for handling errors!</b>. In case there is an uncaught rejected promise,\n                             <code>finally</code> will not prevent an error.\n                            "),Rn),(Fn={},Object(x.a)(Fn,Symbol("title"),"allSettled"),Object(x.a)(Fn,Symbol("code"),"\n    <b>An error thrown by one of promise callbacks</b> rejection\n            <pre>\n(async function allSettled(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n    let err = function(val){return function(){throw new Error(val); return Promise.resolve(val)}}\n        let iterable = function*(){\n            yield pOK(1)(); yield pNOK(2)(); yield err(3)(); yield pOK(4)();\n        }\n        console.log(Promise.allSettled(iterable()));\n    })(); // This returns a rejected promise, as there is an error thrown\n</pre>\n\n<b>Resolved</b>\n<pre>\n(async function allSettled(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n        let iterable = [pOK(1)(), pNOK(2)(), pOK(3)()]\n    console.log(Promise.allSettled(iterable);\n})(); \n// [[PromiseResult]]: Array(3): \n// [{status: 'fulfilled', value:1}, {status:'rejection', reason: 2}, {status: 'fulfilled', value: 3}]\n\n            </pre>\n                            "),Object(x.a)(Fn,"Method","<code>Promise.allSettled(iterable))</code>"),Object(x.a)(Fn,"Arguments","\n                            An iterable is an object having its [Symbol.iterable] well known symbol set to an iterator.\n                            For example an array, or Map object.\n                            "),Object(x.a)(Fn,"Returns","\n                            The promise with its value settled to the array of results of promises included in the iterable\n                            given as an argument.\n                            "),Object(x.a)(Fn,"Description","\n                             The method returns a promise, that resolves with an array of promise results of promises\n                             given in the iterable function argument.\n                            "),Fn),(Bn={},Object(x.a)(Bn,Symbol("title"),"all"),Object(x.a)(Bn,Symbol("code"),"\n<b>An error thrown by one of promise callbacks</b> rejection\n    <pre>\n(async function allReject(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let err = function(val){return function(){throw new Error(val); return Promise.resolve(val)}}\n        let iterable = function*(){\n            yield pOK(1)(); yield err(2)(); yield pOK(3)();\n        }\n        console.log(Promise.all(iterable()));\n})(); // Rejected due to the err; result: error..\n</pre>\n\n<b>Rejection</b> due to promise rejection\n<pre>\n(async function allReject(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n        let iterable = function*(){\n            yield pOK(1)(); yield pNOK(2)(); yield pOK(3)();\n        }\n        console.log(Promise.all(iterable()));\n})(); // Rejected due to the pNOK, promise result 2\n</pre>\n\n<b>Resolved</b>\n<pre>\n(async function allResolve(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n        let iterable = function*(){\n            yield pOK(1)(); yield pOK(2)(); yield pOK(3)();\n        }\n        console.log(Promise.all(iterable()));\n    })(); //  Resolved; [1,2,3]\n</pre>\n<b>All passed values are not promisses</b>\n<pre>\n(async function allResolve(){\n    console.log(Promise.all([1,2,3]));\n})(); //  Resolved; [1,2,3]\n</pre>\n                    "),Object(x.a)(Bn,"Method","<code>Promise.all(iterable))</code>"),Object(x.a)(Bn,"Arguments","\n                    An iterable is an object having its [Symbol.iterable] well known symbol set to an iterator.\n                    For example an array, or Map object.\n                    "),Object(x.a)(Bn,"Returns","\n                    A promise that:\n                    <ul>\n                    <li>In case all promises given in the input iterable resolve: returns the promise with its value \n                    settled \n                    to the array of results of promises included in the iterable given as an argument.</li>\n                    <li>In case <b>at least one promise from the input iterable rejects</b> the returned promise will \n                    reject <b>not waiting for other promisses to resolve</b></li>\n                    <li>In case of error in one of promises passed as an argument, the returned promise will\n                    reject with the error description as the value</li>\n                    <li>A resolved promise if the iterable passed as an argument is empty</li>\n                    <li>An asynchronously resolved Promise if the iterable passed as an argument has no promises</li>\n                    </ul>\n                    "),Object(x.a)(Bn,"Description","\n                     Takes an iterable of promises, and returns a promise, that will resolve to an array of \n                     results if each promise from the iterable resolves, or reject in case at least one \n                     promise from the iterable rejects.\n                    "),Bn),(Un={},Object(x.a)(Un,Symbol("title"),"any"),Object(x.a)(Un,Symbol("code"),"\n\n<b>rejectFunctionFactory, resolveFunctionFactory, errorFactory, asyncErrorFacotry</b>\n<pre>\nfunction rejectFunctionFactory(timeout){\n    return function(reason){\n        let rejectedPromise = new Promise((resolve, reject)=>{\n            setTimeout(()=>{\n                reject(reason)\n            }, timeout)\n        })\n        return rejectedPromise;\n    }\n}\nfunction resolveFunctionFactory2(timeout){\n    return function(value){\n        let resolvedPromise = new Promise((resolve, reject)=>{\n            setTimeout(()=>{\n                resolve(value);\n            },timeout)\n        })\n        return resolvedPromise;\n    }\n}\nfunction errorFactory(){\n    return function(errorAsString){\n        throw new Error(errorAsString);\n    }\n}\nfunction asyncErrorFactory(timeout){\n    return function(reason){\n        return new Promise((resolve, reject)=>{\n            setTimeout(() => {\n                throw new Error(timeout);\n            }, timeout);\n        })\n    }\n}\n</pre>\n\n<b>An empty iterable given</b> rejection synchronously\n<pre>\n(async function emptyArrayAny(){\n    let result = await Promise.any([]).catch((reason)=>{\n        return Promise.resolve(reason);\n    });\n    console.log(result);\n    // AggregateError, all promises were rejected\n})();\n</pre>\n\n<b>An iterable containing some no promise values</b>\n<pre>\n(async function someNoPromisesAny(){\n    let failPromise50 = rejectFunctionFactory(50, SECTION_8_4);\n    let failPromise100 = rejectFunctionFactory(100, SECTION_8_4);\n    let resolvePromise150 = resolveFunctionFactory2(150, SECTION_8_4);\n    let resolvePromise170 = resolveFunctionFactory2(170, SECTION_8_4);\n    let failPromise200 = rejectFunctionFactory(200, SECTION_8_4);\n    let promises = function* (){\n        yield failPromise100(100); yield failPromise50(50); \n        yield resolvePromise150(150); yield failPromise200(200);\n        yield resolvePromise170(170); yield 5;\n    }\n    let result = await Promise.any(promises());\n    console.log(result);\n    // resolves: with '5' value after 0ms, as this is not a promise and its value was available immediately\n})();\n</pre>\n\n<b>An iterable containing only promise values</b> resolves as soon as the first promise resolve\n<pre>\n(async function allResolveAny(){\n    let failPromise50 = rejectFunctionFactory(50, SECTION_8_3);\n    let failPromise100 = rejectFunctionFactory(100, SECTION_8_3);\n    let resolvePromise150 = resolveFunctionFactory2(150, SECTION_8_3);\n    let resolvePromise170 = resolveFunctionFactory2(170, SECTION_8_3);\n    let failPromise200 = rejectFunctionFactory(200, SECTION_8_3);\n    let promises = function* (){\n        yield failPromise100(100); yield failPromise50(50); \n        yield resolvePromise150(150); yield failPromise200(200);\n        yield resolvePromise170(170)\n    }\n    let result = await Promise.any(promises());\n    console.log(result);\n    // resolves: with resolvePromise150 value that is 150 after 150ms\n})();\n</pre>\n\n<b>An iterable containing only rejecting promises</b> an aggregated error is returned\n<pre>\n(async function allRejectAny(){\n    let failPromise50 = rejectFunctionFactory(50, SECTION_8_3);\n    let failPromise100 = rejectFunctionFactory(100, SECTION_8_3);\n    let failPromise150 = rejectFunctionFactory(150, SECTION_8_3);\n    let failPromise200 = rejectFunctionFactory(200, SECTION_8_3);\n    let promises = function* (){\n        yield failPromise100(100); yield failPromise50(50); \n        yield failPromise150(150); yield failPromise200(200)\n    }\n    let result = await Promise.any(promises()).catch((reason)=>{\n        return Promise.resolve(reason);\n    });\n    console.log(result);\n})();\n</pre>\n\n<b>An error is thrown instantly</b>, before the promise is returned\n<pre>\n(async function errorWithAny(){  \n    let asyncErr = asyncErrorFactory(120);\n    let syncErr = errorFactory()\n    let failPromise100 = rejectFunctionFactory(100);\n    let resolvePromise150 = resolveFunctionFactory2(150);\n    let resolvePromise170 = resolveFunctionFactory2(170);\n    let failPromise200 = rejectFunctionFactory(200);\n    let promises = function* (){\n        yield failPromise100(100); yield asyncErr('FailingAsyncErr'); \n        yield resolvePromise150(150); yield failPromise200(200);\n        yield resolvePromise170(170); yield syncErr('FailingSyncErr')\n    }\n    let result = await Promise.any(promises());\n    console.log(result);\n    // rejects: the sync error, as it is not a promise, it is a value and is available instatnly\n})();\n</pre>\n\n<b>An error is thrown in the promise callback</b>,\n<pre>\n(async function errorWithAny(){  \n    let asyncErr = asyncErrorFactory(120);\n    let failPromise100 = rejectFunctionFactory(100);\n    let resolvePromise150 = resolveFunctionFactory2(150);\n    let resolvePromise170 = resolveFunctionFactory2(170);\n    let failPromise200 = rejectFunctionFactory(200);\n    let promises = function* (){\n        yield failPromise100(100); yield asyncErr('FailingAsyncErr'); \n        yield resolvePromise150(150); yield failPromise200(200);\n        yield resolvePromise170(170);\n    }\n    let result = await Promise.any(promises());\n    console.log(result);\n    // resolves: resolvePromise150. The error is thrown earlier (after 120ms)\n    // but this is an error, that rejects, not resolves, so it is treated as \n    // the promise rejection.\n})();\n</pre>\n\n                    "),Object(x.a)(Un,"Method","<code>Promise.any(iterable))</code>"),Object(x.a)(Un,"Arguments","\n                    An <code>iterable</code>: an object having its well known symbol <code>@@Iterator</code>\n                    set to the iterator function.\n                    "),Object(x.a)(Un,"Returns","\n                    A promise that:\n                    <ul>\n                        <li>Is rejected synchronously to rejected in case an empty array is the argument</li>\n                        <li>Is pending, but gets resolved to the value of the first resolved promise, if at least one promise from the\n                        iterable is resolved\n                        </li>\n                        <li>Asynchronously resolved promise if the iterable passed as an argument has no promises</li>\n                    </ul>\n                    "),Object(x.a)(Un,"Description","\n                    Returns a pending promise, that resolves to the value of the first promise from the given iterable, \n                    that resolves. In case none promise resolve (all are rejected), the returned promise rejcets to the\n                    aggregated error. In case an empty array is given as an argument, returns already rejected promise.\n                    "),Un),(_n={},Object(x.a)(_n,Symbol("title"),"race"),Object(x.a)(_n,Symbol("code"),"\n\n    <b>rejectFunctionFactory, resolveFunctionFactory, errorFactory, asyncErrorFacotry</b>\n<pre>\nfunction rejectFunctionFactory(timeout){\n    return function(reason){\n        let rejectedPromise = new Promise((resolve, reject)=>{\n            setTimeout(()=>{\n                reject(reason)\n            }, timeout)\n        })\n        return rejectedPromise;\n    }\n}\nfunction resolveFunctionFactory2(timeout){\n    return function(value){\n        let resolvedPromise = new Promise((resolve, reject)=>{\n            setTimeout(()=>{\n                resolve(value);\n            },timeout)\n        })\n        return resolvedPromise;\n    }\n}\nfunction errorFactory(){\n    return function(errorAsString){\n        throw new Error(errorAsString);\n    }\n}\n\n\n    <b>Mixed resolves and rejectes</b>\n<pre>\n(async function promiseRaceMixed(){ \n    let failPromise100 = rejectFunctionFactory(100);\n    let resolvePromise150 = resolveFunctionFactory2(150);\n    let resolvePromise170 = resolveFunctionFactory2(170);\n    let failPromise200 = rejectFunctionFactory(200);\n    let promises = function* (){\n        yield failPromise100(100); yield resolvePromise150(150); \n        yield failPromise200(200); yield resolvePromise170(170);\n    }\n    let result = await Promise.race(promises())\n        .then(\n            (value)=>{return Promise.resolve('resolved '+value)},\n            (reason)=>{return Promise.resolve('rejected'+reason)}\n        );\n    console.log(result);\n    // rejects with value 100 in 100ms\n    // Handing the promise rejection is importante, as if an error is thrown, \n    // there may be no value passed\n})();\n</pre>\n\n<b>Mixed promises with no promise values</b>\n<pre>\n(async function promiseRaceMixed(){ \n    let failPromise100 = rejectFunctionFactory(100);\n    let resolvePromise150 = resolveFunctionFactory2(150);\n    let resolvePromise170 = resolveFunctionFactory2(170);\n    let failPromise200 = rejectFunctionFactory(200);\n    let promises = function* (){\n        yield failPromise100(100); yield resolvePromise150(150); \n        yield failPromise200(200); yield resolvePromise170(170);\n        yield 9;\n    }\n    let result = await Promise.race(promises())\n        .then(\n            (value)=>{return Promise.resolve('resolved '+value)},\n            (reason)=>{return Promise.resolve('rejected'+reason)}\n        );\n    console.log(result);\n    // resolves with the value 9, as this is not a promise and this value\n    // is available instantly\n})();\n</pre>\n\n<b>An error thrown before the promise is returned</b>\n<pre>\n(async function syncErrorWithRace(){\n    let asyncErr = asyncErrorFactory(120);\n    let syncErr = errorFactory()\n    let failPromise100 = rejectFunctionFactory(100);\n    let resolvePromise150 = resolveFunctionFactory2(150);\n    let resolvePromise170 = resolveFunctionFactory2(170);\n    let failPromise200 = rejectFunctionFactory(200);\n    let promises = function* (){\n        yield failPromise100(100); yield syncErr('syncErrFailing'); \n        yield resolvePromise150(150); yield failPromise200(200);\n        yield resolvePromise170(170); yield asyncErr('asyncErrFailing')\n    }\n    let result = await Promise.race(promises()).then(\n        (value)=>{return Promise.resolve('resolved '+value)},\n        (reason)=>{return Promise.resolve('rejected'+reason)}\n    );\n    console.log(result);\n    // rejecting with the syncErrFailing after 0ms\n    // as the error thrown before the promise is returned, \n    // is an instantly available value\n})();\n</pre>\n\n<b>An error that is the result of the promise</b>\n<pre>\n(async function asyncErrorWithRace(){\n    let asyncErr = asyncErrorFactory(20);\n    let failPromise100 = rejectFunctionFactory(100);\n    let resolvePromise150 = resolveFunctionFactory2(150);\n    let resolvePromise170 = resolveFunctionFactory2(170);\n    let failPromise200 = rejectFunctionFactory(200);\n    let promises = function* (){\n        yield failPromise100(100);\n        yield resolvePromise150(150); yield failPromise200(200);\n        yield resolvePromise170(170); yield asyncErr('asyncErrFailing')\n    }\n    let result = await Promise.race(promises()).then(\n        (value)=>{return Promise.resolve('resolved '+value)},\n        (reason)=>{return Promise.resolve('rejected'+reason)}\n    );\n    console.log(result);\n    // rejecting with the asyncErrFailing after 20ms\n    // This is important to handle errors\n})();\n</pre>\n\n<b>An empty array as an argument</b>\n<pre>\n(async function foreverPending(){\n    let pending = await Promise.race([]);\n    console.log('This should not be written')\n})()\n</pre>\n\n\n\n\n    "),Object(x.a)(_n,"Method","<code>Promise.race(iterable))</code>"),Object(x.a)(_n,"Arguments","\n    An <code>iterable</code>.\n    "),Object(x.a)(_n,"Returns","\n    A promise that:\n    <ul>\n        <li>A pending promise that yields to the first promise from the given iterable, that gets \n        settled (resolves or rejects)</li>\n        <li>In case there is a non promise value in the iterable, then the result would yield to \n        the first non promise value in the iterable</li>\n        <li>In case of an empty array, the promise will be pending forever</li>\n    </ul>\n    "),Object(x.a)(_n,"Description","\n    Returns a pending promise, that yields to the value of the first promise from the given iterable, \n    that settles (gets either resolved or rejected). In case there is a non promise value in the iterable, \n    then the promise will resolve to the first non promise value encountered in the interable\n    "),_n),(Wn={},Object(x.a)(Wn,Symbol("title"),"resolve"),Object(x.a)(Wn,Symbol("code"),"\n    (async function(){\n        let res = Promise.resolve('someVal');\n        console.log(res); // still not settled\n        let awaited = await res;\n        console.log(awaited)\n        // Both awaited and res turn out after 0ms\n    })()\n    "),Object(x.a)(Wn,"Method","<code>Promise.resolve(value))</code>"),Object(x.a)(Wn,"Arguments","\n    A <code>value</code> of any type\n    "),Object(x.a)(Wn,"Returns","\n    A promise that is resolved with the given value\n    "),Object(x.a)(Wn,"Description","\n    Returns a promise resolved with the given value\n    "),Wn),(qn={},Object(x.a)(qn,Symbol("title"),"reject"),Object(x.a)(qn,Symbol("code"),"\n    (async function(){\n        let res = Promise.reject('someReason');\n        console.log(res); // not settled without an await\n        let awaited = await res;\n        console.log(awaited)\n        // Both awaited and res turn out after 0ms,\n    })()\n    "),Object(x.a)(qn,"Method","<code>Promise.reject(reason))</code>"),Object(x.a)(qn,"Arguments","\n    A <code>reason</code> of any type\n    "),Object(x.a)(qn,"Returns","\n    A promise that is rejected with the given reason\n    "),Object(x.a)(qn,"Description","\n    Returns a rejected promise with the given reason\n    "),qn)]},{elementType:"Article",content:[{elementType:"Headline-3",content:"Use cases"},{elementType:"UnsignedList",content:["Server side communication,","JS chained animations","Actions on timer expire","Could be used to control the steaering of a state based game like implementation of \n                            Magic the Gathering or Monopoly. In this case turns would be devided to phases, and\n                            phases to subphases, and subphases can be represented with an iterable of functions,\n                            each of those functions may be asynchronous, and awaited in the loop. In this design pattern\n                            the next function (phase) would not start before the previous ended, promises could await\n                            user interaction with some elements on the page (here mediator pattern could be useful). \n                            This concept needs prove. But if it works, then the solution would be extendable, what\n                            is important in games like MTG. This framework would allow to change the whole implementation\n                            to some other similar game.","Workaround in Angular. There is an error <i>Expression has changed after it was checked</i>.\n                            If the expression is put into <code>setTimeout(()=>{expression})</code>, without the \n                            actual time delay value, then this expression is evaluated asynchronously and the change\n                            check is forced one more time,","Excellent for communication with web-workers (see the article)"]},{elementType:"SmallHeadline",content:"Animation with promise chain example"},{elementType:"Paragraph",content:"This code selects an absolutely positioned element and moves it to specified points \n                        on the screen, waits for some time, and moves it again. This pattern is good for \n                        making sequence animations in case pure CSS or even SCSS cannot be used."},{elementType:"NoteWarning",content:"If only pure CSS or some precompiler can be used instead of JS, they should be \n                        used. JS is the last resource."},{elementType:"Paragraph",content:"CSS and HTML for the example:"},{elementType:"Code",content:'\n<pre>\n&lt;style>\nbody{background-color: #444;color:#ddd;font-family: Arial, Helvetica, sans-serif;}\n#animationTarget{\n    position: absolute;\n    width:50px;height: 50px;border-radius: 50%;background-color:red;\n    top: 100px;left:100px;}\n&lt;/style>\n&lt;div id="animationTarget">&lt;/div>\n</pre>                        \n                        '},{elementType:"Paragraph",content:"Functions for moving the object"},{elementType:"Code",content:"\n<pre>\nfunction move(animationTargetId, destination, timeInMiliseconds){\n    let framesPerSecond = 24;\n    let msInSecond = 1000;\n    let framesInterval = Math.floor(framesPerSecond / msInSecond);\n    let nrOfFrames = timeInMiliseconds * framesPerSecond / msInSecond;\n    let animationTarget = document.getElementById(animationTargetId);\n    let {x:xEnd, y:yEnd} = destination;\n    let {left: xStart, top: yStart} = animationTarget.getBoundingClientRect();\n    let xMovePerFrame = (xEnd - xStart)/nrOfFrames;\n    let yMovePerFrame = (yEnd - yStart)/nrOfFrames;\n    let {currentX, currentY} = {currentX: xStart, currentY: yStart};\n    let currentFrame = 0;\n    console.log('move Started')\n    let moveEnded = new Promise((resolve) => {\n            let interval = setInterval(()=>{\n            currentX += xMovePerFrame;\n            currentY += yMovePerFrame;\n            currentFrame += 1;\n            animationTarget.style.left = currentX + 'px';\n            animationTarget.style.top = currentY + 'px';\n            if (currentFrame >= nrOfFrames) {\n                clearInterval(interval);\n                console.log('move resolved')\n                resolve();\n            }\n        },framesInterval);\n    })\n    return moveEnded;\n}\n\nfunction wait(timeInMiliseconds){\nlet waitingEnded = new Promise((resolve) => {\n    let timeout = setTimeout(()=>{\n        console.log('waiting ended')\n        resolve();\n    }, timeInMiliseconds)\n})\nconsole.log('waiting')\nreturn waitingEnded;\n}\n</pre>                        \n                        "},{elementType:"Paragraph",content:"Now for the implementation with the await operator"},{elementType:"Code",content:"\n<pre>\nasync function animateAwait(){\n    await move('animationTarget', {x: 500, y:500}, 2000)\n    await wait(1000)\n    await move('animationTarget', {x: 500, y: 100}, 1000);\n    await move('animationTarget', {x: 550, y: 1000}, 1000);\n    await wait(1000);\n    await move('animationTarget', {x: 100, y: 100}, 3000);\n\n}\n</pre>                        \n                        "},{elementType:"Paragraph",content:"Now for the implementation with the await operator"},{elementType:"Paragraph",content:"Implementation with the <code>then</code> method. <strong>Note, that all callbacks\n                        have to return a promise</strong>, or undefined will be returned, and all promises will resolve \n                        instatnly causing animation times to mix."},{elementType:"Code",content:"\n<pre>\nasync function animateThen(){\n    // Here it is important to wrap handlers, so they return functions not taking any arguments:\n    move('animationTarget', {x:1000, y: 1000}, 3000)\n        .then(()=>{return wait(1000)})\n        .then(()=>{return move('animationTarget', {x:500,y:500}, 2000)})\n        .then(()=>{return wait(3000)})\n        .then(()=>{return move('animationTarget', {x:-500,y:-500}, 5000)})\n}\n</pre>                        \n                        "},{elementType:"Paragraph",content:"Lets launch one animation after another"},{elementType:"Code",content:"\n<pre>\n(async function animateAll(){\n    await animateAwait();\n    await animateThen();\n})();\n</pre>                        \n                        "},{elementType:"Paragraph",content:"An example preview:"},{elementType:"exampleInIframe",title:"Slot example",src:"https://gudmar.github.io/theoryCornerExamples/async.html",width:"500",height:"400"}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Async functions, await",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",description:"Async functions"},{elementType:"Link",content:"Promise",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise",description:"Constructor"}]}]}]};var Vn={summary:"Web worker",title:"Web worker",searchKeywords:"web worker\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Web workers"},{elementType:"NoteWarning",content:"\n                    For security reasons web workers stick to the same origin policy. So for practicing with a web \n                    worker, the server is needed. The simple http one will do, but it is important, that the local\n                    file system is not good enough.\n                    "},{elementType:"NoteWarning",content:"\n                    The web worker is a separate file that has to be imported to the main html file.\n                    "},{elementType:"Paragraph",content:"\n                    JS is mainly a single threaded runtime language. If there is a server request, there is an asynchronous\n                    mechanism launched. Not a new thread started to resolve the request. However, there is one feature letting\n                    it possible to launch an additional script in the next thread. This additional script, that is launched \n                    in a next thread is called a <i>web worker</i>. It has no access to the DOM, and its scope is different, but\n                    it has access to some APIs like:\n                    "},{elementType:"UnsignedList",content:["Crypto","Cache API","Console API","CustomEvent","Encoding API (TextEncoder, TextDecoder)","Fetch API","FileReader","IndexedDB","Promise","Server-sent events","URL API","WebSocket","XMLHttpRequest"]},{elementType:"Paragraph",content:"\n                    Web workers are good for time consuming computations, that would block the main browser thread, or \n                    for serving the web content from the cache, when user is offline, and updating cache if the user is online.\n                    There are three types of web-workers:\n                    "},{elementType:"UnsignedList",content:["Dedicated worker","Shared worker","Service Worker"]},{elementType:"SmallHeadline",content:"Communicatoin"},{elementType:"Paragraph",content:"Communication between the main thread and a worker is implemented with:"},{elementType:"UnsignedList",content:["<code>workerInstance.postMessage(messageContent)</code>: from the main thread","<code>postMessage(messageContent)</code>: from the worker","<code>workerInstance.onmessage = callback()</code>: from the main thread,","<code>onmessage = function(){}</code> from the worker thread"]},{elementType:"SmallHeadline",content:"Types"},{elementType:"UnsignedList",content:["<code>WorkerGlobalSocpe</code>: an abstract scope, is used for inheritance purposes,","<code>DedicatedWorkerGlobalScope</code>: a dedicated type, used only once and utilized, \n                            if usages of this worker overlap, then the last request will shadow previous ones,","<code>ServiceWorkerGlobalSocpe</code>: this worker is dedicated to the native application\n                            user exerience. When a user is online the service worker downloads data, sends them to be displayed\n                            on the screen, and stores them in cache. If user is offline, data is displayed from the cache by\n                            service worker."]},{elementType:"SmallHeadline",content:"Properties"},{elementType:"UnsignedList",content:["<strong><code>WorkerGlobalSocpe.self</code></strong>: This is the <code>this</code> sort of\n                            keyword. <code>self</code> refers to the global scope of the worker,","<code>WorkerGlobalSocpe.navigator</code>: This is the navigator data, related to data about \n                            the installed browser, operating system, etc...","<code>WorkerGlobalSocpe.location</code>: this is for the URL parsing purposes. Knows properties like\n                            <code>host</code>, <code>href</code>: direct link, <code>origin</code>: the same as the host,\n                            <code>pathname</code>: the path to the current resource, <code>port</code>, <code>protocol</code>"]},{elementType:"SmallHeadline",content:"Events"},{elementType:"UnsignedList",content:["<code>onmessage</code>: the event launched in case there is a message passed from/to the\n                            worker,","<code>onerror</code>: the event triggered when there is an error","<code>offline</code>: the event triggered when the device becomes offline,","<code>online</code>: the event triggered when the device becomes online,"]},{elementType:"Headline-3",content:"Dedicated worker"}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Proxy",description:"Tutorial"}]}]};var Kn={summary:"custom web components",title:"Custom web components",searchKeywords:" cwc slot template slotted host :host :slotted :defined\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Custom web components"},{elementType:"Paragraph",content:"\n                    Encapsulation: closing some functionalities in one class or function. Test this class, and be\n                    sure it works as expected. This is a powerful tool for keeping the code clean. \n                    One of the approaches to encapsulation is building web components. They are pieces of code \n                    having their view representation bound to some logic. This could be compared to html\n                    <code>input</code> button. We cannot access its internal, but it works good, its behavior \n                    may be changed with properties.\n                    "},{elementType:"Paragraph",content:"\n                    Pure JS makes it possible to close a component in a single class. It not only has an HTML\n                    structure and logic bound. It closes its CSS so it will not interfere with the rest pages \n                    CSS. It may use something called a <strong>shadow DOM</code>, a part of the DOM that is closed\n                    for the outsie word. Its internals can not be found with simple DOM searching methods, and\n                    its CSS is separated from the outside world. \n                    "},{elementType:"Paragraph",content:"\n                    The developer just selects a custom HTML tag (having at least 2 words separated with a dash), and\n                    may use this tag in HTML to insert a custom web component.\n                    "},{elementType:"SmallHeadline",content:"A glosary\n                    "},{elementType:"UnsignedList",content:["<code>CWC</code>: a Custom Web Component, technology allowing the definition of such a component,","<code>host</code> or <code>CWC host</code>: an element that is registered with \n                        the <code>window.customElements.define</code> method, and is the host of the shadow-DOM,","<code>shadow-DOM</code> the part of the DOM that is separated from the <q>light</q> DOM\n                        and cannot be easily accessed with the document.getElementById or document.querySelector methods.\n                        CSS inside the shadow root does not impact outside world, and this CSS from the outside world does\n                        not infuence the shadow DOM CSS,"]},{elementType:"Headline-2",content:"Structure"},{elementType:"UnsignedList",content:["Is a class that extends an <code>HTMLElement{}</code> or any build-in element like \n                        <code>HTMLParagraphElement</code>, <code>HTMLDivElement</code>, \n                        <code>HTMLCanvasElement</code>, <code>HTMLBodyElement</code>, <code>HTMLFormElement</code>","The custom web component needs to be registered in the <code>window.customElements</code> register\n                        with the <code>window.customElements.define('element-tag', className[, {extends: 'p'}], where \n                        the extends takes the tag name of the element that is extended, if the web component does \n                        extend a concrete element, not an <code>HTMLElement</code>","Has lifecycle methods, like the <code>constructor</code>, <code>connectedCallback</code>,\n                        <code>attributeChangedCallback(attrName, oldVal, newVal)</code>, <code>disconnectedCallback</code>,\n                        <code>adoptedCallback</code>","Can use a template with styling and HTML structure to describe the view of the component","Can use <code>&lt;slot></code> elements to input some content from the outside world,"]},{elementType:"Headline-3",content:"Lifecycle methods"},{elementType:"SmallHeadline",content:"constructor()"},{elementType:"UnsignedList",content:["An instance is upgraded or created","use <code>super()</code>","Initializing state,","setting up event listeners","Creating a shadow DOM","The <code>return</code> should not be used except for an early return of <code>this</code>","Actual work should be placed in the <code>connedtedCallback</code>","<code>document.open()</code> or <code>document.write()</code> should not be called here"]},{elementType:"SmallHeadline",content:"connectedCallback"},{elementType:"UnsignedList",content:["Invoked every time the component is added to the DOM,","It is called if an element is moved to another parent with an <code>element.appendChild(newParent)</code>\n                        method,","Communication with server or web workers here,","Computations and work here,","Rendering,","attributes and children should not be used here, to match <code>createElement()</code> or\n                        <code>createElementNS()</code>","The best place for accessing attributes to passed in the HTML tag,","All operations referring to the DOM structure of creating web element here, as DOM becomes\n                        available here,"]},{elementType:"SmallHeadline",content:"disconnectedCallback"},{elementType:"UnsignedList",content:["Called each time an element is removed from the DOM,","Notify all other parts of the application that the element is being removed,","Free resources that will not be cleared automatically,","Unsubscribe from the DOM events,","Stop interval timers,","Unsubscribe, unregistered callbacks for global application services,","This hook is not called if a user closes the tab"]},{elementType:"SmallHeadline",content:"attributeChangedCallback(attrName, oldVal, newVal)"},{elementType:"UnsignedList",content:["Will be invoked each time a registered attribute (for example passed in the HTML) changes,","Uses a <code>static get observedAttributes</code> getter to learn what attributes will be \n                        observed. This method returns an array of attributes: <code>return ['prop1, 'prop2']</code>","BEWARE :). This should not be used together with a proxy or a mutation observer \n                        APIS, as a reaction to the same change will appear multiple times,"]},{elementType:"SmallHeadline",content:"adoptedCallback"},{elementType:"UnsignedList",content:["This callback is triggered when the node is moved to another document object. This may \n                        take place when working with <code>iframe</code> objects,"]},{elementType:"Code",content:"\n<pre>\nconst iframe = document.querySelector('#someFrame');\nconst elementToBeMoved = iframe.contentDocument.querySelector('#elementToBeMoved');\ndocument.querySelector('#newParent').appendChild(document.adoptNode(elementToBeMoved))\n</pre>                    \n                    "},{elementType:"Headline-3",content:"Setting the HTML and CSS content"},{elementType:"Paragraph",content:"\n                    The content should be set in the <code>connectedCallback</code>. The best way is to use a \n                    <code>template</code> element. This element is rendered only once and is not visible when placed in the \n                    main HTML file. It may be a good practice to create a separate HTML file for the template,\n                    and separate from the logic, and place them in one (separate) folder, just like Angular does.\n                    The template may have a <code>style</code> element with the CSS.\n                    It is possible to add the template content in a <code>shadowRoot</code> element.\n                    The shadow root should be attached in the constructor.\n                    "},{elementType:"Paragraph",content:"\n                    Usage of the custom web elements host inner HTML for setting content can be done with <code>&lt;slot></code>\n                    elements. \n                    "},{elementType:"Paragraph",content:"\n                    Using the innerHTML of the custom web component host (like li elements inside ul) is not \n                    encouraged, because the custom web component API was not designed for that, but it is possible.\n                    To do this:\n                    "},{elementType:"UnsignedList",content:["A <code>MutationObserver</code> should be used to watch for the changes in the custom \n                        web component innerHTML,","<code>this.innerHTML</code> inside the custom web components class refers to the \n                        main element of the component (the registered HTML tag)"]},{elementType:"Code",content:"\n<pre>\nclass CustomElement extends HTMLElement {\n    constructor(){\n        const observer = new MutationObserver(this.onInnerHTMLChange.bind(this))\n        observer.observe(this, \n            {\n                subtree: false, // no nested elements are observed\n                childList: true // for inner HTML\n            }\n        )\n    }\n    onInnerHTMLChange() {\n        this.message = this.innerHTML;\n        try {\n            // here this.innerHTML is available\n        } catch (e) {\n            // expected - at this moment modalMessageHolder is null;\n        }\n    }\n}\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"HTML template example"},{elementType:"Code",content:'\n                    <b>HTML</b>\n<pre>\n&lt;template id="sectionTemplate">\n    &lt;style>\n       h3{font-family:arial;}\n       p{margin:5px;} \n    &lt;/style>\n    &lt;div class="section">\n        &lt;slot name="title">&lt;/slot>\n        &lt;slot name="content">&lt;/slot>\n    &lt;/div>\n&lt;/template>\n</pre>   \n\n<b>JS</b>\n<pre>\nclass SectionElement extends HTMLElement(){\n    constructor(){\n        super();\n        this.shadowRoot = this.attachShadow({mode:\'open\'});\n    }\n    connectedCallback(){\n        let template = document.querySelector(\'#sectionTemplate\');\n        this.shadowRoot.appendChild(template.cloneNode(true)); // true for clonning with child elements;\n    }\n}\n\nwindow.customElements.define(\'section-element\', SectionElement)\n</pre>  \n\n\n<b>usage in HTML</b>\n<pre>\n&lt;section-element>\n  &lt;h3 slot="title">Article section title&lt;/h3>\n  &lt;p slot="title">Article section title&lt;/p>\n&lt;/section-element>\n</pre>   \n                    '},{elementType:"Headline-3",content:"Slots"},{elementType:"UnsignedList",content:["<code>&lt;slot></code> is an element placed inside the shadow DOM of the CWC,","<code>&lt;slot></code> will receive content of the light DOM element that's <code>slot</code> attribute\n                        matches the shadow DOM <code>&lt;slot></code> elements <code>name</code> attribute,","It is important to state that attaching shadow root to the element hides all other HTML content, that \n                        was present inside this shadow host. The light DOM content is still available in the DOM, \n                        however it is not visible on the page,","A <strong>slotted</code> element is the element that is placed inside the <code>&lt;slot></code> \n                        tag in the shadow DOM, so <code>::slotted(selector)</code> pseudo-class refers to the shadow DOM element,","The HTML content corresponding to the slotted content is placed in the light DOM, in the place where \n                        an element with the <code>slot</code> attribute is defined. That is why the css matching the slot \n                        provider element will not target that element if placed in the shadow DOM","Slots are elements that can be used only with the CWC"]},{elementType:"Image",name:"slot_outsideShadow.png",alt:"Slot source is placed outside shadow DOM"},{elementType:"SmallHeadline",content:"Slot example"},{elementType:"Paragraph",content:"Below example illustrates how slots work. There is a simple CWC with a function, that changes\n                    its content once 2s"},{elementType:"exampleInIframe",title:"Slot example",src:"https://gudmar.github.io/theoryCornerExamples/slotExample.html"},{elementType:"Code",content:"\n                    <div class=\"note\">\n                    A HTML template for the CWC:\n                    </div>\n<pre>\n&lt;template id=\"personData\">\n&lt;style>\n    .not-shadow-list{\n        background-color: yellow;\n        color:black;\n    }\n    .wrapper{\n        background-color:white;\n        color:black;\n        font-family: Arial, Helvetica, sans-serif;\n        border-radius: 5px;\n        width: 300px;\n    }\n    ::slotted(span){\n        background-color:green;\n        color:white;\n        border-radius: 5px;\n        padding: 3px;\n        margin: 5px;\n        font-weight: lighter;\n    }\n    .row{\n        margin: 15px;\n        font-weight: bold;\n        background-color: lightgreen;\n    }\n&lt;/style>\n&lt;div class=\"wrapper\">\n    &lt;div class=\"row\">\n        &lt;span class=\"label\">Name: &lt;/span>\n        &lt;slot name=\"name\">John&lt;/slot>\n    &lt;/div>\n    &lt;div class=\"row\">\n        &lt;span class=\"label\">Family name: &lt;/span>\n        &lt;slot name=\"family-name\">John&lt;/slot>\n    &lt;/div>\n    &lt;div class=\"row\">\n        &lt;span class=\"label\">Data: &lt;/span>\n        &lt;slot name=\"data\">Na&lt;/slot>\n    &lt;/div>\n&lt;/div>\n&lt;/template>\n</pre>\n\n\n                    <div class=\"note\">\n                    A CWC element:\n                    </div>\n\n\n<pre>\nclass PersonData extends HTMLElement{\n    constructor(){\n        super();\n        let templ = document.querySelector('#personData');\n        this.attachShadow({mode:'open'});\n        this.shadowRoot.appendChild(templ.content.cloneNode(true));\n    }\n}\nwindow.customElements.define('person-data', PersonData);\n</pre>\n                    <div class=\"note\">\n                    A content generator:\n                    </div>\n<pre>\n\nfunction replaceData(){\n    let name = document.querySelector('[slot=\"name\"]');\n    let famName = document.querySelector('[slot=\"family-name\"]');\n    let data = document.querySelector('[slot=\"data\"]');\n    let newDataSetGetter = nextDataSetGetter();\n    function replace(){\n        // console.log(data.childNodes)\n        \n        \n        let newDataSet = newDataSetGetter.nextValue();\n        console.log(newDataSet.data)\n        name.innerHTML = newDataSet.name;\n        famName.innerHTML = newDataSet.familName;\n        try{data.removeChild(data.childNodes[0]);}\n        catch{};\n        data.appendChild(newDataSet.data);\n    }\n    const int = setInterval(replace, 2000);\n}\n\nconst dataSet = [\n    {name: 'Genowefa', familName:'B\u0105k', data:getDataElement(0)},\n    {name: 'Janusz', familName:'B\u0105kiewicz', data:getDataElement(1)},\n    {name: 'Eleonora', familName:'B\u0105kowska', data:getDataElement(2)},\n]\nfunction getDataElement(nr){\n    const data = [\n        ['Age: 32', 'ShoeSize: 43', 'EyeColor: blue', 'Height: 168cm'],\n        ['Age: 59', 'ShoeSize: 52', 'EyeColor: gray', 'Height: 188cm'],\n        ['Age: 25', 'ShoeSize: 40', 'EyeColor: green'],\n    ]\n    let list = document.createElement('ul');\n    list.classList.add('not-shadow-list')\n    let dataSet = data[nr];\n    for(let dataBit of dataSet){\n        let li = document.createElement('li');\n        li.innerHTML = dataBit;\n        list.appendChild(li);\n    }\n    console.log(list)\n    return list;\n}\nfunction nextDataSetGetter(arr = dataSet){\n    let iterator = function(){\n        let nextIndex = -1;\n        return {\n            next: ()=>{\n                nextIndex++;\n                if (nextIndex >= arr.length) nextIndex = 0;\n                console.log(nextIndex)\n                return{\n                    value: arr[nextIndex],\n                    done: false\n                }\n            }\n        }\n    };\n    let iteratorInstance = iterator();\n    function getNext(){return iteratorInstance.next().value}\n    return {\n        nextValue: getNext\n    } \n}\nreplaceData();\n</pre>                    \n                    "},{elementType:"Headline-3",content:"Styling"},{elementType:"UnsignedList",content:["<code>:host</code> for selecting the CWC host,","<code>:host:hover</code> for selecting a hovered CWC host","<code>:host([disabled])</code> for selecting a hovered CWC host with the disabled attribute set to true","<code>:host-context(.dark-theme)</code> the <code>:host-context</code> makes it possible to select a \n                        host element of the shadow DOM only, if it is the descendant of the element matching a selector given in brackets,\n                        in this case if the ancestor of the host has class <code>dark-theme</code>. This is the right way to apply dark \n                        themes to the shadow DOM.","The shadow-DOM host elements may be styled from the outside (but no influence on the interiors of the shadow DOM),\n                        with a normal class or tag selectors: <code>my-custom-web-component{position...}</code>","<code>custom-web-component:defined</code> will select a custom-web-component element if it is registered with the\n                        <code>window.customElements.define</code> method. This element may appear in the HTML, but may be defined later with CSS,","<code>custom-web-component:not(:defined)</code> this selects a custom-web-component if it is not defined. This is \n                        a good solution for hiding elements until they are registered with the <code>window.customElements.define</code>","<code>::slotted(selector)</code> placed in the shadow root style. Will affect slotted elements,"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Clean code"},{elementType:"Paragraph",content:"\n                        There are some antipattens and patterns. Here the proper usage of the lifecycle methods\n                        will not be repeated, but just some general rules regarding clean code will be reminded.\n                    "},{elementType:"UnsignedList",content:["CWC should not touch elements that are outside it, no DOM modifications outside the host, \n                        no CSS modifications to elements outside the host,","CWC should accept inputs <b>only<b> with the attributes, or optionaly with a mediator pattern, \n                        no other modifications to the CWC from the outside world,","A component should never modify its attributes, so CWC should not modify its attributes,","The proper way to communicate from CWC to the outside world is with the events dispatched on\n                        the host element. Optionally the mediator pattern may be used,","The CWC host CSS should not be manipulated from the outside, as it kills the encapsulation.\n                        The exceptions could be to hide the CWC,","Before using an attribute, check if it does not already exist, do not override,","Before using a method name check if a property with the same name does not exist, do not override,","A component should never apply classes to its self, so do not apply classes to a CWC element \n                        from the inside,","Methods and variable names should be descriptive,","Comments in the code should be newer used, code should speak of its self, comments get outdated and it\n                        is difficult to track if they are still up to date,","Methods short, doing one thing,","No <i>if</i> or <i>or</i> or <i>and</i> used in method naming, as those tell that a method does more \n                        than one thing,"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"GitHub",href:"https://github.com/mdn/web-components-examples/blob/master/element-details/index.html",description:"slot example"},{elementType:"Link",content:"html spec whatwg org",href:"https://html.spec.whatwg.org/multipage/custom-elements.html",description:"specification"},{elementType:"Link",content:"developers.google",href:"https://developers.google.com/web/fundamentals/web-components/customelements",description:"Like a home web page"},{elementType:"Link",content:"custom-web-component.net",href:"https://custom-web-component.net/",description:"Like a home web page"}]}]};var $n,Jn,Xn,Yn,Qn,Zn,eo,to,no,oo={summary:"Temporal dead zone",title:"Temporal Dead Zone (TDZ)",searchKeywords:"\n    let var const declaration definition defined declared hoisting\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Temporal Dead Zone"},{elementType:"SmallHeadline",content:"var"},{elementType:"UnsignedList",content:["<code>var</code> declares a <strong>function or global</strong> scoped variable,","The variable declared with \n                        <code>var</code> is hoisted (see explanation below) if already is not at the beginning of the \n                        scope,","In case the variable is hoisted it is initialized with the <code>undefined</code> value until\n                        an assignment operation is met,","In case the variable is not assigned with any value var initializes it with the <code>undefined</code>\n                        value"]},{elementType:"Code",content:'\n                    <div class="note">\n                    As <code>a</code> was not declered inside of any function, it will be available everywhere\n                    </div>\n<pre>\nconsole.log(a); // undefined\n// as a is hoisted, but initialized with undefined\n{\n    {\n        var a = 6; // no matter the declaration is in\n        // block, it will be global as a is not declared \n        // in any function\n    }\n}\n(function test(){\n    console.log(a); // 6, as a is global\n    // it is available in all functions\n})()\n</pre>         \n<div class="note">\n                    In below example <code>a</code> is declared in a nested function, and will be \n                    available <b>only</b> in the function it was ceclared\n                    </div>\n<pre>\n(function test(){\n    function test2(){\n        console.log(a);\n        // a is available here, it is undefined;\n        {\n            var a = 3;\n        }\n    }\n    console.log(a);\n    //<span style="background-color:red; color:white">ReferenceError</span>,\n    //as a is known only in the test2 function.\n    // In this case it is function scoped\n})()\n</pre>               \n                    '},{elementType:"SmallHeadline",content:"let"},{elementType:"UnsignedList",content:["<code>let</code> declares a local (block scope) variable, the variable declared this way\n                        will be available in the block it is declared, and child blocks,","It is hoisted, but it is not initialized by default, so cannot be used until \n                        fully initialized (see below TDZ),","Declaration shadows previous declarations,"]},{elementType:"Code",content:'\n                    <div class="note">\n                    <code>a</code> will be available inside the nested block\n                    </div>\n<pre>\n// Here a is unknown,\n{\n    //Here a is declared (hoisted) but not available as initialization is not moved\n    //here, before the let keyword, is the Temporary Dead Zone\n    let a = 4;\n    {\n        console.log(a);\n    }\n}\n</pre>         \n                    <div class="note">\n                    Here <code>a</code> is hoisted, but initialization not moved, so\n                    <code>a</code> cannot be used and there will be an error\n                    </div>\n<pre>\n// Here a is unknown,\n{   \n    console.log(a)\n    //Here a is declared (hoisted) but not available as initialization is not moved\n    //here, before the let keyword, is the Temporary Dead Zone\n    let a = 4;\n    {\n        console.log(a);\n    }\n}\n</pre>   \n                    <div class="note">\n                    Next declaration shadows the previous one\n                    </div>\n<pre>\n{   \n    let a = 4;\n    {   \n        let a = 3;\n        console.log(a); //3\n    }\n}\n</pre>   \n\n                    <div class="note">\n                    An error, as var attempts to define <code>a</code> variable in the global scope, and\n                    <code>a</code> is already there because of the declaration with <code>let</code>\n                    </div>\n<pre>\n{   \n    let a = 4;\n    {   \n        var a = 3; // error\n    }\n}\n</pre>  \n\n                    <div class="note">\n                    Below code will result with printing <code>undefined</code> to the console, as \n                    a is initialized in place it is declared with <code>let</code> with default\n                    <code>undefined</code> value, as there is not assignment.\n                    </div>\n<pre>\n// Here a is unknown,\n{   \n    let a;\n    {\n        console.log(a);\n        a = 4;\n    }\n}\n</pre>   \n\n'},{elementType:"SmallHeadline",content:"const"},{elementType:"UnsignedList",content:["<code>const</code> behaves the same way that <code>let</code> does, with the difference that \n                        if a value is once assigned to the const variable, it may not be re-assigned, so will cause \n                        a <code>typeError</code>"]},{elementType:"Code",content:"\n                    <div class=\"note\">\n                    This will result with an error, as const cannot be re-assigned\n                    </div>\n<pre>\nconst a = 'Assignment';\na = 'Attempt to assign for the second time';\n// TypeError\n</pre>         \n\n"},{elementType:"SmallHeadline",content:"Hoisting"},{elementType:"UnsignedList",content:["<strong>Hoisting</strong> is the process of moving the \n                        <b>declarations</b> of functions, classes and variables, to the beginning of their scope, \n                        so they may be used before they are declared. Only declarations or hoisted variables are \n                        moved. Initialization is not moved,","When <code>var</code> is used, the hoisted variable is initialized with the default <code>\n                        undefined</code> value. In case of <code>let</code> and </code>const</code> keywords this \n                        will not happen, and variables will not be available until they are initialized (assignment)","Functions can be used before they are defined, but classes should be declared before usage.\n                        Classes are hoisted, but <strong>not initialized</code>"]},{elementType:"SmallHeadline",content:"Temporary dead zone"},{elementType:"Paragraph",content:"\n                    The area between the beginning of the scope, and the place where a variable or a class is initialized,\n                    is called a Temporary Dead Zone (TDZ). A variable may not be used before it is initialized, or\n                    an attempt to do so will cause a ReferenceError.\n                    "},{elementType:"Code",content:'\n                    <div class="note">\n                    In below example <code>a</code> is declared with a <code>var</code> keyword, and is declared inside a\n                    function so it will be function scoped. Because variables declared with <code>var</code> when \n                    hoisted are by default initialized with <code>undefined</code>, undefined will be printed to the \n                    console.\n                    \n                    </div>\n                    <pre>\n(function testVar(){\n    console.log(a);\n    {\n        var a = 1;\n    }\n})()\n                    </pre>\n\n                    <div class="note">Below the <code>a</code> variable is declared before it is used. In this case it is \n                    <code>undefined</code> by default</div>\n                    <pre>\n(function testLet(){\n    let a;\n    console.log(a);\n    a = 1;\n})();\n                    </pre>\n                    <div class="note">Below there a is hoisted to the beginning of the function, but its initialization is not moved, \n                    so running this code cause the <code>ReferenceError</code>. The temporal dead zone is from the \n                    beginning of the function till the let keyword.</div>\n                    <pre>\n(function testLet(){\n    console.log(a);\n    let a;\n    a = 1;\n})();\n                    </pre>\n                    <div class="note">Below code will result in printing \'printed\' to the console without any error, as \n                    functions are hoisted to the beginning of their scope</div>\n                    <pre>\n(function testFunction(){\n    print();\n    function print(){console.log(\'printed\')}\n})()\n                    </pre>\n\n\n                    <div class="note">Below code will result in the <code>ReferenceError</code>. Classes are hoisted, but this is \n                    risky to use them before declaration. Here initialization of the class was not moved to the top\n                    of the scope.</div>\n                    <pre>\n(function testClass(){\n    let p = new Printer();\n    p.print();\n    class Printer{\n        print(){console.log(\'printed\')}\n    }\n})()\n                    </pre>\n\n                   \n                    '},{elementType:"SmallHeadline",content:"More tricky examples"},{elementType:"Code",content:'\n                    <div class="note"> Below code will result in the <code>ReferenceError</code>\n                    <ul>\n                        <li><code>a</code> is declared with <code>var a = 1</code></li>\n                        <li><code>if(a)</code> resolves to a true value, as it is assigned 1</li>\n                        <li>The <code>if</code> creates a new code block with new local scope, \n                        in this scope the <code>a</code> is declared with <code>let</code>, and is \n                        still not assigned any value (not initialized). So the global <coda>a</code>\n                        is already shadowed with the <code>let</code> declaration, but still is not \n                        initialized, and there is an attempt to use it before initialization.</li>\n                    </ul>\n                    </div>\n<pre>\n(function testRefError(){\n    var a = 1;\n    if(a){\n        let a = (a + 9);\n    }\n})()\n</pre>                    \n                    <div class="note"> Below code will result in the <code>ReferenceError</code>\n                    Redeclaration: var creates a global variable, so it is hoisted to the global scope and this \n                    results with an error, as there is an <code>a</code> variable already there\n                    </div>\n<pre>\nlet a = 1;\n{\n  var a = 2;\n}\n</pre>       \n\n                    <div class="note"> In below example <code>a</code> and <code>b</code> variables inside the arrow function are \n                    function scoped, so first console.log should produce 1, and the second will result in error, as\n                    b is not know to the global scope.\n                    </div>\n<pre>\nlet a = 1;\n(()=>{\n  var a = 2;\n  var b = 2;\n})()\nconsole.log(a); // 1\nconsole.log(b); // error\n</pre>       \n \n                    '}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz",description:"Tutorial"}]}]};var ao,io,ro,so,co,lo,po,mo,ho,uo,bo,go,fo,yo,vo,wo,xo,jo,To,Oo,So,ko,Co,Ao={summary:"console",title:"console",searchKeywords:"console.log console.dir console.group console.groupEnd console.info console.profile\n    console.error console.warn console.table console.time console.trace console.timeEnd, console.assert\n    console.count console log dir gorup groupEnd info profile error wart table time trace timeEnd\n    asset count\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"console"},{elementType:"Paragraph",content:"\n                    Simple API for logging things to the console. This is good for mainly debugging purposes.\n                    "},{elementType:"ConditionalArray",headItems:["Usage","Arguments","Description"],content:[($n={},Object(x.a)($n,Symbol("title"),"console.assert"),Object(x.a)($n,Symbol("code"),"\n<pre>\nlet o1 = {a:1, b:2, c:3};\nlet o2 = {a:7, b:8, c:9};\nlet msg = 'some message';\nconsole.assert(false, msg, o1, o2); // will display an error,\nconsole.assert(true, o2, o1, msg); // noting happens\n</pre>                            \n                            "),Object(x.a)($n,"Usage","console.assert(assertion, obj1[, obj2, ...]);"),Object(x.a)($n,"Arguments","\n                            <ul>\n                                <li><code>assertion</code>: if false an error message will be displayed. If true nothing \n                                happens</li>\n                                <li><code>obj</code>: objects that will be displayed in an expandable lists</li>\n                            </ul>\n                            "),Object(x.a)($n,"Description","Same as <code>if (!assertion) {console.error(..)}</code>. displays an error\n                            message in case assertion is not met,"),$n),(Jn={},Object(x.a)(Jn,Symbol("title"),"console.clear()"),Object(x.a)(Jn,Symbol("code"),"\n<pre>\nconsole.clear();\n</pre>                            \n                            "),Object(x.a)(Jn,"Usage","console.clear();"),Object(x.a)(Jn,"Arguments","\n                            Na\n                            "),Object(x.a)(Jn,"Description","Clears the console if allowed."),Jn),(Xn={},Object(x.a)(Xn,Symbol("title"),"console.count"),Object(x.a)(Xn,Symbol("code"),"\n<pre>\nfunction loop(nr, label, cb){\n    for (let i=0; i<nr; i++){\n        console.count(label);\n        cb();\n    }\n}\n\nloop(2, 'outerFunction', loop.bind(null,3,'nested',()=>{}))\n\n// outerFunction: 1 \n// nested: 1 \n// nested: 2 \n// nested: 3 \n// outerFunction: 2 \n// nested: 4 \n// nested: 5 \n// nested: 6\n\n</pre>                            \n                            "),Object(x.a)(Xn,"Usage","console.count(label)"),Object(x.a)(Xn,"Arguments","\n                            <code>label</code>: a string label\n                            "),Object(x.a)(Xn,"Description","\n                                Displys how many times this has been called with the specified label.\n                                If none label is given, then it is set to 'default'\n                                "),Xn),(Yn={},Object(x.a)(Yn,Symbol("title"),"console.countReset"),Object(x.a)(Yn,Symbol("code"),"\n<pre>\nconsole.count();\nconsole.count();\nconsole.count();\nconsole.countReset();\nconsole.count();\n//default:1; \n//default:2;\n//default:3;\n//default:0;\n//default:1;\n\n</pre>                            \n                            "),Object(x.a)(Yn,"Usage","console.countRestart(label)"),Object(x.a)(Yn,"Arguments","\n                            <code>label</code>: optional, string\n                            "),Object(x.a)(Yn,"Description","\n                            Resets the console.count counter for the given label to 0. If no label given, restarts \n                            the default label to 0.\n                                "),Yn),(Qn={},Object(x.a)(Qn,Symbol("title"),"console.info"),Object(x.a)(Qn,Symbol("code"),"\n<pre>\nlet o1 = {a:1, b:2, c:3};\nlet o2 = {a:7, b:8, c:9};\nlet msg = 'some message';\nconsole.info(msg, o1, o2); \n// Will display the message and objects \n// as expandable lists\n\n\nfunction nested(){\n    console.info('I am nested');\n}\nfunction callNested(currentLevel, maxLevel, cb){\n    if (currentLevel < maxLevel){\n        callNested(currentLevel + 1, maxLevel, cb)\n    }\n    if (currentLevel === maxLevel) {cb()};\n}\nfunction callXTimes(maxLevel, cb){\n    callNested(0, maxLevel, cb)\n}\ncallXTimes(5, nested);\n\n// no call stack is printed to the console\n// just a flat output. To have a stack trace use\n// console.trace()\n</pre>                            \n                            "),Object(x.a)(Qn,"Usage","console.info(obj1[, obj2, ...]);"),Object(x.a)(Qn,"Arguments","\n                            Objects comma separated, will be displayed as expandable lists. If one of object\n                            arguments in a message, then this message will be displayed anyway.\n                            "),Object(x.a)(Qn,"Description","Displays objects as expandable lists"),Qn),(Zn={},Object(x.a)(Zn,Symbol("title"),"console.group(), console.groupEnd()"),Object(x.a)(Zn,Symbol("code"),"\n<pre>\nfunction iterate(nr, cb){\n    for(let i=0; i<nr; i++){\n        console.log(i);\n        cb()\n    }\n}\nconsole.group('Group');\niterate(3, ()=>{\n    console.group('Group2');\n    iterate(2, ()=>{})\n    console.groupEnd('Group2');\n});\nconsole.groupEnd('Group');\n</pre>                            \n                            "),Object(x.a)(Zn,"Usage","\n                            <pre>\n<code>console.group(label)</code>\n...\n<code>console.groupEnd(label)</code>;\n                            </pre>\n                            "),Object(x.a)(Zn,"Arguments","\n                            <code>label</code>: a string value for the label to be displayed\n                            "),Object(x.a)(Zn,"Description","Groups inner console.log in an expandable list. This list is <b>expanded</b>\n                            by default. To have a collapsed list use <code>console.groupCollapsed()</code> instead"),Zn),(eo={},Object(x.a)(eo,Symbol("title"),"console.table(arr)"),Object(x.a)(eo,Symbol("code"),"\n<pre>\nlet o1 = {firstName: 'Jan', lastName:'Kowalski'};\nconsole.table(o1);\n\n</pre>\n<div class=\"note\">\n    <table class=\"table table-bordered\">\n        <thead>\n           <tr><td>(index)</td><td>Value</td></tr>\n        </thead>\n        <tbody>\n            <tr><td>firstName</td><td>Jan</td></tr>\n            <tr><td>lastName</td><td>Kowalski</td></tr>\n        </tbody>\n    </table>\n</div>\n\n<pre>\nlet o2 = [\n    {firstName: 'Jan', lastName:'Kowalski'},\n    {firstName: 'Adam', lastName:'Nowak'}\n]\nlet o3={\n    make: 'subaru',\n    engine: {\n        power:'245KM',\n        torque:'300NM'\n    }\n}\nconsole.table(o3)\nconsole.table(o2);\n</pre>                            \n<div class=\"note\">\n    <table class=\"table table-bordered\">\n        <thead>\n           <tr><td>(index)</td><td>FirstName</td><td>LastName</td></tr>\n        </thead>\n        <tbody>\n            <tr><td>1</td><td>Jan</td><td>Kowalski</td></tr>\n            <tr><td>2</td><td>Adam</td><td>Nowak</td></tr>\n        </tbody>\n    </table>\n</div>\n\n\n<pre>\nlet o3={\n    make: 'subaru',\n    engine: {\n        power:'245KM',\n        torque:'300Nm'\n    }\n}\nconsole.table(o3)\n</pre>                            \n<div class=\"note\">\n    <b>Nested object</b>\n    <table class=\"table table-bordered\">\n        <thead>\n           <tr><td>(index)</td><td>Value</td><td>power</td><td>torque</td></tr>\n        </thead>\n        <tbody>\n            <tr><td>make</td><td>\"subaru\"</td><td></td></tr>\n            <tr><td>engine</td><td></td><td>\"245KM\"</td><td>\"300Nm\"</td></tr>\n        </tbody>\n    </table>\n</div>\n                            "),Object(x.a)(eo,"Usage","\n                            console.table(arr)\n                            "),Object(x.a)(eo,"Arguments","\n                                Object, array that will be displayed.\n                            "),Object(x.a)(eo,"Description","displays data as a table"),eo),(to={},Object(x.a)(to,Symbol("title"),"console.time(), console.timeLog(), console.timeEnd()"),Object(x.a)(to,Symbol("code"),"\n\n<pre>\nfunction strength(n){\n    let current = 1;\n    for (let i = 0; i < n; i++){\n        current *= i;\n    }\n    return current\n}\n\nfunction loop(n, cb){\n    for (let i = 0; i < n; i++){\n        cb();\n    }\n}\nconsole.time('t1');\nconsole.time('t2');\nloop(1000, strength.bind(null, 20));\nloop(1000, strength.bind(null, 20));\nloop(1000, strength.bind(null, 20));\nconsole.timeLog('t1')\nloop(1000, strength.bind(null, 20));\nloop(1000, strength.bind(null, 20));\nloop(1000, strength.bind(null, 20));\nconsole.timeLog('t2')\nloop(1000, strength.bind(null, 20));\nloop(1000, strength.bind(null, 20));\nloop(1000, strength.bind(null, 20));\nconsole.timeEnd('t1');\nconsole.timeEnd('t2');\n\n// t1: 4ms;\n// t2: 5ms;\n// t1: 7ms; - timer expired\n// t1: 8ms; - timer expired\n</pre>\n                            "),Object(x.a)(to,"Usage","\n                            console.time('lab');\n                            console.timeLog('lab');\n                            console.timeEnd('lab');\n                            "),Object(x.a)(to,"Arguments",'\n                            <code>label</code>: an optional string argument for distinguishing timers. \n                            If none given, then will be set to the "<code>default</code>" value.\n                            '),Object(x.a)(to,"Description","\n                            <ul>\n                            <li><code>console.time</code> starts a timer with the given label</li>\n                            <li><code>console.timeLog</code> logs time that passed since the timer for that label was started</li>\n                            <li><code>console.time</code> Stops the timer for the target label</li>\n                            </ul>\n                            "),to),(no={},Object(x.a)(no,Symbol("title"),"console.trace()"),Object(x.a)(no,Symbol("code"),"\n<pre>\nfunction nested(){\n    console.trace('I am nested');\n}\nfunction callNested(currentLevel, maxLevel, cb){\n    if (currentLevel < maxLevel){\n        callNested(currentLevel + 1, maxLevel, cb)\n    }\n    if (currentLevel === maxLevel) {cb()};\n}\nfunction callXTimes(maxLevel, cb){\n    callNested(0, maxLevel, cb)\n}\ncallXTimes(5, nested);\n\n// VM11512:2 I am nested\n// nested @ VM11512:2\n// callNested @ VM11512:8\n// callNested @ VM11512:6\n// callNested @ VM11512:6\n// callNested @ VM11512:6\n// callNested @ VM11512:6\n// callNested @ VM11512:6\n// callXTimes @ VM11512:11\n// (anonymous) @ VM11512:13\n\n\n</pre>                            \n                            "),Object(x.a)(no,"Usage","\nconsole.trace(obj)\n                            "),Object(x.a)(no,"Arguments","\n                            <code>obj</code>: zero or more objects to be put to the console with the data\n                            "),Object(x.a)(no,"Description","\n                            Outputs the stack traces to the console output.\n                            "),no)]},{elementType:"SmallHeadline",content:"console.log with css"},{elementType:"Code",content:"\n                    <div class=\"nested\">\n                    Coloring console output with css\n                    </div>\n<pre>\nlet msg = \"custom message\";\nconsole.log('%c'+msg, 'color-background:red; border-radius: 5px; padding: 5px; color:white');\n</pre>                    \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/pl/docs/Web/API/Console",description:"Tutorial"}]}]};var Io={summary:"regExp",title:"regExp",searchKeywords:"\n\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Regular expression"},{elementType:"Paragraph",content:"\n                    "},{elementType:"ConditionalArray",headItems:["Symbol","Usage","Explanation"],content:[(ao={},Object(x.a)(ao,Symbol("title"),"Simple match"),Object(x.a)(ao,Symbol("code"),"\n   <pre>\nlet r = new RegExp(/abc/)      \nr.test('abc')  // true; \nr.test('abstract') // false;\nr.test('abcolumn') // true;\n   </pre>\n                            "),Object(x.a)(ao,"Symbol","Simple match"),Object(x.a)(ao,"Usage","/abc/"),Object(x.a)(ao,"Explanation","Matches a string containing 'abc'"),ao),(io={},Object(x.a)(io,Symbol("title"),"*"),Object(x.a)(io,Symbol("code"),"\n   <pre>\nlet r = new RegExp(/ab*c/)   \nr.test('abbbc')  // true; \nr.test('ac')  // true; \nr.test('aac')  // true; \nr.test('azc') // false;\n\n   </pre>\n                            "),Object(x.a)(io,"Symbol","*"),Object(x.a)(io,"Usage","/ab*c/"),Object(x.a)(io,"Explanation","Zero or more match of preceding symbol"),io),(ro={},Object(x.a)(ro,Symbol("title"),"+"),Object(x.a)(ro,Symbol("code"),"\n   <pre>\nlet r = new RegExp(/ab+c/)   \nr.test('abbbc')  // true; \nr.test('ac')  // false; \nr.test('aac')  // false; \nr.test('bcaabczc') // true;\n\n   </pre>\n                            "),Object(x.a)(ro,"Symbol","+"),Object(x.a)(ro,"Usage","/ab+c/"),Object(x.a)(ro,"Explanation","One or more match of preceding symbol"),ro),(so={},Object(x.a)(so,Symbol("title"),"?"),Object(x.a)(so,Symbol("code"),"\n   <pre>\nlet r = new RegExp(/ab?c/)   \nr.test('abbbc')  // false; \nr.test('ac')  // true; \nr.test('aac')  // true; \nr.test('bcaabczc') // true;\n\n   </pre>\n                            "),Object(x.a)(so,"Symbol","?"),Object(x.a)(so,"Usage","/ab?c/"),Object(x.a)(so,"Explanation","One or zero match of preceding symbol"),so),(co={},Object(x.a)(co,Symbol("title"),"{n} exectly n times"),Object(x.a)(co,Symbol("code"),"\n   <pre>\nlet r = new RegExp(/ab{3}c/)   \nr.test('abbbc')  // true; \nr.test('abbbbc')  // false; \nr.test('ac')  // false; \n\n   </pre>\n                            "),Object(x.a)(co,"Symbol","{n}"),Object(x.a)(co,"Usage","/ab{3}c/"),Object(x.a)(co,"Explanation","Preceding element should appear exectly 'n' times"),co),(lo={},Object(x.a)(lo,Symbol("title"),"{n,} n or more times"),Object(x.a)(lo,Symbol("code"),"\n   <pre>\nlet r = new RegExp(/ab{3}c/)   \nr.test('abbbc')  // true; \nr.test('abbbbc')  // true; \nr.test('abbc')  // false; \n\n   </pre>\n                            "),Object(x.a)(lo,"Symbol","{n,}"),Object(x.a)(lo,"Usage","/ab{3,}c/"),Object(x.a)(lo,"Explanation","Preceding element should appear 'n' or more times"),lo),(po={},Object(x.a)(po,Symbol("title"),"{n,m} n to m times"),Object(x.a)(po,Symbol("code"),"\n   <pre>\nlet r = new RegExp(/ab{2,4}c/)   \nr.test('abbbc')  // true; \nr.test('abbbbc')  // true; \nr.test('abc')  // false; \nr.test('abbbbbc')  // false; \n   </pre>\n                            "),Object(x.a)(po,"Symbol","{n,m}"),Object(x.a)(po,"Usage","/ab{3,5}c/"),Object(x.a)(po,"Explanation","Preceding element should appear 'n' to 'm' times"),po),(mo={},Object(x.a)(mo,Symbol("title"),"a|b|c "),Object(x.a)(mo,Symbol("code"),"\n   <pre>\nlet r = new RegExp(/12a|b|c21/)   // Should be 12a or b or c21\nlet r1 = new RegExp(/12(a|b|c)21/)   \nlet r2 = new RegExp(/12[a|b|c]21/)   \nr.test('1221') // false\nr.test('12a21') // true\nr.test('12b21') // true\nr.test('12abc21') // true\nr.test('12abcd21') // true\nr.test('b') // true\n\nr1.test('1221') // false\nr1.test('12a21') // true\nr1.test('12b21') // true\nr1.test('12abc21') // false\nr1.test('12abcd21') // false\n\nr2.test('1221') // false\nr2.test('12a21') // true\nr2.test('12b21') // true\nr2.test('12abc21') // false\nr2.test('12abcd21') // false\n\n\n   </pre>\n                            "),Object(x.a)(mo,"Symbol","|"),Object(x.a)(mo,"Usage","/a|b|c/"),Object(x.a)(mo,"Explanation","n|m is n or m element,"),mo),(ho={},Object(x.a)(ho,Symbol("title"),"\\"),Object(x.a)(ho,Symbol("code"),"\n   <pre>\nlet r = new RegExp(/ab*c/)   \nlet r1 = new RegExp(/a\\c/)\n\nr.test('abbbc')  // false; \nr.test('a*c')  // true; \nr1.test('a\\c')  // true; \n   </pre>\n                            "),Object(x.a)(ho,"Symbol","\\"),Object(x.a)(ho,"Usage","/ab\\*c/"),Object(x.a)(ho,"Explanation","Escape character, allowing to excape special symbols"),ho),(uo={},Object(x.a)(uo,Symbol("title"),"[] character group"),Object(x.a)(uo,Symbol("code"),"\n   <pre>\nlet r = new RegExp(/[azdfg]/)\nlet r1 = new RegExp(/[2458]/)\nr.test('abba')   // matches 'a'\nr1.test('abba') // false, should match 2, 4, 6 or 8\n   </pre>\n                            "),Object(x.a)(uo,"Symbol","[] character group"),Object(x.a)(uo,"Usage","[abc]"),Object(x.a)(uo,"Explanation","Match if the string has any of the symbols from the passed string"),uo),(bo={},Object(x.a)(bo,Symbol("title"),"[^] negation"),Object(x.a)(bo,Symbol("code"),"\n   <pre>\nlet r = new RegExp(/[^azdfg]/)\nlet r1 = new RegExp(/[^ab]/)\nr.test('abba');   // matches 'b', as 'b' is not in the character group\nr1.test('abba');  // false, should match any symbol that is not an 'a' or 'b'\n   </pre>\n                            "),Object(x.a)(bo,"Symbol","[^]"),Object(x.a)(bo,"Usage","[^abc]"),Object(x.a)(bo,"Explanation","Matches any other symbol that is not in the bracktes,"),bo),(go={},Object(x.a)(go,Symbol("title"),"[  -  ] range"),Object(x.a)(go,Symbol("code"),"\n   <pre>\nlet r = new RegExp(/[a..a]/)\nlet r1 = new RegExp(/[abba]/)\nr.test('abba')   // match, as bb is substituted with ..\nr.test('a..a')   // false, '.' is not a replacement of a dot itself\nr1.test('a.a')    // false, dot represents only a single character\n   </pre>\n                            "),Object(x.a)(go,"Symbol","."),Object(x.a)(go,"Usage","[a.b]"),Object(x.a)(go,"Explanation",""),go),(fo={},Object(x.a)(fo,Symbol("title"),"w"),Object(x.a)(fo,Symbol("code"),"\n   <pre>\nlet r = new RegExp(/W/)   \nr.test('abba')   // match, as 'a' and 'b' are symbols belonging to a word\nr.test('3211')   // false, no word symbol here\nr.test('abc.')// true, '.' is not a word symbol, but a, b and c are\n   </pre>\n                            "),Object(x.a)(fo,"Symbol","w"),Object(x.a)(fo,"Usage","w"),Object(x.a)(fo,"Explanation","A word symbol: '[a-z][A-Z]"),fo),(yo={},Object(x.a)(yo,Symbol("title"),"W"),Object(x.a)(yo,Symbol("code"),"\n   <pre>\nlet r = new RegExp(/W/)\nr.test('abba' )   // no match, a and b are word symbols\nr.test('abba1')   // true, '1' is not a word symbol\nr.test('abc.' )// true, '.' is not a word symbol\n   </pre>\n                            "),Object(x.a)(yo,"Symbol","W"),Object(x.a)(yo,"Usage","W"),Object(x.a)(yo,"Explanation","A not-word symbol, all not [a-z] or [A-Z]"),yo),(vo={},Object(x.a)(vo,Symbol("title"),"s"),Object(x.a)(vo,Symbol("code"),"\n   <pre>\n   </pre>\n                            "),Object(x.a)(vo,"Symbol","s"),Object(x.a)(vo,"Usage","s"),Object(x.a)(vo,"Explanation","any space/separation mark"),vo),(wo={},Object(x.a)(wo,Symbol("title"),"S"),Object(x.a)(wo,Symbol("code"),"\n   <pre>\n   </pre>\n                            "),Object(x.a)(wo,"Symbol","S"),Object(x.a)(wo,"Usage","S"),Object(x.a)(wo,"Explanation","any non-space symbol"),wo),(xo={},Object(x.a)(xo,Symbol("title"),"d"),Object(x.a)(xo,Symbol("code"),"\n   <pre>\n   let r = new RegExp(/d/)\n   r.test('12334') // true, each is a digit\n   r.test('1fds') // true, 1 is a digit\n   </pre>\n                            "),Object(x.a)(xo,"Symbol","d"),Object(x.a)(xo,"Usage","d"),Object(x.a)(xo,"Explanation","marks any decimal digit"),xo),(jo={},Object(x.a)(jo,Symbol("title"),"D"),Object(x.a)(jo,Symbol("code"),"\n   <pre>\n   let r = new RegExp(/D/)\n   r.test('12334') // false, each character is a digit\n   r.test('1fds') // true, f, d, s are not digits\n   </pre>\n                            "),Object(x.a)(jo,"Symbol","D"),Object(x.a)(jo,"Usage","D"),Object(x.a)(jo,"Explanation","Any not a digit character"),jo),(To={},Object(x.a)(To,Symbol("title"),"^[abc]"),Object(x.a)(To,Symbol("code"),"\n   <pre>\n   let r = new RegExp(/^[abc]/)\n   r.test('abcdef') // true, starts with abc\n   r.test('1abcde') // false, starts with 1\n   </pre>\n                            "),Object(x.a)(To,"Symbol","^parrten"),Object(x.a)(To,"Usage","^[abc], ^d{3}"),Object(x.a)(To,"Explanation","Should start with a pattern, multiline"),To),(Oo={},Object(x.a)(Oo,Symbol("title"),"[abc]$"),Object(x.a)(Oo,Symbol("code"),"\n   <pre>\n   let r = new RegExp(/[abc]$/)\n   r.test('abcdef') // false, not ending with abc\n   r.test('1abc') // true, ending with 'abc'\n\n   let r1 = new RegExp(/[abc]$/) // NOTE in this case r1.test('abc') is false\n   </pre>\n                            "),Object(x.a)(Oo,"Symbol","parrten$"),Object(x.a)(Oo,"Usage","[abc]$, d{3}$"),Object(x.a)(Oo,"Explanation","Should end with the pattern, multiline"),Oo),(So={},Object(x.a)(So,Symbol("title"),"A[abc]"),Object(x.a)(So,Symbol("code"),"\n   <pre>\n   let r = new RegExp(/A[abc]/)\n   r.test('abcdef') // true, starts with abc\n   r.test('1abcde') // false, starts with 1\n   </pre>\n                            "),Object(x.a)(So,"Symbol","A parrten"),Object(x.a)(So,"Usage","A[abc], Ad{3}"),Object(x.a)(So,"Explanation","Should start with a pattern"),So),(ko={},Object(x.a)(ko,Symbol("title"),"Z[abc]"),Object(x.a)(ko,Symbol("code"),"\n   <pre>\n   let r = new RegExp(/Z[abc]/)\n   r.test('abcdef') // false, not ending with abc\n   r.test('1abc') // true, ending with 'abc'\n   </pre>\n                            "),Object(x.a)(ko,"Symbol","Zparrten"),Object(x.a)(ko,"Usage","Z[abc], Zd{3}"),Object(x.a)(ko,"Explanation","Should end with the pattern"),ko),(Co={},Object(x.a)(Co,Symbol("title"),"G[abc]"),Object(x.a)(Co,Symbol("code"),"\n   <pre>\n   </pre>\n                            "),Object(x.a)(Co,"Symbol","G parrten"),Object(x.a)(Co,"Usage"," ??? "),Object(x.a)(Co,"Explanation","Match should be at the point where previous match ends"),Co)]},{elementType:"Headline-3",content:"Options"},{elementType:"UnsignedList",content:["<code>i</code> no case sensitive,","<code>g</code> global flag: search whole string and return an array of results,\n                        do not stop after first match. In <code>test</code> will return true, but with \n                        <code>match</code> will return an array of matches. Usage: <code>r = /a/g<?code>, now\n                        <code>'abba'.match(r)</code> return <code>['a','a']</code>,","<code>m</code> multiline mode,","<code>u</code> unicode suport,","<code>y</code> sticky mode,"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"javascript.info",href:"https://javascript.info/regexp-introduction",description:"Tutorial"}]}]};var Po=[{summary:"strict mode",title:"About strict mode",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"About strict mode"},{elementType:"Paragraph",content:"\n                            <b>Lorem ipsum</b> dolor sit amet, consectetur adipiscing elit. \n                            Vestibulum et lacinia arcu, ut tempor lacus. Integer euismod, est et pharetra eleifend, \n                            magna nibh congue nulla, eu ornare lacus sem eu leo. Sed aliquet tincidunt neque non tempor. \n                            Sed feugiat, massa at tempus tincidunt, tortor turpis rhoncus orci, nec cursus purus dui vel ipsum. \n                            Sed pellentesque sem nec dictum auctor. Morbi tempus lectus vitae ultrices volutpat. \n                            Vivamus convallis mauris urna. Phasellus rhoncus felis eget mi tincidunt malesuada. \n                            Pellentesque in velit viverra nunc ultrices maximus. Duis in leo dolor.             \n                        "}]}]},P,{summary:"cloasures",title:"About cloasures",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"About cloasures"},{elementType:"Paragraph",content:"\n                            <b>Lorem ipsum</b> dolor sit amet, consectetur adipiscing elit. \n                            Vestibulum et lacinia arcu, ut tempor lacus. Integer euismod, est et pharetra eleifend, \n                            magna nibh congue nulla, eu ornare lacus sem eu leo. Sed aliquet tincidunt neque non tempor. \n                            Sed feugiat, massa at tempus tincidunt, tortor turpis rhoncus orci, nec cursus purus dui vel ipsum. \n                            Sed pellentesque sem nec dictum auctor. Morbi tempus lectus vitae ultrices volutpat. \n                            Vivamus convallis mauris urna. Phasellus rhoncus felis eget mi tincidunt malesuada. \n                            Pellentesque in velit viverra nunc ultrices maximus. Duis in leo dolor.             \n                        "}]}]},{summary:"modules",title:"About Modules",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"About modules"},{elementType:"Paragraph",content:"\n                            <b>Lorem ipsum</b> dolor sit amet, consectetur adipiscing elit. \n                            Vestibulum et lacinia arcu, ut tempor lacus. Integer euismod, est et pharetra eleifend, \n                            magna nibh congue nulla, eu ornare lacus sem eu leo. Sed aliquet tincidunt neque non tempor. \n                            Sed feugiat, massa at tempus tincidunt, tortor turpis rhoncus orci, nec cursus purus dui vel ipsum. \n                            Sed pellentesque sem nec dictum auctor. Morbi tempus lectus vitae ultrices volutpat. \n                            Vivamus convallis mauris urna. Phasellus rhoncus felis eget mi tincidunt malesuada. \n                            Pellentesque in velit viverra nunc ultrices maximus. Duis in leo dolor.             \n                        "}]}]},{summary:"object descriptors",title:"Object descriptors",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Object descriptors"},{elementType:"Paragraph",content:"\n                            <b>Lorem ipsum</b> dolor sit amet, consectetur adipiscing elit. \n                            Vestibulum et lacinia arcu, ut tempor lacus. Integer euismod, est et pharetra eleifend, \n                            magna nibh congue nulla, eu ornare lacus sem eu leo. Sed aliquet tincidunt neque non tempor. \n                            Sed feugiat, massa at tempus tincidunt, tortor turpis rhoncus orci, nec cursus purus dui vel ipsum. \n                            Sed pellentesque sem nec dictum auctor. Morbi tempus lectus vitae ultrices volutpat. \n                            Vivamus convallis mauris urna. Phasellus rhoncus felis eget mi tincidunt malesuada. \n                            Pellentesque in velit viverra nunc ultrices maximus. Duis in leo dolor.             \n                        "}]}]},I,oe,ae,ie,ft,yt,wt,xt,Tt,jt,pn,mn,Hn,Mn,zn,Gn,Vn,Kn,oo,Ao,Io];var No=[{summary:"ts decorators",title:"Ts decorators",searchKeywords:"\n\n    ",cathegory:"ts",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Decorators in ts"},{elementType:"Paragraph",content:"\n                    A decorator is a wrapping function, that is capable of adding an additional functionality to \n                    a class, method, property or accessor without its internal modifications. Such a function would be \n                    possible in js, but in ts thers is an experimental syntsx for supporting this feature. \n                    The syntax is said to be experimental by the ts documentation, but it is sait to be experimental for \n                    years, and is used by Angular framework, so it is safe to be used.\n                    "},{elementType:"ListOfContent",content:[{id:"enabling",title:"Enabling decorators"},{id:"multiple",title:"Multiple decorators"},{id:"class",title:"Class decorators"},{id:"method",title:"Method decorators"},{id:"property",title:"Property decorators"},{id:"parameter",title:"Parameter decorators"},{id:"accessor",title:"Accessor decorators"}]},{elementType:"Headline-3",content:'<span id="enabling">Enabling decorators</span>'},{elementType:"Code",content:'\n<pre>\n{\n    "compilerOptions": {\n      "target": "ES5",\n      "experimentalDecorators": true\n    }\n  }\n</pre>\n                    '},{elementType:"Headline-3",content:'<span id="multiple">Multiple decorators</span>'},{elementType:"Paragraph",content:"\n                    There may be multiple decorators added to an element:\n                    "},{elementType:"Code",content:"\n                    <pre>\nfunction first(constructor){...}\nfunction secont(constructor){...}\n\n@first\n@second\nSomeClass{\n    constructor(){}\n}\n                    </pre>\n                    "},{elementType:"Paragraph",content:"\n                    Above example equals to:\n                    "},{elementType:"Code",content:"\n<pre>\nfirst(){\n    second(){\n        SomeClass..\n    }\n}\n</pre>                    \n                    "},{elementType:"Paragraph",content:"\n                    Call and evaluation order:\n                    "},{elementType:"UnsignedList",content:["first decorator evaluated,","second decorator evaluated,","second decorator called,","first decorator called"]},{elementType:"Headline-3",content:'<span id="class">Class decorators</span>'},{elementType:"Paragraph",content:"\n                    A class decorator is a function taking a class <code>constructor</code> and doing something with it.\n                    It may modify, or even replace a class (replacing in for example class extention case)\n                    "},{elementType:"Paragraph",content:"\n                    <code>function classDecorator(constructor: Function)</code>\n                    "},{elementType:"Code",content:'\n<pre>\nfunction classDecorator(constructor: Function){\n    return class extends constructor {\n        console.log(constructor was called)\n    }\n}\n\nfunction parametrizedDecorator(message:string = \'default){\n    return function(constructor: Function){\n        console.log(message);\n    }\n}\n\n@classDecorator\nSomeClass(){\n    constructor(){}\n}\n\n<div class="note">There may be multiple decorators applied to the single class</div>\n\n@parametrizedDecorator(\'my message\')\n@classDecorator\nSomeClass(){\n    construcotr(){}\n}\n\n<div class="note">In above example decorators will be applied in the following oreder</div>\nparametrizedDecorator {\n    classDecorator{\n        SomeClass..\n    }\n}\n\n\n</pre>                    \n                    '},{elementType:"Headline-3",content:'<span id="method">Method decorator</span>'},{elementType:"Paragraph",content:"\n                    <code>function someDecorator(target: any, propertyKey: string, descriptor: PropertyDescriptor)</code>\n                    <br>\n                    where <code>target</code> is a target method\n                    "},{elementType:"UnsignedList",content:["If decorator should take parametrization arguments, it needs to be wrapped in a function,","The method decorator should return the descriptor,","The method modification should be the descriptor value property modification, as this \n                        value holds the method body,","The actual original method call is done with the <code>apply</code> function,","The new value function should return the original functions result,"]},{elementType:"Code",content:"\n<pre>\nfunction someDecorator(target: any, propertyKey:string, descriptor: PropertyDescriptor){\n    const originalMethod = descriptor.value;\n    descriptor.value = (...args:any[]){\n        let startTime = performance.now();\n        const result = originalMethod.apply(this, args);\n        let endTime = performance.now();\n        console.log('Performance is ' + endTime - startTime)\n        return result\n    }\n    return descriptor\n}\n\nfunction parametrizedDescriptor(message:string){\n    return function(target: any, propertyKey:string, descriptro: PropertyDescriptor){\n        const originalMethod = descriptor.value;\n        descirptor.value = (...args:any[]){\n            console.log(message);\n            return originalMethod.apply(this, args)\n        }\n        return descriptor\n    }\n}\n\nclass Dummy{\n    constructor(){}\n\n    @someDecorator\n    @parametrizedDecorator('example executed')\n    doNothing(){\n        console.log('Example method')\n    }\n\n}\n\n\n</pre>\n                    "},{elementType:"Headline-3",content:'<span id="property">Property decorator</span>'},{elementType:"Paragraph",content:"\n                        <code>function propertyDecorator(target:Object, propertyKey: string|symbol){}</code>\n                    "},{elementType:"UnsignedList",content:["<code>target</code> is an object, thats property will be decorated,","<code>propertyKey</code> is the actual property 'name'.\n                        Not exectly name, but more <i>key</i>, as a symbol cannot be referred as a name."]},{elementType:"Paragraph",content:"\n                        May be used to:\n                    "},{elementType:"UnsignedList",content:["Property sealing,"]},{elementType:"Code",content:"\n<pre>\n</pre>                        \n                    "},{elementType:"Headline-3",content:'<span id="parameter">Parameter decorator</span>'},{elementType:"Paragraph",content:"\n                        <code>function paramDecorator(target:Object, propertyKey: string | symbol, parameterIndex: number){}</code>\n                    "},{elementType:"Code",content:"\n<pre>\nfunction paramDecorator(target:Object, propertyKey: string | symbol, parameterIndex: number){\n    console.log('parameter ' + parameterIndex + 'of property ' + propertyKey + 'of object ' + target.constructor.name)\n}\n\nclass Dummy{\n    constructor(){}\n\n    doNothing(@paramDecorator times: number){\n        for(let i = 0; i < times; i++){\n            console.log('did nothing ');\n        }\n    }\n}\n</pre>                        \n                    "},{elementType:"Headline-3",content:'<span id="accessor">Accessor decorator (applied to setter and getter)</span>'},{elementType:"Paragraph",content:"\n                        <code>function accessorDecorator<T>(target:Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>){}</code>\n                    "},{elementType:"Code",content:"\n<pre>\nfunction accessorDecorator<T>(target:Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>){\n    console.log(`Accessing value of ${target.constructro.name} of property: ${propertyKey})\n}\n\nclass Dummy{\n    private _x: number = 5;\n    constructor(){};\n\n    @accessorDecorator<any>\n    get () {return _x;}\n    // No need to decorater both: a setter and a getter\n\n    @accessorDecorator<any>\n    set (val:any) {this._x = val}\n\n\n}\n</pre>                        \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"blog.jannikwemple.com",href:"https://blog.jannikwempe.com/typescript-decorators-basics",description:"Typyscript decorators"},{elementType:"Link",content:"stackoverflow",href:"https://stackoverflow.com/questions/56189503/how-to-use-a-typescript-method-decorator-and-retain-normal-this-scope",description:"Method decorators,"},{elementType:"Link",content:"levelup.gitconnected.com",href:"https://levelup.gitconnected.com/start-writing-your-own-typescript-method-decorators-c921cdc3d1c1",description:"Mathod decorators"},{elementType:"Link",content:"typescriptlang.org",href:"https://www.typescriptlang.org/docs/handbook/decorators.html",description:"Typyscript tutorial"}]}]},{summary:"types",title:"types",cathegory:"TS",searchKeywords:"boolean number string array tuple enum unknown any void null undefined never object array",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Validating a form with HTML"},{elementType:"Paragraph",content:"\n            \n                        "}]}]},{summary:"unions",title:"unions",cathegory:"TS",searchKeywords:"unions",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Unions"},{elementType:"Paragraph",content:"\n            \n                        "}]}]},{summary:"interfaces",title:"interfaces",cathegory:"TS",searchKeywords:"interfaces",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Interfaces"},{elementType:"Paragraph",content:"\n            \n                        "}]}]},{summary:"decorators",title:"decorators",cathegory:"TS",searchKeywords:"decorators",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Decorators"},{elementType:"Paragraph",content:"\n            \n                        "}]}]}];var Eo=[{summary:"react hooks",title:"React hooks",searchKeywords:"React lifecycle methods render \n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Hooks"},{elementType:"Paragraph",content:"\n                    Each component in react has its lifecycle. Firstly, it is created, then it is rendered, after this \n                    there may be a necessity to fetch some data from the server, then the component has to be mounted \n                    (placed on the screen). During its life it has to be updated, and finally it has to be demolished.\n                    Between all those operations there is a necessity to place  some custom actions, like state updating,\n                    element updating, fetching data, etc. These actions have to be done in precise moments. For \n                    placing all those actions in the lifecycle of the component, there were introduced the lifecycle methods.\n                    But lifecycle methods are for class components. And they may not be applied in case of the currently\n                    encouraged function components. That is why there are <strong>react hooks</strong>: functinos \n                    that are hooked somewhere in the lifecycle of the function component. It is possible to \n                    do exactly the same things with hooks and with lifecycle methods. Let's take a look at those hooks.\n                    "},{elementType:"Headline-3",content:"General rules regarding hooks and components"},{elementType:"UnsignedList",content:["No state changing code allowed in the body of the component. All should be in the hooks,","There can be a lot of hooks of the same type used in one component, each hook is used independently,","Hooks may be used only in components main scope or in other, custom hook functions. Usage of hooks inside \n                        other functions than directly in components or in other hooks if forbidden, as may lead to bugs,","Hooks should be used in the function main scope, not in nested blocks of code or in loops, or conditional statements,"]},{elementType:"Headline-3",content:"Custom hooks"},{elementType:"UnsignedList",content:["Custom hooks are functions that should be used to separate the reusable logic, \n                            that may be used in other components,","It is allowed to use built in hooks inside custom hooks,","Custom hooks should be written in the separate files, so it is easy to import them,","Custom hooks names should start with the <b>use</b> word, so it is easy to tell hooks apart of the other functions,","If the custom hook is used in different components, and uses a build in hook to, then the build in hook (the hook \n                                that is nested in the custom hook) scope is unique, so it is not shared between any other components"]},{elementType:"Code",content:'\n                    <pre>\nimport {useState, useEffect} from "react";\n\nexport default function useFetch(url){\n    const [data, setData] = useState(null);\n\n    useEffect(()=>{\n        fetch(url)\n            .then((response) => {return response.json();})\n            .then((data) => setData(data));\n    }, [url]);  // only if the url changes this will trigger,\n\n    return [data]; // data is a promisse \n}\n</pre>\n                    '},{elementType:"Headline-3",content:"Hooks"},{elementType:"SmallHeadline",content:"useState(initialState)"},{elementType:"Paragraph",content:"const [state, setState] = useState(initialState);"},{elementType:"Paragraph",content:"Could be compared to the <code>setState(updater[, callback])</code> from the class components,"},{elementType:"UnsignedList",content:["Returns a stateful value and a function to update it","During initial render the state becomes the same as <code>initialState</code>","setState is a setter that should be used to set new state values","Callbacks may be used as the arg of setState as \n                         <code>setState(prevState => prevState + 2)</code>","If a function is passed to the setState setter, \n                        then the state value will be set to the value this function returns.","In case the state is set to the same value, react will not update children of the affected component,","It is possible to set an object as a value of the state, however when using the object setter\n                        the whole object must be set, not the a single property, as the whole object would be overwritten"]},{elementType:"Code",content:'\n                    <b class="text-danger">Overwriting the whole state</b>\n<pre>\n    function Car() {\n        const [car, setCar] = useState({\n            brand: "Skoda",\n            model: "Favorit",\n            year: "1992",\n            color: "Claret"\n        })\n        useEffect(){\n            <span class="bg-danger text-white p-1">setCar({model: "Forman"})</span>; \n            // !! ACHTUNG: This will set the whole object to {model: "Forman"}\n            // No \'brand\', \'year\', or \'color\' properties will be defined anymore\n            <span class="bg-success text-white p-1">setCar({...car, model: \'Forman\'})</span>; \n            // This is the right approach\n        }\n        return (\n            &lt;React.Fragment>\n                &lt;div>car.brand&lt;/div>\n                &lt;div>car.model&lt;/div>\n                &lt;div>car.year &lt;/div>\n                &lt;div>car.color&lt;/div>\n        )\n    }\n</pre>                    \n                    '},{elementType:"SmallHeadline",content:"useEffect(didUpdate)"},{elementType:"Paragraph",content:"Concatenates both: <code>componentDidMount</code> and <code>componentDidUpdate</code>\n                    lifecycle methods."},{elementType:"UnsignedList",content:["All side effects should be used in the useEffect callback.","Callback of <code>useEffect</code> will run every time, after the render is commited to the screen.","<code>useEffect(()=>{})</code> launches <strong>after every completed render</strong> by default","<code>useEffect(()=>{}, [args])</code> now useEffect will trigger <strong>only</strong> when any of values in \n                        the <code>args</code> changes. Can be used for conditional rendering.","In case <code>useEffect(()=>{}, [])</code> is used with an empty array <code>[]</code> it will be executed\n                        <strong>only once</code>, on the initial component mount. Similar to the <code>componentDidMount</code>\n                        lifecycle method","If the <code>useEffect</code> callback returns a function, this function will be treated as a <code>\n                        componentDidUmount</code> hook, so will be run on umount of the component.","<code>useEffect</code> is used after screen painting. If there is a need to run something before content is \n                        displayed, it would be better to use <code>useLayoutEffect</code> instead"]},{elementType:"SmallHeadline",content:"useLayoutEffect(didUpdate)"},{elementType:"Paragraph",content:"\n                The only difference between <code>useLayoutEffect</code> and <code>useEffect</code> is time the \n                callback is triggered. In case of the <code>useLayoutEffect</code> the callback will be triggered before \n                content is displayed on the screen."},{elementType:"Paragraph",content:"The useLayoutEffect function takes only synchronous callbacks!. As effects are visible on screen, \n                better not to make the user wait."},{elementType:"SmallHeadline",content:"useContext( )"},{elementType:"Paragraph",content:"\n                    The context is an object holding some data that needs to be passed to the components that are \n                    deeply nested inside the component passing the context. Normally there would be props passed \n                    from the component to the child component. But the problem known as the <q>props drilling</q>\n                    occurs, when the props have to be passed deep.\n                    "},{elementType:"Paragraph",content:"\n                    Possible usages are passing the:\n                    "},{elementType:"UnsignedList",content:["global scope","application configurations,","user settings","preferred language","..."]},{elementType:"Paragraph",content:"\n                    How to use it?\n                    "},{elementType:"UnsignedList",content:["Create the context","Provide the context: every nested component has access to the context","Consume the context","When the context changes, all components using context will be rendered,","<code>useContext</code> returns the context, that was set in the other place,"]},{elementType:"Code",content:"\n<b>Creating the context:</b>\n<pre>\nimport { createContext } from 'react';\ncons Context = createContext('some value');\n</pre>              \n\n<b>Providing the context</b>\nCan be done with the &lt;Context.Provider value={val}> wrapping component.\nEvery component nested in the &lt;Context.Provider> will have access to the context\n<pre>\nfunction Compon() {\n    cont val = 'initial context';\n    return (\n        &lt;Context.Provider value={val}>\n            <SomeComponent/>\n        &lt;Context.Provider>\n    )\n}\n\n<b>Consumint the contest</b>\nA):\nimport {useContext} from 'react';\n\nfunction SomeComponent(){\n    const val = useContext(Context);\n\n    return (\n        &lt;>\n            <span>first usage: {val}</span>\n            <span>Second usage: {val}</span>\n        &lt;/>\n    )\n}\n\nB):\nfunction SomeComponent(){\n    return (\n        &lt;Context.Consumer>\n            {value => &lt;span>{value}&lt;span>}\n        &lt;Context.Consumer>\n    )\n}\n\n</pre>\n                    "},{elementType:"SmallHeadline",content:"useRef(initialValue)"},{elementType:"UnsignedList",content:["Returns an object called a reference. Than object has a property 'current' that's initial value is set to the \n                            useRef <code>initialValue</code> argument.","The value hold in the current property is mutable and may be used by the developer as a normal variable would be.","The change in the reference object <b>does not cause component to renrender</b>, and the state would. This is one of \n                            the differences between the object state and the reference,","The change to the reference object is synchronous, and this makes it different from the state object, as \n                            state change is asynchronous. The new value of the state is not available immediately after setting it.","useRef may be used to access DOM elements:\n                                <pre>\nfunction SomeComponent(){\n    let customRef = useRef();\n    useEffect(()=>{customRef.current.fosuc()})\n    // using customRef object to set focus on it\n    ...\n    return (\n        &lt;div ref={customRef}></div>\n    )\n}\n                                </pre>\n                            ","Changes to the reference value should not be made in the body of the component function. The same rules apply as\n                            with the component state. All changes made to those objects should be done with hooks. ","https://dmitripavlutin.com/react-useref-guide/"]},{elementType:"SmallHeadline",content:"useMemo(()=>computeExpensiveValue(a,b), arrOfDep)"},{elementType:"UnsignedList",content:["All arguments taken by the callback passed to the <code>useMemo</code> should be provided in the \n                        <code>arrOfDep</code>,","Computes the expensive value only if one of the values given in <code>arrOfDep</code> changes,","If none of the values given inside the <code>arrOfDep</code> changes, the memorized value given by the\n                        callback function are returned,","Code should be written without the <code>useMemo</code> function, and this function should be added\n                        at the end, as the performance boost, as it may be chosen to change <code>useMemo</code> functionality\n                        in the future,","If the <code>arrOfDep</code> is empty, the value of the callback will be recomputed every time"]},{elementType:"SmallHeadline",content:"useCallback(computeExpensiveValueFunction, arrOfDep)"},{elementType:"UnsignedList",content:["All arguments taken by the <code>computeExpensiveValueFunction</code> passed to the \n                        <code>useCallback</code>, should be provided in the <code>arrOfDep</code>,","This function works the similar way that the <code>useMemo</code> does:\n                        <code>useCallback(fn, deps)</code> is the same as <code>useMemeo(()=> fn, deps)</code>"]},{elementType:"SmallHeadline",content:"useReducer"},{elementType:"Code",content:"\n<pre>\nimport {useReducer} from 'react';\n\nfunction SomeComponent(){\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const action = {type: 'ActionType'};\n    function redurcer(state, action){\n        let newState;\n        switch (action.type) {\n            case 'type1': \n                newState = {...state, someProp: 'newValue'};\n                <span class=\"bg-danger text-white p-1\">// Create a new state, do not mute</span>\n                break;\n            case 'type2':\n                newState = {...state, someProp: 'newValue'};\n                <span class=\"bg-danger text-white p-1\">// Create a new state, do not mute</span>\n                break;\n            default:\n                throw new Error('Action not defined');\n        }\n        return newState\n    }\n    return (\n        &lt;button onClick={()=>dispatch(action)}>Button&lt;/button>\n    )\n}\n</pre>                    \n                    "},{elementType:"Paragraph",content:"\n                    <code>useReducer</code> is the <b>rare usaged</b> competition for the <code>useState</code>.\n                    The similar <code>useReducer</code> idea is used in the <b>Redux</b> state management library.\n                    This hook will not be often used, but might come handy in case of the components with complicated \n                    states.\n                    "},{elementType:"UnsignedList",content:["<code>initialState</code> is the initial state value,","<code>reducer</code> is a function, that returns the new value of the state. It is important, that\n                        the new value of the state is the <b>copy</b> of the previous state. In case the mutated previous \n                        state is passed, react will not be able to detect changes and will not update the view,","<code>state</code> is the state object reference. In case the <code>dispatch</code> function\n                        is triggered, this reference will hold the new value of the object,","<code>dispatch</code> is the function that is created for the current usage of the <code>useReducer</code>.\n                        Calling this function will trigger the state update. Everything before this function call was just \n                        loading the gun, aiming at the target, but this function is like pulling the trigger,","<code>action</code> is the object that tells the reducer how to create a new state object."]},{elementType:"Paragraph",content:"\n                    As mentioned before: this hook usage is similar to the Redux use cases. As there may be a problem with \n                    passing the state down and pulling events up to the common source of the truth, there is a library\n                    holding the state globally, and make it possible to access this state of any part of the application.\n                    This library is the Redux. It may be used not only for the React. It may be also used in pure JS for instance.\n                    "},{elementType:"SmallHeadline",content:"useImperativeHandle"},{elementType:"SmallHeadline",content:"useDebugValue"}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"reactjs.org",href:"https://reactjs.org/docs/hooks-reference.html#useeffect",description:"Hooks reference"},{elementType:"Link",content:"projects.wojtekmaj.pl",href:"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/",description:"Lifecycle in react"},{elementType:"Link",content:"dmitripavlutin.com",href:"https://dmitripavlutin.com/react-context-and-usecontext/",description:"useContext"},{elementType:"Link",content:"dmitripavlutin.com",href:"https://dmitripavlutin.com/react-usereducer/",description:"useReducer"}]}]},{summary:"react lifecycle methods",title:"React lifecycle methods",searchKeywords:"React lifecycle methods render constructor componentDidMount componentDidUpdate componentWillUpdate\n    componentWillUnmount shouldComponentUpdate getDerivedStateFromProps getShapshotBeforeUpdate \n    getDerivedStateFromError componentDidCatch \n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Lifecycle methods"},{elementType:"Paragraph",content:"\n                    Each component in react has its lifecycle, and its phases. Firlsty it is constructed, then rendered,\n                    then it lives, so may be modified, and at the end it is demolished. There is a necessity to \n                    do some operations like component modifications during this process. Some events should be directly\n                    timed: for example server communication should take place after the element is rendered, but\n                    before its view is changed. To support making some operations in direct moments of the component \n                    lifecycle, the <code>lifecycle methods</code> are introduced. Lifecycle methods are available only\n                    in the react class components. In case functions are used to implement components, react hooks should \n                    be used instead.\n                    "},{elementType:"SmallHeadline",content:"Call order"},{elementType:"Image",name:"reactLifecycle.png",alt:"lifecycle methods call order"},{elementType:"Headline-3",content:"render()"},{elementType:"Paragraph",content:"\n                    A pure function (not state changing), checks props and state and returns one of the following:\n                    "},{elementType:"UnsignedList",content:["<b>React elements</b>,","<b>React fragments</b>: a structure letting to avoid wrapping the list of parallel elements \n                        in not needed divs, for example a lot of <code>&lt;td></code> elements may be wrapped in a\n                        &ltReact.fragment> instead,","<b>Portals</b>: elements allowing to render a child node into another place in the DOM \n                            (for example,\n                            in case a button opens a modal, modal is in the root DOM element, and button opening it is \n                            nested somewhere),","Chains of chars or numbers, that will be rendered a text node,","A logical type, that if null or false will make component not to render,"]},{elementType:"Paragraph",content:"\n                    The render component is mandatory in class based components,\n                    "},{elementType:"Headline-3",content:"constructor(props)"},{elementType:"Paragraph",content:"\n                    Not mandatory, used to set initial state or handle events. Should not be used for subscriptions!\n                    "},{elementType:"UnsignedList",content:["The constructor is not mandatory,","<code>super(props)</code> is mandatory if constructor is present,","<code>setState()</code> should <b>not</b> be used in the constructor, the constructor is the\n                        only place where state should be assigned directly: <code>this.state = ...</code>","No subscriptions here,"]},{elementType:"Headline-3",content:"componentDidMount()"},{elementType:"Paragraph",content:"\n                    Mounting is the process of placing the element in the DOM, so this method is called directly after\n                    the element is rendered and inserted into the DOM. This is a good place for:\n                    "},{elementType:"UnsignedList",content:["Subscriptions, (remember to use <code>componentWillUmount</code> in this case)","Server requests,","Communication with web workers,","If <code>setState()</code> is used in <code>componentDidMount</code>, then there will be an \n                        extra rendering taking place, but this extra rendering will finish before browser updates \n                        the screen, so user will not see this. However, it is better to set state directly in the \n                        constructor if possible, as this may cause some performance issues,","This method will not be called after updates, only after initial render and mount"]},{elementType:"Headline-3",content:"componentDidUpdate()"},{elementType:"Paragraph",content:"\n                    Invoked after actualization, but <b>not</b> after initial rendering and mounting, in this case \n                    <code>componentDidMount</code> should be used. This method will not be invoked if <code>\n                    shouldComponentUpdate</code> returns false. Use <code>componentDidUpdate</code> to:\n                    "},{elementType:"UnsignedList",content:["DOM operations when the element was actualized,","Server requests,","<code>setState()</code> may be used here, will cause extra rendering, but before screen \n                        update, so not visible. However, this will cause performance issues,","<b>NOTE</b> <code>setState()</code> if used here, should be wrapped in a conditional statement,\n                        or will end up with the infinite loop,"]},{elementType:"Headline-3",content:"componentWillUnmount()"},{elementType:"Paragraph",content:"\n                    This is invoked just before the element is removed from the DOM, and the component is deleted.\n                    <code>setState()</code> should not be used here, as there is no point in modification of the state \n                    of the component that will be deleted in a while. Component once removed is lost forever and will\n                    never be mounted again. Instead a new instance will be created. Should be used for cleaning after the \n                    component:\n                    "},{elementType:"UnsignedList",content:["unsubscriptions,","cancelation of server requests,","clearing timers and intervals"]},{elementType:"Headline-3",content:"shouldComponentUpdate(nextProps, nextState)"},{elementType:"Paragraph",content:"\n                    Future state and props should be compared and in case the change in the component would not cause\n                    changes in the component view, this method might return false. In this case components view will not be \n                    updated. This is for improving performance. Deep comparation should not be used, child components\n                    may be updated anyway, in the future this method may be used only as a suggestion for react engine.\n                    Invoked just before the <code>componentDidUpdate</code>. This is not invoked before the initial \n                    component render. <b>Rare usage</b>\n                    "},{elementType:"Headline-3",content:"static getDerivedStateFromProps(props, state)"},{elementType:"Paragraph",content:"\n                    Called before <b>every</b> initial render and update renders. Should return an object updating the state, or\n                    null if no update needed. <b>Rare usage</b>. It should be considered to use:\n                    "},{elementType:"UnsignedList",content:["<code>componentDidUpdate</code>,","memoization techniques,","fully controlled component, or fully uncontrolled component with\n                        the key"]},{elementType:"Code",content:"\n<pre>\nclass SomeComponent extends Component {\n    state = ...\n\n    static getDerivedStateFromProps(props, state){\n        if (props.val !== state.prevPropsVal || state.prevOtherVal !== state.otherVal){\n            return {prevPropsVal ....}\n        }\n        return null;\n    }\n    render ....\n}\n</pre>                    \n                    "},{elementType:"Headline-3",content:"getShapshotBeforeUpdate()"},{elementType:"Paragraph",content:"\n                    Invoked just after render, and just before the element will be updated in the DOM, to be sure\n                    nothing needs to be adjusted. The value returned by this method will be sent to the <code>\n                    componentDidUpdate</code>. If this method returns null, then nothing will be passed to the \n                    <code>componentDidUpdate</code> and this method will have no effect. In case this \n                    method returns something additional render will take place, but this will not be\n                    visible on the screen. May be used with the\n                    <code>React.createRef()</code>. Can be used to handle, for example scrollbars positions \n                    in case it is needed. <b>Rare usage</b>\n                    "},{elementType:"Code",content:"\n<pre>\nclass MovableElement extends React.Component {\n    constructor(props){\n        super(props);\n        this.movableElRef = React.createRef();\n    }\n\n    getShapshotBeforeUpdate(prevProps, prevState){\n        if (prevProps.positionX &lt; props.positionX) {return 1}\n        if (prevProps.positionX === props.positionX) {return null}\n        return -1\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot){\n        if (snapshot === 1) {...}\n        if (snapshot === -1) {...}\n        ...\n    }\n\n    render(){\n        return(\n            &lt;div ref={this.movableElRef}>..&lt;/div>\n        )\n    }\n}\n</pre>\n"},{elementType:"Headline-3",content:"getDerivedStateFromError(error)"},{elementType:"Paragraph",content:"\n                    Invoked <b>in the render</b> phase, so should never have any side effects. Good for \n                    rendering an alternative component in case of an error. Not good for catching actual errors.\n                    Errors will make their way up to the window object if not caught by the <code>componentDidCatch()</code>\n                    method in the production environment. \n                    "},{elementType:"Code",content:"\n<pre>\nclass ErrorHandler extends React.component {\n    constructor(props){\n        super(props);\n        this.state = {hasError: false};\n    }\n    static getDerivedStateFromError(error){\n        return {hasError: true};\n    }\n\n    componentDidCatch(error, info){\n        // will catch error in the production environment\n        // can cause side effects like state change\n        // in commit phase\n        // error is the error tha was thrown,\n        // info is the component that thrown the error\n        log(info.componentStack)\n    }\n\n    render(){\n        if (this.state.hasError) {\n            ....  // NOK case\n        } \n        return ... // OK case\n    }\n}\n</pre>                    \n                    "},{elementType:"Headline-3",content:"componentDidCatch(error, info)"},{elementType:"Paragraph",content:"\n                    Invoked in the commit phase, so may be used with side effects. Good for logging errors.\n                    Catches an error not letting it travel up the tree (only in case of the production environment,\n                    as in the development all errors will make their way up to the <code>window</code> object\n                    anyway). <code>error</code> is the error that was thrown, and <code>info</code> is the\n                    object that is thrown the error.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Depraciated methods"},{elementType:"UnsignedList",content:["<code>componentWillMount()</code>: now changed to <code>UNSAFE_componentWillMount()</code>","<code>componentWillReceiveProps()</code>: now <code>UNSAFE_componentWillReceiveProps()</code>","<code>componentWillUpdate()</code>: now <code>UNSAFE_componentWillUpdate()</code>"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Other methods"},{elementType:"SmallHeadline",content:"\n                    <code>setState(updater[, callback])</code>\n                    "},{elementType:"Paragraph",content:"\n                    The only place the state may be assigned directly is the constructor of the component. In any other \n                    place the <code>setState</code> method should be used, or bugs may occur. The <code>setState</code>\n                    method is asynchronous, and many calls of this method may be combined so that state is updated\n                    only once in the cycle. Each change to the state causes the component to update if <code>\n                    componentShouldUpdate()</code> lifecycle method does not return false.\n                    It should be avoided to use nested state, as in this case components will not update, as \n                    only the flat structure of the state object is compared.\n                    "},{elementType:"Paragraph",content:"\n                    The optional callback function is invoked after the state is changed. As there is a \n                    <code>componentDidUpdate</code> method, it is better to avoid setting this callback argument.\n                    "},{elementType:"SmallHeadline",content:"\n                    <code>forceUpdate(callback)</code>\n                    "},{elementType:"Paragraph",content:"\n                    This method forces the render method invocation, and component update, not taking into account the\n                    <code>shouldComponentUpdate()</code> method. This method just forces an additional render.\n                    It is better to avoid it and use natural state and props changes.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"projects.wojtekmaj.pl",href:"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/",description:"Lifecycle in react"},{elementType:"Link",content:"https://pl.reactjs.org",href:"https://pl.reactjs.org/docs/react-component.html#constructor",description:"Lifecycle in react"}]}]},{summary:"position",title:"position",searchKeywords:"react hooks lifecycle",cathegory:"React",content:[{elementType:"Article",content:[{elementType:"Headline",content:"About position"},{elementType:"Paragraph",content:"\n                            React is ...          \n                        "}]}]},{summary:"tables",title:"tables",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Tables"},{elementType:"Paragraph",content:"\n                            <b>Lorem ipsum</b> dolor sit amet, consectetur adipiscing elit. \n                            Vestibulum et lacinia arcu, ut tempor lacus. Integer euismod, est et pharetra eleifend, \n                            magna nibh congue nulla, eu ornare lacus sem eu leo. Sed aliquet tincidunt neque non tempor. \n                            Sed feugiat, massa at tempus tincidunt, tortor turpis rhoncus orci, nec cursus purus dui vel ipsum. \n                            Sed pellentesque sem nec dictum auctor. Morbi tempus lectus vitae ultrices volutpat. \n                            Vivamus convallis mauris urna. Phasellus rhoncus felis eget mi tincidunt malesuada. \n                            Pellentesque in velit viverra nunc ultrices maximus. Duis in leo dolor.             \n                        "}]}]}];var Ho=[{summary:"stop watch",title:"stop watch",searchKeywords:"",cathegory:"Test components",content:[{elementType:"Headline-2",content:"Stop watch: useState"},{elementType:"Paragraph",content:"Please read in the React hooks about <code>useState</code>"},{elementType:"StopWatchState",content:[]},{elementType:"Code",content:'\n<pre>\nfunction StopWatchState(){\nlet initialState = {\n    currentTime: 0,\n    running: false\n}\nlet interval = null;\n\nlet currentTime = useRef(0);\nconst [stopState, setStopState] = useState(initialState);\nfunction getMsec(time){\n    return time % (100);\n}\nfunction getSeconds(time){\n    return ((time - getMsec(time)) / 100) % 60\n}\nfunction getMinutes(time){\n    return Math.floor(time / (60 * 100));\n}\nfunction prefix0(nr){return nr < 10 ? \'0\'+nr:nr;}\nfunction convertTime(time){\n    return `${getMinutes(time)}:${prefix0(getSeconds(time))}:${prefix0(getMsec(time))}`\n}\nfunction start(){setStopState({...stopState, running: true});}\nfunction stop(){setStopState({...stopState, running: false});}\nfunction restart(){setStopState({...stopState, currentTime: 0}); currentTime.current = 0;}\n\nuseEffect(()=>{\n    if(!stopState.running){\n        return; // early return\n    } else {\n        interval = setInterval(()=>{\n            currentTime.current += 1;\n            setStopState({...stopState, currentTime: currentTime.current});\n        }, 10)\n    }\n    return ()=>{console.log(\'clearInt\');clearInterval(interval);}        \n}, [stopState.running])\n\nreturn (\n    &lt;div className="col-12 text-center rounded">\n        &lt;div className="col-md-6 col-sm-8 col-12 bg-secondary text-white text-center p-2 d-inline-block">\n            &lt;div className="container h1">{convertTime(stopState.currentTime)}&lt;/div>\n            &lt;div className="container">\n                &lt;button type="button" onClick={start} className="btn  btn-light m-1">Start&lt;/button>\n                &lt;button type="button" onClick={stop} className="btn  btn-light m-1">Stop&lt;/button>\n                &lt;button type="button" onClick={restart} className="btn  btn-light m-1">Reset&lt;/button>\n            &lt;/div>\n        &lt;/div>\n    &lt;/div>\n)\n}\n</pre>                \n            '}]},{summary:"stop watch reducer",title:"stop watch state",searchKeywords:"",cathegory:"Test components",content:[{elementType:"Headline-2",content:"Stop watch: useReducer"},{elementType:"Paragraph",content:"Please read in the React hooks about <code>useReducer</code>"},{elementType:"StopWatchReducer",content:[]},{elementType:"Code",content:'\n<pre>\nimport { useEffect, useLayoutEffect, useReducer} from "react";\n\nfunction reducer(state, action){\n    if (action.type === "start") return {...state, running: true};\n    if (action.type === "stop" ) return {...state, running: false};\n    if (action.type === "restart") return {...state, currentTime: 0};\n    if (action.type === "tick") {\n        return {...state, currentTime: state.currentTime + 1};\n    }\n}   // May be placed outside the component\n// Can be placed inside the component function, but will not have access to the \n// component scope anyway;\n\n\nfunction StopWatchReducer(){\n    let initialState = {\n        currentTime: 0,\n        running: false\n    }\n    const [stopState, dispatch] = useReducer(reducer, initialState);\n    if (stopState === undefined) throw new Error()\n    let interval = null;\n    \n    function getMsec(time){\n        return time % (100);\n    }\n    function getSeconds(time){\n        return ((time - getMsec(time)) / 100) % 60\n    }\n    function getMinutes(time){\n        return Math.floor(time / (60 * 100));\n    }\n    function prefix0(nr){return nr < 10 ? \'0\'+nr:nr;}\n    function convertTime(time){\n        return `${getMinutes(time)}:${prefix0(getSeconds(time))}:${prefix0(getMsec(time))}`\n    }\n\n    <div class="note note-danger">\nIf the <b>reducer</b> function was here, in the \ncomponent scope, it would not have access to the component scope. Only <b>state</b> and <b>action</b>\nattributes would be available.\n    </div>\n    \n\n    let actionStart   = {type: \'start\'};\n    let actionStop    = {type:\'stop\'};\n    let actionRestart = {type:\'restart\'};\n    let actionTick    = {type: \'tick\'};\n    \n\n    useEffect(()=>{\n        if(!stopState.running){\n            return; // early return\n        }\n        interval = setInterval(()=>{\n            dispatch(actionTick);\n        }, 10)\n        \n        return ()=>{clearInterval(interval);}        \n    }, [stopState.running])\n\n    return (\n        &lt;div className="col-12 text-center m-5">\n            &lt;div className="col-md-6 col-sm-8 col-12 alert alert-dark bg-secondary text-white text-center p-2 d-inline-block">\n                &lt;div className="container h1">{convertTime(stopState.currentTime)}</div>\n                &lt;div className="container">\n                    &lt;button type="button" onClick={()=>dispatch(actionStart)} className="btn  btn-light m-1">Start</button>\n                    &lt;button type="button" onClick={()=>dispatch(actionStop)} className="btn  btn-light m-1">Stop</button>\n                    &lt;button type="button" onClick={()=>dispatch(actionRestart)} className="btn  btn-light m-1">Reset</button>\n                    <div class="note note-danger"><b>dispatch</b> has to be returned by the wrapping function,\n                    or it will cause an infinite loop.</div>\n                &lt;/div>\n            &lt;/div>\n        &lt;/div>\n    )\n}\n</pre>                \n            '}]},{summary:"flexbox demo",title:"flexbox demo",searchKeywords:"",cathegory:"Test components",content:[{elementType:"Headline-2",content:"Flexbox sandbox"},{elementType:"Paragraph",content:"You may test how properties of the flexbox work"},{elementType:"FlexDemo",content:[]}]}];var Mo=[{summary:"prototype design pattern",title:"prototype design pattern",searchKeywords:"\n    ",cathegory:"DesignPatterns",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Prototype"},{elementType:"Paragraph",content:"\n                    There is a prototype chain in JS, however this design pattern, except for name, has nothing in common \n                    with the prototype inheritance.\n                    "},{elementType:"Headline-2",content:"Description"},{elementType:"Paragraph",content:"\n                    A creational design pattern.\n                    "},{elementType:"Paragraph",content:"\n                    In the literature, a prototype is an object capable of replicating itself.\n                    "},{elementType:"Paragraph",content:"\n                    If there is a need to have an exact copy of an object, it may be not possible to clone it \n                    with an external function, as the object may have some private properties, not available to\n                    external functions. That is why creating an object and filling it with data may not be possible\n                    due to the internal state of the object.\n                    "},{elementType:"Paragraph",content:"\n                    That is why a <code>clone</code> method is introduced. A prototype has an implementation of such \n                    a method, and this method returns an exact copy of the object that it was called on. Thanks to that\n                    approach the returned object will have a copy of the internal state of the original object.\n                    "},{elementType:"Paragraph",content:"\n                    An interesting use case of this approach would be a component visible on a screen.\n                    This component would have a <code>clone</code> method allowing to copy it with its current\n                    internal state. It may be comfortable, as user may interact with object on the screen, and\n                    cloning such an object, with all event listeners and attributes applied to it with a <code>\n                    clone</code> method seems an interesting option. (Please see the second example)\n                    "},{elementType:"Paragraph",content:"\n                    However, there are situations (example 1), when the exact copy of an object is not needed. \n                    The exact copy of the internal state is not needed. Just an object created from a predefined\n                    data set is desired. In this situation the object instance would be created from a recipe (a \n                    large set of attributes for instance). The created object has not <code>clone</code> method\n                    allowing replication, but it is possible to create a set of predefined instances from blueprint \n                    objects. Just like a factory allowing to make standard products from blueprints. These standard \n                    products may  be customized in the future.\n                    "},{elementType:"Paragraph",content:"\n                    Creating objects form blueprints seems similar in a way to the prototype based approach, so I decided\n                    to show it in this article.\n                    "},{elementType:"Paragraph",content:"\n                    In case there are a few variations of the object with a lot of attributes that need to be set needed,\n                    it would be good to keep data related to those variations in recipes. These recipes are called \n                    prototypes.\n                    "},{elementType:"Headline-2",content:"Understanding: examples"},{elementType:"Headline-3",content:"Example 1: car dealer"},{elementType:"Paragraph",content:"\n                    This example is a bit different from one described in the literature. According to \n                    the references, the prototype is an object having a <code>clone</code> method, allowing to \n                    create an exact copy of the object instance. In case of this example, a prototype is \n                    a different object: a recipe for creating an instance of the needed object. \n                    The desired object is created by the constructor, with a recipe passed as an argument.\n                    "},{elementType:"Paragraph",content:"\n                    It may be considered wrong. Having a <code>clone</code> method may be comfortable, as shown in the\n                    second example. However. in case of a car ordering form, it will not be needed. Holding the whole \n                    <code>HTMLElement</code> somewhere in the background just for having a possibility to clone it \n                    in this case seems a lost of resources. All four form types will most probably not be needed in \n                    one session. Even if the user uses all form types in one session, it may reasonable to keep a recipe \n                    objects in that background and create an instance out of them.\n                    "},{elementType:"Paragraph",content:"\n                    It may seem, this example is not different from a simple calling a constructor funcition \n                    with the arguments. The only difference is, the set of needed arguments is quite large, and\n                    ready recipes for needed form objects should be kept in the memory just like prototypes are stored \n                    in a prototype managing object. In this way, storing object from which objects are created, this \n                    pattern is similar to the prototype one.\n                    "},{elementType:"SmallHeadline",content:"A problem"},{elementType:"Paragraph",content:"\n                    A car dealer seals new cars. Let's considered a single model for simplicity. This car model can be described\n                    with a set of parameters like: car-body type, engine type, engine power, engine torque, gearbox type,\n                    color, electric or manual windows, air conditioning, climatronik, airbag for driver,\n                    airbag for passengers, heated mirrors, electric or manual mirrors, etc. \n                    "},{elementType:"Paragraph",content:"\n                    This car model comes in a few versions. Let us say: Basic, Comfort, Elegance and Prestige.\n                    Each car version has some limitations. For example, the most powerful engine, will not be\n                    available in the Basic version, and the manual windows and mirrors will not be available \n                    in the Prestige version. However, there are some things that may be customized in each version.\n                    There are always a few engines to chose from, color may be selected, etc. \n                    A client selecting a Basic version will have a formula filled by default with the cheapest car\n                    version for the start, and will be able to purchase more options. The customer that selected\n                    Prestige version will start by default with the most expensive version possible, and will be \n                    able to reduce cost by selecting more reasonable equipment.\n                    "},{elementType:"SmallHeadline",content:"Solution"},{elementType:"Paragraph",content:"\n                    There are four car model versions, and the order form for each of them has to start with \n                    different default settings. This is the great place for the prototype pattern.\n                    "},{elementType:"Code",content:"\n<pre>\nclass OrderForm extends HTMLElement{\n    constructor(prototype){\n        this.model = prototype.model ?? 'modelA';\n        this.engine = prototype.engineType ?? '2.0 Boxer SOHC 136HP';\n        this.drive = '4x4';\n        this.color = prototype.color ?? 'silver';\n        this.driverAirbag = true;\n        this.passengerAirbag = prototype.passengerAirbag ?? false;\n        this.electircMirrors = prototype.electricMirrors ?? false;\n        ...\n        this.shadowRoot = this.attachShadow({mode:'open'});\n        ...\n    }\n    connectedCallback(){\n        // logic\n    }\n    attributeChangedCallback(){}\n    ...\n}\n</pre>\n<div class=\"note\">\n    Now the prototypes:\n</div>\nbasicPrototype = {\n    model: 'modelA', engine: '2.0 Boxer SOHC 136HP', this.color = 'white',\n    this.passengerAirbag = true, this.electricMirrors = true, ....\n}\n...\nprestigePrototype = {\n    model: 'modelA', engine: '3.0 Boxer 245HP 297Nm', this.color = 'blue',\n    this.passengerAirbag = true, this.electricMirrors = true ...\n}\n                   "},{elementType:"NoteWarning",content:"\n                    In literature it is stated, that a prototype object is an object capable of deep cloning itsself.\n                    In other words a prototype would be an object having a class <code>clone()</code> returning an \n                    an exact copy of itself. Then an application would have a prototype manager holding all needed\n                    prototypes, and would be able to create new objects with clinning prototypes from the manager storage.'\n                    "},{elementType:"Headline-3",content:"Example 2: Components as prototypes"},{elementType:"SmallHeadline",content:"Description"},{elementType:"Paragraph",content:"\n                    Components seem to be good candidates for the pattern of self cloning components.\n                    Below there is a sample <code>custom-table</code> component that may be stored \n                    in the memory, with all events and attributes attached. Then, there is a method \n                    <code>clone</code> allowing to create an exact copy of the element with all\n                    events and attributes (if they were registered in the prototype).\n                    "},{elementType:"Paragraph",content:"\n                    However, more interesting would be to keep components in the DOM, use them, and if there is a\n                    need to create an exact copy of such a component, it is easy, as it just needs to be found in the\n                    DOM, and a method <code>clone</code> should be called on the DOM element to return an exact copy.\n                    No need to store elements in the application state\n                    "},{elementType:"Paragraph",content:"\n                    Below example could use methods to remove attributes or events from registers of elements to clone, \n                    but this example is already quite long.\n                    "},{elementType:"Code",content:'\n        <div class="note">A HTML for this example. <b>prototype.js</b> contains a component with \n        prototype extending functions, <b>script.js</b> is given at the bottom of the example. It only\n        attaches an event listener to the component.</div>\n<pre>\n&lt;head>\n    &lt;script src="./prototype.js" defer>&lt;/script>\n    &lt;script src="./script.js" defer>&lt;/script>\n&lt;/head>\n&lt;body>\n    &lt;custom-table \n    table-data=\'{"head": ["col1", "col2", "col3"],"body": [["data1","data2","data3"],["data4","data5","data6"],["data7","data8","data9"]]}\'\n    >&lt;/custom-table>\n&lt;/body>\n&lt;/html>\n</pre>\n\n    <div class="note">\n        Now a component. Table data is passed as a stringified attribute <code>table-data</code>.\n        The component has no <code>connectedCallback</code> method, and no content is added on element\n        mount. Whole content is added when element is created and later when an attribute \n        <code>table-data</code> is modified. This way an instance of TableComponent may be \n        kept somewhere in memory, and exact copies of it may be created with a clone method.\n    </div>\n<pre>\nclass TableComponent extends HTMLElement{\n    constructor(){\n        super();\n        this.attachShadow({mode:\'open\'});\n        this.data = JSON.parse(this.getAttribute(\'table-data\'));\n        if (this.data !== null){\n            this.recreateTable();\n        }\n        console.log(\'Table component constructed\')\n    }\n    attributeChangedCallback(attrName, oldVal, newVal){\n        if (attrName===\'table-data\'){\n            this.data = JSON.parse(newVal);\n            this.recreateTable();\n        }\n    }\n    static get observedAttributes(){\n        return [\'table-data\']\n    }\n    recreateTable(){\n        this.shadowRoot.innerHTML = \'\'; // delete previous table content\n        this.shadowRoot.appendChild(this.createTable())\n    }\n    createTable(){\n        let head = this.createHead(this.data.head);\n        let body = this.createBody(this.data.body);\n        let table = document.createElement(\'table\');\n        table.appendChild(head); table.appendChild(body);\n        return table;\n    }\n    createHead(headData){\n        let row = document.createElement(\'tr\');\n        for(let item of headData){\n            let th = document.createElement(\'th\');\n            th.innerHTML = item;\n            row.appendChild(th)\n        }\n        return row;\n    }\n    createBody(bodyData){\n        let body = document.createElement(\'tbody\');\n        for (let r of bodyData){\n            let row = this.createTRow(r);\n            body.appendChild(row);\n        }\n        return body\n    }\n    createTRow(rowDataAsArr){\n        let row = document.createElement(\'tr\');\n        for(let d of rowDataAsArr){\n            let td = document.createElement(\'td\');\n            td.innerHTML = d;\n            row.appendChild(td)\n        }\n        return row;\n    }\n}\nwindow.customElements.define(\'custom-table\', TableComponent)\n</pre>    \n\n\n            <div class="note">\n                Custom tables attributes may also require cloning.\n                Let\'s create a method for registering attributes that will be cloned with the \n                prototype:\n            </div>\n<pre>\nTableComponent.prototype.registerAttribute = function(attr){\n    if (this.attributesToClone === undefined){\n        this.attributesToClone = [];\n    }\n    this.attributesToClone.push(attr)\n}\n</pre>            \n\n            <div class="note">\n                Let\'s create methods allowing making a copy of registered event listeners\n            </div>\n<pre>\nTableComponent.prototype.attachEventListener = function(eventType, cbFunction){\n    this.addEventListener(eventType, cbFunction);\n    if (this.eventListenresRegister === undefined){\n        this.eventListenersRegister = [];\n    }\n    this.eventListenersRegister.push({eventType: eventType, cb: cbFunction})\n    console.log(\'attach Event Listener added\')\n}\n    // We could create a disconnectedCallback to remove all events attached to the component,\n    // but detaching element from the DOM would cause events to be removed, and we do not want this.\n    // If the element is destoryed (unaccessable from the global scope) all event listeners will be \n    // garbage collected anyway.\n</pre>  \n\n            <div class="note">\n                Let\'s create a deep copy object function. Note. Deep cloning objects in JS is a complex task, \n                and a lot of code is needed to support all edge cases. Here, we will simplify deep cloning \n                with a <code>JSON.stringify</code>, <code>JSON.parse</code> pattern. In this case, a lot of \n                meta-data will be lost (like object descriptor, and all properties that keys are the type of a symbol)\n            </div>\n<pre>\n    TableComponent.prototype.cloneObject(obj){\n        return JSON.parse(JSON.stringify(obj));\n    }\n</pre> \n\n<div class="note">\n                Let\'s clone the whole table object\n            </div>\n<pre>\nTableComponent.prototype.clone = function(){\n    let outputElement = document.createElement(\'custom-table\');\n    outputElement.setAttribute(\'table-data\', JSON.stringify(this.cloneObject(this.data)));\n    if (this.attributesToClone) {\n        outputElement.attributesToClone = this.cloneObject(this.attributesToClone);\n        this.setAttributesToClone(outputElement);\n    }\n    if (this.eventListenersRegister) {\n        this.attachEventsToClone(outputElement);\n    }\n    return outputElement;\n}\nTableComponent.prototype.setAttributesToClone = function(targetElement){\n    for (let attr of this.attributesToClone){\n        let attrVal = this.getAttribute(attr);\n        targetElement.setAttribute(attr, attrVal);\n    }\n}\nTableComponent.prototype.attachEventsToClone = function(targetElement){\n    console.log(targetElement.eventListenersRegister);\n    for (let event of this.eventListenersRegister){\n        targetElement.attachEventListener(event.eventType, event.cb)\n    }\n}\n</pre> \n            <div class="note">\n                Now table component is capable of self reproducing. It clones registered event listeners and \n                attributes. It may be stored in the memory, not attached to the view, and it may be kept \n                in the DOM, and cloned from the DOM (as in this example).\n            </div>\n\n            <div class="note">\n                Now for the <code>script.js</code> file:\n            </div>\n<pre>\nlet table = document.querySelector(\'custom-table\');\ntable.attachEventListener(\'click\',(e)=>{\n    let copy = e.target.clone();\n    document.body.appendChild(copy);\n})\n</pre>\n\n                \n                    '}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"refactoring guru",href:"https://refactoring.guru/pl",description:"Tutorial"},{elementType:"Paragraph",content:"<i>Design patterns</i> by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides"}]}]},{summary:"factory design pattern",title:"factory design pattern",searchKeywords:"\n    ",cathegory:"DesignPatterns",content:[{elementType:"Article",content:[{elementType:"Headline",content:"A factory"},{elementType:"Paragraph",content:"\n                    A creational design pattern. Means that its purpose is to create objects.\n                    A factory is an object, allowing to construct one of a few objects supported by the factory.\n                    Like in a real world, if there is a musical instrument factory, it will most likely \n                    be capable of producing an acoustic guitar, an electric guitar, a dobro guitar, a bass guitar, a \n                    ukulele and some other items, depending on the order.\n                    "},{elementType:"Headline-2",content:"Understanding"},{elementType:"Headline-3",content:"Example: building a web page"},{elementType:"paragraph",content:"\n                    As described in the prototype design pattern article, a web page must present content in the consistent\n                    way. In other words paragraphs, headlines, image presentation should be done in the similar manner.\n                    That is why such a page will most likely consist of a few components that may be repeated over the \n                    page. Example components are: a paragraph, a headline, an image, an article, a section element.\n                    Article and section elements are wrappers for paragraphs, images and headlines. The content would\n                    be described with a JS object having a type and a content properties.\n                    "},{elementType:"paragraph",content:"\n                    In above example there will be an array of JS objects. Each object would have a type property.\n                    This type property would be passed to the factory, and the object depending on the type would be \n                    returned.\n                    "},{elementType:"paragraph",content:"\n                    Please refer to the prototype design pattern article to see an example.\n                    "},{elementType:"Headline-3",content:"Example: function factory"},{elementType:"paragraph",content:"\n                    Let's suppose there is some data presented in a table. This data may be saved by the user to \n                    one of filetypes: csv, xlsx, html, xml, json. The function factory is a function \n                    returning funcions, that will be capable of converting the data to the desired type.\n                    Let's not worry with the functions implementation, just lets see how the factory structure\n                    may look like:\n                    "},{elementType:"Code",content:"\n<pre>\nfunction tableDataToCsv(tableData){}\n\nfunction tableDataToXlsx(tableData){}\n\nfunction tableDataTohtml(tableData){}\n\nfunction tableDataToXml(tableData){}\n\nfunction tableDataToJSON(tableData){}\n\nfunction getDataFromTable(cssSelector){}\n\nfunction saveDataToAFile(data) {}\n\nfunction tableDataConversionFunction(targetDataType){\n    let functionStorage = {\n        'csv': tableDataToCsv,\n        'xlsx':tableDataToXlsx,\n        'html':tableDataToHtml,\n        'xml' :tableDataToXlsx,\n        'JSON':tableDataToJSON\n    }\n    return functionStorage[targetDataType];\n}\n\nsaveDataOnclick(tableCssSelector){\n    let data = getDataFromTable(tableCssSelector);\n    let targetDataType = document.querySelector('#dataTypeInput').value;\n    let convertedData = tableDataConversionFunction(targetDataType);\n    saveDataToFile(data);\n}\n</pre>                    \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"refactoring guru",href:"https://refactoring.guru/pl",description:"Tutorial"},{elementType:"Paragraph",content:"<i>Design patterns</i> by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides"}]}]},{summary:"abstract factory design pattern",title:"abstract factory design pattern",searchKeywords:"\n    ",cathegory:"DesignPatterns",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Abstract factory"},{elementType:"Paragraph",content:"\n                    An abstract factory is more an interface than the factory itself. The word abstract means, that\n                    there is no implementation, only interfaces. Using an abstract factory pattern allows one to \n                    make a more flexible application, as concrete factory implementations may be delivered later.\n                    In case one implementation more is needed in the future, there will be just a need to create an additional\n                    factory implementation without any changed to the legacy code.\n                    "},{elementType:"Headline-2",content:"Understanding"},{elementType:"Headline-3",content:"Examples: paint application"},{elementType:"Paragraph",content:"\n                    There is a paint application allowing to sketch a vector graphic or a raster one. \n                    The application uses a factory responsible for constructing a figure. The factory has below \n                    set of products:\n                    "},{elementType:"UnsignedList",content:["Circle","Triangle","Rectangle","Path","Line"]},{elementType:"Paragraph",content:"\n                    Of course each product would be of a figure type, and each figure would have a set of methods \n                    allowing to draw, resize, change color, change fill and so on. However, bringing abstraction to the\n                    structure of the factory product is not a bridge pattern.\n                    "},{elementType:"Paragraph",content:"\n                    An abstract factory will not hold any product implementation, as this implementation may change.\n                    For instance there will be a different implementation for the raster and different for the \n                    vector representation. \n                    "},{elementType:"Code",content:"\n                    <pre>\n                    <div class=\"note\">\n                        Below class has no implementation. Instead, it takes an object with implementation and\n                        concrete interface, a type of the desired shape and returns a method capable of creating\n                        the shape. A svg and canvas implementations of the shape drawer may be given to this \n                        factory as an argument and the factory will return the concrete method. Later a next\n                        implementation: for example shapes drawn with ASCII symbols may be added with \n                        no additional legacy code refactoring.\n                    </div>\nfunction abstractShapeFactory(implementation, shapeType){\n    let productStorage = {\n        'circle': implementation.circle,\n        'triangle': implementation.triangle,\n        'rectangle': implementation.rectangle,\n        'path': implementation.path,\n        'line': implementation.line\n    }\n    return productStorage[shapeType];\n}\n                    </pre>\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"refactoring guru",href:"https://refactoring.guru/pl",description:"Tutorial"},{elementType:"Paragraph",content:"<i>Design patterns</i> by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides"}]}]},{summary:"bridge design pattern",title:"bridge design pattern",searchKeywords:"\n    ",cathegory:"DesignPatterns",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Bridge"},{elementType:"Paragraph",content:"\n                    A structural design pattern. Means it shows a way to combine objects into bigger structures without\n                    losing flexibility. This pattern is similar to an abstract factory object in a way. It is abstract in\n                    the same way. It will not create an object, but will provide an abstract interface to use an object \n                    of the certain type. Consider a car. No matter what car you are driving, most of them have \n                    similar interfaces. So if you drove one, you most probably be able to use more of them.\n                    "},{elementType:"Headline-2",content:"Understanding"},{elementType:"Headline-3",content:"Paint application"},{elementType:"Paragraph",content:"\n                    A paint application can draw: circles, triangles, lines, rectangles and paths. All those \n                    objects are figures, and have a lot of functionalities in common. A figure will have below methods:\n                    "},{elementType:"UnsignedList",content:["<code>draw</code>","<code>redraw</code> in case it is resized, old figure must be erased, and \n                        new will be created,","<code>delete</code> used by the redraw,","<code>changeFill</code>","<code>changeStroke</code>"]},{elementType:"Paragraph",content:"\n                    All those methods will be similar to all shapes. The path will have to have redraw altered,\n                    it will not delete older objects, just add next points to the path, but this is nothing \n                    to worry about while implementing a bridge pattern, as bridge itself is an abstract \n                    class, not knowing the implementation details.\n                    "},{elementType:"Paragraph",content:"\n                    Now more figures may be added only by creating the implementation. No need to \n                    change the legacy code.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"refactoring guru",href:"https://refactoring.guru/pl",description:"Tutorial"},{elementType:"Paragraph",content:"<i>Design patterns</i> by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides"}]}]},{summary:"Builder",title:"Builder",searchKeywords:"\n    ",cathegory:"DesignPatterns",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Builder"},{elementType:"Paragraph",content:"\n                    A construction design pattern. Target object is being constructed in stages. When class from which target\n                    object will be constructed is designed, it is not known how the final instance will look like. \n                    The structure of the final product is rather complicated. A good example of such a design pattern would be a \n                    web-page. \n                    "},{elementType:"Headline-3",content:"Example : web page building"},{elementType:"SmallHeadline",content:"Problem"},{elementType:"Paragraph",content:"\n                    A web page should have some content displayed in a consistent way. In other words,\n                    a paragraphs should have the similar look and behavior, the same with headlines,\n                    images, cards and other components. Web page content should be easy to modify or add.\n\n                    "},{elementType:"SmallHeadline",content:"Solution"},{elementType:"UnsignedList",content:["There should be an object (component) that may be customized by the page content data,","Data may be passed in JSON notation. For example, an array of objects, each object in the\n                        array has its type and content specified,","The component object is customized with the data delivered in the JSON,","Page content may be modified, added later when user interacts with the page,"]},{elementType:"Paragraph",content:"\n                    Below example demonstrates how DOM elements may be created in pure JS to make a web page \n                    from a JavaScript object. The side you are reading at the moment is pure SPA front end\n                    web page served only by a static file server. It is created in React, but works \n                    in the similar way. There is an JS object holding the page content, and a component \n                    capable of adjusting itself to the prototype content. \n                    As there is an array of articles, each array element may be considered a prototype.\n                    "},{elementType:"Code",content:"\n<pre>\nclass ContentCreator{\n    getParagraph(content){\n        let element = document.createElement('p');\n        element.classList.add('someClass');\n        element.innerHTML = content;\n        return element;\n    }\n    getHeadline(content){\n        let element = document.createElement('h1');\n        element.classList.add('someClass_2');\n        element.innerHTML = content;\n        return element;\n    }\n    getImage(content){\n        let element = document.createElement('img');\n        element.setAttribute('src', content.src);\n        element.setAttribute('alt', content.alt);\n        element.classList.add('someClass_3');\n        return element;\n    }\n    getArticle(content){\n        let element = document.createElement('article');\n        this.fillWrapperWithElements(element, content);\n        return element;\n    }\n    getSection(content){\n        let element = document.createElement('section');\n        this.fillWrapperWithElements(element, content);\n        return element;\n    }\n    fillWrapperWithElements(wrappingElement, contentAsArray){\n        for (let item of contentAsArray){\n            let element = elementFactory(item.type, item.content);\n            wrappingElement.appendChild(element);\n        }\n    }\n    elementFactory(type, content){\n        if (type === 'paragraph') return this.getParagraph(content);\n        if (type === 'headline') return this.getHeadline(content);\n        if (type === 'image') return this.getImage(content);\n        if (type === 'section') return this.getSection(content);\n        if (type === 'article') return this.getArticle(content);\n        throw new Error(type + ' is not supported');\n    }\n    placeContentInOutlet(outletCssSelector, content){\n        let outlet = document.querySelector(outletCssSelector);\n        this.fillWrapperWithElements(outlet, content);\n    }\n}\n</pre>                    \n<div class=\"note\">\nNow for some prototypes:\n</div>\n<pre>\nlet contentExample = [\n    {\n        type:'article',\n        content:[\n            {\n                type:'section',\n                content:[\n                    {\n                        type:'headline',\n                        content: 'Lorem ipsum:'\n                    },                    \n                    {\n                        type:'paragraph',\n                        content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.'\n                    },\n                    {\n                        type:'image',\n                        content: {\n                            src: '../public/lorem.jpg',\n                            alt: 'ipsum ipsum'\n                        }\n                    }\n\n                ]\n            }\n        ]\n    }\n]\n</pre>\n<div class=\"note\">\nAnd usage\n</div>\n<pre>\nlet creator = new ContentCreator();\ncreator.placeContentInOutlet('#outlet', contentExample1)\n</pre>\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"refactoring guru",href:"https://refactoring.guru/pl",description:"Tutorial"},{elementType:"Paragraph",content:"<i>Design patterns</i> by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides"}]}]},{summary:"singleton",title:"singleton",searchKeywords:"\n    ",cathegory:"DesignPatterns",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Singleton"},{elementType:"Paragraph",content:"\n                    A singleton is a creational design pattern, where the singleton object is an object that may have \n                    globaly only one instance. It may be useful in:\n                    "},{elementType:"UnsignedList",content:["An object returning a globaly unique id,","In a mediator pattern, where a mediator is an object passing information between application objects.\n                        An object may subscribe to the mediator to receive messages it is interested in,","Creating a global application state, like in Redux library,","Controling access to a shared resource,","Creating a proxy for communication with a DB,"]},{elementType:"Headline-2",content:"Understanding"},{elementType:"Headline-3",content:"Example: id getter"},{elementType:"Code",content:"\n                    <pre>\nfunction IdGetter(){\n    if (IdGetter.instance === undefined){\n        IdGetter.instance = this;\n        this.lastId = 0;\n        this.getLastId = function(){\n            return this.lastId\n        }\n        this.getNextId = function(){\n            return this.lastId += 1;\n        }\n    } else {\n        return IdGetter.instance\n    }\n}    \n\n\nlet get1 = new IdGetter();\nconsole.log('get1: ' + get1.getNextId()); // get1: 1\nconsole.log('get1: ' + get1.getLastId()); // get1: 1\nconsole.log('get1: ' + get1.getNextId()); // get1: 2\nlet get2 = new IdGetter();\nconsole.log('get2: ' + get2.getNextId()); // get2: 3\n                    </pre>\n\n        <div class=\"note\">And with prototype instead of a staic prop:</div>\n<pre>\nfunction IdGetter(){\n    let proto = Object.getPrototypeOf(IdGetter);\n    console.log(proto)\n    if (proto.instance === undefined){\n        proto.instance = this;\n        Object.setPrototypeOf(IdGetter, proto);\n        this.lastId = 0;\n        this.getLastId = function(){\n            return this.lastId\n        }\n        this.getNextId = function(){\n            return this.lastId += 1;\n        }\n    } else {\n        return proto.instance\n    }\n}\n\nlet get1 = new IdGetter();\nconsole.log('get1: ' + get1.getNextId()); // get1: 1\nconsole.log('get1: ' + get1.getLastId()); // get1: 1\nconsole.log('get1: ' + get1.getNextId()); // get1: 2\nlet get2 = new IdGetter();\nconsole.log('get2: ' + get2.getNextId()); // get2: 3\n                    </pre>\n        <div class=\"note\">\n        Works fine, but is a bit more complex\n        </div>\n\n        <div class=\"note\">And with classes:</div>\n<pre>\nclass IdGetter{\n    constructor(){\n        if (IdGetter.instance === undefined){\n            this.lastId = 0;\n            IdGetter.instance = this;\n        } else {\n            return IdGetter.instance\n        }\n    }\n    getLastId(){return this.lastId;}\n    getNextId(){return this.lastId += 1;}\n}\nlet get1 = new IdGetter();\nconsole.log('get1: ' + get1.getNextId()); // get1: 1\nconsole.log('get1: ' + get1.getLastId()); // get1: 1\nconsole.log('get1: ' + get1.getNextId()); // get1: 2\nlet get2 = new IdGetter();\nconsole.log('get2: ' + get2.getNextId()); // get2: 3\n\n</pre>\n\n                    "},{elementType:"Headline-3",content:"Example: mediator"},{elementType:"Code",content:"\n<pre>\nclass Mediator{\n    constructor(){\n        if (Mediator.instance === undefined){\n            Mediator.instance = this;\n            this.subscribers = []\n        } else {\n            return Mediator.instance;\n        }\n    }\n    subscribe(informationType, subscriberUniquId, subscribersCb){\n        let entry = {\n            subscriberId: subscriberUniqueId,\n            subscripiton:{\n                informationType: informationType,\n                cb: subscribersCb\n            } \n        }\n        let subscriber = this.getExistingOrNewSubscriber(subscriberUniqueId);\n        subscriber.subscriptions.push(entry.subscription)\n    }\n\n    unsubscribe(informationType, subscriberUniqueId){\n        let subscriber = _getSubscribersIndex(subscriberUniqueId);\n        if (subscriber !=== -1){\n            this.subscribers.splice(subscriber, 1);\n        }\n    }\n\n    inform(infoType, data){\n        for (let subscriptions of this.subscriber){\n            this._informSingleSubscriberIfInterested(subscriptions, infoType, data)\n        }\n    }\n\n    _informSingleSubscriberIfInterested(subscriptions, infoType, data){\n        for (let sub of subscriptions){\n            if (sub.informationType === infoType){sub.cb(data)}\n        }\n    }\n\n    getExistingOrNewSubscriber(subscriberUniqueId){\n        let sub = getSubscriber(subscriberUniqueId);\n        if (sub === null){\n            let newSub = {\n                id: subscriberUniqueId,\n                subscriptions: []\n            }\n            this.subscribers.push(newSub)\n            sub = newSub;\n        }\n        return sub;\n    }\n\n    _getSubscribersIndex(subscriberUniqueId){\n        let id = this.subscribers.findIndex((item, index)=>{\n            if(item.subscriberId === subscribersUniqueId) return true;\n            return false\n        })\n        return id;\n    }\n\n    getSubscriber(subscriberUniqueId){\n        let id = this._getSubscribersIndex(subscriberUniqueId);\n        return id === -1 ? null : this.subscribers[id]\n    }\n}\n</pre>                    \n<div class=\"note\">\n    Above class is a mediator class, allowing to subscribe to certain type of messages, and infor all \n    subscribers that are subscribed to the certain type of messages. There is a possiblity to subscribe to the \n    same type of messages with the same callback multiple times, but a subscription may be done with different \n    function contexts... Need to be careful or modify this class. Example usage case:\n</div>\n<pre>\nclass Subscriber{\n    constructor(){\n        this.uniqueId = Date.now().toString(36) + Math.random().toString(36).substring(2);\n        // To guarantee this is unique, a singleton pattern should be used\n        this.mediator = new Mediator();\n        this.mediator.subscribe('informMeAbout..', this.uniqueId, doSomething.bind(this))\n    }\n    doSomething(data){\n        this.data = data;\n    }\n}\n\nclass DataProvider(){\n    constructor(){\n        this.uniqueId = Date.now().toString(36) + Math.random().toString(36).substring(2);\n        // To guarantee this is unique, a singleton pattern should be used\n        this.mediator = newMediator(); \n        this.mediator.infor('informMeAbout..', 'I am created')\n    }\n    unsubscribe(){\n        this.mediator.unsubscribe('informMeAbout..', this.uniqueId)\n    }\n}\n</pre>\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"refactoring guru",href:"https://refactoring.guru/pl",description:"Tutorial"},{elementType:"Paragraph",content:"<i>Design patterns</i> by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides"}]}]},{summary:"decorator",title:"Decorator design pattern",searchKeywords:"\n    ",cathegory:"DesignPatterns",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Decorator design pattern"},{elementType:"Paragraph",content:"\n                    The decorator design pattern is a <strong>structural</strong> type of a design pattern. \n                    Sturctural patterns make it possible to bind, communicate objects in a most possible flexible way.\n                    "},{elementType:"Paragraph",content:"\n                    The decorator is often referred to as a <strong>wrapper</strong> because it wraps the given \n                    element. Without changing the original object, it adds some extra functionality.\n                    "},{elementType:"Paragraph",content:"\n                    It may be used for:\n                    "},{elementType:"UnsignedList",content:["Wrapping a HTMLElement (component) in another HTML wrapper (example 1),","Adding a functionality to a function (example 2),","Extending a class, changing class in some way,","Adding some functionality to a parameter or attribute. For example, it could change \n                        a parameter descriptor (sealing an object given as an argument),","Great for extracting a functionality that may be applied to a lot of functions, classes etc.\n                        Please see example 2. There is a performance measurement functionality that may be applied to \n                        a lot of functions. A good example of a decorator, as it does not change measured object, but\n                        adds extra performance measurement. Thanks to usage of the decorator pattern, this may be applied\n                        to a lot more functions without repeating the code."]},{elementType:"Paragraph",content:"\n                    In JS there is no support for decorators at the moment (like in TS, Python). There is only \n                    an experimental feature that may not be safely used in the production. However, the \n                    design pattern may be used without a decorator syntax (<code>@someDecorator wrappedObject</code>), as \n                    any function or parameter may be wrapped in a function in JS (<code>someDecorator(wrappedObject)</code>).\n                    "},{elementType:"Paragraph",content:"\n                    There is a decorator syntax support in TS. It is still described as experimental (01.02.2022). However,\n                    a lot of production code already uses it (for example Angular). It may be assumed that it is already\n                    safe to use.\n                    "},{elementType:"Headline-2",content:"Understanding"},{elementType:"Headline-3",content:"Example 1: HTML element wrapper."},{elementType:"Paragraph",content:"\n                        It is common to wrap an HTMLElement inside another element. For example, \n                        put an element inside a modal, or in a wrapper that would limit large elements size and add\n                        overflow to them. Sometimes it is needed to wrap an element inside different wrappers \n                        with different behavior.\n                    "},{elementType:"Paragraph",content:"\n                        Below solution uses custom web components to create a wrapper. A slot may be used to \n                        display one element inside another. However, if slot is used, the actual element will be \n                        in DOM tree not directly where the slot outlet is placed, but in the neighbourhood.\n                        Wrapped element may be placed as a child of the wrapper, \n                        (<code>&lt;wrapper>&lt;wrapped>&lt;/wrapped>&lt;wrapper></code>), the inner html of the \n                        wrapper would be taken by the CWC logic, and placed inside shadow DOM. Then a mutation\n                        observer may be used to watch for innerHTML of the CWC change. However, this solution \n                        is not described in any tutorial, and would be probably not recommended.\n                    "},{elementType:"Paragraph",content:"\n                        In most cases however JS is used anyway to place the content, so an <code>addWrappedContent</code>\n                        method was added to the Modal class. It is given one argument, and element that will be wrapped.\n                    "},{elementType:"Code",content:"\n                    <div class='note'>\n                        Let's create a dummy element that will be wrapped in the modal element\n                    </div>\n<pre>\nclass WrappedComponent extends HTMLElement {\n    constructor(){\n        super();\n        this.attachShadow({mode:'open'});\n        let template = document.createElement('template');\n        template.innerHTML = this.getWrappedContent(this.getText());\n        let content = template.content.cloneNode(true);\n        this.shadowRoot.appendChild(content);\n    }\n    getWrappedContent(text){\n        return `\n        &lt;style>\n            .wrapped-wrapper{\n                position:relative;\n                width:200px;\n                padding: 10px;\n                background-color:#999;\n                color:white;\n            }\n        &lt;/style>\n        &lt;div class=\"wrapped-wrapper\">\n            ${text}\n        &lt;/div>\n        `\n    }\n    getText(nrOfRepetitions = 100){\n        let output = '';\n        for (let i = 0; i < nrOfRepetitions; i++){\n            output += 'Lorem ipsum'\n        }\n        return output;\n    }\n}\n\nwindow.customElements.define('wrapped-element', WrappedComponent);\n</pre>                   \n\n<div class='note'>\n    Now let's create a <code>element-wrapper</code> - a modal that displays the wrapped content\n</div>\n<pre>\nclass Modal extends HTMLElement {\n    constructor(){\n        super();\n        this.attachShadow({mode:'open'});\n        let template = document.createElement('template');\n        template.innerHTML = this.getHTMLAsString();\n        this.shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n    getHTMLAsString(){\n        return `\n        &lt;style>\n            .shutter{\n                position:absolute;\n                width: 100vw;\n                height: 100vh;\n                background-color: rgba(50,100,50,0.5);\n                left:0; top:0;\n            }\n            .content-outlet{\n                position:relative;\n                display: inline-block;\n                top:50%;\n                left:50%;\n                transform: translate(-50%,-50%);\n                height: 200px;\n                overflow: auto;\n            }\n        &lt;/style>\n        &lt;div class=\"shutter\">\n            &lt;div class=\"content-outlet\">\n                \n            &lt;/div>\n        &lt;/div>\n        `\n    }\n    addWrappedContent(htmlElement, uniqueId = null){\n        let outlet = this.shadowRoot.querySelector('.content-outlet');\n        if (uniqueId !== null) htmlElement.id = uniqueId;\n        outlet.appendChild(htmlElement);\n    }\n    removeWrappedContent(uniqueId){\n        let element = this.shadowRoot.querySelector('#' + uniqueId);\n        this.shadowRoot.removeChild(element);\n    }\n}\n\nwindow.customElements.define('element-wrapper', Modal);\n</pre>\n<div class=\"note\">\n    And functions placing the element in the element with class <code>outlet</code>\n</div>\n<pre>\nfunction getElementInModal(itemToWrap){\n    \n    let modal = document.createElement('element-wrapper');\n    modal.addWrappedContent(itemToWrap);\n    return modal;\n}\n\nfunction placeWrappedElement(){\n    let wrappedElement = document.createElement('wrapped-element');\n    let outlet = document.querySelector('.outlet');\n    let modal = getElementInModal(wrappedElement);\n    outlet.appendChild(modal);\n    outlet.appendChild\n}\nplaceWrappedElement();\n</pre>\n                    "},{elementType:"Headline-3",content:"Example 2: Wrapping a function"},{elementType:"Paragraph",content:"\n                        If there is a common functionality such as calculating function performance, or logging \n                        something before  and after the function execution, it is a good idea to extract this \n                        functionality to a decorator class. In this way the original class will not be modified, and \n                        the functionality may be applied to more than just one function.\n                    "},{elementType:"Paragraph",content:"\n                        Below example shows a <code>decorateClass</code>, taking a target class and a \n                        function that is the decorator. It returns an extended class that has the \n                        decorator function applied to each prototype method.\n                    "},{elementType:"Paragraph",content:"\n                        The <code>decoratorFunction</code> should return a result.\n                    "},{elementType:"Code",content:"\n<div class=\"note\">\n    Below is a sample test class that will be wrapped (a target of the decorator). The target class creates an array\n    of elements from 1 to the number given as a constructor argument, and supports methods for calculating a \n    multiplication of all number from the array, sum of all elements in array and the rest of all elements of the array.\n    Perhaps not a very practical example, but does a lot of operations, so the measured performance is greater than 0.\n</div>             \n<pre>\nclass decoratorTest{\n    constructor(nr){\n          this._createArray(nr);\n    }\n    _createArray(nr){\n        let outlet = [];\n        for(let i = 1; i <= nr; i++){\n            outlet.push(i);\n        }\n        this.arr = outlet;\n    }\n    operationFacotry(){\n        return {\n            sum: function(prevItem, item, index){\n                return prevItem += item;\n            },\n            multiply: function(prevItem, item, index){\n                return prevItem *= item;\n            },\n            rest: function(prevItem, item, index){\n                return prevItem %= item;\n            },\n        }\n    }\n    makeOperation(type){\n        let fun = this.operationFacotry()[type];\n        return this.arr.reduce(fun)\n    }\n    multiply(){return this.makeOperation('multiply')}\n    sum(){return this.makeOperation('sum')}\n    rest(){return this.makeOperation('rest')}\n}\n</pre>           \n<div class=\"note\">\nNow the generic <code>decorateClass</code> function, taking a class that methods will be decorated, and a \nfunction that will wrap each target class method:\n</div>\n<pre>\nfunction decorateClass(target, decoratorFunction = (targetMethod)=>{return targetMethod}){\n    class Extended extends target{\n        constructor(props){\n            super(props);\n        }\n    }\n    let targetProto = Object.getPrototypeOf(Extended.prototype);\n    let keys = Object.getOwnPropertyNames(targetProto);\n    let targetMethods = [];\n    for (let key of keys){\n        if (key !== '__proto__'){\n            targetMethods.push({\n                name: key,\n                body: targetProto[key]\n            })\n        }\n    }\n    for(let method of targetMethods){\n        Extended.prototype[method.name] = decoratorFunction(method.body);\n    }\n    return Extended;\n}\n</pre>\n<div class=\"note\">\n    And the decorator function: calculates performance of wrapped function:\n</div>\n<pre>\nfunction measurePerformance(method){\n    let startTime = performance.now();\n    let methodResult = method\n    let endTime = performance.now();\n    console.log(`performance of : ${method.name} = ${endTime - startTime}`);\n    return methodResult;\n}\n</pre>\n<div class=\"note\">\n    Let's call decorated class:\n</div>\n<pre>\nlet calssWithPerformance = decorateClass(decoratorTest, measurePerformance);\nlet testInstance = new calssWithPerformance(100);\nconsole.log(testInstance.multiply());\nconsole.log(testInstance.sum());\n</pre>\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"refactoring guru",href:"https://refactoring.guru/pl",description:"Tutorial"},{elementType:"Paragraph",content:"<i>Design patterns</i> by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides"}]}]}];var Lo={summary:"angular start",title:"start",searchKeywords:"angular filesystem e2e src .editorconfig .tigignore angular.json browserlslist karma.conf.js package-lock.json package.json\n    README.md tsconfig.app.json tsconfig.json tsfoncig.spec.json app-routing.module.js component.css spec favicon index.html\n    mailn.ts pol.ifills.js sytles.css test.ts install serve start ng generate component g c d p s service\n    ",cathegory:"angular",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Angular how to start"},{elementType:"Headline-3",content:"What is Angular"},{elementType:"Paragraph",content:"\n                    \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-3",content:"Installation and basic commands"},{elementType:"UnsignedList",content:["<code>npm install -g @angular/cli@latest</code> a node package manager needs to be installed to\n                        run this, a global (-g) installation of the angular cli (command line interface). Global installation\n                        means, that it will be available everywhere on our machine, not just in a project folder,","<code>ng -version</code>: the version of the angular CLI,","<code>ng new myFirstApp</code> creates a proect folder, arranges the filesystem ,installs and configures\n                        typeScript, installs librarios and dependencies, install Karma and Protractor for testing,","<code>ng serve</code>: this runs a server and lauches the project. It is being observerd if files are saved. \n                        Every change saved to a file\n                        makes browser view change to line up with this change. Available under http://localhost:4200/","<code>ng generate </code> an angular CLI command for generating objects. \n                        <ul>\n                        Adds dependencies to the \n                            app.modules.ts. To have a new component in a folder, input path before the component name,</li>\n\n                        <li><code>path/pipe</code>: creates a new pipeline file and its test .spec.pipe.ts file in the directory described as path</li>\n                        <li><code>app-shell</code></li>\n                        <li><code>application</code></li>\n                        <li><code>class path/className</code>: creates a new class file, and a .spec.ts file for testing the created class.\n                            The class is not added to any dependencies,\n                        </li>\n                        <li><code>path/component</code>: creates a new component: a .component.html, .component.css, .componentts and .component.spec.ts. \n                        <li><code>path/directive</code>: \n                            creates a new directive file, a spec.ts file, adds dependencies to the app.modules.ts. To have the directive in a \n                            specified folder, give a <code>path/</code> before its name like in the example.\n                        </li>                        \n                        <li><code>enum</code></li>\n                        <li><code>guard</code></li>\n                        <li><code>interceptor</code></li>\n                        <li><code>interface</code></li>\n                        <li><code>library</code></li>\n                        <li><code>module moduleName</code> generates a new folder for the module and its .module.ts file</li>\n                        <li><code>resolver</code></li>\n                        <li><code>service</code> generates a new service .service.ts file and its .servicespec.ts test file, \n                            injects dependencies (will be listed in the app.component.ts)</li>\n                        <li><code>service worker</code>: is for creating a new service worker, will also install the service mosule if needed\n                        and create a ngsw-config.json configuration file</li>\n\n                        <li><code>web-worker</code></li>\n                        </ul>\n                        ","<code>ng g c</code>: short for <code>ng g component</code>, <code>ng generate component</code>","<code>ng g s</code>: short for <code>ng generate service</code>","<code>ng g p</code>: short for <code>ng generate pipe</code>","<code>ng g d</code>: short for <code>ng generate directive</code>"]}]},{elementType:"Article",content:[{elementType:"Headline-3",content:"Filesystem"},{elementType:"HiddenList",content:[{title:"e2e",label:"end to end tests",content:[{title:"src",label:"developed application",content:[{title:"app.e2e-spec.ts",label:"",content:[]},{title:"app.po.ts",label:"",content:[]}]},{title:"protractor.conf.json",label:"protractor e2e testing tool configuration file,",content:[]},{title:"tsconfig.e2e.json",label:"e2e tests configuration file,",content:[]}]},{title:"src",label:"source - actual application that is being developed",content:[{title:"app",label:"application. All components, classes, modules, pipes, directives, services \n                                    used in the application will be here",content:[{title:"app-routing.module.ts",label:"angular module that is responsible for routing,",content:[]},{title:"app.component.ts",label:"the main application component .ts file. Contains variables that are binded, Should not containing any logic",content:[]},{title:"app.component.html",label:"the component markup, a html that is recognized only by angular (due to directives), describes the component content,",content:[]},{title:"app.component.spec.ts",label:"component tests",content:[]},{title:"app.component.css",label:"the extension may be different, as it may be scss for instance. This is the styling applied <b>only</b> to this component, no child components, no other components",content:[]},{title:"app.module.ts",label:"The main application moudle",content:[]}]},{title:"assets",label:"Here all the files that need to be publicly available like images, audio files are stored.",content:[{title:".gitkeep",label:"This file should exist only if assets is an empty folder, in \n                                            order to keep it in the git repository. GIT will keep a folder in repo only if it is\n                                            not empty",content:[]}]},{title:"environments",label:"Angular app may be build using different environmental settings. For example, a development environment, \n                                    a production, or some custom one. The <code>ng build</code> command may create a ready for deployment \n                                    version using a specified environment settings. The <code>envName</code> may be imported to the app component\n                                    and used for different application behavior. Environment names should be mapped to specific files form the environment\n                                    folder in the <code>.angular.cli.json</code> file",content:[{title:"environment.ts",label:"This is the file with the development environment specific variables,",content:[]},{title:"environment.prod.ts",label:"This is the file with the production environment specific variables,",content:[]},{title:"environment.custom.ts",label:"This is the file with the custom environment specific variables.\n                                            It may not exist.",content:[]}]},{title:"favicon.ico",label:"icon that will be displayed in the borwser tab,",content:[]},{title:"index.html",label:"An html file that has an <code>&lt;app-root>&lt;/app-root></code> tag, for loading the main app component",content:[]},{title:"main.ts",label:"A file for bootstraping the application,"},{title:"polyfills.ts",label:"A file with polyfills,"},{title:"styles.scss",label:"A file for global styling, available in the whole application,"},{title:"test.ts",label:"A required by karma file that loads recursively all the .spec and \n                                    framework files."}]},{title:"dist",label:"A destination folder, where the complied version of our application will be placed,",content:[]},{title:"node_modules",label:"All files that are needed for angular to create our application, build it and run the server.\n                            They should never be added to the git repository",content:[]},{title:".browserlistrc",label:"A list of browsers that our application will support. It may be significant to add some polifills and \n                            css browser specific stylings",content:[]},{title:".editorconfig",label:"A file for IDE configuration (for example VSC). Indention sized, charsets, type of quotes,\n                            trimming white spaces, etc.",content:[]},{title:".gitignore",label:"A git specific file. A list of all folders and files that will not be the part of the repository,",content:[]},{title:"angular.json",label:"Angular specific settings: file location, component styling warning and error sizes, test configuration \n                            (location of karma config file, ts config file for tests, polifills for tests...)",content:[]},{title:"karma.conf.js",label:"Module for configuring karma testing environment, importing plugins ...",content:[]},{title:"ngsw-config.json",label:"service worker configuration",content:[]},{title:"package.json",label:"Stores information about npm command aliases used to start, build, watch, test application. \n                            Stores information about versions of packages needed to compile and run the application. Should be kept in the\n                            git repository, as this file is necessary to recreate the application development environment.",content:[]},{title:"package-lock.json",label:"Keeps the complete tree of dependencies needed to recreate the application development\n                            environment, when it is pulled from the repository. Each package needed for the application to run\n                            may have its own list of dependencies, and may require exact version of some other package. \n                            This file is needed to be sure all dependencies are met. It should be kept in the git repository.",content:[]},{title:"README.md",label:"A project documentation, a mark down format document that describes the project,",content:[]},{title:"tsconfig.json",label:"A typeScript configuration file, describing all the ts compiler specific behavior",content:[]},{title:"tsconfig.spec.json",label:"A typeScirpt configuration file, with settings specific for tests",content:[]}]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"angular.io",href:"https://angular.io/cli/generate",description:"ng generate command documentation"},{elementType:"Link",content:"tattoocoder.com",href:"https://tattoocoder.com/angular-cli-using-the-environment-option/",description:"environments"}]}]};var Do={summary:"angular components",title:"Angular components",searchKeywords:"\n\n    ",cathegory:"angular",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Components in angular"},{elementType:"Paragraph",content:"\n                    A component is an encapsulated web page element that has its view and logic. Component may be a button,\n                    or a bigger creation consisting of more components. Example components are:\n                    a menu, a button, a form, a header, a card, a paragraph...\n                    "},{elementType:"Paragraph",content:"\n                    The important part about the component is that is should be encapsulated away from other components. \n                    The component may have its own state. If it does, it should control it. Components parent should communicate\n                    with the component with a usage of properties, and the component should communicate with the parent with \n                    events. It is not allowed for the component to change its own properties.\n                    "},{elementType:"Paragraph",content:"\n                    The component should control its internal state, but if it shares some state with other components, it may be \n                    wise to pull this part of the state up, so the state is controlled by the first parent of the components the \n                    state is common for.\n                    "},{elementType:"Paragraph",content:"\n                    It may be chosen to introduce a mediator pattern for the communication between components, or a common state \n                    for (also a mediator pattern) for the whole application. This may be a good approach if the application is \n                    larger and pulling the states up is too much work.\n                    "},{elementType:"SmallHeadline",content:"\n                    In angular\n                    "},{elementType:"UnsignedList",content:["A component consists of 4 files:\n                            <ul>\n                            <li><code>some.component.html</code>: A content of the component in the html, this file \n                            is not understandable by the browser, as it may contain bindings, directives and pipes,</li>\n                            <li><code>some.component.ts</code>: a typeScript file for controlling the component state.\n                            No logic should be placed here. Services, directives and pipes are for that.</li>\n                            <li><code>some.component.spec.ts</code>: this is a file with component tests. Only \n                            bindings should be tested here. Logic should be tested in services and directives files. All \n                            logic should be mocked,</li>\n                            <li><code>some.component.scss</code>: a style file. May be css. This style is encapsulated, \n                            will be available only in this component,</li>\n                            </ul>\n                            "]},{elementType:"SmallHeadline",content:"\n                    An example\n                    "},{elementType:"Paragraph",content:"\n                        A real life example from my tic-tac-toe game. A navigation menu.\n                    "},{elementType:"UnsignedList",content:["<code>contentDict</code> is an input passed to the component as a prop,","<code>contentShouldBeSwitched</code> is an output, an event informing the parent that \n                        a button within this component was clicked,",'<code>[name]="title"</code>: is a one side binding passing the title to the \n                        <code>navi-button</code> component as prop,',"<code>[isActive]:shouldThisButtonBeActive(title)</code>: passes the result of the \n                        <code>shouldButtonTeActive</code> function to the <code>isActive</code> property of the \n                        <code>navi-button</code> component,",'<code>(activeStateSet) = "handleButtonWantsToBeActive($event)"</code> is a one way event\n                        binding. If <code>activeStateSet</code>, an event defined in the <code>navi-button</code> \n                        component, is triggered, the <code>handleButtonWantsToBeActive</code> will be called with the \n                        <code>title</code> as the parameter. The <code>handleButtonWantsToBeActive</code> function\n                        emits the <code>contentShouldBeSwitched</code> event, informing the navigation-menu parent that\n                        a button inside the navigation menu was clicked,','<code>&lt;navi-button *ngFor="let title of getKeysFromDict()" [uniqueId] = "title">&lt;navi-button></code>:\n                        runs a build-in <code>ngFor</code> directive. This <code>navi-button</code> element will be \n                        repeated for each element returned by the <code>getKeysFromDict()</code> function call,',"<code>selector: 'navigation-menu'</code> is the tag of the component definition, this component \n                        will be referred in the html as the <code>&lt;navigation-menu</code>","<code>templateUrl<code>: is the path to the html template for this component,","<code>styleUrls</code> is an array of files describing the style of the component. This styles will\n                        be applied <b>only</b> to this component, and will be transparent in the rest of the application,"]},{elementType:"Code",content:'\n                    <div class="note">\n                    <b>HTML</b>\n                    </div>\n<pre>\n&lt;div class="navigation-menu">\n    &lt;navi-button *ngFor="let title of getKeysFromDict()" [uniqueId] = "title"\n            [name] = "title" \n            [isActive] = "shouldThisButtonBeActive(title)"\n            (activeStateSet) = "handleButtonWantsToBeActive($event)">\n    &lt;/navi-button>\n&lt;/div>\n</pre>          \n\n                    <div class="note">\n                    <b>component.ts</b> file\n                    </div>\n<pre>\nimport { Component, Input, Output, EventEmitter, HostListener } from \'@angular/core\';\n\n@Component({\n  selector: \'navigation-menu\',\n  templateUrl: \'./navigation-menu.component.html\',\n  styleUrls: [\'./navigation-menu.component.css\']\n})\nexport class NavigationMenuComponent implements OnInit {\n  @Input() contentDict: {[title: string]: string} = {};\n  @Output() contentShouldBeSwitched = new EventEmitter<string>();\n  Input() currentActiveButton: string = this.getKeysFromDict()[0];\n  constructor() { }\n\n  handleButtonWantsToBeActive(data: any){\n    this.contentShouldBeSwitched.emit(data)\n    this.currentActiveButton = data\n  }\n\n  getKeysFromDict(){\n    return Object.keys(this.contentDict)\n  }\n\n  shouldThisButtonBeActive(id: string){\n    return id == this.currentActiveButton;\n  }\n\n}\n</pre>               \n                    '},{elementType:"SmallHeadline",content:"@Component decorator"},{elementType:"Paragraph",content:"\n                    A decorator is a design pattern, where an additional functionality is added to the \n                    function, parameter, class by wrappling the target in an additional function. So the \n                    <code>@Component</code> is a function, taking some parameters. It adds functionalities \n                    to the class, and makes an angular component form that class. It accepts below properties, and \n                    even more (refer to the documentation in the reference section)\n                    "},{elementType:"UnsignedList",content:["<code>changeDetection?</code> the change-detection strategy for the component,","<code>templateUrl?</code> or <code>template</code>: the first parameter is for the \n                        url to the html template that will be used to build the component. If it is not present, then\n                        the <code>template</code>, the inline html template for the component should be provided,","<code>styles</code> or/and <code>styleUrsl</code>: urls or inline style arrays to be applied\n                        only to this component,","<code>animations?</code>: animation triggers,","<code>encapsulation?</code>: encapsulation policy:\n                        <ul>\n                        <li><code>ViewEncaplusation.Emulated</code>: default, emulate shadowDOM for styling,</li>\n                        <li><code>ViewEncapsulation.None</code>: the component styles will be applied globally, without\n                        any encapsulation</li>\n                        <li><code>ViewEncapsulatoin.ShadowDom</code>: encapsulation for the styling will be applied \n                        in the shadow DOM</li>\n                        </ul>\n                        "]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"angular.io",href:"https://angular.io/guide/component-overview",description:"component overview"},{elementType:"Link",content:"angular.io",href:"https://angular.io/api/core/Component",description:"@Component decorator"},{elementType:"Link",content:"angular.io",href:"https://angular.io/guide/animations",description:"Animations guide"}]}]};var Ro={summary:"angular bindings",title:"Angular bindings",searchKeywords:"\n\n    ",cathegory:"angular",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Bindings in angular"},{elementType:"Paragraph",content:"\n                    Binding is for keeping the view of the component aligned with the component state. Works with\n                    properties of DOM elements, components and directives. Not with HTML attributes.\n                    "},{elementType:"UnsignedList",content:["<code>id</code> is an example of the DOM property having 1:1 mapping with the html attribute,","<code>aria-</code> have no corresponding DOM property,","<code>textContent</code> or <code>innerHTML</code> are DOM properties havind no corresponding \n                        attributes,"]},{elementType:"Paragraph",content:"\n                    There is the <code>attributes</code> parameter in DOM elements, so the attributes in angular may be \n                    bidned with the <code>[attr.disabled] = \"condition\" ? 'disabled' :null</code>\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Types of bindings"},{elementType:"SmallHeadline",content:"\n                    Property bindings\n                    "},{elementType:"Paragraph",content:'\n                    <code>[targetProperty]="expression"></code> binds the expression to the property of the element.\n                    Expression may use variables defined in the component. Each time the value to which the expression\n                    evaluates changes, the targetProperty will also be modified and send to the child component. In this case \n                    the view will be aligned with the state chenge.\n                    '},{elementType:"Paragraph",content:'\n                    <code>&lt;span contenteditable [innerHTML]="variable">&lt;/span>: if the <code>innerHTML</code>\n                    value changes, the <code>variable</code> will not be changed, as this is the one way binding.\n                    '},{elementType:"Code",content:'\n<pre>\n&lt;img [src] = "imageUrl" [alt] = "imageAlternativeText">\n</pre>\n<pre>\n&lt;game-board-field [displayedFigure]="currentFigure"></game-board-field>\n</pre>                    \n                    '},{elementType:"Paragraph",content:"\n                    Binding style, class or attribute is similar to the property binding.\n                    "},{elementType:"Code",content:'\n<pre>\n&lt;div [style.color]="divColor"></div>\n</pre>\n<pre>\n&lt;button [attr.aria-label] = "some label">some button&lt;/button>\n</pre>\n<pre>\n&lt;span [class.some-class] = "isSomeClass">&lt;/span>\n</pre>\n\n                    '},{elementType:"SmallHeadline",content:"\n                    Text binding\n                    "},{elementType:"Paragraph",content:"\n                    This will not work with properties, only a text one way binding:\n                    "},{elementType:"Code",content:'\n<pre>\n&lt;div [innerHTML]="divContent">&lt;/div>\n</pre>\n<pre>\n&lt;div>{{divContent}}</div>\n</pre>\n\n                    '},{elementType:"SmallHeadline",content:"\n                    Event bindings\n                    "},{elementType:"Paragraph",content:'\n                    <code>[eventOnChild]="onEventHandler($event)"</code> binds the eventOnChild event known to the \n                    child component, with the <code>onEventHandler</code> function call. The <code>$event</code> is the \n                    event that will be passed as an argument to this event handler. This is an one way biniding, infroming\n                    a parent that something happend in the child component. \n                    '},{elementType:"Code",content:"\n                    <div class=\"note\"><b>A child component</b>: HTML</div>\n                    <pre>\n&lt;div class=\"button\">{{name}}&lt;/div>\n                    </pre>\n                    <div class=\"note\"><b>A child component</b>: .ts</div>\n                    <pre>\nimport { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n    selector: 'some-button',\n    templateUrl: './some-button.component.html',\n    styleUrls: ['./some-button.component.scss']\n})\nexport class SomeButtonComponent {\n    @Input() name: string = '';\n    constructor() { }\n}\n                           \n</pre>\n\n                    <div class=\"note\"><b>A parent component</b>: HTML</div>\n<pre>\n&lt;div class=\"button-wrapper\">\n    &lt;some-button *ngFor=\"let buttonName of buttons\n        [name] = \"buttonName\"\n        (click) = \"handleButtonClicked($event, buttonName)\"\n    >\n    &lt;/some-button>\n&lt;/div>\n</pre>\n                    <div class=\"note\"><b>A parent component</b>: .ts</div>\n<pre>\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'some-button-menu',\n  templateUrl: './some-button-menu.component.html',\n  styleUrls: ['./some-button-menu.component.scss']\n})\nexport class SomeButtonMenuComponent {\n  @Input() buttons: string[] = [''];\n  @Output() buttonClicked = new EventEmitter();\n  constructor() { }\n\n  handleButtonClicked(data:any, buttonN:string){\n      console.log(`Button ${buttonN} was clicked`)\n      this.buttonClicked.emit(buttonN);\n  }\n}      \n</pre>\n\n\n            <div class = \"note\"><b>some-button-menu host</b> HTML</div>\n<pre>\n&lt;div>\n    &lt;some-button-menu \n        [buttons]=\"myButtonList\" \n        (buttonClicked)=\"handleButtonWasClicked($event)\"\n    >\n    &lt;/some-button-menu>\n    &lt;p>Last clicked button is {{lastButton}}&lt;/p>\n&lt;/div>\n</pre>\n\n\n            <div class = \"note\"><b>some-button-menu host</b> .ts</div>\n<pre>\nimport { Component, OnInit, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'menu-parent',\n  templateUrl: './menu-parent.component.html',\n  styleUrls: ['./menu-parent.component.scss']\n})\nexport class MenuParentComponent {\n  @Output() buttonClicked = new EventEmitter();\n  lastButton: string = ''; // initial value\n  myButtonList = ['b 1', 'b 2', 'b 3'];\n  constructor() { }\n\n  handleButtonWasClicked(data:any){\n      console.log(`Button ${data} was clicked`)\n      this.lastButton = data;\n      this.buttonClicked.emit(data); // inform parent\n  } \n}     \n</pre>            \n                    "},{elementType:"SmallHeadline",content:"\n                    Two way binding\n                    "},{elementType:"Paragraph",content:'\n                    Two way binidng may be achieved in 2 ways: with property and event binding \n                    used on the same element at the same time (good for binding a value in HTMLElement with the \n                    state), and with the two way binding syntax <code>[(someProp)]="variable"</code>.\n                    The second method may be used only with components, as there must be an event emiter defined.\n                    The first method may be used with the non component HTML elements.\n                    '},{elementType:"SmallHeadline",content:"\n                    Example 1: binding in 2 steps: HTMLElements\n                    "},{elementType:"Code",content:'\n                    <div class="note">HTML template</div>\n<pre>\n&lt;span contenteditable="true" class="editable" (blur)="changeValue1($event)" [innerText]="value1">&lt;/span>\n</pre> \n<div class="note">.ts file</div>\n<pre>\nexport class SomeComponent implements ... {\n    value1: string = \'\';\n\n    changeValue1(e:any){\n        this.value1 = e.target.innerText;\n      }\n}\n</pre>                     \n                    '},{elementType:"SmallHeadline",content:"\n                    Example 2: binding in 2 steps: components\n                    "},{elementType:"Code",content:'\n                    <div class="note">HTML template Child component</div>\n<pre>\n&lt;div class = "wrapper">\n    &lt;div>\n        &lt;span contenteditable="true" class="editable" \n            (blur)="changeValue1($event)" \n            [innerText]="value1"\n        >\n        &lt;/span>\n    &lt;/div>\n&lt;/div>\n<pre>\n<div class="note">.ts file for Child component</div>\nexport class ChildComponentComponent implements OnInit {\n    private _value1:any = \'\';\n    get value1(){return this._value1}\n\n    constructor() { }\n  \n    @Input() set value1(val:any){\n      this._value1 = val;\n      this.value1Change.emit(val)\n    }\n    @Output() value1Change = new EventEmitter<any>();\n  \n    changeValue1(e:any){\n      console.dir(e)\n      this.value1 = e.target.innerText;\n      this.value1Change.emit(this.value1)\n    } \n  }\n</pre>\n        <div class="note">HTML template Parent component. The value1 is not only bound with the \n        text box, but also with a child element.</div>\n<pre>\n&lt;span contenteditable="true" class="editable" (blur)="changeBox1Value($event)" [innerText]="value1">&lt;/span>\n&lt;binding-child-component [value1]="value1" (value1Change)="changeValue1($event)">&lt;/binding-child-component>\n</pre>      \n        <div class="note">.ts file for Parent component</div>\n<pre>\nexport class ParentComponentComponent implements OnInit {\n    value1:any = \'\';\n  \n    changeValue1(e:any){\n      if (e !== undefined) this.value1 = e;\n    }\n    changeBox1Value(e:any){\n      if (e.target !== undefined) this.value1 = e.target.innerText;    \n    }\n    constructor() { }\n  }\n</pre>        \n\n                    '},{elementType:"SmallHeadline",content:"\n                    Example 3: Biniding component with the 2 way binding syntax\n                    "},{elementType:"Code",content:'\n                    <div class="note">A HTML for child component</div>\n<pre>\n&lt;div>\n    &lt;span class="label">Changing the value will cause parent to update:&lt;/span>\n    &lt;span contenteditable="true" class="editable" (blur)="changeValue1($event)" [innerText]="value1">&lt;/span>\n&lt;/div>\n\n</pre>\n                    <div class="note">A .ts file for child component</div>\n<pre>\nexport class ChildComponentComponent {\n    private _value1:any = \'\';\n    get value1(){return this._value1}\n  \n    constructor() { }\n  \n    @Input() set value1(val:any){\n      this._value1 = val;\n      this.value1Change.emit(val)\n    }\n    @Output() value1Change = new EventEmitter<any>();\n<div class="note note-danger">\nNOTE: If the @Input variable name is <b>value1</b>, then\nthe @Output variable name should be <b>value1Change</b>\nfor this binding to work.\n</div>\n    changeValue1(e:any){\n      console.dir(e)\n      this.value1 = e.target.innerText;\n      this.value1Change.emit(this.value1)\n    }\n  }\n</pre>\n                    <div class="note">A HTML for parent component</div>\n<pre>\n&lt;div>\n    &lt;span contenteditable="true" class="editable" (blur) = "changeBox2Value($event)">{{value2}}&lt;/span>\n    &lt;binding-child-component [(value1)]="value2">&lt;/binding-child-component>\n&lt;/div>\n</pre>\n                    <div class="note">A .ts file for parent component</div>\n<pre>\nexport class ParentComponentComponent implements OnInit {\n\n    value2:any = \'\';\n\n    changeBox2Value(e:any){\n      console.dir(e)\n      if (e.target !== undefined) this.value2 = e.target.innerText;    \n    }\n  \n    changeValue2(e:any){\n      this.value2 = e.data;\n      console.log(e)\n    }\n\n    constructor() { }\n  }\n</pre>\n                                        \n                    '}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"angular.io",href:"https://angular.io/guide/binding-syntax",description:"Overview of angular bindings,"}]}]};var Fo={summary:"angular forms",title:"Angular froms",searchKeywords:"\n    ngModel NgForm input from angular binding two direction way binding\n    ",cathegory:"angular",content:[{elementType:"Article",content:[{elementType:"Headline",content:"A from witn angular. More about binding."},{elementType:"ListOfContent",content:[{id:"ng-forms-about",title:"Forms module"},{id:"ng-forms-usage",title:"NgForms NgModel usage"},{id:"ng-forms-example",title:"Example: overview"},{id:"ng-forms-example-service",title:"Example: service with data"},{id:"ng-forms-css",title:"Styling angular froms"},{id:"ng-forms-summary",title:"Summary"},{id:"ng-forms-example-ts",title:"Example: file with logic"},{id:"ng-forms-example-HTML",title:"Example: HTML file"},{id:"ng-forms-important",title:"Binding: important"}]},{elementType:"Headline-3",content:"<span id='ng-forms-about'>Forms module</span>"},{elementType:"Paragraph",content:"When programming a GUI, there is a view: the object displayed on the screen, and the \n                    application state: the object representing the application in the application itself. The program\n                    works with the state object, and it has to update the view accordingly."},{elementType:"Paragraph",content:"The one way binding is when update of the state, changes the view, or when the \n                    change in the view changes the application state without the need to worry about detecting \n                    the change and updating this manually. The two-way binding is the situation, when \n                    update of the application state brings the update to the view, and the update to the view \n                    updates the state automatically."},{elementType:"Paragraph",content:"Two way binding is the most comfortable state, especially, when dealing with \n                    complicated creations like forms. The logic behind the forms may cause some changes to the \n                    form itself, when some fields are updated."},{elementType:"Paragraph",content:"Two way binding may be achieved by applying a parameter binding in the direction \n                    to the view, and applying an event handler to the view element to trigger the state change.\n                    This is the way it should be done when updating for example a common div element with \n                    <code>contenteditable</code> set to true. When communication between two angular components is \n                    considered, the two-way binding may be achieved by the two-way binding syntax. However, when \n                    dealing with common HTML elements the 2 one way bindings combined seem the only possible \n                    solution. There is no way to emit an event inside a common div element to apply the 2 way \n                    binding syntax."},{elementType:"SmallHeadline",content:"NgModel"},{elementType:"Paragraph",content:"It is however possible to apply the two-way binding to a build in HTML element \n                    with the help of an angular directive. This directive is <code>NgModel</code>. <code>NgModel</code>\n                    is declared in the <code>NgForm</code> directive. <code>NgForm</code> directive is applied to every\n                    <code>form</code> element, when only <code>FormsModule</code> is imported to the main application\n                    module:"},{elementType:"Code",content:"\n                    <div class=\"node\">app.module.ts</code>\n                    <pre>\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\n@NgModule({\n    declarations: [\n        ...\n    ],\n    imports: [\n      BrowserModule,\n      FormsModule,\n      })\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n  })\n  export class AppModule { }\n                    </pre>\n                    "},{elementType:"Paragraph",content:"Now <code>NgModel</code> may be used on all form elements in the application."},{elementType:"Headline-3",content:"<span id='ng-forms-usage'>NgForms NgModel usage</span>"},{elementType:"Paragraph",content:"Below example shows a proper way to bind an input element with the \n                    <code>ordererName</code> property."},{elementType:"Code",content:'\n<pre>\n&lt;form>\n    &lt;input type = "text" class = "form-control" id="name"\n        required\n        [(ngModel)] = "ordererName" name="name"\n    >\n&lt;/form>\n</pre>                    \n                    '},{elementType:"Headline-3",content:"<span id='ng-forms-example'>Example: overview</span>"},{elementType:"Paragraph",content:"\n                    The example is a simple from element with 2 select fields, and 2 input fields.\n                    This is a form, where user may order a guitar. User selects the guitar brand, and the model, \n                    enters ordering person name and address. When guitar brand is selected, the list of \n                    available models must adjust to match guitars produced by selected company. It would be \n                    good if the last selected model from the brand was remembered, even if used selects another \n                    brand later. The name is a required box, and email is not only required, but should be \n                    validated.\n                    "},{elementType:"SmallHeadline",content:"Guitar brand selection"},{elementType:"HiddenCode",content:[{info:"\n                            Let's start with the service providing data to the component. Later, the \n                            service would communicate with the server to get real data, but for now in may be just \n                            a mock\n                            ",code:"\n<pre>\nexport class GuitarDataService {\n\n    constructor() { }\n    data: any = [\n      {\n        make: 'Gibson',\n        models: ['Les Paul', 'SG', 'Explorer', 'Flying'],\n      },\n      {\n        make: 'Fender',\n        models: ['Stratocaster', 'Telecaster', 'Jaguar', 'Mustang']\n      },\n      {\n        make: 'Defil',\n        models: ['Aster', 'Kosmos', 'Jola', 'Jazz'],\n        selected: true\n      },\n    ]\n    getData(){return this.data} \n  }  \n</pre>                            \n                            "},{info:"\n                            The service should be launched in the <code>ngOnInit</code> lifecycle method.\n                            ",code:"\n<pre>                            \nngOnInit(): void { \n    this.products = this.dataProvider.getData();\n}\n</pre>"},{info:'\n                            The form element in HTML template should have the <code>(ngSubmit)</code> \n                            event handler, for binding with the function that will be triggered when\n                            submit button is pressed, and the <code>#ordererForm="ngForm"</code> \n                            reference, for getting into the form object when handling the subscription.\n                            The <code>select</code> element has to have a <code>name</code> attribute, \n                            this name is obligatory for the <code>ngModel</code> directive to work. \n                            The name should be unique in the whole form. \n                            ',code:'\n<pre>\n&lt;form (ngSubmit)="submitFrom()" #orderForm="ngForm">\n    &lt;div class="form-group">\n        &lt;label for="select-make">Select guitar brand</label>\n    &lt;!-- select is the right place to bind currently selected option. Should not \n    be done in the option tag! --\x3e\n    &lt;select class="form-control" \n            id = "select-make"\n            [(ngModel)]="selectedMake" name="make"\n            required\n            \n            \n     >\n        &lt;option *ngFor = "let product of products; let i = index" \n                [ngValue]="product[\'make\']" \n                [innerHTML]="product.make"\n        >\n        &lt;/option>\n    &lt;/select>\n    &lt;/div>\n&lt;</form>\n</pre>                            \n                            '},{info:"\n                            Now the .ts file. Code uses setters and getters, as proxies. It is quite comfortable \n                            to do some side effects when setting the products property. This property is \n                            for holding the data from the GuitarDataService. When setting its value, the \n                            selectedMake (so the property that is 2-way bound with the select element in the form)\n                            should be given some default value. When setting the <code>selectMake</code> property,\n                            it is needed to update the possible guitar models list to match the chosen producers \n                            portfolio, and when the list of guitar models is updated it is needed to put a new \n                            value to the <code>selectedModel</code> property, so that the proper value is displayed \n                            in the next selection box.<br>\n                            But for now, lets keep the minimum code that is needed for the brand selection to work:\n                            ",code:'\n<pre>\nexport class GuitarOrderFormComponent implements OnInit {\n    private _products: any[] = [];\n    get products(){return this._products}\n    set products(val:any) {\n        let isSelectedMakeEmpty = ()=>{\n          if(this.selectedMake === undefined || this.selectedMake === null) return true\n          return false;\n        }\n        <div class="note">\nThis is needed for edge cases. When component is started and the products \nproperty is assigned for the first time, the selectedMake is undefined, and \nshould be initialized.\nWhen the form is restarted, the selectedMake becomes null, and should be reinitialized.\n        </div>\n        this._products = val;\n        if (isSelectedMakeEmpty()) this.selectedMake = this.getDefaultMake();\n      }\n\n      getDefaultMake(){\n        let def = this.products.findIndex((item:any, index:number)=>{\n          return item.selected === true;\n<div class="note">One of items in the data object should be set as default</div>          \n        })\n        if (def > -1) return(this.products[def].make)\n        return \'\'\n      }\n\n}                      \n</pre>                            \n                            '},{info:"\n                            Now lets implement the guitar model changing when the guitar producer is selected.\n                            It would be good to start with the HTML template part. The new <code>select</code\n                            element should be added as a child of the form element. \n                            There is a 2-way binding to the <code>selectedModel</code> property. The\n                            <code>option</code> list is taken from the <code>availableModels</code> property, \n                            which is a getter that takes new set of data from the <code>products</code>\n                            object, when the <code>selectedMake</code> property is changed.\n\n                            ",code:'\n<pre>\n    &lt;div class="form-group">\n    <div class="note">This wrapping div is only for the styling purposes</div>\n        &lt;label for="select-model">Select model</label>\n        &lt;select class="form-control" \n                id = "select-model"\n                [(ngModel)]="selectedModel" name="model"\n<div class="note">The name property is mandatory for the ngModel to work, and \nshould be kept long</div>\n                required\n        >\n        &lt;option *ngFor = "let model of availableModels" [value]="model">{{model}}&lt;/option>\n        &lt;/select>\n    &lt;/div>\n</pre>                            \n                            '},{info:"\n                            Below methods should be added to the <code>GuitarOrderFormComponent</code>.\n                            <ul>\n                            <li><code>get selectedModel()</code>: a selectedModel getter. If there \n                            is a property <code>lastSelection</code> in the object describing current \n                            producer in the <code>products</code> list, returns an element matching the \n                            <code>lastSelection</code> index. If this property does not exist, returns \n                            the model matching index 0.</li>\n                            <li><code>set selectedModel()</code>: creates a property <code>lastSelection</code>\n                            under current producer description object, and sets the index of the selected model to it.\n                            This will be the memory ensuring the user gets the model of the guitar he selected\n                            last time he selected current brand.</li>\n                            <li><code>get availableModels()</code> is the getter providing the list of guitar models\n                            for the current producer</li>\n                            </ul>\n                            ",code:"\n<pre>\nget selectedModel() { \n    function isIndexValid(id:number){\n      if (id === undefined) return false;\n      if (id < 0) return false;\n      return true;\n    }\n    let currentProductIndex = this.getCurrnetProductIndex();\n    if (currentProductIndex < 0) return '';\n    let modelsArray = this.products[currentProductIndex].models;\n    let indexFromMemory = this.products[currentProductIndex].lastSelection;\n    let index = isIndexValid(indexFromMemory) ? indexFromMemory : 0;\n    return modelsArray[index];\n  }\n\n  set selectedModel( val:string)  {\n    let currentProductIndex = this.getCurrnetProductIndex();\n    if (currentProductIndex >= 0){\n      let modelsArray = this.products[currentProductIndex].models;\n      function findModelIndex(){\n        return modelsArray.findIndex((item: any)=>{\n          return item === val;\n        })\n      }\n      this.products[currentProductIndex].lastSelection = findModelIndex();\n    }\n  }\n\n  get availableModels() {\n    let currentProductIndex = this.getCurrnetProductIndex();\n    if (currentProductIndex === -1 ) return []\n    return this.products[currentProductIndex].models;\n  }\n\n</pre>                            \n                            "},{info:"\n                            Now email and orderer name will be added to the form. Thanks to the angular \n                            2 way binding syntax, there is nearly no type script code for these inputs. Only\n                            properties declarations.\n                            ",code:'\n<pre>\n    &lt;div class="form-group">\n        &lt;label for="select-model">Select model</label>\n        &lt;input type = "text" class = "form-control" id="name"\n            required\n            [(ngModel)] = "ordererName" name="name"\n            #ordName="ngModel"\n            <div class="note">This #orderName reference is only for the hidden\n            message, that will be shown when input is invalid</div>\n        >\n        &lt;div [hidden]="ordName.valid || ordName.pristine" class="alert alert-danger">\n            Please provide your name.\n        &lt;/div>\n    &lt;/div>\n    &lt;div class="form-group">\n        &lt;label for="select-model">Select model</label>\n        &lt;input type = "email" class = "form-control" id="mail"\n            required\n            [(ngModel)] = "ordererMail" name="mail"\n            ngModel email\n            #mail = "ngModel"\n        >\n        &lt;div [hidden]="mail.valid || mail.pristine" class="alert alert-danger">\n            Please provide valid email.\n        &lt;/div>\n    &lt;/div>\n</pre>                            \n                            <div class="note">Type script is only declarations:</div>\n<pre>\nordererName: any;\nordererMail: string = \'\';\n</pre>                            \n                            '},{info:"\n                            Submitting the form is done with when <code>ngSubmit</code> event handler, that is \n                            bound to the whole <code>form</code> element. Because properties <code>selectedMake</code>,\n                            <code>selectedModel</code>, <code>ordererName</code> and <code>ordererMail</code>\n                            are bound directly to the view, it is certain, that those properties hold the \n                            exect values, that were selected by the user. There is a possibility to refer directly to the \n                            form directive, and get all form fields names and values from there. This approach will be \n                            demonstrated here:\n                            ",code:'\n                            <div class="note">There was a #orderForm reference created on the form object. Let\'s \n                            get to this reference in .ts file with the help of a ViewChild decorator</div>\n                            <pre>\n@ViewChild(\'orderForm\') form:any;\nformContent: any;\n\n  submitFrom(){\n    this.formContent = this.getFromContent();\n  }\n\n  getFromContent(){\n    let formContent = this.form.form.value;\n    <div class="note">formReference.form.value is where object storing names and form data is kept</div>\n    let keys = Object.getOwnPropertyNames(formContent);\n    let output = [];\n    for (let field of keys){\n      output.push({name: field, content: formContent[field]})\n    }\n    return output;\n  }\n                            </pre>\n                            '},{info:"Now let's create form submit, form clear buttons, and the place to put \n                            the submitted form data:",code:'\n<pre>\n    &lt;button type="submit" \n        class="btn btn-success"\n        [disabled] = "!orderForm.form.valid"\n    >Submit the form&lt;/button>\n    &lt;div class="btn btn-danger ml-4" (click)="clearForm()">Clear form&lt;/div>\n    <div class="note">And the form output holder</div>\n\n    &lt;div class="form-info">\n        &lt;div class="form-info-content">\n            &lt;b>Form submitted with data:</b>\n            &lt;ul>\n                &lt;li *ngFor="let field of formContent">\n                    &lt;i>\n                        {{field.name}}\n                    &lt;/i>: \n                    {{field4content}}\n                &lt;/li>\n            &lt;/ul>\n        &lt;/div>\n    &lt;/div>\n</pre>                            \n                            '},{info:"\n                            Restarting (clearing) the form in angular is not just \n                            putting null values in all form fields. If it is done that way, the form \n                            state will not return to the initial one, as angular adds css classes to the \n                            form input elements. Please see next section to learn more. However, <code>ngForm</code>\n                            states related to these classes will not be cleared this way. That is why there is a\n                            <code>reset</code> method available under the <code>ngForm</code> directive.\n                            It puts <code>null</code> values to all form fields, and restarts internal <code>ngForm</code>\n                            directive states. Developer has to take care of all fixes to the component. In our case\n                            because <code>selectedMake</code> and <code>selectedModel</code> are bound with the \n                            form inputs, they will be assigned <code>null</code> values, and our component has to be \n                            ready to handle this. The important trick in below code is the usage of the <code>setTimeout</code>\n                            method without any delay, to set the products property. Without this solution angular would not \n                            detect any changes, angular would not rerender the form component. Because <code>setTimeout</code>\n                            is an async function, it will force form inputs rendering.\n                            ",code:"\n<pre>\nclearForm(){\n    this.form.reset();\n    this.formContent = []\n    setTimeout(()=>{this.products = this.dataProvider.getData();});\n    // async usage to force view update\n  }\n</pre>                            \n                            "}]},{elementType:"Paragraph",content:"Whole component HTML and .ts files content is at the bottom of this article.\n                    To check in on the github please go to the reference section. "},{elementType:"Headline-3",content:"<span id='ng-forms-css'>Styling angular forms</span>"},{elementType:"Paragraph",content:"\n                    When user interacts with an angular form, the <code>ngFrom</code> directive changes its \n                    internal state. With this state change some classes are added to the <code>form</code>\n                    element, and to the input elements:\n                    "},{elementType:"UnsignedList",content:["<code>ng-valid</code> is applied to the <code>form</code> or input element that is valid,","<code>ng-invalid</code> is applied to the <code>form<code> or input element that is not valid,","<code>ng-touched</code> is applied to the element that was blurred (lost focus),","<code>ng-untouched</code> is applied to the element that did not have a blur event yet,","<code>ng-dirty</code> is applied to any element, that was edited by the user,","<code>ng-pristine</code> is applied to any element, that was not edited by the user yet,"]},{elementType:"Paragraph",content:"\n                    Properties keeping information about above states are available under the reference to the \n                    <code>ngForm</code> directive. They are <code>dirty</code>, <code>pristine</code>, \n                    <code>touched</code>, <code>untouched</code>, <code>invalid</code>, <code>valid</code>,\n                    "},{elementType:"Paragraph",content:"\n                    There is a <code>reset</code> method on the <code>ngForm</code> directive. It sets <code>null</code>\n                    to all form inputs, and restarts the <code>ngForm</code> internal state.\n                    "},{elementType:"Headline-3",content:"<span id='ng-forms-summary'>Summary</span>"},{elementType:"UnsignedList",content:["<code>ngForm</code> is applied automatically after adding a <code>FormsModule</code> to the \n                        main app module</code>","<code>ngModel</code> declaration is inside the <code>ngForm</code> directive, and is available \n                        after just importing the <code>ngForm</code> to the main app module,","<code>ngModel</code> should not be applied to elements that are not:\n                        <code>input</code>, <code>select</code> <code>textarea</code>, <code>button</code>,\n                        <code>legent</code>, <code>datalist</code>, <code>option</code>","There is a set of css classes for styling form items. These classes are applied to the \n                        input elements and the form element when form state changes due to user interaction with the form. \n                        Classes are: <code>ng-dirty</code>, <code>ng-pristigne</code> ,<code>ng-touched</code>, <code>ng-untauched</code>, <code>ng-invalid</code>, \n                        <code>ng-valid</code>, <code>ng-invalid</code>","<code>ngFromReference.reset()</code> method may be used to clear the internal <code>\n                        ngForm</code> state, and all form fields,","<code>ngSubmit</code> is an event handler for submitting the form,","<code>name</code> property is mandatory for all fields managed by the <code>ngModel</code>.\n                        Each name should be unique within the form,","The default option of the select element should be set with the ngModel on the select element.\n                        This should not be set on the <code>option</code> element with the <code>[selected]</code>\n                        attribute",'<code>#someName="ngModel"',"<code>required</code> property may be set to the element that is mandatory."]},{elementType:"Headline-3",content:"<span id='ng-forms-example-service'>Example: service with data</span>"},{elementType:"Headline-3",content:"<span id='ng-forms-example-ts'>Example: file with logic</span>"},{elementType:"Headline-3",content:"<span id='ng-forms-example-HTML'>Example: HTML file</span>"},{elementType:"Headline-3",content:"<span id='ng-forms-important'>Binding: important</span>"}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"angular.io",href:"https://angular.io/guide/forms",description:"Tutorial on creating a form"},{elementType:"Link",content:"github.com",href:"https://github.com/gudmar/angularExamplesForTheoryCorner",description:"Example on github"}]}]};n(71);var Bo=[Lo,Do,Ro,Fo,{summary:"angular livecycle",title:"Angular livecycle",searchKeywords:"\n\n    ",cathegory:"angular",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Livecycle in angular"},{elementType:"Paragraph",content:"Lifecycle hooks are launched both: during the directive lifecycle, and during the \n                    component lifecycle."},{elementType:"Paragraph",content:"\n                    Every component/directive has its lifecycle. It starts when the component/directive is created\n                    with the <code>new</code> operator, and ends when the component/directive is removed. \n                    Meanwhile, the component/directive internal state may change. Inputs may change. \n                    When changes occur, the view may need to be updated by Angular. When component or directive \n                    initializes, changes or before it is destroyed it may be needed to run some specific operations.\n                    To hook into a components or directives lifecycle, there are some methods introduced. \n                    Developer may implement some of those methods, all of them or none of them.\n                    "},{elementType:"Headline-3",content:"Lifecycle methods division"},{elementType:"Paragraph",content:"As mentioned in one of the references to this article, lifecycle methods may be divided\n                    to:"},{elementType:"SmallHeadline",content:"Host component/directive hooks:"},{elementType:"UnsignedList",content:["constructor","OnChanges","OnInit","DoCheck","OnDestroy"]},{elementType:"SmallHeadline",content:"Child component/directive hooks:"},{elementType:"UnsignedList",content:["AfterContentInit","AfterContentChecked","AfterViewInit","AfterViewChecked"]},{elementType:"NoteWarning",content:"\n                    Note, that some lifecycle methods may be called a great number of times. The most \n                    called methods are: <code>ngDoCheck</code>, <code>ngAfterContentChecked</code>,\n                    <code>ngAfterViewChecked</code>. Even a little touch of the button, checking a \n                    checkbox or hovering over something may cause a chain reaction. Methods \n                    given as an example are called on every possible occasion, even when an element not \n                    related to the components they are called on is touched. This will cause a great performance \n                    issues when used not wisely.\n                    "},{elementType:"Paragraph",content:"\n                    Lets considere creation of a parent and a single child. Then let's change this childs <code>@Input()</code>\n                    property 10 times. This is the result:\n                    "},{elementType:"Image",name:"lifecycle_angular_1added_10modified_chart.png",alt:"1 child added 10 times modified"},{elementType:"Paragraph",content:"\n                    Now let's create 10 child elements, clear the logging pane, and cause 10 changes of only one \n                    of the children. The problem is, that clearing the logging pane already causes a lot of \n                    lifecycle methods to be called:\n                    "},{elementType:"Image",name:"lifecycle_angular_10added_cleared_all.png",alt:"10 child added cleared"},{elementType:"Paragraph",content:"\n                    Now let's change a single input of a single child 10 times (with a parent element and \n                10 children; other components on the page are not logging lifecycle methods here.)\n                    "},{elementType:"Image",name:"lifecycle_angular_10added_cleared_1inputChanged10times_small.png",alt:"10 child added cleared, and a single elements single input changed 10 times."},{elementType:"Paragraph",content:"\n                    10 elements and 10 input modifications are 10 x 10 = 100 changes. A button was clicked 10 times,\n                    causing 10 <code>ngOnCheck</code> runs and clearing content gave 10 <code>ngOnCheck</code> runs.\n                    This meens, that no matter that the input of a single element was changed only 10 times.\n                    This caused <code>ngOnCheck</code> run 10 times on each sibling, so 100 runs. There are other \n                    methods that are equaly willingly called: <code>ngAfterContentChecked</code> and \n                    <code>ngAfterViewChecked</code>. So this single change to one input in a very small example \n                    caused already 300 function calls. And what if those children had grand-children and so on...\n                    "},{elementType:"HiddenDescription",content:{legend:[{type:"One Time",styleClasses:"btn btn-danger text-white m-4 mb-1 mt-1",description:"Called only once, on the component initialization"},{type:"Repeating",styleClasses:"btn btn-success mb-1",description:"Called each time change detection runs"}],items:[{type:"One Time",title:"constructor",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                                Not an angular creation. This is the \n                                                Java Script class constructor, that is run when angular \n                                                creates a component/directive instance with the <code>new</code>\n                                                operator.\n                                                "},{elementType:"Paragraph",content:"\n                                                Constructor is only for setting some properties with a simple values.\n                                                In most circumsantces can be kept empty. In some occasions can be even\n                                                omitted. Then a default one will be provided.\n                                                "},{elementType:"Paragraph",content:"\n                                                A constructor is good for injecting services.\n                                                "}]}},{type:"Repeating",title:"ngOnChanges",description:{elementType:"Section",content:[{elementType:"NoteWarning",content:"This launches quite often and \n                                                may have significant impact of performance"},{elementType:"SmallHeadline",content:"Purpose"},{elementType:"Paragraph",content:"React on the <code>@Input()</code> decorated properties\n                                                change."},{elementType:"SmallHeadline",content:"When called"},{elementType:"Paragraph",content:"Only when <strong>input properties</code> of the component\n                                                change. If there are no input properties this hook <strong>\n                                                may never be called</strong>. This method is not called on the \n                                                components that will for sure not be impacted with the change."},{elementType:"SmallHeadline",content:"What to put here"},{elementType:"UnsignedList",content:["Web worker requests,","Server requests,","Changing elements bound to the view, as they still will rerender,","Should be lean, not to spoil performance,"]}]}},{type:"One Time",title:"ngOnInit",description:{elementType:"Section",content:[{elementType:"SmallHeadline",content:"Purpose"},{elementType:"Paragraph",content:"Initialize the component. Inputs are already created, \n                                                constructor and <code>ngOnCheck</code> is already run. View is still \n                                                not available. <b>Note</b> this method is called only once, so \n                                                no great impact on performance."},{elementType:"SmallHeadline",content:"When called"},{elementType:"Paragraph",content:"\n                                                <strong>Only once</strong> when component is initialized, \n                                                after inputs were set, after first call of the <code>ngOnChanges</code>\n                                                "},{elementType:"SmallHeadline",content:"What to put here"},{elementType:"UnsignedList",content:["This is run only once,","Server requests,","Web workers requests,","Set up the component, after Angular sets the input properties"]}]}},{type:"Repeating",title:"ngDoCheck",description:{elementType:"Section",content:[{elementType:"NoteWarning",content:"This method is called every time something changes.\n                                                Even if there are sibling elements, this is called on every single\n                                                sibling element change."},{elementType:"SmallHeadline",content:"Purpose"},{elementType:"Paragraph",content:"\n                                                Custom change detection, code to be executed in situations \n                                                when Angular may miss some change. This is executed on every \n                                                possible component on every small change in the application, so \n                                                no possible change is missed. Sometimes even a mouse over a\n                                                component may launch this methods.\n                                                "},{elementType:"SmallHeadline",content:"When called"},{elementType:"Paragraph",content:"On every change detection cycle after <code>ngOnInit</code>\n                                                if it was executed, or after <code>ngOnChanges</code>"},{elementType:"SmallHeadline",content:"What to put here"},{elementType:"Paragraph",content:"\n                                                May be used for manual change detections with for example an \n                                                <code>onPush</code> change detection strategy. \n                                                View will not be updated if a nested value of the object\n                                                set as the <code>Input</code> changes. In this cases \n                                                changes should be detected manualy. A component should be referenced\n                                                with a <code>ChangeDetecterRef</code> and <code>markForCheck</code>\n                                                or <code>detectChanges</code> should be called.\n                                                "}]}},{type:"One Time",title:"ngAfterContentInit",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"This method may be compared to the <code>ngOnInit</code>\n                                            but not for the component, but for its projected content. It will\n                                            be called after components content is initiated. "},{elementType:"SmallHeadline",content:"Purpose"},{elementType:"Paragraph",content:"A content is the component, that is projected into the host\n                                                component. This is not the direct usage of a child component in the \n                                                html template of the parent, but rather nesting external component with a \n                                                <code>ng-content</code>"},{elementType:"Code",content:'\n                                                <pre>\n&lt;parent>\n    &lt;child>&lt;child>\n&lt;/parent>                                                \n                                                </pre>\n                                                <div class="note">And the parent component</div>\n                                                <pre>\n&lt;div>\n...\n&lt;ng-content>&lt;ngcontent>\n&lt;/div>\n                                                </pre>\n                                                '},{elementType:"Paragraph",content:"So <code>ngAfterViewInit</code> is launched, when only\n                                                all content is projected to the host component, and all \n                                                <code>ContentChild</code> decorated properties are updated.\n                                                "},{elementType:"SmallHeadline",content:"When called"},{elementType:"Paragraph",content:"When components content: <strong> projected\n                                                component</strong> is injected, and <code>ContentChild</code>\n                                                decorated properties are updated.\n                                                Just after <code>ngDoCheck</code> of the component. \n                                                <strong>Only once</code>, when\n                                                the content is initialized for the first time.\n                                                Interesting thing is, that this method is called even if \n                                                a component has no extenal content that needs to be projected."},{elementType:"SmallHeadline",content:"What to put here"},{elementType:"Paragraph",content:"\n                                                Code that needs to run after content that will be projected to \n                                                descendants is initilaized. Still good place to make \n                                                changes that will update projected component.\n                                                "},{elementType:"Paragraph",content:"\n                                                Run only once.\n                                                "}]}},{type:"Repeating",title:"ngAfterContentChecked",description:{elementType:"Section",content:[{elementType:"NoteWarning",content:"\n                                            No code affecting view of the projected external content should be \n                                            added here, as content component is already checked. If\n                                            there is an attempt to modify projected contents view, it may result \n                                            in <code>ExpressionChangedAfterItHasBeenCheckedError</code>.\n                                            A way around this error is running change in an async function \n                                            like a <code>setTimeout</code>. However, triggerning a change to a \n                                            projected component with an async function here will result in \n                                            an infninte loop, that will not be detected by Angular or browser.\n                                            "},{elementType:"SmallHeadline",content:"Purpose"},{elementType:"Paragraph",content:"Run code that needs to be executed after external projected\n                                                components changes are checked"},{elementType:"SmallHeadline",content:"When triggered"},{elementType:"Paragraph",content:"After\n                                                <code>afterContentInit</code> or \n                                                <code>ngDoCheck</code>, depending if <code>afterContentInit</code>\n                                                is executed."},{elementType:"NoteWarning",content:"This will be called even if a component has no content to be\n                                                projected. Moreover this method is called very freequently. Same \n                                                often as <code>ngDoChange</code>, so will cause performance issues\n                                                if is not lean enough."},{elementType:"SmallHeadline",content:"What to put here"},{elementType:"Paragraph",content:""}]}},{type:"One Time",title:"ngAfterViewInit",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"View are child components and elements that are referenced\n                                            directly in the components template:"},{elementType:"Code",content:"\n<pre>\n&lt;div>\n    &lt;some-child-component>&lt;/some-child-component> \n    //this is the view, not the content.\n&lt;div>\n</pre>                                            \n                                            "},{elementType:"Paragraph",content:"No <code>ng-content</code>. This elements are accessed from the \n                                            ts code with <code>ChildView</code> decorators."},{elementType:"SmallHeadline",content:"Purpose"},{elementType:"Paragraph",content:"\n                                                Run code just after all descendant components and elements of the \n                                                host component are initialized.\n                                                "},{elementType:"SmallHeadline",content:"When triggered"},{elementType:"Paragraph",content:"<strong>Only once</code> after component view descendants \n                                                are initialized, and porperties marked with <code>ViewChild</code>\n                                                are updated."},{elementType:"SmallHeadline",content:"What to put here"},{elementType:"Paragraph",content:"Good place to put code that would affect the view of the \n                                                descendats. Some content from the server may be fetched and injected\n                                                to the descendants for example."}]}},{type:"Repeating",title:"ngAfterViewChecked",description:{elementType:"Section",content:[{elementType:"SmallHeadline",content:"Purpose"},{elementType:"Paragraph",content:"Run code that needs to be executed after the \n                                                view descendants are checked for differences with the content displayed\n                                                on the sreen.\n                                            "},{elementType:"SmallHeadline",content:"When triggered"},{elementType:"Paragraph",content:"After all view descendants are checked."},{elementType:"SmallHeadline",content:"What to put here"},{elementType:"Paragraph",content:"\n                                                No code updating the displayed view, as it may cause an \n                                                <code>ExpressionChangedAfterItHasBeenCheckedError</code>.\n                                                If such code would be run in an async manner here, it would \n                                                cause infinite loop that would not be detected by the Angular\n                                                or browser. \n                                                "},{elementType:"Paragraph",content:"\n                                                This method is run quiet freequently. The same paste as the <code>ngDoCheck</code>\n                                                so with each buttin click, each checkbox checked. \n                                                "}]}},{type:"One Time",title:"ngDestroy",description:{elementType:"Section",content:[{elementType:"SmallHeadline",content:"Purpose"},{elementType:"Paragraph",content:"Clean before element is removed"},{elementType:"SmallHeadline",content:"When triggered"},{elementType:"Paragraph",content:"Just before the component is removed from the view"},{elementType:"SmallHeadline",content:"What to put here"},{elementType:"SmallHeadline",content:"Event handler removals, unsubscriptions"}]}}]}},{elementType:"NoteWarning",content:"\n                    Lifecycle methods should be kept lean\n                    "},{elementType:"Paragraph",content:"\n                    <code>ngOnChange</code> should not be used with <code>ngDoCheck</code>, as they are\n                    redundant.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"blog.logrocket.com",href:"https://blog.logrocket.com/angular-lifecycle-hooks/",description:"Very good explanation"},{elementType:"Link",content:"Example angular.io",href:"https://stackblitz.com/run?file=src/app/app.component.html",description:"A life example how often and when lifecycle methods are fired. Description in the next link"},{elementType:"Link",content:"angular.io",href:"https://angular.io/guide/lifecycle-hooks",description:"Description"},{elementType:"Link",content:"angular.io",href:"https://angular.io/guide/lifecycle-hooks",description:"Description"}]}]},{summary:"angular modules",title:"Angular modules",searchKeywords:"\n\n    ",cathegory:"angular",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Modules in angular"},{elementType:"ListOfContent",content:[{id:"about",title:"About"},{id:"featureModule",title:"Feature module"},{id:"services",title:"Services"},{id:"references",title:"References"}]},{elementType:"Paragraph",content:'\n                    <span id="about">A module is something, that might be compared to a library. It consists of classes, services, \n                    pipes, components and directives, that are bound together to form some kind of a logical \n                    entity. </span>\n                    '},{elementType:"Paragraph",content:"\n                    A module should import all modules and components it uses. Module is made from a class with a \n                    <code>@NgModule</code> decorator. Such a module takes an object as an attribute. This object has, \n                    among the others, below properties:\n                    "},{elementType:"UnsignedList",content:["<code>declarations</code>: a set of pipes, components and directives belonging to this module,","<code>providers</code>: a set of injectable objects, that are available in the injector of the module.\n                        This are services. A service imported and listed in this field in the root module becomes <code>a\n                        singleton</code> by default, and can be injected to a component by giving it as an argument for the\n                        component constructor.","<code>imports</code>: the set of NgModules whose exported declarables will be available to the \n                        module,\n                        ","<code>exports</code>: the set of components, directives and pipes that the module wants to be public,\n                        available in other modules using the module,","<code>entryComponents</code>: the set of components that will be dynamically loaded to the view, when \n                        the module compiles.","<code>bootstrap</code>: the set of comonents that are bootstrapped when this module is bootstrapped.\n                        These components are automatically added to the <code>entryComponents</code>"]},{elementType:"SmallHeadline",content:'\n                    <span id="services">Services</span>\n                    '},{elementType:"Paragraph",content:"\n                    Services provided in the root module, are by default singletons. There is a way not to create a \n                    singleton, but this requires lazy-loading the module. Lazy loaded services are scoped to the lazy-loaded\n                    module injected.\n                    "},{elementType:"Paragraph",content:'\n                    Services provided in the other than root modules are by default provided not only in the other \n                    modules, but they are delivered to the root module context, and will become the application\n                    wide <strong>singleton</strong>: \n                    <a href = "https://blog.angular-university.io/angular2-ngmodule/#angularmodulesanddependencyinjection" target="_blank">Link</a>\n                    '},{elementType:"Code",content:"\n                    <div class=\"note\">Lets create a simple Menu module. It provides a menu component, with \n                    a class that sends commands to subscribed components. For example a <i>Load</i> button\n                    should open a dialog box enabling a user to select a file, and this action should inform \n                    all interested components that there is a file to be opened, and send the file as a blob.</div>\n<pre>\nimport {CommonModule} from \"@angular/common\";\n    @NgModule({\n        declarations: [Menu],\n        exports: [Menu],\n        providers: [CommanderService]\n    })\n    export class MenuModule{\n\n    }\n</pre>\n                <div class=\"note\">And now a service that sends commands.</div>\n<pre>\n@Injectable()\nexport class CommandersService {\n    private listOfSubscribers: {id:string, callback:function}[] = [];\n    supportedCommands = ['load', 'save', 'options', 'edit', 'change skin'];\n    private findSubscribersId(id){\n        return this.listOfSubscribers.findIndex((item)=>{\n            return item.id === id;\n        })\n    }\n    subscribe(subscribersId, subscribersCb){\n        let subscribersId = this.findSubscribersId(subscribersId);\n        if (subscribersId > -1){\n            let newSubscriber = {\n                id: subscribersId, \n                callback: subscribersCb\n            }\n            this.listOfSubscribers.push(newSubscriber);\n        }\n    }\n    private isCommandSupported(command:string){\n        return this.supportedCommands.includes(command);\n    }\n    command(message:string, data:any){\n        if (this.isCommandSupported(message)){\n            this.listOfSubscribers.forEach((item)=>{\n                item.callback(message, data);\n            })\n        } else {\n            throw new Error('This command is not supported')\n        }\n    }\n    unsubscribe(subscribersId:string){\n        let foundId = this.findSubscribersId(subscribersId);\n        this.listOfSubscribers.splice(founeId, 1);\n    }\n}\n</pre>               \n                    <div class=\"note\">The full Menu component will not be shown, as this example is already too long.</div>\n<pre>\n@Component({\n    selector: 'menu',\n    template: '...',\n})\nexportClass MenuComponent{\n    constructor(private commander: CommanderService){}\n    ...\n}\n</pre>                    \n                    "},{elementType:"Paragraph",content:"\n                    In above example we created a separate module with its own service. The service will become \n                    available everywhere after importing this custom module to the root module.\n                    No matter that it was mentioned only in the custom module. Moreover, there will be a singleton\n                    created, and this service will be made available everywhere.\n                    "},{elementType:"NoteWarning",content:'\n                    <span id="featureModule">Above Menu module is called a <i>feature module</i></span>\n                    '},{elementType:"SmallHeadline",content:'\n                    <span id="rootModule">Root module vs feature modules</span>\n                    '},{elementType:"Paragraph",content:"\n                    The root module should import a <code>BrowserModule</code>, where a feature module should \n                    import a <code>CommonModule</code>. Thanks to this module there is access to the <code>ngIf</code>\n                    or <code>ngFor</code> directives. In the root module there should be a <code>bootstrap</code>\n                    property in the decorator, for defining what components should be bootstrapped during the application \n                    start.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:'<span id="references">References</span>'},{elementType:"Link",content:"angular.io",href:"https://angular.io/api/core/NgModule",description:"Tutorial"},{elementType:"Link",content:"blog.angular-university.io",href:"https://blog.angular-university.io/angular2-ngmodule/",description:"Tutorial"}]}]},{summary:"angular routing",title:"Angular routing",searchKeywords:"\n\n    ",cathegory:"angular",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Angular routing"},{elementType:"Paragraph",content:"\n                    A single page application. One HTML file loaded and its content modified with JS. But what, if anyone \n                    would like to send a link directing to the certain path in the site?<br>\n                    This is possible with the routing module in Angular. The user will never tell, that this is only the \n                    SPA managing those roots.                    "},{elementType:"Paragraph",content:"\n                    A good example might be this page. It is written with React, and there is a <i>#</i> in the URL, but\n                    this is only due to the problems with deploying the <code>BrowserRouter</code> pages on gitHub.\n                    A similar mechanism is available with Angular.\n                    "},{elementType:"Headline-3",content:"\n                    Simplest implementation\n                    "},{elementType:"HiddenCode",content:[{info:"\n                            Go to the <code>app.module</code> (the root module). Make it import <code>AppRoutingModule</code>\n                            Place it in the <code>imports</code> section.\n                            ",code:"\n<pre>\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppComponent } from './app.component';\nimport { SomeComponent1 } from ' ...';\nimport { SomeComponent2 } from ' ...';\n\n@NgModule({\n  declarations: [\n    AppComponent, SomeComponent1, SomeComponent2\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</pre>                            \n                            "},{info:"\n                            Create an <code>app-routing.module.ts</code>. <code>const routes:..</code>\n                            is an array for defining routes. The <code>path</code> property is for \n                            defining the internal path, <code>component</code> path is for defining the \n                            component that will be loaded. If the component has some inputs that need to be set, \n                            this may be done in a <code>data</code> optional attribute. The <code>'**'</code>\n                            path is a wildcard. The router searches the first match and does not look at the rest\n                            routes if finds any. So the <code>**</code> matches everything and must be placed at the \n                            end, or will make any paths after it inaccessible.\n                            ",code:"\n<pre>\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SomeComponent1 } from ' ...';\nimport { SomeComponent2 } from ' ...';\n\n\nconst routes: Routes = [\n  {path: 'some-1', component: SomeComponent1, data:{myCustom:'some inputs'}},\n  {path: 'some-2', component: SomeComponent2, },\n  {path: '**', component: AboutComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { \n\n}\n</pre>\n                            "},{info:"\n                            The last step is the <code>app.component.ts</code>, so the root component that will be \n                            bootstrapped, or any other component holding a navbar or the <code>router-outlet</code>.\n                            Note, that instead of <code>href</code> attribute, a <code>routerLink</code> has to be \n                            used for this to work. Moreover, there is a <code>router-outlet</code> \n                            tag that is a placeholder for the components placed by the router.\n                            ",code:'\n<pre>\n&lt;div name="navigation">\n    &lt;a [routerLink]="\'some-1\'">Some 1&lt;/a>\n    &lt;a [routerLink]="\'some-2\'">Some 2&lt;/a>\n&lt;>\n\n&lt;router-outlet>&lt;/router-outlet>\n</pre>\n                            '}]},{elementType:"Headline-3",content:"\n                        Nested routes\n                        "},{elementType:"HiddenCode",content:[{info:"\n                                Router module has to be imported to the main root module, like in the previous example,\n                                there needs to be a <code>app-routing.module.ts</code> created, with the \n                                only difference, that a nested path must have <code>path</code>, <code>component</code>,\n                                <code>chidren</code> properties:\n                                ",code:"\n                                <pre>\nconst routes: Routes = [\n    {path: '', redirectTo:'aboutMe', pathMatch:'full'},\n    {path:'some-1', component: SomeComponent1, data: {startPage:'some data'}},\n    {path:'some-2', component: SomeComponent2},\n    {path:'nested-path', \n    component: RouterOutputComponent,\n    data: {somePropertyName:'some optional input data'},\n    children: [\n        {path: '', component: ComponentHandlingNoNestedPath, data: {someData: 'if needed'}},\n        {path: 'nested-1',component: NestedComponent1, data:{optionalData: ''}},\n        {path: 'nested-2',component: NestedComponent2},\n    ]\n    },\n    {path:'some-3', component: SomeComponent3},\n    {path:'**', component: Handle404Component},\n];                                   \n                            </pre>\n                                "},{info:"\n                                And the routes in the navigation section would be:\n                            ",code:'\n                                <pre>\n&lt;div name="navigation">\n    &lt;a [routerLink]="\'nested-path/nested-1\'">Some 1&lt;/a>\n    &lt;a [routerLink]="\'nested-path/nested-2\'">Some 2&lt;/a>\n&lt;>                                    \n                                </pre>\n                            \n                            '}]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"angular.io",href:"https://angular.io/guide/router",description:"Tutorial"}]}]},{summary:"position",title:"position",searchKeywords:"angular",cathegory:"Angular",content:[{elementType:"Article",content:[{elementType:"Headline",content:"About position"},{elementType:"Paragraph",content:"\n                            Angular is ...          \n                        "}]}]},{summary:"tables",title:"tables",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Tables"},{elementType:"Paragraph",content:"\n                            <b>Lorem ipsum</b> dolor sit amet, consectetur adipiscing elit. \n                            Vestibulum et lacinia arcu, ut tempor lacus. Integer euismod, est et pharetra eleifend, \n                            magna nibh congue nulla, eu ornare lacus sem eu leo. Sed aliquet tincidunt neque non tempor. \n                            Sed feugiat, massa at tempus tincidunt, tortor turpis rhoncus orci, nec cursus purus dui vel ipsum. \n                            Sed pellentesque sem nec dictum auctor. Morbi tempus lectus vitae ultrices volutpat. \n                            Vivamus convallis mauris urna. Phasellus rhoncus felis eget mi tincidunt malesuada. \n                            Pellentesque in velit viverra nunc ultrices maximus. Duis in leo dolor.             \n                        "}]}]}];var Uo={summary:"jasmine async",title:"Jasmine async",searchKeywords:"\n        timeout setTimeout setInterval async then await callback promisses clock \n    ",cathegory:"jasmine",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Jasmine async"},{elementType:"ListOfContent",content:[{id:"done",title:"Async with <code>done</code> callback,"},{id:"clock",title:"Async with clock"},{id:"fakeAsync",title:"fakeAsync"},{id:"then",title:"Async with <code>then</code>"},{id:"await",title:"Async with <code>await</code>"}]},{elementType:"Paragraph",content:"\n                    "},{elementType:"Headline-3",content:'<span id="done">Handling async with <code>done</code></span>'},{elementType:"Paragraph",content:"\n                    A <code>beforeAll</code>, <code>beforeEach</code>, <code>afterAll</code>, <code>afterEach</code> and\n                    <code>it</code> functions may take an optional argument. This argument is by custom\n                    called <code>done</code> (but may be called in any different way), and is a function.\n                    When this attibute is given, this means that the callback function is an async function, and \n                    the execution of all other functions in the test suit will be paused as long as this <code>done</code>\n                    function in the previous function is not called.\n                    "},{elementType:"NoteWarning",content:"\n                    In case <code>done</code> is passed as the parameter to the function, it <b>has</b> to be \n                    invoked inside, or else the function will be forever pending. In reality this <i>forever</i>\n                    is 5s, and then this test will fail. Moreover this <code>done</code> has to be \n                    passed to each function in the test suit, as the whole suite may be async.\n                    "},{elementType:"Code",content:"\n                    <div class=\"note\">Testing done</div>\n<pre>\ndescribe('Using a timeout in beforeEach and done argument',()=>{\n    let lock = true;\n    beforeEach((done1)=>{\n      setTimeout(()=>{\n        lock = false; \n        done1();\n      }, 1000);\n      \n    })\n    it('Should pass when unlocked', function(done){\n      expect(lock).toBeFalse();\n      done();\n    })\n  })\n</pre>                \n                    "},{elementType:"Headline-3",content:'<span id="clock">Handling async with <code>clock</code></span>'},{elementType:"Paragraph",content:"\n                    There is a clock in jasmine, that has a tick method. This method simulates time passage:\n                    "},{elementType:"Code",content:"\n                    <div class=\"note\">Testing clock</div>\n<pre>\ndescribe('Using a timeout in beforeEach and done argument',()=>{\n    let lock = true;\n    beforeEach(()=>{\n      jasmine.clock().install()\n      setTimeout(()=>{\n        lock = false; \n      }, 1000);\n      \n    })\n    afterEach(()=>{jasmine.clock().uninstall()})\n    it('Should pass when unlocked', function(){\n      jasmine.clock().tick(1001);\n      expect(lock).toBeFalse();\n    })\n  })\n</pre>                \n                    "},{elementType:"Headline-3",content:'<span id="fakeAsync">Handling async with <code>fakeAsync</code></span>'},{elementType:"Paragraph",content:"\n                    <code>fakeAsync</code> is for sure available in Angular. This is the special time zone, \n                    that allows to fake async behaviour. It is similar to the previous example with the \n                    <code>clock</code>, but there is a <code>fakeAsync</code> function that wrappes the \n                    <code>it</code> callback and exposes the <code>tick</code> function. No need to \n                    use the <code>jasmine.clock().install</code> or <code>jasmine.clock()</code> before the \n                    <code>tick</code>. The <code>tick</code> function symulates time passage, and takes \n                    one argument, that is time in ms.\n                    "},{elementType:"Code",content:"\n                    <div class=\"note\">Testing fakeAsync</div>\n<pre>\ndescribe('fakeAsync',()=>{\n    let lock = true;\n    function unlock(){\n      setTimeout(()=>{\n        lock = false; \n      }, 1000);\n    }\n  \n    afterEach(()=>{jasmine.clock().uninstall()})\n    it('Should pass when unlocked', fakeAsync(function(){\n      unlock();\n      tick(1001);\n      expect(lock).toBeFalse();\n    }))\n  })\n</pre>                \n                    "},{elementType:"Headline-3",content:'<span id="then">Async with <code>then</code></span>'},{elementType:"Paragraph",content:"\n                    The sercet here is that the functions <code>beforeEach</code>, <code>beforeAll</code>,\n                    <code>afterEach</code>, <code>afterAll</code> and <code>it</code> should return the \n                    promise: the chain with <code>then</code>, or just return something.\n                    "},{elementType:"Code",content:"\n                    <div class=\"note\">Tested class</div>\n<pre>\nexport class AsyncService {\n    data:any = {\n      a:1, b:2\n    }\n  \n    async getData(){\n      return new Promise((resolve)=>{\n        setTimeout(()=>{\n          resolve(this.data)\n        }, 100);\n      })\n    }\n  \n    async transformWithWebWorder(data:any){\n        // A fake operation with web worker\n      return new Promise((resolve)=>{\n        setTimeout(()=>{\n          let transformedData:any = {};\n          for(let key of Object.getOwnPropertyNames(data)){\n            transformedData[key] = data[key] ** 2;\n          }\n          resolve(transformedData)\n        }, 100)\n      })\n    }\n  }\n</pre>                \n            <div class='note'>And the testing code</div>\n<pre>\ndescribe('A promise with then', ()=>{\n    let s : AsyncService;\n    \n    beforeEach(function (this:any){\n      s = new AsyncService();\n      let that = this;\n      return s.getData().then(function(val) {that.data=val});\n       // !!!! This is the return statement,\n    })\n    it('should process data', function (this:any){\n      let that = this;\n      // !!!! And returning the promise\n      return s.transformWithWebWorder(this.data).then(\n        function(val){\n          expect(val).toEqual({a:that.data.a**2, b:that.data.b**2})\n        }\n      )\n    })\n  })\n</pre>            \n                    "},{elementType:"Headline-3",content:'<span id="await">Async with <code>await</code></span>'},{elementType:"Paragraph",content:"\n                    The same example as before but with <code>async await</code>. \n                    The class to be tested is the same as above, so no need to duplicate it here.\n                    The <code>beforeEach</code>, <code>beforeAll</code>,\n                    <code>afterEach</code>, <code>afterAll</code> and <code>it</code> functions do not \n                    return a promise. Instead the callback passed to those functions is an <code>async</code>\n                    one, and there is an <code>await</code> operator used to wait until the promise resolves.\n                    The rest of the code is the same as it would be in the synchronous example\n                    "},{elementType:"Code",content:"\n\n<pre>\ndescribe('A async function', function(){\n    let s : AsyncService;\n    beforeEach(async function (this:any){\n      s = new AsyncService();\n      this.data = await s.getData();\n    })\n    it('should process data', async function (this:any){\n      let processedData = await s.transformWithWebWorder(this.data);\n      expect(processedData).toEqual({a:this.data.a**2, b:this.data.b**2})\n    })  \n  })\n</pre>            \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"jasmine.github.io",href:"https://jasmine.github.io/tutorials/your_first_suite",description:"Tutorial"}]}]};function _o(){return Uo}var Wo={summary:"jasmine getting started",title:"Jasmine, getting started",searchKeywords:"\n\n    ",cathegory:"jasmine",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Jasmine, getting started"},{elementType:"Paragraph",content:"\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"jasmine.github.io",href:"https://jasmine.github.io/setup/browser.html",description:"Tutorial"},{elementType:"Link",content:"jasmine.github.io",href:"https://jasmine.github.io/pages/docs_home.html",description:"Tutorial"}]}]};var qo={summary:"jasmine matchers",title:"Jasmine matchers",searchKeywords:"\n    expect toBe toEqual toBeCloseTo toBeDefined toBeFalsy toBeGreaterThan toBeGreaterThanOrEqual toBeLessThan\n    toBeLessOrEqual toBeNaN toBeNegativeInfinity toBeNull toBePositiveInfinity toBeTruthy toBeUndefined toContain(expected) \n    toHaveBeenCalled toHaveBeenCalledBefore(expected) goHaveBeenCalledTimes toHaveBeenCalledWhith toMatch toThrow(expected)\n    toThrowError(expected, message) custom matchers fail asymetricMatch any\n    ",cathegory:"jasmine",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Matchers"},{elementType:"UnsignedList",content:["<code>toBe(expect)</code>: the same as <code>===</code>, to be used on primitives,\n                        if used on objects references would be compared, and if objects have the same keys and\n                        values false would be returned,","<code>toEqual(expect)</code>: compared objects deeply. Not lookin only on the \n                        references, but rather on keys and values. On primitives the same effect as <code>toBe</code>","<code>toBeCloseTo(expect, precision)</code>: \n                        <ul>\n                        <li><code>expected</code>: is the value to that is expected</li>\n                        <li><code>precision</code>: a number indicating the number of decimal points to check</li>\n                        </ul>\n                        <code>expect(2.123456).toBeCloseTo(2.1238, 3)</code> would pass,\n                        ","<code>toBeDefined()</code>: fails if the result is undefined,","<code>toBeUndefined()</code>","<code>toBeFalsy()</code> pass if result after conversion to boolean gives false,","<code>toBeTruthy()</code>: pass if result after conversion to boolean gives true,","<code>toBeGreaterThan(expect)</code>","<code>toBeGreaterOrEqual(expect)</code>","<code>toBeLessThan(expect)</code>","<code>toBeLessOrEqual(expect)</code>","<code>toBeNaN(expect)</code>: pass if expected is NaN","<code>toBeNegativeInfinity()</code>","<code>toBePositiveInfinity()</code>","<code>toBeNull()</code>","<code>toContain(expect)</code> supports:\n                        <ul>\n                            <li>arrays</li>,<li>strings, capable of matching a substring</li>,\n                            <li>sets</li>\n                        </ul>\n                        Does not support objects or Maps\n                        ","<code>toHaveBeenCalled()</code> <code>expect(aSpy).toHaveBeenCalled()</code>:\n                        passes if the spy was called","<code>toHaveBeenCalledBefore(spyB)</code>: <code>expect(spyA).toHaveBeenCalledBefore(spyB)</code>,\n                        pass if spyA was called before spyB","<code>toHaveBeenCalledTimes(expect)</code> checks if a spy was called expected number of times,","<code>toHaveBeenCalledWith(repetable)</code>: \n                        <code>expect(spy).toHaveBeenCalledWith('arg1', 5, true)</code>: repetable is a set of arguments that \n                        is expected,","<code>toMatch(regExp)</code> test against the regular expression,","<code>toThrow(expect)</code>: expect is an optional value to be thrown. If not provided \n                        the fact that something was thrown is good enough,","<code>toThrowError(expect, message)</code>: \n                        <ul>\n                        <li><code>expected</code> an optional error name,</li>\n                        <li><code>message</code> string or regExp that is set with an error,</li>\n                        </ul>\n                        "]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Custom matchers"},{elementType:"Paragraph",content:"\n                        A <code>custom matchers</code> factory is an object returning functions, that are custom matchers.\n                        A custom matcher is a function taking a <code>matchersUtil</code> object, and returning an \n                        object, that has a <code>compare</code> function. Than compare function takes\n\n                    "},{elementType:"UnsignedList",content:["<code>actual</code> the arguemant that is taken by the <code>expect</code> function\n                         that will be chained with the matcher,","<code>expected</code>: an argument taken by the custom matcher,"]},{elementType:"Paragraph",content:"\n                    and returns the <code>result</code> object, having keys:\n                    "},{elementType:"UnsignedList",content:["<code>pass</code>: the boolean value, that if true then the test will be passed, and if false,\n                        then the test will fail,","<code>message</code>: a string, that will be displayed. Should be different for the \n                        pass and fail scenario. If absent, then will be factorized by the framework,"]},{elementType:"SmallHeadline",content:"\n                        MatchersUtil\n                    "},{elementType:"Paragraph",content:"\n                        An object with utils to be used in custom matchers\n                    "},{elementType:"UnsignedList",content:["<code>contains(searchIn, searchFor)</code>: boolean if searchFor was in searchIn","<code>equals(a, b)</code>: boolean if both values are deeply equal,","<code>pp(msg)</code>: pretty-print: a formatter returning a string that may be used \n                        on the failure."]},{elementType:"Code",content:"\n<pre>\nvar customMatchers = {\n    toBeEqualExpectedPlus2: function(matchersUtil){\n        return {\n            compare: function(actual, expected){\n                var result = {};\n                result.pass = (matchersUtil.equals(actual + 2, expected))\n                if (result.pass)  result.message=\"Passed\"\n                else result.message=\"Failed\"\n                return result\n            }\n        }\n    },\n    toContainKey: function(matchersUtil){\n        return {\n            compare: function(actual, expected){\n                var result = {};\n                let keys = Object.getOwnPropertyNames(actual)\n                result.pass = matcherUtil.contains(keys, expected)\n                \n                return result;\n                // message does not have to be set, \n                // if not set will be fabricated\n            }\n\n        }\n    }\n}\n</pre>                    \n            <div class=\"note\">Usage in tests</div>\n<pre>\ndescribe(\"Custom matchers example\", ()=>{\n    beforeEach(()=>{\n        jasmine.addMatchers(customMatchers)\n    })\n    it('Should be 4', (){\n        expect(2).toBeEqualExpectedPlus2(4);\n    })\n    it('Should have a key', ()=>{\n        expect({a: 'val'}).toContainKey('a')\n    })\n})\n</pre>            \n                    "},{elementType:"Headline-3",content:"<code>fail(cause)</code>"},{elementType:"Paragraph",content:"Is for manual failing test cases"},{elementType:"Headline-3",content:"<code>any(constructorName)</code>"},{elementType:"Paragraph",content:"Returns true if the function was called with the constructor name"},{elementType:"Code",content:"\n<pre>\n\nit('Should pass', function(){\n    let aSpy = jasmine.createSpy('aSpy');\n    aSpy(4, 'caption');\n    expect(aSpy).toHaveBeenCalledWith(jasmine.any(Number), jasmine.any(String))\n})\n</pre>                    \n                    "},{elementType:"Headline-3",content:"Asymetric match"},{elementType:"Paragraph",content:"If there is a need to know if compared objects are only in sam part equal."},{elementType:"Code",content:"\n<pre>\ndescribe('Asymetric match', ()=>{\n    var has3 = {\n        asymmetricMatch: function(actual){\n            actual.includes(3);\n        }\n    }\n    it('Should match', function(){\n        expect([1,2,3]).toEqual(has3);\n    })    \n})\n</pre>                    \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"jasmine.github.io",href:"https://jasmine.github.io/api/2.7/matchers.html",description:"Matchers"},{elementType:"Link",content:"jasmine.github.io",href:"https://jasmine.github.io/tutorials/custom_matcher",description:"Custom matchers"},{elementType:"Link",content:"jasmine.github.io",href:"https://jasmine.github.io/api/edge/MatchersUtil.html",description:"Custom matchers"}]}]};var zo={summary:"jasmine test scructure",title:"Jasmine, test structure",searchKeywords:"\n        describe it expect expectation beforeEach afterEach beforeAll afterAll  fail \n        xdescribe xit pending \n    ",cathegory:"jasmine",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Jasmine, the structure of tests"},{elementType:"Paragraph",content:"\n                    "},{elementType:"HiddenDescription",content:{legend:[{type:"Not nested",styleClasses:"btn bg-dark text-white ",description:"Describe block."},{type:"Nested",styleClasses:"btn btn-secondary ml-2rem text-white ",description:"Nested in the describe block: it, describe, xit expect"},{type:"Deeply nested",styleClasses:"btn btn-light border border-dark ml-4rem ",description:"describe may be nested in the describe, it may be nested, etc"}],items:[{type:"Not nested",title:"describe(testSuiteName: string, callback: function)",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                                <code>describe</code> is a function for running the test suit.\n                                                It has:\n                                                "},{elementType:"UnsignedList",content:["<code>beforeEach(cb)</code>: test case setup,","<code>afterEach(cb)</code>: test case teardown,","<code>beforeAll(cb)</code>: suite setup,","<code>afterEach(cb)</code>: suite teardown,","<code>it(description, cb)</code>: test case,"]}]}},{type:"Not nested",title:"fdescribe(testSuiteName: string, callback: function)",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                                <code>fdescribe</code> similar to <code>descirbe</code>, but \n                                                if this is present, no other tests will run. Only the \n                                                <code>fdescribe</code> tests will be executed.\n                                                "},{elementType:"UnsignedList",content:["<code>beforeEach(cb)</code>: test case setup,","<code>afterEach(cb)</code>: test case teardown,","<code>beforeAll(cb)</code>: suite setup,","<code>afterEach(cb)</code>: suite teardown,","<code>it(description, cb)</code>: test case,"]}]}},{type:"Nested",title:"beforeEach(cb)",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                                <code>cb</code> callback will be called before each \n                                                <code>spec</code> from this <code>describe</code> block.\n                                                This means, that this callback will be called even \n                                                before each <code>spec</code> (<code>it()</code>) from \n                                                the <code>describe</code> blocks that are nested in this block\n                                                "},{elementType:"Paragraph",content:"\n                                                Is good for the setups. Due to documentation, custom\n                                                matchers should ideally be added here:\n                                                <code>jasmine.addMatchers(customMatchers)</code>\n                                                })\n                                                "}]}},{type:"Nested",title:"afterEach(cb)",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                                <code>cb</code> callback will be called after each \n                                                <code>spec</code> from this <code>describe</code> block.\n                                                This means, that this callback will be called even \n                                                after each <code>spec</code> (<code>it()</code>) from \n                                                the <code>describe</code> blocks that are nested in this block\n                                                "},{elementType:"Paragraph",content:"\n                                                Should be used for the test case teardown\n                                                "}]}},{type:"Nested",title:"beforeAll(cb)",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                                Will be called before all spec from the hosting \n                                                <code>describe</code> block. May be used for the \n                                                test suite setup.\n                                                "}]}},{type:"Nested",title:"afterAll(cb)",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                                Will be called after all test cases (it) from the hosting \n                                                <code>describe</code> block. May be used for the test \n                                                teardown.\n                                                "}]}},{type:"Nested",title:"it(testCaseName: string, callback: function)",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                                    This function is to describe a test case, so an atomic\n                                                    test bit testing a single use case. This function takes:\n                                                "},{elementType:"UnsignedList",content:["<code>testCaseName</code>: a string value that describes the test \n                                                    name. Should start with the <i>should</i> word, so it sounds in a \n                                                    natural language form","<code>callback</code>: a function that will be wrapped by the \n                                                    <code>it</code> decorator-function."]}]}},{type:"Nested",title:"xit(testCaseName: string, callback: function)",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                                    This function is exactly the same as the <code>it</code> function\n                                                    but the test does not resolve to either pass or fail. Instead it \n                                                    becomes <i>pending</i>, not influencing the parent test set/suite\n                                                "},{elementType:"Paragraph",content:"\n                                                May be used to skip tests.\n                                                "}]}},{type:"Deeply nested",title:"expect(value: any).matcher(value:any)",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                                    <code>expect</code> is a function taking a value, or an expression that \n                                                    evaluates to a value. This function chains with a <i>matcher</i>: a \n                                                    function that compares the value returned by the <code>expect</code> \n                                                    function, and passes the test in case the values are equal, or fails it.\n                                                "}]}},{type:"Nested",title:"describe(testSetName: string, callback: function)",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                                The <code>describe</code> function may be nested, to extract a \n                                                logical set of tests\n                                                "}]}},{type:"Deeply nested",title:"it(testCaseName: string, callback: function)",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                                \n                                                "}]}},{type:"Deeply nested",title:"beforeAll(cb)",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                                <code>beforeAll</code>, <code>afterAll</code>, \n                                                <code>beforeEach</code> and <code>afterEach</code>\n                                                may be nested in the nested describe blocks.\n                                                In this cases will be executed only before or after \n                                                test cases from the host <code>describe</code> block\n                                                (the nested one)\n                                                "}]}},{type:"Not nested",title:"xdescribe(testSuiteName: string, callback: function)",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                                This is the same as the <code>describe</code> with the difference, that \n                                                the test suite will not be executed, and the test result will not pass\n                                                or fail, but will resolve to the pending state.\n                                                "},{elementType:"Paragraph",content:"\n                                                May be used to skip tests.\n                                                "}]}}]}},{elementType:"Headline-3",content:"<code>this</code> keywrod"},{elementType:"Paragraph",content:"\n                    May be used to pass information between the functions in a <code>describe</code> block.\n                    There is a new, clean <code>this</code> set for each <code>describe block</code> \n                    making the same <code>this</code> available to exchange information between <code>beforeEach</code>\n                    <code>afterEach</code>, <code>beforeAll</code>, <code>afterAll</code> and each <code>it</code>\n                    "},{elementType:"UnsignedList",content:["In typeScript, the callback should not be an arrow function, because of \n                        issues with the <code>this</code> keyword. If <code>this</code> is not an arrow funciton\n                        then <code>this</code> should be declared in the function argument section","The scope of the nested <code>describe</code> shadows the not nested one, and creates \n                        its own scope of <code>this</code>. But the <code>this</code> of the parent will be \n                        still available in the parent scope:"]},{elementType:"Code",content:"\n                    <pre>\ndescribe('The this demonstration', ()=>{\n    var counter = 0;\n    beforeAll(function(this: any) {\n        // no arrow function in ts, because of issues with types \n        this.parentScopeMessage = \"I am parent scope\"\n    })\n    befeoreEach(function(this: any){\n        // no arrow function in ts, because of issues with types\n        console.info(`I am the ${counter} beforeEach call. This is the 'this' message`, this.message);\n        counter++;\n    })\n    describe('Child scope for this demonstration', function(this: any){\n        beforeAll(function(this: any) {\n            this.childScope = \"I am child scope\"\n        })\n        beforeEach(function(this: any){\n            console.info('I am child beforeEach ' + counter, this.childScope, this.parentScopeMessage);\n            // this.childScope is visible as expected,\n            // this.parentScope will be undefined, as this is the new scope for this\n            counter++;\n        })\n        it('some test case', function(this:any){\n            console.log('this in it', this);\n            // this.childScopeMessage OK,\n            // this.parentScope undefined\n            expect(1).toBe(1);\n        })\n    })\n})                    \n                    </pre>\n                    "},{elementType:"Headline-3",content:"example"},{elementType:"Code",content:"\n                    <div class=\"note\">Lets test the following class</div>\n<pre>\nclass MathOperations{\n    add(a,b){return a + b;}\n    substr(a,b){return a - b;}\n    sort(arr){\n        arr.sort((a,b)=>{\n            if (a<b) return -1;\n            if (a===b) return 0;\n            return 1\n        })\n    }\n}\n</pre>           \n                <div class=\"note\">Tests</div>\n<pre>\ndescribe('Test MathOperations'){\n    var testedClass = null; \n       // or testedClass = new MathOperations()\n       // lets use beforeAll, to ilustrate this function\n    beforeAll(()=>{\n        testedClass = new MathOperations()\n    })\n    afterAll(()=>{\n        delete testedClass;\n            // would be garbage collected, but again\n            // lest show the tardown :)\n    })\n    beforeEach(()=>{\n        console.log('Running a MathOperations test')\n    })\n\n    describe('Test arithm. operations', ()=>{\n        beforeEach(()=>{\n            console.log('Running an arithm. test');\n        })\n        it('Should return 4 if 2 added to 2', ()=>{\n            expect(testedClass.add(2, 2)).toBe(4);\n        })\n        it('Should return 5 if 3 substr. from 8', ()=>{\n            expect(testedClass.substr(8, 5)).toBe(3);\n        })\n\n    })\n\n    it('Should sort an array', ()=>{\n        expect(testedClass.sort([4,2,3,1])).toEqual([1,2,3,4]);\n    })\n    xit('Should sort an array', ()=>{\n        expect(testedClass.sort([4,2,3,{a: 9}])).toEqual([1,2,3,4]);\n        // This will not fail, will be pending, no matter that this would\n        // throw a TypeError. xit will not be called.\n    })\n\n}\n</pre>                \n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"jasmine.github.io",href:"https://jasmine.github.io/tutorials/your_first_suite",description:"Tutorial"}]}]};var Go={summary:"jasmine spy",title:"Jasmine spy",searchKeywords:"\n    spy spies spying function mocking matcher matchers\n    ",cathegory:"jasmine",content:[{elementType:"Article",content:[{elementType:"Headline",content:"A spy"},{elementType:"Paragraph",content:"\n                    A <code>spy</code> is a dummy function, that will be invoked instead of the real function when\n                    the real function is invoked. There are matchers for finding out if the function that is spied on \n                    was called, how many times it was called and with what parameters it was called.\n                    There is a possiblity to invoke the real function with the spy (so it is executed in reality), \n                    or to invoke a false function with the spy instead, or the spy call may return a value.\n                    "},{elementType:"SmallHeadline",content:"Matchers"},{elementType:"UnsignedList",content:["<code>expect(aSpy).toHaveBeenCalled()</code>: if the function was called at least once,","<code>expect(aSpy).toHaveBeenCalledBefore(bSpy)</code>: \n                         if the <code>aSpy</code> was called before the <code>bSpy</code>,","<code>expect(aSpy).toHaveBeenCalledTimes(nr)</code>: if the <code>aSpy</code> was called the \n                        specified number of times,","<code>expect(aSpy).toHaveBeenCalledWith(arg1[, arg2[, ...]])</code> to check if the \n                        spy was called with specified set of arguments."]},{elementType:"SmallHeadline",content:"Creating a spy"},{elementType:"Paragraph",content:"Firstly, lets create an instance of the object, that is going to be spied on:\n                    <code>let s = new SomeService()</code>. Now:"},{elementType:"UnsignedList",content:["<code>let someSpy = spyOn<any, any>(s, 'methodName')</code>: \n                        this creates a dummy method. The real one will not be called. The <code>any, any</code>\n                        part is for typeScript. There may ocure an error\n                         <i>Argument of type '\"methodName\"' is not assignable to parameter of type 'never'</i>, and by \n                         specifying types we aviod this error.","<code>let someSpy = spyOn<any, any>(s, 'methodName').and.callThrough()</code>: this creates a spy,\n                        and calls the real function,","<code>let someSpy = spyOn<any, any>(s, 'methodName').and.callFake(()=>{console.log('I am fake')})</code>:\n                        calls the fake function given as the <code>callFake</code> argument,","<code>let someSpy = spyOn<any, any>(s, 'methodName').and.returnValue('someVal')</code>:\n                        will not call the real function, only the dummy one, and then return the value given to the <code>returnValue</code>\n                        as an argument."]},{elementType:"SmallHeadline",content:"The simple example"},{elementType:"Code",content:"\n                    <div class=\"note\">A class to test</div>\n<pre>\nclass SpyTester {\n    callFunctionTimes(n:number){\n        for (let i=0; i < n; i++){\n          this.functionToBeCalled(i)\n          // if this.secondFunctionToBeCalled(2) was here, the \n          // expect(this.spy1).toHaveBeenCalledBefore(spy2); \n          // would fail\n        }\n        this.secondFunctionToBeCalled(2)\n        \n      }\n    functionToBeCalled(x:any){}\n     secondFunctionToBeCalled(x:any){}\n}\n</pre> \n            <div class=\"note\">Now the test</div>\n<pre>\ndescribe('Spy', ()=>{\n    let  service: SpyTester = new SpyTester();\n    let spy1 =spyOn(service, 'functionToBeCalled');\n    // WRONG way to create a spy !\n\n    beforeEach(function(this:any){\n      this.spy1 =spyOn(service, 'functionToBeCalled');\n      // passing a spy with this\n    })\n    \n    it('Should call functionToBeCalled', function(this:any){\n      let spy2 = spyOn(service, 'secondFunctionToBeCalled')\n      // The other way to create a spy\n      service.callFunctionTimes(5);\n      expect(this.spy1).toHaveBeenCalled();\n      expect(this.spy1).toHaveBeenCalledTimes(5);\n      expect(this.spy1).toHaveBeenCalledBefore(spy2);\n      expect(this.spy1).toHaveBeenCalledWith(2);\n    })\n  })\n</pre>\n    <div class=\"note\">Creating a false spy</div>\n<pre>\nit('Should create a mock spy object', function(this:any){\n    let objSpy = jasmine.createSpyObj('multiSpy', ['sp1', 'sp2', 'sp3'])\n    objSpy.sp1();\n    objSpy.sp2();\n    expect(objSpy.sp1).toHaveBeenCalled();\n    expect(objSpy.sp2).toHaveBeenCalled();\n  })\n\n  it('Should create a mock single spy', function(this:any){\n    let spy = jasmine.createSpy('singleSpy')\n    spy();\n    expect(spy).toHaveBeenCalled();\n  })\n</pre>             \n                    "}]},{elementType:"SmallHeadline",content:"Example with calling functions"},{elementType:"Code",content:"\n            <div class=\"note\">A class to be tested:</div>\n<pre>\nclass DummyClass{\n    callDummy(){\n        this.dummy();\n    }\n    dummy(){\n        this.nextDummy();\n        console.log('Dummy');\n    }\n    nextDummy(){\n        console.log('nextDummy');\n    }\n}\n</pre>            \n            <div class=\"note\">Now the test</div>\n<pre>\ndescribe('Test callThrough, callFake and returnValue' ()=>{\n    let s: DummyClass;\n    beforeEach(()=>{s = new DummyClass()});\n\n    it('should call nextDummy spy', ()=>{\n        let spyA = spyOn<any,any>(s, 'dummy').and.callThrough();\n        // the real dummy will be called,\n        let spyB = spyOn<any, any>(s, 'nextDummy').and.callFake(()=>{\n            console.log('I am a fake nextDummy, the real will not be called')\n        })\n        s.callDummy();\n        expect(spyA).toHaveBeenCalledBefore(spyB);\n        //spyA called the real method, so spyB was called instead of the \n        // nextDummy method.\n        // Instead of nextDummy, a fake function was invoked.\n        // Will pass, as spyA was called before spyB\n    })\n})\n</pre>\n            "},{elementType:"SmallHeadline",content:"Example with <code>returnValue</code>"},{elementType:"Code",content:"\n            <div class=\"note\">Class to test</code>\n<pre>\nclass DummyClass{\n\n    testIf3(){\n        return (this.dummyIs3() === 3)\n        // returns false, as dummyIs3 returns 2\n    }\n\n    dummyIs3(){return 2}\n}\n</pre>                        \n            <div class=\"note\">The spy will return 3, so the test will pass</code>\n<pre>\ndescribe('Testing returnValue', ()=>{\n    let s: DummyClass;\n\n    beforeEach(()=>{s = new DummyClass()});\n    it('should pass', ()=>{\n        let spy = spyOn<any,any>(s, 'dummyIs3').and.returnValue(3);\n        let result = s.testIf3();\n        expect(result).toBe(3);\n        // pass\n    })\n})\n</pre>            \n            "},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"scriptverse.academy",href:"https://scriptverse.academy/tutorials/jasmine-spyon.html",description:"callThorough, callFake and returnValue explained"},{elementType:"Link",content:"codecraft.tv",href:"https://codecraft.tv/courses/angular/unit-testing/asynchronous/",description:"Good side about testing in Angular. Done explained"}]}]};var Vo={summary:"jasmine angular",title:"Jasmine Angular",searchKeywords:"\n\n    ",cathegory:"jasmine",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Testing Angular with Jasmine"},{elementType:"ListOfContent",content:[{id:"dictionary",title:"Dictionary"},{id:"service",title:"Testing a service,"},{id:"simpleComponent",title:"Testing a component without dependencies,"},{id:"serviceComponent",title:"Testing a component with service,"},{id:"colorFilterComponent",title:"Testing a more complicated exampe with a service,"},{id:"DOM",title:"Testing component with DOM,"},{id:"directives",title:"Testing directives,"},{id:"private",title:"What about private members of the class,"}]},{elementType:"Paragraph",content:"\n                    "},{elementType:"Headline",content:'<span id="dictionary">Dictionary</span>'},{elementType:"HiddenDescription",content:{legend:[{type:"Item",styleClasses:"btn bg-dark text-white ",description:"Describe block."}],items:[{type:"Item",title:"TestBed",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                            <code>TestBed</code>: ATB: Angular TestBed is the API for writing unit test in agular\n                                            "}]}},{type:"Item",title:"TestBed.configureTestingModule",description:{elementType:"Section",content:[{elementType:"Code",content:"\n<pre>\nTestBed.configureTestingModule({\n    declarations: [ LoadChangeContentComponent ],\n    providers: [{provide: RandomDataProviderService, useClass: MockRandomDataService}]\n})\n\n//or\n\nbeforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ LoadChangeContentComponent ],\n      providers: [{provide: RandomDataProviderService, useClass: MockRandomDataService}]\n    })\n    .compileComponents();\n  });\n</pre>                                            \n                                            "},{elementType:"Paragraph",content:"\n                                            Should be done if there are dependecies.\n                                            This operation reminds about configurating an angular module with the \n                                            decorator. This should be done in <code>beforeEach</code>, and \n                                            only once.\n                                            "}]}},{type:"Item",title:"Fixture",description:{elementType:"Section",content:[{elementType:"Paragraph",content:'<code>Fixture</code>: The <code>ComponentFixture</code> \n                                            <a href="https://angular.io/guide/testing-components-basics#componentfixture" target="blank">\n                                            [angular.io]</a> is a test harness for interacting with the created component and its \n                                            corresponding element.\n                                            '},{elementType:"Paragraph",content:"Below example explains a lot:\n                                            "},{elementType:"Code",content:"\n                                            <pre>\ndescribe('LoadChangeContentComponent', () => {\n  let component: LoadChangeContentComponent;\n  let fixture: ComponentFixture<LoadChangeContentComponent>;\n\n  beforeEach(async () => {\n      // The service is an async function, so the before each \n      // should be async \n    await TestBed.configureTestingModule({\n        // configureTestingModule is because of the dependancy\n      declarations: [ LoadChangeContentComponent ],\n      providers: [\n          RealService, //if a need to use one\n          {\n              provide: RandomDataProviderService, \n              useClass: MockRandomDataService\n          }\n        ]\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(LoadChangeContentComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    // No auto changes will be detected,\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n                                            </pre>\n\n                                            "}]}},{type:"Item",title:"fixture.nativeElement",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                                        Or <code>ComponentFixture.nativeElement</code> or\n                                                        <code>ComponentFixture.DebugElement.nativeElement</code>\n                                                        The <code>fixture.nativeElement</code> is the short version that\n                                                        may be used. The longer one is due to the fact that jasmine tests\n                                                        with Angular may be done on the server side, and with web workers,\n                                                        so must be kept more general because of the fact, that there\n                                                        is no DOM on the server or in the web worker.\n                                                        "},{elementType:"Paragraph",content:"\n                                                        <code>fixture.nativeElement</code> may be used with the <code>querySelector</code>\n                                                        methods.\n                                                        "},{elementType:"Code",content:"\n                                                        <pre>\nfixture.nativeElement.querySelector('div');\n// or the same\nfixture.DebugElement.nativeElement.querySelector('div');\n                                                        </pre>\n                                                        "},{elementType:"Paragraph",content:"\n                                                        There is a way to get to the desired element with a <code>By.css</code>\n                                                        api. This is useful in case of non browser environments, where \n                                                        is no DOM (like a server).\n                                                        "},{elementType:"Code",content:"\n                                                        <pre>\nimport { By } from '@angular/platform-browser';    \n\nit('should find <div> with fixture.debugElement.query(By.css)', () => {\n    const dE: DebugElement = fixture.debugElement;\n    const divDe = dE.query(By.css('div'));\n    const div: HTMLElement = divDe.nativeElement;\n    expect(div.textContent).toEqual('some innerText');\n  });\n\n                                                        </pre>\n                                                        "}]}},{type:"Item",title:"fixture.componentInstance",description:{elementType:"Section",content:[{elementType:"Paragraph",content:"\n                                                            <code>fixture.nativeElement</code> provides access to DOM, and\n                                                            <code>fixture.componentInstance</code> \n                                                            gives access to the component internals. This makes it possible \n                                                            to call lifecycle methods on the component and get to \n                                                            internal component variables:\n\n                                                            "},{elementType:"Paragraph",content:"\n                                                            Without dependencies, fixture might not be needed\n\n                                                            "},{elementType:"Code",content:"\n                                                            <div class=\"note\">Firstly lets declare the fixture and the \n                                                            component</div>\n                                                            <pre>\ndescribe('',()=>{\n    let component: MyTestedClass = new MyTestedClass();\n})                                                            \n                                                            </pre>\n                                                            <div class=\"note\">Now for the it block</div>\n<pre>\n    it('should pass', ()=>{\n        expect(component.someProp).toBe('');\n        component.onInit\n    })\n</pre>                                                            \n                                                            "},{elementType:"Paragraph",content:"\n                                                            There is a way to get to the desired element with a <code>By.css</code>\n                                                            api. This is useful in case of non browser environments, where \n                                                            is no DOM (like a server).\n                                                            "},{elementType:"Code",content:"\n                                                            <pre>\n\n    \n                                                            </pre>\n                                                            "}]}}]}}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Testing a component"},{elementType:"Paragraph",content:"\n                    Entity tests should test elements in isolation. This meens, that a component should be tested \n                    on its own. Testing a component is not testing related services, directives or pipes. \n                    Everything has to be stubbed or mocked. If there is a service fetching data from the \n                    server, the server communication is not allowed in ET. The service should be mocked with\n                    a class having methods named in the same way, and returning hardcoded values. \n                    If a mocked service contains too much logic, then bugs may occure in the mocked service, and\n                    this is unwanted.\n                    "},{elementType:"Headline-2",content:'<span id="simpleComponent">No dependencies</span>'},{elementType:"Paragraph",content:"\n                    Let's take a simple component for exercising\n                    "},{elementType:"HiddenCode",content:[{info:"\n                            HTML template for the component\n                            ",code:"\n<pre>\n&lt;div class=\"alert alert-warning\">\n    {{content}}\n&lt;/div>\n</pre>\n<div class=\"note\">ts</div>                    \n<pre>\n@Component({\n    selector: 'my-component',\n    templateUrl: '...',\n    styleUrls: ['...']\n  })\nexport class MyComponent implements OnInit {\n\n    constructor() { }\n    content: string = '';\n    ngOnInit(): void {\n      this.content = \"This content was set by the ngOnInit\"\n    }\n  }\n</pre>\n                    "},{info:"\n                    The easiest way to create and test a component class is with the <code>new</code> operator\n                    usage. Lets look at en example, but lest keep in mind, that the component in Angular is never a \n                    ts class alone. It is binded with a HTML template and those bindings are what is needed to be \n                    tested on the entity level. So creating a component with a <code>new</code> operator, and not \n                    using a fixture is a bad idea.\n                    ",code:"\n<pre>\nfdescribe('Setting test with new operator', ()=>{\n    let component = new MyComponent();\n    it('should be filled with data onInit',()=>{\n      expect(component.content).toBe('');\n      component.ngOnInit();\n      console.info('COMPONENT', component)\n      expect(component.content.length).toBeGreaterThan(4);\n    })\n  })\n</pre>\n                    "},{info:"\n                    Above code allows to test the component class, even to invoke lifecycle methods on it.\n                    However, the Angular component consists of the ts class, that is binded with the HTML\n                    template. When the component is tested, the bindings should be tested. \n                    So access to the DOM is needed, and the <code>detectChanges</code> method would be necessary.\n                    Because of this, the fixture is inevitable.\n                    ",code:"\n<pre>\ndescribe('Test with the fixture', () => {\n    let component: MyComponent;\n    let fixture: ComponentFixture<MyComponent>;\n  \n    beforeEach(async () => {\n      await TestBed.configureTestingModule({\n        declarations: [ MyComponent ]\n      })\n      .compileComponents();\n    });\n  \n    beforeEach(() => {\n      fixture = TestBed.createComponent(MyComponent);\n      component = fixture.componentInstance;\n    });\n  \n    it('should fill the content property after ngOnInit', () => {\n      let domElement = fixture.debugElement.nativeElement.querySelector('div');\n      expect(component.content).toBe('');\n      // empty, as ngOnInit has to be invoked manualy\n      component.ngOnInit();\n      expect(component.content.length).toBeGreaterThan(5);\n      // after ngOnInit content has to be not empty\n      expect(domElement.innerHTML).toBe('');\n      // innerHTML is still empty, as changes are not detected automatically\n      fixture.detectChanges();\n      // After detecting chagnges, DOM content should be updated\n      expect(domElement.innerHTML).not.toBe('');\n    });\n  });\n</pre>\n                    "}]},{elementType:"SmallHeadline",content:'<span id="serviceComponent">Testing a component with a service dependency</span>'},{elementType:"Paragraph",content:"Lets take a simle component having a headline and a paragraph. Both values are\n                    set in ngOnInit by an async service:"},{elementType:"HiddenCode",content:[{info:"\n                            A service giving random strings\n                            ",code:"\n<pre>\nexport class RandomDataProviderService {\n    getData(len:number){\n      let output = '';\n      let count = 0;\n      return new Promise((resolve)=>{\n        let int = setInterval(()=>{\n          let d = Date.now() * Math.random();\n          output += ' ' + d.toString(32);\n          count++;\n          if (count >= len) {\n            clearTimeout(int);\n            resolve(output);\n          }\n        },1)  \n      })\n    }\n  }\n</pre>               "},{info:"A HTML template for the component",code:"\n                <pre>                \n&lt;h5>{{headline}}&lt;/h5>\n&lt;p>{{content}}&lt;/p>\n&lt;button class=\"btn btn-info\" (click)=\"update()\">Update&lt;/button>\n                </pre>\n                <div class=\"note\">And components ts</div>     \n<pre>\nexport class LoadChangeContentComponent implements OnInit {\n    headline:string = '';\n    content:string = '';\n    constructor(private dataProvider: RandomDataProviderService) { }\n  \n    ngOnInit(): void {\n      this.setNewContent();\n    }\n  \n    setNewContent(){\n      let that = this;\n      this.dataProvider.getData(2).\n            then(function(value){that.headline = <string>value});;\n      this.dataProvider.getData(80).\n            then(function(value){that.content = <string>value});;\n    }\n  \n    update(){\n      console.log('Button clicked')\n      this.setNewContent();\n    }\n  }\n</pre>                \n                    "},{info:"The service gives random values. For tests it is better to have \n                    deterministic values. Service class has to be mocked:",code:"\n<pre>\nclass MockRandomDataService {\n    nrOfRuns: number = 0;\n    getData(nr:number){\n      let output = '';\n      nr = 5 + this.nrOfRuns;\n      for (let i = 0; i < nr; i++){\n        output += i.toString(32);\n      }\n      return new Promise((resolve)=>{\n        setTimeout(()=>{\n          console.log(output)\n          resolve(output);\n        },5)\n      })\n    }\n  \n    increaseCounter(){\n      this.nrOfRuns++;\n    }\n  }\n</pre>"}]},{elementType:"Paragraph",content:"The <code>increaseCounter()</code> method will manualy change the data that the \n            mock is providing, but in a deterministic way. We are testing a component, not the service!"},{elementType:"HiddenCode",content:[{info:"Tests for the above content:",code:"\n<pre>\ndescribe('LoadChangeContentComponent', () => {\n    let component: LoadChangeContentComponent;\n    let fixture: ComponentFixture<LoadChangeContentComponent>;\n  \n    beforeEach(async () => {\n      await TestBed.configureTestingModule({\n        declarations: [ LoadChangeContentComponent ],\n        providers: [{provide: RandomDataProviderService, useClass: MockRandomDataService}]\n      })\n      .compileComponents();\n    });\n  \n    beforeEach(() => {\n      fixture = TestBed.createComponent(LoadChangeContentComponent);\n      component = fixture.componentInstance;\n      fixture.detectChanges();\n    });\n  \n    it('should component be empty before onInit', ()=>{\n       let p = fixture.nativeElement.querySelector('p');\n       let h = fixture.debugElement.nativeElement.querySelector('h5');\n       expect(p.innerText).toBe('');\n       expect(h.innerText).toBe('');\n    })\n  \n    it('should have content after onInit and promise resolve', fakeAsync(()=>{\n      let p = fixture.nativeElement.querySelector('p');\n      let h = fixture.debugElement.nativeElement.querySelector('h5');\n      component.ngOnInit();\n      tick(80);\n      fixture.detectChanges();\n      console.log(p)\n      expect(p.innerText).toBe('01234');\n      expect(h.innerText).toBe('01234');\n   }))\n  \n   it('should fill headline with data after ngOnInit', fakeAsync(()=>{\n     expect(component.headline).toBe('');\n     component.ngOnInit();\n     tick(80);\n     expect(component.headline).toBe('01234');\n   }))\n  \n   it('should update value after click', fakeAsync(()=>{\n    let p = fixture.nativeElement.querySelector('p');\n    let h = fixture.debugElement.nativeElement.querySelector('h5');\n    let b = fixture.nativeElement.querySelector('button');\n    let serv = TestBed.get(RandomDataProviderService);\n    component.ngOnInit();\n    tick(80);\n    fixture.detectChanges();\n    expect(p.innerText).toBe('01234');\n    expect(h.innerText).toBe('01234');\n    serv.increaseCounter();\n    b.click();\n    tick(80);\n    fixture.detectChanges();\n    expect(p.innerText).toBe('012345');\n    expect(h.innerText).toBe('012345');\n  }))\n  });\n</pre>                    \n                    "}]},{elementType:"SmallHeadline",content:'<span id="colorFilterExample">More complicated example with a service</span>'},{elementType:"Paragraph",content:"This component has a color input. By interacting with it, user changes its <code>value</code>\n            property to the hexadecimal string indicating the chosen color. By default the element has the black:\n            <code>'#000000'</code> color. There are checkboxes with blue, green and red lables. Each checkbox \n            toggles one of the chosen color ingrediants, so the <code>outputColor</code> div gets the \n            color with or without the selected ingrediance."},{elementType:"Paragraph",content:"The service is responsible for returning a color without filtered ingrediances."},{elementType:"HiddenCode",content:[{info:"Tests for the above content:",code:"\n                            "}]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:" ",description:"Tutorial"}]}]};var Ko=[_o(),Wo,zo,qo,Go,Vo];console.log(_o());var $o,Jo,Xo,Yo,Qo,Zo,ea,ta,na,oa,aa,ia,ra,sa,ca=[{summary:"@ (at-rules)",title:"@ (at-rules)",searchKeywords:"\n    @ at at-rules @use @forward @import @mixin @include @function @extend @error @warn @debug @at-root\n    ",cathegory:"scss",content:[{elementType:"Article",content:[{elementType:"Headline",content:"@ at-rules"},{elementType:"Paragraph",content:"\n                    "},{elementType:"HiddenCode",content:[{info:"\n                            <code>@use</code>: imports mixins, functions, variables from other sheets. Sheet imported that \n                            way is called a module.<br>\n                            <b>Use</b> must be at the first place of the file, before anything else is used. \n                            Even when the imported file name starts with an underscore (a library naming convension), \n                            the undesrscore should be not used with the underscore.\n                            ",code:'\n                            <div class="note">A moudle _colorTheme.scss</div>\n<pre>\n$bg-color: red !default;\n\n@function getColor($_bg-color){\n    $output: #000;\n    $lightness: lightness($_bg-color);\n    @if $lightness < 50% {\n        $output: #fff;\n    }\n    @return $output;\n}\n\n@mixin get-theme($theme-color){\n    background-color: $theme-color;\n    border-color: darken($color: $theme-color, $amount: 20);\n    color: getColor($theme-color);\n}\n\n@mixin get-default-color{\n    background-color: $bg-color;\n    border-color: darken($color: $bg-color, $amount: 20);\n    color: getColor($bg-color);    \n}\n</pre>                      \n                        <div class="note">And now main file</div>     \n<pre>\n@use "./colorTheme" with ($bg-color: #44ff44);\n// below usage of the <code>@use</code> with an alias \n@use "./colorTheme" as c\n\n$item-width: 50px;\n$item-height: 50px;\n$item-radius: 5px;\n\n@mixin rectangle{\n    position: relative;\n    width: $item-width;\n    height: $item-height;\n    border: transparent medium solid;\n    border-radius: $item-radius;\n}\n\n.red-element {\n    @include rectangle;\n    @include colorTheme.get-theme(#ff9999)\n\n    @include c.get-theme(#ff9999) // this would work\n}\n</pre>\n                            '},{info:"\n                            <code>@import</code> This at-rule imports the file given as an argument and makes it globaly available.\n                            Carefulness is required, as there is a possiblity to override some variables. Moreover there is no\n                            possiblity to track where certaing variables come from. <br>\n                            <code>@import</code> in css makes a http request to fetch the imported file. This may not be always \n                            desired. In scss <code>@import</code> is resolved mainly in the compilation phase. So all files \n                            are glued together and send in one http request. The exceptions are when <code>import</code> is with\n                            a <code>url()</code>, or with <code>http</code> in the path or a file that is imported has a \n                            <code>.css</code> extention. This is not the case if the imported file is a css, but the extention is omitted.\n\n                            ",code:"\n                            <pre>\n@import 'someChild' // imports a _someChild.scss, binded during compilation,\n        // variables, mixins, functions from someChild are imported and \n        // overwritte the variables from the file that impotrs it\n@import 'someChild.css' // Not during compilation phase, makes a HTTP request,\n@import url('someChild'); // makes a HTTP request, not resolved during compilation,\n@import 'https://...' // makes a HTTPS reuquest, not resolved during compilation\n                            </pre>\n                            "},{info:"\n                            <code>@use</code>: an at-rule used to fetch content of another file. Helps to organise code and \n                            track where certain variables come from, because each variable has to be used with the namespace.\n                            Each file using a certain resource needs to call <code>@use</code> on its own.\n                            Alows to import resource <code>with</code> some custom settings, and with an <code>as</code>\n                            alias. <storng>@use has to be the first thing in a file</strong>\n\n                            ",code:'\n                            <div class="note">Source file _colorTheme.scss</div>\n                            <pre>\n$bg-color: red !default;\n\n@function getColor($_bg-color){\n    $output: #000;\n    $lightness: lightness($_bg-color);\n    @if $lightness < 50% {\n        $output: #fff;\n    }\n    @return $output;\n}\n\n@mixin get-theme($theme-color){\n    background-color: $theme-color;\n    border-color: darken($color: $theme-color, $amount: 20);\n    color: getColor($theme-color);\n}\n\n@mixin get-default-color{\n    background-color: $bg-color;\n    border-color: darken($color: $bg-color, $amount: 20);\n    color: getColor($bg-color);    \n}\n                            </pre>\n                            <div class="note">Destination file named someComponent.scss</div>\n<pre>\n@use "./colorTheme" with ($bg-color: #44ff44);\n\n$item-width: 50px;\n$item-height: 50px;\n$item-radius: 5px;\n\n@mixin rectangle{\n    position: relative;\n    width: $item-width;\n    height: $item-height;\n    border: transparent medium solid;\n    border-radius: $item-radius;\n}\n\n.green-theme {\n    @include rectangle();\n    @include colorTheme.get-default-color;\n     // with the name space colorTheme\n}\n</pre>                            \n                        <div class="note">Usage with <code>as</code> keyword</div>\n                        <pre>\n@use \'./colorTheme\' as c\n...\n...\n.some-class{\n    color: c.getColor(red);\n}\n                        </pre>\n                            '},{info:"\n                            <code>@forward</code> is used to make a forwarded file mixins, functions and variables available\n                            anywhere in the files that use the file what forwards the code.\n                            This might be used to create a 'helper' file that forwards some content, and then the file may\n                            be imported with the <code>use</code> keyword in other files.<br>\n                            <code>@forward</code> may be customized using <code>with</code> keyword, some \n                            module members might be made hidden with the <code>hidden</code> property, \n                            or there might be created a namespace using <code>as</code> keyword.\n\n                            ",code:"\n                            <div class=\"note\">Suppose there is a file structure:</code>\n<pre>\n/project\n|-/exports\n|--_colors.scss\n|--_fonts.scss\n|--_variables.scss\n|-app-form.scss\n|-app-menu.scss\n</pre>          \n                            <div class=\"note\">There is a need to import all the exports folder in the app-form and app-menu. Lets create a helper file:</div>\n<pre>\n/project\n|-/exports\n|--_colors.scss\n|--_fonts.scss\n|--_variables.scss\n|--_helper.scss\n|-app-form.scss\n|-app-menu.scss\n</pre>         \n            <div class=\"note\">The helper files content</div>\n<pre>\n@forward './colors';\n@forward './fonts';\n@forward './variables';\n\n// or\n\n@forward './colors' as color;\n@forward './fonts' as fonts;\n@forward './variables as variables';\n\n</pre>                               \n            <div class=\"note\">Both: app-form and app-menu would have to start with:</div>\n<pre>\n@use './exports/helper'\n// now the _colors, _fonts, _variables are available in both files\n</pre>    \n\n\n<div class=\"note\">Forward may be used with namespaces</div>\n<pre>\n@forward './colors' as color;\n@forward './fonts' as fonts;\n@forward './variables' as variables;\n\n</pre>                               \n            <div class=\"note\">Both: app-form and app-menu would have to start with:</div>\n<pre>\n@use './exports/helper'\n// now the _colors, _fonts, _variables are available in both files\nselector {\n    color: color.getColor(red);\n}\n</pre>  \n\n                            "},{info:"\n                            <code>@mixin</code> is a way to get some styling into a block, that may be included\n                            with <code>@include</code> rule to many style blocks. This is like a procedure in pascal.\n                            May take arguments, but does not return a thing:\n\n                            ",code:"\n                            <pre>\n@mixin center {\n    display: felx;\n    align-content: center;\n    justify-content: center;\n    align-items: center;\n}                            \n@mixin button-with-color($color: gray){\n    @include center;\n    border-radius: 5px;\n    background-color: $color;\n    color: black;\n    @if lightmess($color) < 50%{\n        color: white;\n    }\n}\n\n.button-red{\n    @include: button-with-color(red)\n}\n.button-green{\n    @include: button-with-color(green)\n}\n\n\n                            </pre>\n                            "},{info:"<code>@function</code> is a way to encapsulate complex operations on SassScript values.\n                            It must <code>@return</code> a number, should be a clear function, can take keywordes arguments,\n                            can take a list of arguments. The dash and underscore are treated equaly in the function name.\n                            Please refer to the advanced section to learn more about functions.\n                            ",code:"\n                            <pre>\n@function getColor($_bg-color: gray){\n    $output: #000;\n    $lightness: lightness($_bg-color);\n    @if $lightness < 50% {\n        $output: #fff;\n    }\n    @return $output;\n}                            \n\n@function strength($val){\n    $output = 1;\n    @for $number from 1 through $val {\n        $output = $output * $number;\n    }\n}\n                            </pre>\n                            "},{info:"<code>@extend</code> introduces the inheritance mechanism. The extended block \n                            gets all properties from the selector it inherits. Extensions only affect stylesheets \n                            upstream: meaning, that in some sheet a selector is extended, this selector will be\n                            affected by this extention only in stylesheet it was extended, and stylesheets \n                            imported by this stylesheet",code:'\n                            <div class="note">In this case the background would be white, as extend is shadowed.\n                            <pre>\n.toExtend{\n    background-color: violet;\n\n}\n.extended{\n    @include rectangle();\n    background-color: white;\n    @extend .toExtend;\n}                            \n                            </pre>\n                            '},{info:"<code>@error</code>: the way to inform developer, that during compilation something \n                            went wrong",code:'\n                            <pre>\n@if $width > 500px {\n    @error "Width is greater than \n}\n                            </pre>\n                            '},{info:"<code>@warn</code>: the way to inform developer, that during compilation something \n                            went wrong",code:'\n                            <pre>\n@if $width > 500px {\n    @warn "Width is greater than \n}\n\n@function depraciated(args...){\n    @warn "This function was depraciated, please use the nonDepraciatedFunction"\n    @return nonDepraciatedFunction(args...)\n}\n                            </pre>\n                            '},{info:"<code>@debug</code>: A way to inform the developer about something during the \n                            compilation process. Has no impact on the compilation outcome.",code:'\n                            <pre>\n@debug "inform abut sometihing"\n                            </pre>\n                            '},{info:"<code>@at-root</code>: makes the decorated selector migrate into the DOM-root\n                            element, instead of staying in the element it was defined in,",code:'\n                            <pre>\n@debug "inform abut sometihing"\n                            </pre>\n                            '},{info:"<code>@if <expression> @else <expression></code>: \n                            Runs a statement if the condition is true,",code:"\n                            <pre>\n@if $bg-color == green {\n    $color = white;\n} @else if bg-color == white {\n    $color = black;\n} @ else {\n    $color = yellow;\n}\n                            </pre>\n                            "},{info:"<code>@each <variable> in <expression></code>: \n                            makes it possible to iterate through a collection. May be iterater througn a \n                            keyworded values",code:'\n                            <pre>\n$colors: red, green, blue;\n\n@each $color in $colors {\n    .button-#{$color} {\n        background-color: $color;\n    }\n}\n                            </pre>\n                            <div class="note">Compiles to </div>\n<pre>\n.button-red{background-colro: red;};\n.button-green{background-colro: green;};\n.button-blue{background-colro: blue;};\n</pre>\n\n                                <div class="note">Keyworder @each</div>\n                                <pre>\n$pictures: ("eye": "\f112", "start": "\f12e", "stop": "\f12f");\n@each $name, $symbol in $pictures {\n    .button-#{$name}:after{content: $symbol;}\n}\n</pre>\n        <div class="note">output</div>\n\n<pre>\n.button-red{background-colro: red;};\n.button-green{background-colro: green;};\n.button-blue{background-colro: blue;};\n</pre>\n\n\n                            '}]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:" ",description:"Tutorial"}]}]},{summary:"Scss mixins",title:"scss mixins",searchKeywords:"\n    @mixin @function @import\n    ",cathegory:"scss",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Mixins and functions in scss"},{elementType:"Paragraph",content:"\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:" ",description:"Tutorial"}]}]},{summary:"scss modules",title:"scss modules",searchKeywords:"\n    color list map math meta selector string\n    ",cathegory:"scss",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Scss build in modules"},{elementType:"UnsignedList",content:["A module is a scss file that is loaded to current file with the <code>@use</code> at-rule,","Module files (libraries) should start their name with an underscore. This undersocre informs \n                        scss compiler, that the file is a module file, so it shuld be provided to other files on demand, and\n                        not be compiled on its own without demand,",'The underscore is <b>only</b> in the name of the file. It will not be written in the <code>\n                        @use "./someModule" with (bg-color: green)</code> module import line, or in the \n                        call of the module function: <code>@include someModule.my-mixin;</code>. In this case \n                        the file name is <code>_someModule.scss</code>,',"A private member of a module starts with an underscare, or a dash","A moudle may be imported with an alias name <code>@use 'someFile' as s</code>. Now \n                        the call is s.someMethod","There is a <code>!default<code>: a keyword allowing to set a default value for some configurable\n                        variables of a module"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:" ",description:"Tutorial"}]}]},{summary:"operators values interpolation",title:"operators values interpolation",searchKeywords:"\n    % - + div Math.div == > < >= <= {} interpolation \n    ",cathegory:"scss",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Operators, values, interpolation in scss"},{elementType:"Paragraph",content:"\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:" ",description:"Tutorial"}]}]},{summary:"scss overview",title:"Scss overview",searchKeywords:"\n    scss sass syntax variables functions mixins operators modules\n    ",cathegory:"scss",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Components in angular"},{elementType:"Paragraph",content:"\n                    Scss, sass or less are the preprocessors. This is a style sheet written in a different way.\n                    It allows functions, mixins, variables (now css also allows variables, but this is a shorter syntax),\n                    calculations, loops, if statements, imports (now css also allows imports), processing of strints, \n                    operations on colors, some math operations and many more. This syntax is not recognized by the \n                    browser, so it needs to be compiled in advance.\n                    "},{elementType:"Headli-3",content:"Sass bs scss"},{elementType:"UnsignedList",content:["<code>sass</code> does need the <code>{}</code> brackets, or the semicolns \n                        at the end.",1]},{elementType:"Headline-3",content:"Other properties"},{elementType:"SmallHeadline",content:"Variables,"},{elementType:"Paragraph",content:"\n                    There is a possiblity to declare a variable in the preprocessors. There is a similar \n                    functionality in pure css, but a bit longer:\n                    "},{elementType:"Code",content:'\n                    <div class="note">css</div>\n                    <pre>\n*{--some-color: red;}\n// later\n\n.div {color: var(--some-color;)}\n                    </pre>\n\n                    <div class="note">A variable in a preprocessor:</div>\n<pre>\n$variable:  red;\n.div{\n    color:  $variable;\n}\n</pre>\n\n                    '},{elementType:"NoteWarning",content:"\n                    <code>$my-some-variable</code> === <code>$my_some_variable</code>, as hyphends \n                    <code>-</code> and underscores <code>_</code> are for historical reasons the same in sass.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"http://saas-lang",href:"https://sass-lang.com/documentation/operators/string",description:"Tutorial"},{elementType:"Link",content:"lesscss.org",href:"https://lesscss.org/functions/",description:"Tutorial"}]}]},{summary:"scss variables",title:"Scss variables",searchKeywords:"\n    !default scope shadow names _ - \n    ",cathegory:"scss",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Variables in scss"},{elementType:"Paragraph",content:"\n                    Scss allows using variables. Nothing extraordinary as css allowed the same. However here\n                    variables have some features that are worth learning about.\n                    "},{elementType:"Headline-3",content:"Declaration"},{elementType:"Code",content:'\n                    <div class="note">css</div>\n                    <pre>\n*{--some-color: red;}\n// later\n\n.div {color: var(--some-color;)}\n                    </pre>\n\n                    <div class="note">A variable in a preprocessor:</div>\n<pre>\n$variable:  red;\n.div{\n    color:  $variable;\n}\n</pre>\n\n                    '},{elementType:"Headline-3",content:"Some facts about variables"},{elementType:"UnsignedList",content:["<code>$my-some-variable</code> === <code>$my_some_variable</code>, as hyphends \n                    <code>-</code> and underscores <code>_</code> are for historical reasons the same in sass.","build-in variables cannot be modified,"]},{elementType:"Headline-3",content:"Default"},{elementType:"Paragraph",content:"\n                    Variable has an assigned value when declared. But if someone creates a library, he/she may chose to \n                    alow a user to define prefered values for the variables. In this case a <code>!default</code>\n                    keyword should be used:\n                    "},{elementType:"Code",content:'\n                    <div class="note">_buttonsLibrary.scss - the underscore informs scss that the file is a internal \n                    module, that will be imported by other scss files</div>\n                    <pre>\n$basic-bg-color: #aaa !default;\n\n@function getColor($bg-color){\n    $output: #000;\n    $lightness: lightness($bg-color);\n    @if $lightness < 50% {\n        $output: #fff;\n    }\n    @return $output;\n}\n\n@mixin color-theme{\n    background-color: red;\n    border-color: darken($color: red, $amount: 20);\n    color: getColor(red);\n}\n\n.color-element {\n    @include rectangle;\n    @include red-theme;\n}\n                    </pre>\n                    <div class="note">And now for the usage of above module</div>\n                    <pre>\n@use "./colorTheme" with ($bg-color: green);   \n\n@mixin rectangle{\n    position: relative;\n    width: $item-width;\n    height: $item-height;\n    border: transparent medium solid;\n    border-radius: $item-radius;\n}\n\n.green-theme {\n    @include rectangle;\n    @include colorTheme.get-default-color;\n}\n// now the created .green-theme element will be green, despite \n// the defined default color in the module is red\n                    </pre>                    \n                    '},{elementType:"Headline-3",content:"Scope"},{elementType:"HiddenCode",content:[{info:"\n                            Variables declared in the global scope of the style sheet are global variables, and may be \n                        accessed from anywhere in the module <b>after</b> their declaration,\n                            ",code:"\n<pre>\n@debug $some-var; // not exists\n$some-var: 5; // declared\n\n@mixedin{\n    color: $some-var; // possible\n}\n</pre>                            \n                            "},{info:"\n                            A variable declared in a block scope is local, and may be accessed inside the block it was \n                        declared in only after it was declared,\n                            ",code:"\n<pre>\n$global: $local; // not possible, $local unknown\n\n@mixedin{\n    background-color: $local; // not possible, not defined\n    $local: #aaa;\n    color: $local; // possible\n}\n</pre>                            \n                            "},{info:"\n                            If a variable of the same name was declared in the global scope, and the local scope, \n                        then inside the local scope the local variable will <b>shadow</b> the global one, <b>but only</b>\n                        after the global variable was shadowed. Before asignment it will be equal to the one in the \n                        global scope.\n                            ",code:"\n<pre>\n$global: $local; // not possible, $local unknown\n\n@mixedin{\n    background-color: $local; // not possible, not defined\n    $local: #aaa;\n    color: $local; // possible\n}\n</pre>                            \n                            "},{info:"\n                            An <code>@if</code> statement may <b>assign</b> a value to the variable. \n                        <b>No possibility to declare a variable inside @if block</b>. Values are assigned to the \n                        variables in the flow control scope (@if statements for example). They are not shadowed.\n                            ",code:"\n<pre>\n$global: #aaa;\n$bg: #bbb !default;\n\n@if $global == #aaa {\n    // here $bg is still #bbb\n    $bg = #fff;\n    $not-possible = $222; // not possible, this variable was not\n    //defined earlier\n}\n@debug $global;\n// $global is #bbb;\n</pre>                            \n                            "},{info:"\n                            <code>meta.variable-exists()</code> function may be used to check if a variable exists in\n                        a local scope,\n                            ",code:"\n<pre>\n$global: #aaa;\n@mixin something{\n    @if meta.variable-exists($global){\n        @debug 'variable exists'\n    } @else {\n        @debug 'variabel does not exist'\n    }\n}\n</pre>                            \n                            "},{info:"\n                                Variable names may not be used with the interpolation, as it would make harder \n                                to tell what variable was defined where. It is possible hovewer, to \n                                use a <code>map</code>\n                            ",code:"\n<pre>\n@use \"sass:map\";\n$colors: (\n    'success': green,\n    'info': blue,\n    'warning': orange,\n);\n.alert{\n    background-color: map.get($colors, 'info');\n    @if lightness(map.get($colors, 'info')) > 50% {\n        color: black;\n    } @else {\n        color:white;\n    }\n}\n</pre>                            \n                            "}]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"http://saas-lang",href:"https://sass-lang.com/documentation/variables#example-7-sass",description:"Tutorial"}]}]},{summary:"Advanced",title:"Advanced",searchKeywords:"\n\n    ",cathegory:"scss",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Advanced functions and mixins in scss"},{elementType:"ListOfContent",content:[{id:"block-arbitrary",title:"Mixins: hover"},{id:"mixins-arbitrary",title:"Mixins: arbitrary arguments"},{id:"mixins-keyword",title:"Mixings: arbitrary keyword arguments"}]},{elementType:"Headline-3",content:"Mixins"},{elementType:"HiddenCode",content:[{info:"\n                            <strong>Mixins: hover</code>: <code>@content</code> injects content.\n                            ",code:'\n                            <pre>\n@mixin hover {\n    &not([disabled]):hover{\n        @content\n    }\n}\n\n.button {\n    border: solid black thin;\n    @include hover{\n        cursor: pointer;\n    }\n}\n                            </pre>\n                            <div class="note">Result</div>\n<pre>\n.button{\n    border: solid balck thin;\n}\n.button:not([disabled]):hover{\n    cursor: pointer;\n}\n</pre>                            \n                            '},{info:"\n                            <strong>Arbitrary arguments</code>\n                            ",code:'\n                            <pre>\n@mixin margin($paddingUnit, $selectors...) {\n    @for $i from 0 to length($selectors...) {\n        #(nth($selectors, $i + 1)) {\n            position: relative;\n            margin-left: $i * $paddingUnit;\n        }\n    }\n}\n\n@include margin(20px, "input.brand", "input.model", "input.ordererName")\n                            </pre>\n                            <div class="note">Will compile to </div>\n<pre>\ninput.brand{\n    position: relative; \n    margin-left: 0;\n}\ninput.model{\n    position: relative; \n    margin-left: 20px;\n}\n\ninput.ordererName{\n    position: relative; \n    margin-left: 40px;\n}\n\n</pre>                            \n                            '},{info:"\n                            <strong>Arbitrary keyword arguments</code>\n                            ",code:"\n<pre>\n@use \"sass:meta\";\n@mixin svg-insert($args...) {\n    @debug meta.keywords($args);\n    // (clock: '../assets/click.svb, arrow-left...)\n\n    @each $name, $path in meta.keywords($args) {\n        div.svg-#{$name}{\n            background-image: url($name);\n        }\n    }\n}\n\n@include svg-insert(\n    $clock: '../assets/clock.svg',\n    $arrow-left: '../assets/arrL.svg',\n    $arrow-right: '../assets/arrR.svg',\n)\n</pre>    \n            <div class=\"note\">Output would be</div>\n<pre>\ndiv.svg-clock {background-image: url('../assets/clock.svg')}\ndiv.svg-arrow-left {background-image: url('../assets/arrL.svg')}\ndiv.svg-arrow-right {background-image: url('../assets/arrR.svg')}\n</pre>                                    \n                            "}]}]},{elementType:"Article",content:[{elementType:"Headline-3",content:"Functions"},{elementType:"Paragraph",content:"\n                    <code>@function <name> (<arguments...>) {...}</code> is a way to encapsulate complex operations.\n                    Functions should:\n                    "},{elementType:"UnsignedList",content:["Always <code>@return</code> a value, or an expression evaluating to a value,","Be clean functions: no state changing, though it is possible,","May return early,","May have a default argument,","May have keyworder arguments,","May have arbitrary arguments","The statement <code>someFunction(args...)</code> may be used to turn the <code>args</code>\n                        array into the arguments."]},{elementType:"Paragraph",content:"\n                    While working with functions some things should be taken into concideration:\n                    "},{elementType:"UnsignedList",content:["Dashes: '-' are equal to '_' underscores in the function naming convension. So: \n                        <code>some_function</code> is the same as <code>some-function</code>","One must be very careful when writing function names, as every function, thats name \n                        is not found in the scope, is compiled as it was a pure <code>css</code> function.\n                        This is to make sure a new release of scss is not needed everytime css creators come up with\n                        some new invention.","Css functions like <code>calc()</code> or <code>element()</code> have to be written \n                        as unquoted strings"]},{elementType:"HiddenCode",content:[{info:"\n                            A function with default argument. Uses a build in <code>lightness</code> function.\n                            Calculates the color of the font based on the color of the background\n                            ",code:"\n                            <pre>\n @function getColor($_bg-color: gray){\n    $output: #000;\n    $lightness: lightness($_bg-color);\n    @if $lightness < 50% {\n        $output: #fff;\n    }\n    @return $output;\n}                           \n                            </pre>\n                            "},{info:"\n                            Arbitrary arguments\n                            ",code:"\n                            <pre>\n @function min($items...){\n        $current: 10000000;\n        @each $item in $items {\n            @if $item < $current {\n                $current: $item\n            }\n        }\n    @return $item;\n\n }\n                            </pre>\n                            "},{info:"\n                            Keyworded arguments: what it is needed for?\n                            ",code:"\n                            <pre>\n @function getColor($_bg-color: gray){\n    $output: #000;\n    $lightness: lightness($_bg-color);\n    @if $lightness < 50% {\n        $output: #fff;\n    }\n    @return $output;\n}                           \n                            </pre>\n                            "}]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:" ",description:"Tutorial"}]}]},{summary:"position",title:"position",searchKeywords:"absolute relative static sticky fixed z-index css",cathegory:"scss",content:[{elementType:"Article",content:[{elementType:"Headline",content:"About position"},{elementType:"Paragraph",content:"\n    \n                        "}]}]}];var la,da,pa,ma,ha,ua,ba,ga,fa,ya,va={summary:"python data types",title:"Python data types",searchKeywords:"\n\n    ",cathegory:"python",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Data types in python"},{elementType:"Headline-3",content:"Variables"},{elementType:"UnsignedList",content:["No declaration needed,","If a varaible named the same way exists in global and local scope, the local scope variable \n                        shadows the global scope one,","If global scope variable is referred in the local scope (no assignment), then the global scope variable\n                        is available in the local scope,","Names of variables in python can contain letters, digits and underscore,","Names of variables may not start with a digit, only letter or underscore are alowed,","Python distinguishes capital and non capital letters, so <code>alpha</code> and <code>Alpha</code> would\n                        be different variables,","To refer to the global scope from the function the <code>global</code> keyword may be used,"]},{elementType:"Code",content:"\n                    <pre>\na = 5\nb = 4\ndef funct():\n    a = 6\n    print(a) # will be 6 as is shadowed,\n    print(b) # will be 4, as global\n                    </pre>\n                    "}]},{elementType:"ConditionalArray",headItems:["Name","Shortcut","Sort","Mutability","Example"],content:[($o={},Object(x.a)($o,Symbol("title"),"String"),Object(x.a)($o,Symbol("code"),"\nstr = 'some caption';\nstr2 = \"some caption\";\n\nif (str[1] == 'o'):\n    print('Taking a single letter')\n\nprint(str[-1]) # 'n'\nprint(str[5:]) # caption\nprint(str[5:10]) # captio\nprint(str[-11:-6]) # some\n\n# This multiline string will be divided into separate lines with a \n\nmultiline = \"\"\"I am a multiline string\n                I can be in a few lines\"\"\";\n\n# Below strings are just long strings without any division to \n# lines\nlong1 = 'I am a multiline string \"with a quote\"'             'I can be in a few lines'\n\nlong2 = (\"This is a multiline string\"\n              \"May be in a few lines\"\n             )             \n\n# MUTABILITY\nstr = 'some str'\na1 = id(str)\nstr = \"some other value\"\na2 = id(str)\nprint(a1 == a2) # False\n\nstr[3] = 6; // error\n\nprint(len(str))\nfor i in str:\n    print(i);\n    //loopin possible\n\nlet str = 'linux is for free'\nif ('free' in tst):\n   print('String may be searched with an in operaotr')\n\nif ('is not' not in str):\n   print('not in may be used with strings')\n\n\n\n// With id comparation one may tell if the type is mutable or not\n                    "),Object(x.a)($o,"Name","String"),Object(x.a)($o,"Shortcut","<code>str</code>"),Object(x.a)($o,"Mutability","Non mutable"),Object(x.a)($o,"Example","<code>'some caption'</code>"),Object(x.a)($o,"Sort","Numeric type"),$o),(Jo={},Object(x.a)(Jo,Symbol("title"),"String"),Object(x.a)(Jo,Symbol("code"),"\nA numeric type\n\na = 5\nid(a)\na = 3\nid(a)\n\nb = a + 'str' # TypeError, cannot add numeric to a string\n                    "),Object(x.a)(Jo,"Name","Integer"),Object(x.a)(Jo,"Shortcut","<code>int</code>"),Object(x.a)(Jo,"Mutability","Non mutable"),Object(x.a)(Jo,"Example","<code>3</code>"),Object(x.a)(Jo,"Sort","Numeric type"),Jo),(Xo={},Object(x.a)(Xo,Symbol("title"),"Float"),Object(x.a)(Xo,Symbol("code"),"\nA numeric type\n\na = 5.3\nid1 = id(a)\na = 3.0\nid2 = id(a)\nprint(id1 == id2) # False\n\nb = a + 'str' # TypeError, cannot add numeric to a string\n                    "),Object(x.a)(Xo,"Name","Float"),Object(x.a)(Xo,"Shortcut","<code>float</code>"),Object(x.a)(Xo,"Mutability","Non mutable"),Object(x.a)(Xo,"Example","<code>3.0</code>"),Object(x.a)(Xo,"Sort","Numeric type"),Xo),(Yo={},Object(x.a)(Yo,Symbol("title"),"Complex"),Object(x.a)(Yo,Symbol("code"),"\nA numeric type\n\na = 5j\nid1 = id(a)\na = 3j\nid2 = id(a)\nprint(id1 == id2) # False\n\ntype(c) # <class 'int'>\n                    "),Object(x.a)(Yo,"Name","Complex"),Object(x.a)(Yo,"Shortcut","<code>complex</code>"),Object(x.a)(Yo,"Mutability","Non mutable"),Object(x.a)(Yo,"Example","<code>3.0</code>"),Object(x.a)(Yo,"Sort","Numeric type"),Yo),(Qo={},Object(x.a)(Qo,Symbol("title"),"Sequence type"),Object(x.a)(Qo,Symbol("code"),"\nl = ['str', 32]\nid1 = id(l)\nl = [33, 3]\nid2 = id(l)\nprint(id2 == id1) # False, as the whole new value was assigned\n\nl[0] = 4\nprint(id2 == id(l)) # True, as only a certain index was changed\n\n\n                    "),Object(x.a)(Qo,"Name","List"),Object(x.a)(Qo,"Shortcut","<code>list</code>"),Object(x.a)(Qo,"Mutability","mutable"),Object(x.a)(Qo,"Example","<code>[</code>"),Object(x.a)(Qo,"Sort","Sequence type"),Qo),(Zo={},Object(x.a)(Zo,Symbol("title"),"Sequence type"),Object(x.a)(Zo,Symbol("code"),"\n\n                    \n\nt = ('string', 33, 54)\nid1 = id(t)\nt = (4, 'str')\nid2 = id(t)\nprint(id1 == id2) # False as whole variable was assigned a new value\nt[0] = 3 # error, tuple immutable\n\n\n\n                    "),Object(x.a)(Zo,"Name","Tuple"),Object(x.a)(Zo,"Shortcut","<code>tuple</code>"),Object(x.a)(Zo,"Mutability","immutable"),Object(x.a)(Zo,"Example","<code>(4, 'ds')/code>"),Object(x.a)(Zo,"Sort","Sequence type"),Zo),(ea={},Object(x.a)(ea,Symbol("title"),"range"),Object(x.a)(ea,Symbol("code"),"\nr = range(3)\n # 0, 1, 2\nx = range(2, 8)\n # 2, 3, 4, 5, 6, 7\ny = range(2, 10, 2)\n # 2, 4, 6, 8\nz = range(20, 1)\n # Nothing\n z = range(5, 1, -1)\n # 5, 4, 3, 2\n\n Probably not mutable, as setting a new range value will change the variable\n\n                    "),Object(x.a)(ea,"Name","Range"),Object(x.a)(ea,"Shortcut","<code>range</code>"),Object(x.a)(ea,"Mutability","?"),Object(x.a)(ea,"Example","<code>range(4)</code>"),Object(x.a)(ea,"Sort","Sequence type"),ea),(ta={},Object(x.a)(ta,Symbol("title"),"Set"),Object(x.a)(ta,Symbol("code"),"\n                    <ul>\n                        <li>Unordered, never in the same order</li>\n                        <li>Not accessable with index or key</li>\n                        <li>May iterate with for loop</li>\n                        <li>May check with a <code>in</code> operator</li>\n                        <li>Set items are immutable, but a set item may be added or removed</li>\n                        <li>No duplicate values</li>\n                    </ul>\n                    <pre>\n{'val1', 3, 5j}\n\ns = set([1,2,3,4,5])\n\nfor item in set:\n    print(item) # works\n\nprint(3 in s)    # works\n\ninvalidSet = {1,1,2,2,3} \n# Silently drops repeting items\nprint(invalidSet) # 1,2,3\n# The same with the constructor set([1,1,2,2,3])\n\ns.add('item')  # add an item to a set\nprint(s) # {1,2,3,4,5,'item'}\ns.add(3) # {1,2,3,4,5,'item'} \n#Silently dropped\n                    </pre>\n                    <div class=\"note note-danger\">But when removing an item</div>\n                    <pre>\nprint(s)  # {1,2}\ns.remove(5) # KeyError, no key 5\n# no silent behaviour here\n                    </pre>                    \n                    <div class=\"note note-warning\">discard will not rise an error</div>\n                    <pre>\nprint(s)  # {1,2}\ns.discard(5) # silent, nothing happened, there was no 5 item\n                    </pre>                    \n                    <div class=\"note note-warning\">pop removes an item but no knowledge which item is removed.\n                        Returns the removed item.\n                    </div>\n                    <pre>\nprint(s)  # {1,2}\nrem = s.pop() # removed 1 or 2, random, rem value is the removed item\n                    </pre>     \n                    \n                    <div class=\"note\">pop removes an item but no knowledge which item is removed.\n                        Update and union are made to combine sets\n                    </div>\n                    <pre>\nprint(s)  # {1,2}\ns1 = {2, 4}\ns2 = s1.union(s);\n# s is still 1,2\n# s1 is still 2, 4\n# s2 is {1, 2, 4}\n\n#With update:\nprint(s) # {1,2}\nprint(s1) # {2,4}\ns2 = s.update(s1)\n# s2 is None\n# s is updated to {1,2,4}\n\n                    </pre>  \n\n\n\n\n                    "),Object(x.a)(ta,"Name","Set"),Object(x.a)(ta,"Shortcut","<code>set</code>"),Object(x.a)(ta,"Mutability","mutable"),Object(x.a)(ta,"Example","<code>{'val1', 3, 5j}</code>"),Object(x.a)(ta,"Sort","Set type"),ta),(na={},Object(x.a)(na,Symbol("title"),"Dictionary"),Object(x.a)(na,Symbol("code"),"\no = {'name': 'Andrzej', 'familyName': 'Kmicic'}\no['name'] = 'Antoni'\n# NOTE: key has to be in quotes\n                    "),Object(x.a)(na,"Name","Dictionary"),Object(x.a)(na,"Shortcut","<code>dict</code>"),Object(x.a)(na,"Mutability","mutable"),Object(x.a)(na,"Example","<code>{'val1', 3, 5j}</code>"),Object(x.a)(na,"Sort","Map type"),na),(oa={},Object(x.a)(oa,Symbol("title"),"Frozenset type"),Object(x.a)(oa,Symbol("code"),"\nf = frozenset({4, 5, 'val'})                    \n                    "),Object(x.a)(oa,"Name","Set"),Object(x.a)(oa,"Shortcut","<code>frozenset</code>"),Object(x.a)(oa,"Mutability","immutable"),Object(x.a)(oa,"Example","<code>frozenset{'val1', 3, 5j}</code>"),Object(x.a)(oa,"Sort","Set type"),oa),(aa={},Object(x.a)(aa,Symbol("title"),"Boolean"),Object(x.a)(aa,Symbol("code"),"\nTrue\nFalse      \n                    "),Object(x.a)(aa,"Name","Boolean"),Object(x.a)(aa,"Shortcut","<code>bol</code>"),Object(x.a)(aa,"Mutability","immutable"),Object(x.a)(aa,"Example","<code>True</code>"),Object(x.a)(aa,"Sort","Set type"),aa),(ia={},Object(x.a)(ia,Symbol("title"),"Bytes"),Object(x.a)(ia,Symbol("code"),'\n\n                    b"casted to byte"   \n\n                    '),Object(x.a)(ia,"Name","Bytes"),Object(x.a)(ia,"Shortcut","<code>bytes</code>"),Object(x.a)(ia,"Mutability","immutable"),Object(x.a)(ia,"Example",'<code>b"casted to byte"</code>'),Object(x.a)(ia,"Sort","binary type"),ia),(ra={},Object(x.a)(ra,Symbol("title"),"Bytearray"),Object(x.a)(ra,Symbol("code"),"\n\nx=bytearray(5)                    \n                    \n                    "),Object(x.a)(ra,"Name","Bytearray"),Object(x.a)(ra,"Shortcut","<code>bytearray</code>"),Object(x.a)(ra,"Mutability","mutable"),Object(x.a)(ra,"Example","<code>bytearray(5)</code>"),Object(x.a)(ra,"Sort","binary type"),ra),(sa={},Object(x.a)(sa,Symbol("title"),"Memoryview"),Object(x.a)(sa,Symbol("code"),"\n\nx=memoryview(bytes(5))\n                    \n                    "),Object(x.a)(sa,"Name","Memoryview"),Object(x.a)(sa,"Shortcut","<code>memoryview</code>"),Object(x.a)(sa,"Mutability",">"),Object(x.a)(sa,"Example","<code>x=memoryview(bytes(5))</code>"),Object(x.a)(sa,"Sort","binary type"),sa)]},{elementType:"Article",content:[{elementType:"Headline-3",content:"Casting"},{elementType:"UnsignedList",content:["<code>int(v)</code> conversion to int","<code>str(v)</code> conversion to string","<code>float(v)</code> conversion to float","<code>bool('')</code> conversion of a given value to boolean,","<code>hex(v)</code> conversion to a string representation of hexadecimal","<code>oct(v)</code> conversion to a string representation of hexadecimal"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"",href:" ",description:"Tutorial"},{elementType:"Link",content:"w3schools",href:"https://www.w3schools.com/python/python_sets_methods.asp",description:"Set methods"}]}]};var wa,xa,ja,Ta,Oa,Sa,ka,Ca,Aa,Ia,Pa,Na,Ea={summary:"python strings types",title:"Python strings types",searchKeywords:"\n\n    ",cathegory:"python",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Strings in python"},{elementType:"Headline-3",content:"Slicing"},{elementType:"UnsignedList",content:["<code>someStr[4]</code>: char at index 4,","<code>someStr[2:5]<code>: slice from <2, 5) elements,","<code>someStr[-9:-4]: indexed with a negative numbers"]},{elementType:"Headline-3",content:"Methods"},{elementType:"Code",content:"\n                    \n                    "}]},{elementType:"ConditionalArray",headItems:["Method","Args","Description","Returns"],content:[(la={},Object(x.a)(la,Symbol("title"),"String"),Object(x.a)(la,Symbol("code"),"\n\n                    "),Object(x.a)(la,"Method","<code>upper()</code>"),Object(x.a)(la,"Args","none"),Object(x.a)(la,"Description","Returns a new string of array"),Object(x.a)(la,"Returns","Returns a new string of array"),la),(da={},Object(x.a)(da,Symbol("title"),"Lower"),Object(x.a)(da,Symbol("code"),"\n\n                    "),Object(x.a)(da,"Method","<code>lower()</code>"),Object(x.a)(da,"Args","none"),Object(x.a)(da,"Description","turn a string lower cases"),Object(x.a)(da,"Returns","Returns a new string of array with lower cases"),da),(pa={},Object(x.a)(pa,Symbol("title"),"strip"),Object(x.a)(pa,Symbol("code"),"\nprint('  some str '.strip); // white spaces from the begining and the end are removed\n                    "),Object(x.a)(pa,"Method","<code>strip()</code>"),Object(x.a)(pa,"Args","none"),Object(x.a)(pa,"Description","white spaces from the begining and the end are removed"),Object(x.a)(pa,"Returns","Returns a new string of array with lower cases"),pa),(ma={},Object(x.a)(ma,Symbol("title"),"replace"),Object(x.a)(ma,Symbol("code"),"\ntext = 'Hihihihi'                    \ntext2 = text.replace('i','a'); # outout == 'Hahahaha'\nprint(text2)\nprint(text)\n                    "),Object(x.a)(ma,"Method","<code>replace()</code>"),Object(x.a)(ma,"Args","none"),Object(x.a)(ma,"Description","Creates a new string with all occurences of a substr to change, to change"),Object(x.a)(ma,"Returns","Returns a new string of array with lower cases"),ma),(ha={},Object(x.a)(ha,Symbol("title"),"split"),Object(x.a)(ha,Symbol("code"),"\ntext = 'coma, separated, values'                    \nprint(text2.split(','))\n\n                    "),Object(x.a)(ha,"Method","<code>split(separator)</code>"),Object(x.a)(ha,"Args","<code>separator:string</code> a substring that will divide a string into an array"),Object(x.a)(ha,"Description","A method creating an array out of a string, using the separator as an substring to separate,"),Object(x.a)(ha,"Returns","Returns a new string of array with lower cases"),ha),(ua={},Object(x.a)(ua,Symbol("title"),"format"),Object(x.a)(ua,Symbol("code"),"\n'Please buy {} apples and {} roses'.format(3, 4);\n# Please buy 3 apples and 4 reoses\n                    "),Object(x.a)(ua,"Method","<code>format</code>"),Object(x.a)(ua,"Args","<code>coma separated values that will be inserted in the place of {}"),Object(x.a)(ua,"Description","Creates a new string by filling the {} in the code with concrete values"),Object(x.a)(ua,"Returns","A new string by filling the {} in the code with concrete values"),ua),(ba={},Object(x.a)(ba,Symbol("title"),"capitalize"),Object(x.a)(ba,Symbol("code"),"\n'some random text'.capitalize();\n# Some random text                    \n                    "),Object(x.a)(ba,"Method","<code>capitalize</code>"),Object(x.a)(ba,"Args","-"),Object(x.a)(ba,"Description","First letter to capital"),Object(x.a)(ba,"Returns","A new string with first letter capitalized"),ba),(ga={},Object(x.a)(ga,Symbol("title"),"casefold"),Object(x.a)(ga,Symbol("code"),"\n'some random text'.casefold();\n# Some random text                    \n                    "),Object(x.a)(ga,"Method","<code>casefold</code>"),Object(x.a)(ga,"Args","-"),Object(x.a)(ga,"Description","All letters of given string are converted to lower cases. Similar to <code>lower</code>"),Object(x.a)(ga,"Returns","A new string with all letters converted to lower cases"),ga),(fa={},Object(x.a)(fa,Symbol("title"),"center"),Object(x.a)(fa,Symbol("code"),"\n'some random text'.center(50, ' ');\n#       some random text                    \n                    "),Object(x.a)(fa,"Method","<code>center</code>"),Object(x.a)(fa,"Args","<code>lenght</code>: The lenght of the output, if smaller than an input string, then the \n                    input string will be returned without changes, <code>char</code>: a character to fill the missing characters, optional"),Object(x.a)(fa,"Description","All letters of given string are converted to lower cases. Similar to <code>lower</code>"),Object(x.a)(fa,"Returns","A new string with spaces or characters added from the begining and end to allow string \n                    take <code>length</code> space"),fa),(ya={},Object(x.a)(ya,Symbol("title"),"count"),Object(x.a)(ya,Symbol("code"),"\n'some random text text'.count('text');        \n                    "),Object(x.a)(ya,"Method","<code>count</code>"),Object(x.a)(ya,"Args","<code>val</code>: the string thats occurences will be counted"),Object(x.a)(ya,"Description","Count occurences of the given string"),Object(x.a)(ya,"Returns","a number"),ya)]},{elementType:"Article",content:[{elementType:"Headline-3",content:""},{elementType:"UnsignedList",content:[""]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"w3schools",href:"https://www.w3schools.com/python/python_strings.asp",description:"Tutorial"}]}]};var Ha={summary:"python operators",title:"Python operators",searchKeywords:"\n\n    ",cathegory:"python",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Operators in python"},{elementType:"Paragraph",content:"\n                    "},{elementType:"Headline-3",content:"Arithmetic operators"},{elementType:"ConditionalArray",headItems:["Operator","Usage","Description"],content:[(wa={},Object(x.a)(wa,Symbol("title"),"Modulus"),Object(x.a)(wa,Symbol("code"),'\n                            <div class="note note-danger">Python</div>\n<pre>\n10 % 3 is 1 # True\n10 % -3 is -2 # True\n-10 % 3 is 3 # True\n-10 % -3 is -1 # True\n\n</pre>\n                            <div class="note note-danger">JS</div>\n<pre>\n10 % 3 === 1 // true\n10 % -3 === 1 // true\n-10 % 3 === 1 // true\n-10 % -3 === -1 // true\n</pre>                      \n                    <div class="note note-danger">The difference is, that in JS % is the <code>rest</code> operator, and\n                    in Python this is called a <code>modulus</code> operator. The difference is in handling negative numbers\n                    </div>\n                            '),Object(x.a)(wa,"Operator","<code>%</code>"),Object(x.a)(wa,"Usage","a % b"),Object(x.a)(wa,"Description","\n                            a modulus b\n                            "),wa),(xa={},Object(x.a)(xa,Symbol("title"),"Floor division"),Object(x.a)(xa,Symbol("code"),"\n                <pre>\n10 // 3 is 3 # True                \n                </pre>\n                    "),Object(x.a)(xa,"Operator","<code>//</code>"),Object(x.a)(xa,"Usage","a // b"),Object(x.a)(xa,"Description","\n                    Floor division\n                    "),xa)]},{elementType:"Headline-3",content:"Assignment operators"},{elementType:"ConditionalArray",headItems:["Operator","Usage","Description"],content:[(ja={},Object(x.a)(ja,Symbol("title"),"Add assign"),Object(x.a)(ja,Symbol("code"),"\n                            <pre>\na = 3;\na += 5;\n# now a is 8\n                            </pre>\n                            "),Object(x.a)(ja,"Operator","<code>+=</code>"),Object(x.a)(ja,"Usage","a += b"),Object(x.a)(ja,"Description","\n                            Adds b to a, and assigns the result to a\n                            "),ja)]},{elementType:"Headline-3",content:"Comparision operators"},{elementType:"ConditionalArray",headItems:["Operator","Usage","Description"],content:[(Ta={},Object(x.a)(Ta,Symbol("title"),"Equals"),Object(x.a)(Ta,Symbol("code"),"\n5 == 5 # True\n4 == 5 # False\n1 == True # True\n'' == True # False\n'' == False # False\n<div class='note note-danger'>Below in JS would be different</div>\n[1,2]==[1,2] # True \n{'a':4}=={'a':4} # True\n'string' == 'string' # True\n(1,2) == [1,2] # False\n                            "),Object(x.a)(Ta,"Operator","<code>==</code>"),Object(x.a)(Ta,"Usage","a == b"),Object(x.a)(Ta,"Description","\n                            a equals b\n                            "),Ta),(Oa={},Object(x.a)(Oa,Symbol("title"),"Greater than"),Object(x.a)(Oa,Symbol("code"),"\n                            <pre>\n6 > 5 # True\n4 > 5 # False\n2 > True # True\n1 > True # False\n'' == True # Error - not capable of copmaring a string and a boolean in this way\n[1,2]==[1,2] # True\n{'a':4}=={'a':4} # True\n'string' == 'string' # True\n(1,2) == [1,2] # False\n</pre>\n<div class=\"note note-danger\">Below works the same way as in JS. However NOT with a == operator</div>\n<pre>\nARRAYS: \n[1, 2] > [1, 1] # True\n[1, 0] > [1, 1] # False\n[1, 0] > [0, 1] # True\n# So like 10 > 01\n\n'aa' < 'bb' # True\n['aa', 2] < ['ab',2] # True\n\n</pre>\n                            "),Object(x.a)(Oa,"Operator","<code>></code>"),Object(x.a)(Oa,"Usage","a > b"),Object(x.a)(Oa,"Description","\n                            a is greater than b\n                            "),Oa)]},{elementType:"Headline-3",content:"Logical operators"},{elementType:"ConditionalArray",headItems:["Operator","Usage","Description"],content:[(Sa={},Object(x.a)(Sa,Symbol("title"),"not"),Object(x.a)(Sa,Symbol("code"),"\n                            <ul>\n                            <li>not True is False</li>\n                            <li>not False is True</li>\n                            </ul>\n                            "),Object(x.a)(Sa,"Operator","<code>not</code>"),Object(x.a)(Sa,"Usage","not y"),Object(x.a)(Sa,"Description","\n                            A logical operator negating the left-side operand\n                            "),Sa),(ka={},Object(x.a)(ka,Symbol("title"),"and"),Object(x.a)(ka,Symbol("code"),"\n                            <ul>\n                            <li>True  and True is True</li>\n                            <li>True  and False is False</li>\n                            <li>False and True is False</li>\n                            <li>False and False is False</li>\n                            </ul>\n                            <pre>\ntest=False\ndef check_test_side_effect():\n\ttest = not test\n\treturn True\n\nprint(False and check_test_side_effect()) # False, the check_test_side_effect is not triggered\nprint(test) # False\n\n                            </pre>\n                            "),Object(x.a)(ka,"Operator","<code>and</code>"),Object(x.a)(ka,"Usage","x and y"),Object(x.a)(ka,"Description","\n                            A logical AND operator, a shortcircuit one, like in JS. If the first operand determines the result, \n                            then the second one is not evaluated and if there is a sideeffect in it, it will not happen\n                            "),ka),(Ca={},Object(x.a)(Ca,Symbol("title"),"or"),Object(x.a)(Ca,Symbol("code"),"\n                            <ul>\n                            <li>True or True is True</li>\n                            <li>True or False is True</li>\n                            <li>False or True is True</li>\n                            <li>False or False is False</li>\n                            </ul>\n                            <pre>\ntest=False\ndef check_test_side_effect():\n\ttest = not test\n\treturn True\n\nprint(True or check_test_side_effect()) # True, the check_test_side_effect is not triggered\nprint(test) # False\n\n                            </pre>\n                            "),Object(x.a)(Ca,"Operator","<code>or</code>"),Object(x.a)(Ca,"Usage","x or y"),Object(x.a)(Ca,"Description","\n                            A logical OR operator, a shortcircuit one, like in JS. If the first operand determines the result, \n                            then the second one is not evaluated and if there is a sideeffect in it, it will not happen\n                            "),Ca)]},{elementType:"Headline-3",content:"Membership and identity operators"},{elementType:"ConditionalArray",headItems:["Operator","Usage","Description"],content:[(Aa={},Object(x.a)(Aa,Symbol("title"),"in"),Object(x.a)(Aa,Symbol("code"),"\n                            <pre>\ndict = {\n\t'a': 5, \n\t'b': 6, \n\t'c': 7, \n\t'd': {\n\t\t'a': 8, \n\t\t'x': 0\n\t}\n}\nprint( 'a' in dict)  # True\n\n5 in [4, 5, 6] # True\n5 in (5, 6, 7) # True\n'bit' in 'Betty bought a bit of bitter' # True\n5 in {5, 6, 7} # True\n\n                            </pre>\n                            "),Object(x.a)(Aa,"Operator","<code>in</code>"),Object(x.a)(Aa,"Usage","x in y"),Object(x.a)(Aa,"Description","True if y contains x. May be used for arrays, sets, tuples, frozensets, dictionaries, strings"),Aa),(Ia={},Object(x.a)(Ia,Symbol("title"),"not in"),Object(x.a)(Ia,Symbol("code"),"\n                            <pre>\ndict = {\n\t'a': 5, \n\t'b': 6, \n\t'c': 7, \n\t'd': {\n\t\t'a': 8, \n\t\t'x': 0\n\t}\n}\nprint( 'a' not in dict)  # False\n\n5 not in [4, 5, 6] # False\n3 not in (5, 6, 7) # True\n'elephant' not in 'Betty bought a bit of bitter' # True\n5 not in {5, 6, 7} # False\n\n                            </pre>\n                            "),Object(x.a)(Ia,"Operator","<code>not in</code>"),Object(x.a)(Ia,"Usage","x not in y"),Object(x.a)(Ia,"Description","True if y does not contains x. \n                            May be used for arrays, sets, tuples, frozensets, dictionaries, strings"),Ia),(Pa={},Object(x.a)(Pa,Symbol("title"),"is"),Object(x.a)(Pa,Symbol("code"),"\n                            <pre>\ng = {'a': 4, 'b':6}\nh = {'a': 4, 'b':6}\n\ng is h # False, not the same objects\n\na = 5\nb = 5\na is b # True\n\n{1,2} is {1,2} # False\n                            </pre>\n                            "),Object(x.a)(Pa,"Operator","<code>is</code>"),Object(x.a)(Pa,"Usage","x is y"),Object(x.a)(Pa,"Description","True if y is the same object x. \n                            Behaves in a different way in case 'primitive' objects and 'non primitive' objects \n                            are compared"),Pa),(Na={},Object(x.a)(Na,Symbol("title"),"is not"),Object(x.a)(Na,Symbol("code"),"\n                            <pre>\ng = {'a': 4, 'b':6}\nh = {'a': 4, 'b':6}\n\ng is h # True, not the same objects\n\na = 5\nb = 5\na is not b # False\n                            </pre>\n                            "),Object(x.a)(Na,"Operator","<code>is not</code>"),Object(x.a)(Na,"Usage","x is not y"),Object(x.a)(Na,"Description","Check if x is a different obejct than y"),Na)]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"w3schools",href:"https://www.w3schools.com/python/python_operators.asp",description:"Tutorial"}]}]};var Ma=[va,Ea,Ha];var La=[{summary:"peggy syntax",title:"peggy syntax",searchKeywords:"\n\n    ",cathegory:"peggy",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Peggy syntax"},{elementType:"Paragraph",content:"\n                    "},{elementType:"UnsignedList",content:["<code>'literal'</code>: like in regExp. matches the exect 'literal'. If with an <code>i</code> flag: case \n                        insensitive,","<code>[characters]</code>: the same as in regExp: matches one of characters in the set. Can contain\n                        ranges: <code>[a-z]</code> (like in regExp), <code>[^a-z]</code> makes it every character but not from a to z - \n                        but in this case <code>[A-Z]</code> are valid,","<code>rule</code>: matches an expression of a rule recursively, and returns the result,","<code>(expression)</code>: <b>matches</b>, not evaluates, the expression and returns the result (so true, matched or false)","<code>expression *</code>: expression should be matched 0 or more times,","<code>expression +</code>: expression should be matched 1 or more times,","<code>expression ?</code>: different than in regExp <b>!</b>. Tries to match the expression and returns the result or <code>null</code>,","<code>& expression</code>: try to match the expression. If succeeds, return <code>undefined</code> and to not \n                        consume input. If fails, considere the match failed,","<code>! expression</code>: try to match the expression. If <b>does not</b> succeed, return <code>undefined</code> and to not \n                        consume input. If fails, considere the match failed,","<code>& { predicate } </code>: <b>!!!!!</b>\n                        This is named a <i>positive assertion</i>. No input consumed, positive assertion, the \n                        <code>predicate</code> is a JS code, executed as a function, should return a boolean.\n                        <ul>\n                        <li>result truthy: <code>undefined</code></li>\n                        <li>result falsy: </code> match is faliled</li>\n                        </ul>\n                        ,","<code>! { predicate } </code>: This is named a <i>negative assertion</i>. <b>!!!!!</b> no input consumed, positive assertion, the \n                        <code>predicate</code> is a JS code, executed as a function, should return a boolean.\n                        <ul>\n                        <li>result truthy: <code>undefined</code></li>\n                        <li>result falsy: </code> match is faliled</li>\n                        </ul>\n                        ,","<code>$ expression</code>: try to match teh expresison. If succeeds, return the <b>matched text</b>.\n                        Otherwise <b>fail</b>. If returned text needs to be an action, use <code>text()</code> function,","<code><b>label:expression</b></code>: a label is like a varialble. It is defined only if the \n                        expression succeeds. The expression result is <b>saved</b> under the label and may be used in \n                        JS code.","<code>expression, expression1, ..</code> match a sequence of expressions and return \n                        matched result in an array,","<code><b>expression {action}</b></code>: if the expression succeeds, run action. Otherwise \n                        considere the match failed.","<code>expression1/expression2/expresssion3..</code>: Return the match result of the \n                        first expression that matches. Otherwise considere the match result failed.","<code></code>","<code></code>","<code></code>"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"peggyjs.org",href:"https://peggyjs.org/documentation.html#grammar-syntax-and-semantics-parsing-expression-types",description:"Tutorial"},{elementType:"Link",content:"peggyjs.org",href:"https://peggyjs.org/online.html",description:"Playground with example"}]}]}];function Da(){return[{category:"Css",content:C},{category:"Scss",content:ca},{category:"Html",content:A},{category:"Js",content:Po},{category:"Ts",content:No},{category:"React",content:Eo},{category:"Practice",content:Ho},{category:"DesignPatterns",content:Mo},{category:"Angular",content:Bo},{category:"Jasmine",content:Ko},{category:"Python",content:Ma},{category:"Peggy",content:La}]}var Ra=[{elementType:"Article",content:[{elementType:"Headline",content:"Welcome to theory corner"},{elementType:"Title",content:"By Marek Gudalewicz"},{elementType:"Paragraph",content:"\n                    This is a set of articles I prepared as a repetition during my interview preparation. This is also my first\n                    react project. You may read a short description of a few topics related to frontend, and take a test in quiz \n                    section. Enjoy.\n                "}]}];var Fa=n(3),Ba=n(12),Ua=n(1);function _a(e,t){return""===e.trim()?t:t.filter((function(t){return function(e){return"".concat(function(e){return e.summary}(e)," ").concat(function(e){return void 0===e.searchKeywords?"":e.searchKeywords}(e))}(t).includes(e)}))}function Wa(e){var t,n=Object(o.useRef)(),a=e.content,i=e.category,r=e.filter,s=Object(o.useState)(e.hideItems),c=Object(Fa.a)(s,2);c[0],c[1];return Object(o.useEffect)((function(){e.hideItems&&n.current.classList.remove("show"),e.hideItems||n.current.classList.add("show")})),Object(Ua.jsxs)("div",{children:[Object(Ua.jsx)("button",{type:"button",className:"btn xbtn-dark","data-bs-toggle":"collapse","data-bs-target":"#".concat(i),children:i}),Object(Ua.jsx)("div",{ref:n,className:"collapse xshow",id:i,children:Object(Ua.jsx)("ul",{className:"nav flex-column",children:(t=_a(r,a),t.sort((function(e,t){return e.summary.localeCompare(t.summary)}))).map((function(e){return Object(Ua.jsx)(qa,{summary:e.summary},e.summary)}))})})]})}function qa(e){return Object(Ua.jsx)("li",{className:"nav-item m-2",children:Object(Ua.jsx)(Ba.b,{to:"/theory/".concat(e.summary),children:e.summary})})}var za=function(e){var t=Object(o.useState)(""),n=Object(Fa.a)(t,2),a=n[0],i=n[1],r=Object(o.useState)("false"),s=Object(Fa.a)(r,2),c=s[0],l=s[1],d=Object(o.useRef)();function p(e){l(!1)}var m=e.menuData;return Object(Ua.jsxs)(Ua.Fragment,{children:[Object(Ua.jsxs)("form",{children:[Object(Ua.jsx)("div",{className:"row",children:Object(Ua.jsx)(Ba.b,{to:"../quiz",children:Object(Ua.jsx)("button",{type:"button",className:"btn btn-danger my-1 text-muted col-12",children:"Quiz"})})}),Object(Ua.jsxs)("div",{className:"input-group",children:[Object(Ua.jsx)("span",{className:"input-group-text",children:"\ud83d\udd0d"}),Object(Ua.jsx)("input",{className:"form-control",ref:d,placeholder:"search...",onChange:function(e){i(e.target.value)},onClick:p,onBlur:function(e){""===d.current.value.trim()&&l(!0)}}),Object(Ua.jsxs)("div",{children:[Object(Ua.jsx)("button",{type:"button",onClick:p,className:"btn px-1 py-0 btn-outline-success text-center d-block",children:"\ud83d\udc41"}),Object(Ua.jsxs)("button",{type:"button",onClick:function(e){l(!0)},className:"btn px-1 py-0 btn-outline-danger text-center d-block",children:[Object(Ua.jsx)("span",{children:"\ud83d\udc41"}),Object(Ua.jsx)("span",{style:{position:"absolute",left:"8px"},children:"/"})]})]})]})]}),Object(Ua.jsx)("div",{}),Object(Ua.jsx)("ul",{className:"nav flex-column",children:m.map((function(e){return Object(Ua.jsx)("li",{children:Object(Ua.jsx)(Wa,{content:e.content,hideItems:c,category:e.category,filter:a})},e.category)}))})]})};var Ga=function(e){function t(e){return e.headline}function n(e){return e.content}return e.listItem.map((function(e){return Object(Ua.jsxs)("div",{className:"row",children:[Object(Ua.jsx)("div",{className:"col-3",children:t(e)}),Object(Ua.jsx)("div",{className:"col-9",dangerouslySetInnerHTML:(o=n(e),{__html:o})})]},t(e));var o}))};var Va=function(e){var t=e.href,n=e.content;return Object(Ua.jsx)("div",{children:Object(Ua.jsx)("a",{href:t,target:"_blank",rel:"noreferrer",children:n})})};var Ka=function(e){var t=e.items;return Object(Ua.jsx)("ul",{children:t.map((function(e){return Object(Ua.jsx)("li",{dangerouslySetInnerHTML:(t=e,{__html:t})},e);var t}))})};function $a(e){var t=e.map((function(e){return"<li>"+e+"</li>"})).join("");return"<ul>".concat(t,"</ul>")}function Ja(e){return{__html:e}}function Xa(){if(void 0!==Xa.instance)return this.instance;Xa.instance=this,Xa.lastId=0}Xa.prototype.getNextUuid=function(){return Xa.lastId+=1,Xa.lastId.toString(36)};function Ya(e){var t=e.contentItem,n=e.orderArray,o=function(e,t){var n=[];if(void 0!==t){var o,a=Object(s.a)(t);try{for(a.s();!(o=a.n()).done;){var i=o.value;n.push(e[i])}}catch(c){a.e(c)}finally{a.f()}return n}for(var r in e)n.push(e[r]);return n}(t,n),a=Qa(t,"code"),i="id"+Math.floor(1e8*Math.random());return Object(Ua.jsxs)(Ua.Fragment,{children:[Object(Ua.jsx)("tr",{"data-bs-toggle":"collapse","data-bs-target":"#".concat(i),className:function(e){return void 0!==Qa(e,"code")}(t)?"cursor-pointer":"",children:o.map((function(e,t){return Object(Ua.jsx)("td",{dangerouslySetInnerHTML:Ja(e)},t)}))}),function(e){var t=Object(Ua.jsx)(Ua.Fragment,{});return null!==a&&(t=Object(Ua.jsx)("tr",{id:i,className:"collapse show1",children:Object(Ua.jsx)("td",{colSpan:o.length,dangerouslySetInnerHTML:Ja(a)})})),t}()]})}function Qa(e,t){var n=Object.getOwnPropertySymbols(e).find((function(e){return e.toString()==="Symbol(".concat(t,")")}));return void 0===n?void 0:e[n]}function Za(e){var t=e.contentItem,n=function(e,t){var n,o=[],a=Object(s.a)(t);try{for(a.s();!(n=a.n()).done;){var i=n.value;o.push({headline:i,content:e[i]})}}catch(r){a.e(r)}finally{a.f()}return o}(t,e.orderArray),o=Qa(t,"title"),a=Qa(t,"code");return Object(Ua.jsxs)("div",{className:"car my-3 px-2 py-2",children:[Object(Ua.jsx)("h4",{dangerouslySetInnerHTML:Ja(o)}),n.map((function(e,t){return Object(Ua.jsxs)("div",{className:"card-body",children:[Object(Ua.jsx)("h6",{dangerouslySetInnerHTML:Ja(e.headline)}),Object(Ua.jsx)("p",{dangerouslySetInnerHTML:Ja(e.content)})]},t)})),Object(Ua.jsx)("div",{className:"alert alert-dark",dangerouslySetInnerHTML:Ja(a)})]})}function ei(e){var t=e.headItems,n=e.content;return Object(Ua.jsxs)("table",{className:"table table-hover",children:[Object(Ua.jsx)("thead",{children:Object(Ua.jsx)("tr",{children:t.map((function(e){return Object(Ua.jsx)("th",{children:e},e)}))})}),Object(Ua.jsx)("tbody",{children:n.map((function(e,n){return Object(Ua.jsx)(Ya,{contentItem:e,orderArray:t},JSON.stringify(e))}))})]})}function ti(e){var t=e.headItems,n=e.content;return Object(Ua.jsx)("div",{className:"container-fluid my-3",children:n.map((function(e,n){return Object(Ua.jsx)(Za,{contentItem:e,orderArray:t},JSON.stringify(e))}))})}var ni=function(e){function t(e){return e<1e3?"small":"big"}function n(e){var n=window.innerWidth;s(t(n))}var a=Object(o.useState)(t(window.innerWidth)),i=Object(Fa.a)(a,2),r=i[0],s=i[1];Object(o.useEffect)((function(){return window.addEventListener("resize",n),function(){console.log("ConditionalArray removed"),window.removeEventListener("resize",n)}}));var c=e.headlines,l=e.contentItems;return"small"===r?Object(Ua.jsx)(ti,{headItems:c,content:l}):Object(Ua.jsx)(ei,{headItems:c,content:l})};var oi=function(e){var t="/".concat(e.name),n=e.alt;return"localhost"!==window.location.hostname&&(t="".concat(e.name)),Object(Ua.jsx)("img",{className:"mx-auto d-block",src:t,alt:n})};function ai(e){return{__html:e}}var ii=function(e){e.severity;var t=e.content;return Object(Ua.jsx)("div",{className:"alert alert-warning",dangerouslySetInnerHTML:ai("<strong>Note! </strong>".concat(t))})};function ri(e){return{__html:e}}var si=function(e){var t=e.content;return Object(Ua.jsx)("div",{className:"alert alert-dark",dangerouslySetInnerHTML:ri(t)})};function ci(e){var t=Object(o.useRef)(),n=Object(o.useState)(!1),a=Object(Fa.a)(n,2),i=a[0],r=a[1];return Object(Ua.jsxs)("div",{children:[Object(Ua.jsxs)("div",{className:"bg-light attract m-2",onClick:function(){r(!i)},children:[Object(Ua.jsx)("span",{ref:t,className:"".concat(i?"expanded":"collapsed"),children:"\u25ba"}),Object(Ua.jsx)("span",{dangerouslySetInnerHTML:Ja(e.info)})]}),Object(Ua.jsx)("div",{className:"alert alert-dark collapse ".concat(i?"show":""),dangerouslySetInnerHTML:Ja(e.code)})]})}var li=function(e){return e.content,e.content.map((function(e,t){return Object(Ua.jsx)(ci,{info:e.info,code:e.code},t)}))};var di=function(){var e,t=null,n=Object(o.useRef)(0),a=Object(o.useState)({currentTime:0,running:!1}),i=Object(Fa.a)(a,2),r=i[0],s=i[1];function c(e){return e%100}function l(e){return e<10?"0"+e:e}return Object(o.useEffect)((function(){if(r.running)return t=setInterval((function(){n.current+=1,s(Object(b.a)(Object(b.a)({},r),{},{currentTime:n.current}))}),10),function(){clearInterval(t)}}),[r.running]),Object(Ua.jsx)("div",{className:"col-12 text-center m-5",children:Object(Ua.jsxs)("div",{className:"col-md-6 col-sm-8 col-12 alert alert-dark bg-secondary text-white text-center p-2 d-inline-block",children:[Object(Ua.jsx)("div",{className:"container h1",children:(e=r.currentTime,"".concat(function(e){return Math.floor(e/6e3)}(e),":").concat(l(function(e){return(e-c(e))/100%60}(e)),":").concat(l(c(e))))}),Object(Ua.jsxs)("div",{className:"container",children:[Object(Ua.jsx)("button",{type:"button",onClick:function(){s(Object(b.a)(Object(b.a)({},r),{},{running:!0}))},className:"btn  btn-light m-1",children:"Start"}),Object(Ua.jsx)("button",{type:"button",onClick:function(){s(Object(b.a)(Object(b.a)({},r),{},{running:!1}))},className:"btn  btn-light m-1",children:"Stop"}),Object(Ua.jsx)("button",{type:"button",onClick:function(){s(Object(b.a)(Object(b.a)({},r),{},{currentTime:0})),n.current=0},className:"btn  btn-light m-1",children:"Reset"})]})]})})};function pi(e,t){return"start"===t.type?Object(b.a)(Object(b.a)({},e),{},{running:!0}):"stop"===t.type?Object(b.a)(Object(b.a)({},e),{},{running:!1}):"restart"===t.type?Object(b.a)(Object(b.a)({},e),{},{currentTime:0}):"tick"===t.type?Object(b.a)(Object(b.a)({},e),{},{currentTime:e.currentTime+1}):void 0}var mi=function(){var e=Object(o.useReducer)(pi,{currentTime:0,running:!1}),t=Object(Fa.a)(e,2),n=t[0],a=t[1];if(void 0===n)throw new Error;var i=null;function r(e){return e%100}function s(e){return e<10?"0"+e:e}var c,l={type:"start"},d={type:"stop"},p={type:"restart"},m={type:"tick"};return Object(o.useEffect)((function(){if(n.running)return i=setInterval((function(){a(m)}),10),function(){clearInterval(i)}}),[n.running]),Object(Ua.jsx)("div",{className:"col-12 text-center m-5",children:Object(Ua.jsxs)("div",{className:"col-md-6 col-sm-8 col-12 alert alert-dark bg-secondary text-white text-center p-2 d-inline-block",children:[Object(Ua.jsx)("div",{className:"container h1",children:(c=n.currentTime,"".concat(function(e){return Math.floor(e/6e3)}(c),":").concat(s(function(e){return(e-r(e))/100%60}(c)),":").concat(s(r(c))))}),Object(Ua.jsxs)("div",{className:"container",children:[Object(Ua.jsx)("button",{type:"button",onClick:function(){return a(l)},className:"btn  btn-light m-1",children:"Start"}),Object(Ua.jsx)("button",{type:"button",onClick:function(){return a(d)},className:"btn  btn-light m-1",children:"Stop"}),Object(Ua.jsx)("button",{type:"button",onClick:function(){return a(p)},className:"btn  btn-light m-1",children:"Reset"})]})]})})};var hi=function(e){var t=e.title,n=e.width||"300",a=e.height||"200",i="".concat(e.src);return Object(Ua.jsxs)(o.Fragment,{children:[Object(Ua.jsx)("div",{children:Object(Ua.jsx)("a",{className:"h2",href:i,target:"_blank",children:"Go to source"})}),Object(Ua.jsx)("iframe",{title:t,width:n,height:a,src:i})]})};function ui(e){var t=e.title,n=e.label,a=e.content,i=Object(o.useState)(e.isCollapsed||!0),r=Object(Fa.a)(i,2),s=r[0],c=r[1];return Object(Ua.jsxs)("li",{className:"m-3",children:[bi(a)?s?Object(Ua.jsx)("span",{children:"+ "}):Object(Ua.jsx)("span",{children:"- "}):Object(Ua.jsx)("span",{children:"\u2022 "}),Object(Ua.jsxs)("span",{onClick:function(){c(!s),console.log(s)},className:" ".concat(bi(a)?"hoverable":""),children:[Object(Ua.jsx)("strong",{children:t}),""!==t.trim()&&""!==n.trim()?Object(Ua.jsx)("span",{children:":"}):Object(Ua.jsx)(Ua.Fragment,{}),Object(Ua.jsx)("span",{children:n})]}),bi(a)&&!s?Object(Ua.jsx)(gi,{content:a}):Object(Ua.jsx)(Ua.Fragment,{})]},t+n)}function bi(e){return null!==e&&(void 0!==e&&((!Array.isArray(e)||0!==e.length)&&""!==e))}function gi(e){var t=e.content;return Object(Ua.jsx)("ul",{className:"no-decoration",children:function(){if(!bi(t))return Object(Ua.jsx)(Ua.Fragment,{});var e=t.map((function(e,t){return Object(Ua.jsx)(ui,{title:e.title,label:e.label,content:e.content},JSON.stringify(e))}));return Object(Ua.jsx)(Ua.Fragment,{children:e})}()})}var fi=gi,yi=n(63);function vi(e){return Object(Ua.jsx)("li",{children:Object(Ua.jsx)(yi.a,{to:"#".concat(e.id),children:e.title})})}var wi=function(e){return Object(Ua.jsx)("ul",{children:e.content.map((function(e,t){return Object(Ua.jsx)(vi,{id:e.id,title:e.title},e.id)}))})};function xi(e){var t=e.type,n=e.classes,o=e.description;return Object(Ua.jsxs)("div",{children:[Object(Ua.jsx)("div",{className:"".concat(n," disabled mb-2"),children:t}),Object(Ua.jsx)("span",{children:o})]})}function ji(e){var t=e.inputs;return Object(Ua.jsxs)(Ua.Fragment,{children:[Object(Ua.jsx)("h4",{children:"Legend"}),t.map((function(e){return Object(Ua.jsx)(xi,{type:e.type,classes:e.styleClasses,description:e.description},e.type)}))]})}function Ti(e){var t=e.classes,n=e.title,a={maxHeight:e.maxHeight}||{maxHeight:"60rem"},i=e.description,r=Object(o.useState)(!1),s=Object(Fa.a)(r,2),c=s[0],l=s[1];return Object(Ua.jsxs)("div",{children:[Object(Ua.jsx)("div",{className:t,onClick:function(){l(!c)},children:n}),Object(Ua.jsx)("div",{className:"alert alert-light ".concat(c?"show-animate":"hide-animate"),style:c?Object(b.a)(Object(b.a)({},a),{},{overflow:"auto"}):{maxHeight:"0px",overflow:"auto"},children:Object(Ua.jsx)(Qi,{content:i})})]})}var Oi=function(e){var t=e.legend,n=e.items,o=void 0===e.showLegend||e.showLegend,a=new Xa,i=function(){var e,n={},o=Object(s.a)(t);try{for(o.s();!(e=o.n()).done;){var a=e.value;n[a.type]=a.styleClasses}}catch(i){o.e(i)}finally{o.f()}return n}();return Object(Ua.jsxs)(Ua.Fragment,{children:[o?Object(Ua.jsx)(ji,{inputs:t}):null,Object(Ua.jsx)("hr",{}),Object(Ua.jsx)("i",{className:"badge rounded-pill bg-secondary mb-2",children:"Click an element to interact with it"}),n.map((function(e){return Object(Ua.jsx)(Ti,Object(x.a)({classes:e.classes,title:e.title,maxHeight:e.maxHeight,description:e.description},"classes",i[e.type]),a.getNextUuid())}))]})};var Si=function(e){var t=e.isVisible,n=e.content||{},a=Object(o.useState)(!1),i=Object(Fa.a)(a,2),r=i[0],s=i[1],c=e.displayDelay||400;return Object(o.useEffect)((function(){setTimeout((function(){s(t)}),c)}),[e.isVisible]),Object(Ua.jsx)("div",{className:"style-explanation-label ".concat(t?"show-explanation":""),style:r?{display:"inline-block"}:{},children:Object.keys(n).map((function(e,t){return Object(Ua.jsxs)("div",{children:[Object(Ua.jsx)("span",{className:"bold",children:e}),": ",Object(Ua.jsx)("i",{children:n[e]})]},e)}))})};function ki(e){return 40+e%5*20}var Ci=function(e){var t=e.itemsStyle,n=e.containerStyle,a=e.itemToDisplayInMenuIndex,i=e.itemDiffWidths,r=e.itemDiffHeights,s=!e.unsetChildWidths,c=!e.unsetChildHeights;console.log(t);var l=Object(o.useState)(new Array(t.length-1).fill(!1)),d=Object(Fa.a)(l,2),p=d[0],m=d[1],h=e.contentWidths,u=e.contentHeights;function g(e){return function(t){t.preventDefault(),t.stopPropagation(),a(e)(t)}}function f(e){var t=function(t,n){var o={};return"unset"===t||(o[n]="different"===t?ki(e)+"px":t+"px"),o},n=t(h,"width"),o=t(u,"height");return Object(b.a)(Object(b.a)({},n),o)}function y(e){var t=Object(b.a)({},e.styles);return c&&(t.height="75px"),s&&(t.width="75px"),t}function v(e){var t=function(t){return function(){var n=Object(Pe.a)(p);n[e]=t,m(n)}};return{show:t(!0),hide:t(!1)}}return Object(o.useEffect)((function(){console.log(r),console.log(i)}),[e.itemDiffWidths,e.itemDiffHeights]),Object(Ua.jsx)("div",{className:"flex-container-example",style:n,onClick:function(e){e.preventDefault(),e.stopPropagation(),a(-1)(e)},children:t.map((function(e,t,n){return Object(Ua.jsxs)("div",{className:"flex-item-example on-top",onClick:g(t),style:y(e),onMouseOver:v(t).show,onMouseLeave:v(t).hide,children:[Object(Ua.jsx)(Si,{content:y(e),isVisible:p[t]}),Object(Ua.jsx)("div",{className:"flex-item-example-content ",style:f(t),children:Object(Ua.jsx)("div",{className:"center-with-transform text-white h3",children:t})})]},t)}))})};var Ai=function(e){var t=e.helpContent,n=e.label,o=e.labelFor,a=e.displayHelpHandler,i=void 0===e.isActive||!0===e.isActive;return Object(Ua.jsxs)("span",{children:[void 0!=t?Object(Ua.jsxs)(Ua.Fragment,{children:[Object(Ua.jsx)("span",{className:"help-icon",onMouseEnter:a(!0,n,t),onMouseLeave:a(!1),children:"?"}),"\xa0\xa0"]}):Object(Ua.jsx)(Ua.Fragment,{}),Object(Ua.jsx)("label",{className:i?"":"disabled",htmlFor:o,children:Object(Ua.jsx)("b",{children:n})})]})};var Ii=function(e){var t=Object(o.useState)(e.isActive||!1),n=Object(Fa.a)(t,2),a=n[0],i=n[1],r=Object(o.useState)(e.value||""),s=Object(Fa.a)(r,2),c=s[0],l=s[1],d=e.name,p=e.changeHandler,m=(e.blurHandler,e.shouldSetInputToNullFunction),h=e.supportedInputName,u=(e.inputType,e.placeholder),b=Object(o.useRef)();Object(o.useEffect)((function(){l(e.value)}),[e.value]),Object(o.useEffect)((function(){var t=m(e.value);i(t),b.current.checked=t}),[e.value]);var g=e.helpDisplayHandler,f=e.helpContentFunction;return Object(Ua.jsxs)(Ua.Fragment,{children:[Object(Ua.jsx)("input",{type:"checkbox",ref:b,onChange:function(){return a&&(l(""),p({dummy:!0,key:d,newVal:"",eSource:h})),i(!a)}}),"\xa0\xa0",Object(Ua.jsx)(Ai,{label:d,labelFor:d,isActive:a,displayHelpHandler:g,helpContent:f(d)},d),Object(Ua.jsx)("input",{type:e.inputType||"number",name:d,"data-type":h,id:d,onChange:function(e){l(e.nativeEvent.target.value)},onBlur:function(e){!function(e){var t=parseInt(e.nativeEvent.target.value),n=e.nativeEvent.target.name;p({dummy:!0,key:n,newVal:t,eSource:h})}(e)},value:c,disabled:!a,className:"form-control",placeholder:u||""})]})};function Pi(e){return"number"===typeof e}var Ni=function(e){var t;return Object(Ua.jsx)(Ii,(t={isActive:e.isActive,value:e.value,name:e.name,changeHandler:e.changeHandler,blurHandler:e.blurHandler,const:!0,shouldSetInputToNullFunction:Pi},Object(x.a)(t,"const",!0),Object(x.a)(t,"supportedInputName","number-null"),Object(x.a)(t,"helpDisplayHandler",e.helpDisplayHandler),Object(x.a)(t,"helpContentFunction",e.helpContentFunction),t))};function Ei(e){return!isNaN(parseInt(e))}var Hi=function(e){return Object(Ua.jsx)(Ii,{isActive:e.isActive,value:e.value,name:e.name,changeHandler:e.changeHandler,blurHandler:e.blurHandler,shouldSetInputToNullFunction:Ei,supportedInputName:"text-null",inputType:"text",placeholder:"in px",helpDisplayHandler:e.helpDisplayHandler,helpContentFunction:e.helpContentFunction})};var Mi=function(e){var t=e.name,n=e.values,o=e.currentValues,a=e.changeHandler,i=e.displayHelpHandler,r=e.helpContentFunction;return Object(Ua.jsxs)("div",{className:"mb-3 mt-3",children:[Object(Ua.jsx)(Ai,{label:t,labelFor:t,displayHelpHandler:i,helpContent:r(t)},t),Object(Ua.jsx)("select",{name:t,id:t,value:o[t]||n[0],onChange:a,children:n.map((function(e,t,n){return Object(Ua.jsx)("option",{value:e,children:e},e)}))})]})};var Li=function(e){var t=e.descriptor.available,n=e.changeHandler,o=e.name,a=e.currentTab;return Object(Ua.jsx)("ul",{className:"nav nav-tabs",children:t.map((function(e,t){return Object(Ua.jsx)("li",{className:"nav-item}",children:Object(Ua.jsx)("button",{className:"nav-link  ".concat(a===t?"active":""),onClick:n,value:t,name:o,children:t})},e)}))})};var Di=function(e){var t=e.descriptor,n=e.currentValues,a=e.changeHandler,i=e.helpContentFunction,r=e.helpDisplayHandler;console.log(t);var s=function(){var e=new Array(Object.getOwnPropertyNames(t).length-1).fill(0);return Object.getOwnPropertyNames(t).forEach((function(o,a){(["number","number-null","text-null","read-only"].includes(t[o])||"nav"===o||t[o].includes("range"))&&(e[a]=n[o])})),e},c=Object(o.useState)(s()),l=Object(Fa.a)(c,2),d=l[0],p=l[1];Object(o.useEffect)((function(){p(Object(Pe.a)(s()))}),[n]);var m=function(e){return function(t){var n=Object(Pe.a)(d),o=parseInt(t.nativeEvent.target.value);n[e]=isNaN(o)?0:o,p(n)}},h=function(e){return function(t){var n=parseInt(t.nativeEvent.target.value),o=t.nativeEvent.target.name;return console.dir(t.nativeEvent.target),isNaN(n)&&(n=t.nativeEvent.target.value),"checkbox"===e&&(n=t.nativeEvent.target.checked),a({dummy:!0,key:o,newVal:n,eSource:e})}},u=function(e){return void 0===e||null===e?"":e};return Object(Ua.jsx)("div",{className:"input-group-sm",children:Object.getOwnPropertyNames(t).map((function(e,o,s){return console.log(e),Object(Ua.jsx)("div",{children:"number"===t[e]?Object(Ua.jsxs)(Ua.Fragment,{children:[Object(Ua.jsx)(Ai,{label:e,labelFor:e,displayHelpHandler:r,helpContent:i(e)},e),Object(Ua.jsx)("input",{type:"number",className:"form-control","data-type":"number",id:e,onChange:m(o),onBlur:function(e){h("number")(e)},value:d[o]},e)]}):"number-null"===t[e]?Object(Ua.jsx)(Ni,{name:e,changeHandler:a,blurHandler:a,isActive:d[o],value:u(d[o]),helpDisplayHandler:r,helpContentFunction:i}):"read-only"===t[e]?Object(Ua.jsxs)(Ua.Fragment,{children:[Object(Ua.jsx)("div",{children:Object(Ua.jsx)("b",{children:e})}),Object(Ua.jsx)("div",{children:u(d[o])})]}):"button"===t[e]?Object(Ua.jsx)("button",{className:"form-control btn-success",onClick:h("button"),name:e,children:e}):"nav"===e?Object(Ua.jsx)(Ua.Fragment,{children:Object(Ua.jsx)(Li,{changeHandler:h("nav"),name:e,descriptor:t[e],currentTab:d[o]})}):"text-null"===t[e]?Object(Ua.jsx)(Hi,{name:e,changeHandler:a,blurHandler:a,isActive:d[o],value:u(d[o]),helpDisplayHandler:r,helpContentFunction:i}):t[e].includes("range")?Object(Ua.jsxs)(Ua.Fragment,{children:[Object(Ua.jsx)(Ai,{label:e,labelFor:e,displayHelpHandler:r,helpContent:i(e)},e),Object(Ua.jsx)("input",{type:"range",min:t[e].split(" ")[1],max:t[e].split(" ")[2],name:e,value:d[o],style:{width:u(t[e].split(" ")[4])+"px"},id:t[e],onChange:h("range")})]}):t[e].includes("checkbox")?Object(Ua.jsxs)(Ua.Fragment,{children:[Object(Ua.jsx)("input",{type:"checkbox",name:e,onChange:h("checkbox")}),"\xa0\xa0",Object(Ua.jsx)(Ai,{label:e,labelFor:t[e],displayHelpHandler:r,helpContent:i(e)},e)]}):Object(Ua.jsx)(Mi,{name:e,currentValues:n,values:t[e],displayHelpHandler:r,helpContentFunction:i,changeHandler:h("select")},e)},e)}))})};function Ri(){return{nrOfItems:4,width:500}}function Fi(e){var t;return(t={width:"The width of the flex-container.",nrOfItems:"The number of direct children of the flex-container.",contentWidths:"The width in px of each direct child of the flex-container content (flex-container grand-children),\n            If set to <code>unset</code>, all content widths will be not set. If set do <code>different</code> content\n            sizes will be not equal, to demonstrate <code>align-items</code>",contentHeights:"The height in px of each direct child of the flex-container content (flex-container grand-children)\n            If set to <code>unset</code>, all content heights will be not set. If set do <code>different</code> content\n            sizes will be not equal, to demonstrate <code>align-items</code>",flexBasisAll:"The <code>flex-basis</code> parameter will be set for each direct child of the flex-container.\n            If set to <code>unset</code>: all <code>flex-basis</code> properties will be removed.",unsetChildWidths:"By default, each child of the flex-container width and height paramenters are set to 75px. \n                           Mark this to unset width of the flex-container direct children.",unsetChildHeights:"By default, each child of the flex-container width and height paramenters are set to 75px. \n        Mark this to unset height of the flex-container direct children.",flexDirection:"The <code>flex-direction</code> css property of the felx-parent container. \n            If <code>undefined</code>, then the default <code>row</code> value is set by browser.",flexWrap:"The <code>flex-wrap</code> css property of the felx-parent container. \n        If <code>undefined</code> then the default browser <code>no-wrap</code> value will be used.",justifyContent:"The <code>justify-content</code> css property of the felx-parent container.\n            If set to <code>undefined</code> then the defalut browser behaviour will be applied.",alignItems:"The <code>align-items</code> css property of the felx-parent container. \n            If set to <code>undefined</code> then the defalut browser behaviour will be applied.",alighContent:"The <code>align-content</code> css property of the felx-parent container. \n            If set to <code>undefined</code> then the defalut browser behaviour will be applied.",rowGap:"The <code>row-gap</code> css property of the felx-parent container. If not set then the defalut browser behaviour will be applied.",columnGap:"The <code>column-gap</code> css property of the felx-parent container.  If not set then the defalut browser behaviour will be applied.",indexOfItem:"Read only, the direct child of the flex-container that was selected with a click,",order:"The <code>order</code> property of the flex-container child. By default is 0, meaning that all \n        flex-container children appear in the order they are in the DOM. If <code>order</code> is set to any non 0 value,\n        the affected element will be taken visualy from the DOM order, and will be placed according to the <code>order</code>\n        value before all elements (order < 0) or after them (order > 0)"},Object(x.a)(t,"rowGap","The <code>row-gap</code> property of the flex-container direct child. If set to undefined,\n        the the <code>row-gap</code> will not be set on the specific flex-container child."),Object(x.a)(t,"columnGap","The <code>column-gap</code> property of the flex-container direct child. If set to undefined,\n        the the <code>column-gap</code> will not be set on the specific flex-container child."),Object(x.a)(t,"flexGrow","or <code>flex-grow</code> css property. The factor to calculate how much fraction of the space remaining after \n        all flex-container children are placed will be taken by the flex-container child."),Object(x.a)(t,"flexShrink","or <code>flex-shrink</code> css property. The factor indicating how much the element will shrink in\n        the situation all space is already taken by flex-container children, and children have to shrink."),Object(x.a)(t,"flexBasis","or <code>flex-basis</code> css property. The initial size of the flex-container child, \n            before the element will be modified by the flex algorithm. The size is calculated along the main flexbox direction."),Object(x.a)(t,"alignSelf","or <code>align-self</code> css property. Indicates the positioning of the single element. Element will\n        breake out from the <code>align-items</code>."),t)[e]}function Bi(e,t,n){console.log(e);var o=[];return e.forEach((function(e,a){var i=Object(b.a)({},e);i.styles[t]=n,o.push(i)})),console.log(o),o}function Ui(e){return{__html:e}}var _i=function(e){var t=e.title,n=e.content;return console.log(t),console.log(n),Object(Ua.jsx)("div",{className:"flex-help-modal-shutter",children:Object(Ua.jsxs)("div",{className:"flex-help-modal",children:[Object(Ua.jsx)("div",{className:"flex-help-modal-title",children:t}),Object(Ua.jsx)("br",{}),Object(Ua.jsx)("div",{className:"flex-help-modal-content",dangerouslySetInnerHTML:Ui(n)})]})})};function Wi(e,t){var n,o=Object(s.a)(e);try{for(o.s();!(n=o.n()).done;){var a=n.value;if(t in a)return a[t]}}catch(i){o.e(i)}finally{o.f()}}var qi=function(){var e="flexDemoId",t=Object(o.useState)(4),n=Object(Fa.a)(t,2),a=n[0],i=(n[1],Object(o.useState)({nrOfItems:4,width:500})),r=Object(Fa.a)(i,2),c=r[0],l=r[1],d=Object(o.useState)("unset"),p=Object(Fa.a)(d,2),m=p[0],h=p[1],u=function(e){var t={styles:{indexOfItem:e},key:e};return isNaN(parseInt(m))||(t.styles.flexBasis=m+"px"),t},g=function(e){var t=[];return e.forEach((function(e,n,o){var a=u(n);a.key=e.key;var i,r=Object(s.a)(Object.getOwnPropertyNames(e.styles));try{for(r.s();!(i=r.n()).done;){var c=i.value;a.styles[c]=e.styles[c]}}catch(l){r.e(l)}finally{r.f()}t.push(a)})),t},f=Object(o.useState)(function(e){for(var t=[],n=0;n<e;n++)t.push(u(n));return t}(a)),y=Object(Fa.a)(f,2),v=y[0],w=y[1],x=Object(o.useState)(-1),j=Object(Fa.a)(x,2),T=j[0],O=j[1],S=Object(o.useState)(Ri.width),k=Object(Fa.a)(S,2),C=k[0],A=k[1],I=Object(o.useState)(!1),P=Object(Fa.a)(I,2),N=P[0],E=P[1],H=Object(o.useState)(!1),M=Object(Fa.a)(H,2),L=M[0],D=M[1],R=Object(o.useState)(Wi([{nav:{available:[0,1],selected:1},width:"range 300 700 500 150",nrOfItems:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],contentWidths:[50,"unset",20,35,75,"different"],contentHeights:[50,"unset",20,35,75,"different"],flexBasisAll:["unset",20,50,75,100,200],unsetChildWidths:"checkbox",unsetChildHeights:"checkbox"},{nav:{available:[1,2],selected:2},flexDirection:["undefined","row","column"],flexWrap:["undefined","wrap","no-wrap"],justifyContent:["undefined","flex-start","flex-end","center","space-between","space-around","space-evenly"],alignItems:["undefined","flex-start","flex-end","center","stretch","baseline"],alignContent:["undefined","flex-start","flex-end","center","stretch","space-between","space-around"],rowGap:"text-null",columnGap:"text-null"}],"contentWidths")[0]),F=Object(Fa.a)(R,2),B=F[0],U=F[1],_=Object(o.useState)(Wi([{nav:{available:[0,1],selected:1},width:"range 300 700 500 150",nrOfItems:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],contentWidths:[50,"unset",20,35,75,"different"],contentHeights:[50,"unset",20,35,75,"different"],flexBasisAll:["unset",20,50,75,100,200],unsetChildWidths:"checkbox",unsetChildHeights:"checkbox"},{nav:{available:[1,2],selected:2},flexDirection:["undefined","row","column"],flexWrap:["undefined","wrap","no-wrap"],justifyContent:["undefined","flex-start","flex-end","center","space-between","space-around","space-evenly"],alignItems:["undefined","flex-start","flex-end","center","stretch","baseline"],alignContent:["undefined","flex-start","flex-end","center","stretch","space-between","space-around"],rowGap:"text-null",columnGap:"text-null"}],"contentHeights")[0]),W=Object(Fa.a)(_,2),q=W[0],z=W[1],G=Object(o.useState)(!1),V=Object(Fa.a)(G,2),K=V[0],$=V[1],J=Object(o.useState)(!1),X=Object(Fa.a)(J,2),Y=X[0],Q=X[1],Z=Object(o.useState)(0),ee=Object(Fa.a)(Z,2),te=ee[0],ne=ee[1],oe=function(){return console.log(Object(b.a)(Object(b.a)(Object(b.a)({},c),{contentHeights:q}),{contentWidths:B})),T<0?Object(b.a)(Object(b.a)(Object(b.a)(Object(b.a)(Object(b.a)({},c),{contentHeights:q}),{contentWidths:B}),{nav:te}),{flexBasisAll:m}):Object(b.a)({},v[T].styles)},ae=Object(o.useState)(oe()),ie=Object(Fa.a)(ae,2),re=(ie[0],ie[1],Object(o.useState)([{nav:{available:[0,1],selected:1},width:"range 300 700 500 150",nrOfItems:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],contentWidths:[50,"unset",20,35,75,"different"],contentHeights:[50,"unset",20,35,75,"different"],flexBasisAll:["unset",20,50,75,100,200],unsetChildWidths:"checkbox",unsetChildHeights:"checkbox"},{nav:{available:[1,2],selected:2},flexDirection:["undefined","row","column"],flexWrap:["undefined","wrap","no-wrap"],justifyContent:["undefined","flex-start","flex-end","center","space-between","space-around","space-evenly"],alignItems:["undefined","flex-start","flex-end","center","stretch","baseline"],alignContent:["undefined","flex-start","flex-end","center","stretch","space-between","space-around"],rowGap:"text-null",columnGap:"text-null"}])),se=Object(Fa.a)(re,2),ce=(se[0],se[1]),le=Object(o.useState)({}),de=Object(Fa.a)(le,2),pe=de[0],me=de[1];Object(o.useEffect)((function(){console.log(m)}),[m]),Object(o.useEffect)((function(){ce([{nav:{available:[0,1],selected:1},width:"range 300 700 500 150",nrOfItems:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],contentWidths:[50,"unset",20,35,75,"different"],contentHeights:[50,"unset",20,35,75,"different"],flexBasisAll:["unset",20,50,75,100,200],unsetChildWidths:"checkbox",unsetChildHeights:"checkbox"},{nav:{available:[1,2],selected:2},flexDirection:["undefined","row","column"],flexWrap:["undefined","wrap","no-wrap"],justifyContent:["undefined","flex-start","flex-end","center","space-between","space-around","space-evenly"],alignItems:["undefined","flex-start","flex-end","center","stretch","baseline"],alignContent:["undefined","flex-start","flex-end","center","stretch","space-between","space-around"],rowGap:"text-null",columnGap:"text-null"}])}),[te]);var he=Object(o.useRef)(null),ue=function(){return T<0?[{nav:{available:[0,1],selected:1},width:"range 300 700 500 150",nrOfItems:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],contentWidths:[50,"unset",20,35,75,"different"],contentHeights:[50,"unset",20,35,75,"different"],flexBasisAll:["unset",20,50,75,100,200],unsetChildWidths:"checkbox",unsetChildHeights:"checkbox"},{nav:{available:[1,2],selected:2},flexDirection:["undefined","row","column"],flexWrap:["undefined","wrap","no-wrap"],justifyContent:["undefined","flex-start","flex-end","center","space-between","space-around","space-evenly"],alignItems:["undefined","flex-start","flex-end","center","stretch","baseline"],alignContent:["undefined","flex-start","flex-end","center","stretch","space-between","space-around"],rowGap:"text-null",columnGap:"text-null"}][te]:{indexOfItem:"read-only",order:"number-null",flexGrow:"number-null",flexShrink:"number-null",flexBasis:"text-null",alignSelf:["undefined","auto","flex-start","flex-end","center","baseline","stretch"],"Go to container":"button"}},be=function(e){l(e)},ge=function(e){var t=[{nav:{available:[0,1],selected:1},width:"range 300 700 500 150",nrOfItems:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],contentWidths:[50,"unset",20,35,75,"different"],contentHeights:[50,"unset",20,35,75,"different"],flexBasisAll:["unset",20,50,75,100,200],unsetChildWidths:"checkbox",unsetChildHeights:"checkbox"},{nav:{available:[1,2],selected:2},flexDirection:["undefined","row","column"],flexWrap:["undefined","wrap","no-wrap"],justifyContent:["undefined","flex-start","flex-end","center","space-between","space-around","space-evenly"],alignItems:["undefined","flex-start","flex-end","center","stretch","baseline"],alignContent:["undefined","flex-start","flex-end","center","stretch","space-between","space-around"],rowGap:"text-null",columnGap:"text-null"}],n=Object(b.a)({},Ri);e<881?(t.width="range 150 300 200 150",A(300),n.width=300,l(n)):e<1205?(t.width="range 150 500 400 150",A(400),n.width=400,l(n)):e>=1205&&(n.width=500,l(n)),ce(t)};Object(o.useEffect)((function(){return null===he.current&&(he.current=function(){var e=[];return window.addEventListener("resize",(function(t){console.log(e);var n,o=Object(s.a)(e);try{for(o.s();!(n=o.n()).done;){var a=n.value;console.log(a),a.cb(window.innerWidth)}}catch(i){o.e(i)}finally{o.f()}})),{subscribe:function(t,n){e.push({cb:t,id:n}),console.log("subscribed")},unsubscribe:function(t){console.log("unsubscribed");var n=e.findIndex((function(e,n){return e.id===t}));e.splice(n,1)}}}(),he.current.subscribe(ge,e)),function(){he.current.unsubscribe(e)}}),[]);var fe=function(e,t,n){var o,a=Object(b.a)({},v[e].styles),i=(o=v,JSON.parse(JSON.stringify(o)));null===n?delete a[t]:a[t]=n,i[e].styles=a,w(Object(Pe.a)(i))};return console.log(ue()),Object(Ua.jsx)(Ua.Fragment,{children:Object(Ua.jsxs)("div",{className:"felx-demo-wrapper row",children:[Object(Ua.jsx)("div",{className:"flex-demo-menu col",children:Object(Ua.jsx)(Di,{descriptor:ue(),currentValues:oe(),changeHandler:function(e){var t=e.key,n=e.newVal,o=e.eSource;console.log(e);var a=function(){"contentWidths"===t&&(console.log(n),U(n)),"contentHeights"===t&&(console.log(n),z(n))};return["number","number-null","text-null"].includes(o)?function(){var e=Object(b.a)({},c);e[t]="undefined"===n?"":n,T>=0?fe(T,t,n):be(e)}():"range"===o?function(){var e=Object(b.a)({},c);A(n),e[t]=C,be(e)}():"button"===o?void("Go to container"===t&&O(-1)):"checkbox"===o?void("diffContentWidths"===t?E(n):"diffContentHeights"===t?D(n):"unsetChildWidths"===t?$(n):"unsetChildHeights"===t&&Q(n)):"nav"===o?void ne(n):function(){var e=Object(b.a)({},c);e[t]="undefined"===n?"":n,T>=0?function(e,t,n){var o=g(v);o[n].styles[e]=t,w(o)}(t,n,T):"nrOfItems"===t?function(e){var t=e-v.length,n=g(v),o=Object(b.a)({},c);!function(){if(isNaN(t))throw new Error("\n                    FlexDemo: handleChangeNrOfItems: newNumberOfItems is ".concat(e,", should be of a number type\n                "));if(0===t)throw new Error("\n                    Something is wrong. deltaNrOfItems is 0 and handelChangeNrOfItems tirggered\n                ")}(),0!==t&&(t>0&&function(){for(var e=0;e<t;e++)n.push(u(v.length+e))}(),t<0&&function(){for(var e=0;e<Math.abs(t);e++)n.pop()}(),o.nrOfItems=n.length,w(n),l(o))}(n):"contentWidths"===t||"contentHeights"===t?a():"flexBasisAll"===t?(w(Bi(v,"flexBasis","unset"===n?void 0:n)),h(n)):be(e)}()},helpContentFunction:Fi,helpDisplayHandler:function(e,t,n){return console.log(t),console.log(n),e?function(){me({title:t,content:n})}:function(){me({})}}})}),Object(Ua.jsxs)("div",{className:"col p-1",children:[void 0!==pe.title?Object(Ua.jsx)(_i,{content:pe.content,title:pe.title}):Object(Ua.jsx)(Ua.Fragment,{}),Object(Ua.jsx)(Ci,{containerStyle:c,itemsStyle:v,itemToDisplayInMenuIndex:function(e){return function(t){O(e)}},itemDiffWidths:N,itemDiffHeights:L,unsetChildWidths:K,unsetChildHeights:Y,contentWidths:B,contentHeights:q})]})]})})},zi=function(e,t){return Object.keys(e).map((function(e){return parseInt(e,10)})).includes(t)?e[t]:{}};function Gi(e,t,n,o){var a=Object(Pe.a)(Array(e).keys()),i=new Xa;return a.map((function(e,a){return Object(Ua.jsx)("div",{id:i.getNextUuid(),style:Object(b.a)(Object(b.a)({},t),zi(n,a)),className:"grid-presentation-item",children:Object(Ua.jsx)("span",{style:Object(b.a)({},o),children:e})},e)}))}function Vi(e){return e.map((function(e){return Object(Ua.jsx)("option",{value:e,children:e},e)}))}var Ki=function(e){var t=new Xa,n=Object(o.useState)({gridAutoFlow:{current:"row",values:["row","column","dense","row dense","column dense","revert","unset"],id:t.getNextUuid()},alignItems:{current:"normal",values:["normal","flex-start","center","flex-end","start","end","self-start","self-end","stretch"],id:t.getNextUuid()},alignContent:{current:"normal",values:["normal","start","center","end","space-around","space-between","space-evenly"],id:t.getNextUuid()},justifyItems:{current:"normal",values:["normal","flex-start","center","flex-end","start","end","self-start","self-end","stretch","left","right","baseline","first baseline","last baseline"],id:t.getNextUuid()},justifyContent:{current:"normal",values:["normal","start","center","end"],id:t.getNextUuid()}}),a=Object(Fa.a)(n,2),i=a[0],r=a[1],s=Object(o.useState)(e.parentWidth||300),c=Object(Fa.a)(s,2),l=c[0],d=c[1],p=Object(o.useState)(e.parentHeight||400),m=Object(Fa.a)(p,2),h=m[0],u=m[1],g=Object(o.useState)(e.nrOfChildren||8),f=Object(Fa.a)(g,2),y=f[0],v=f[1],w=Object(o.useState)(Object(b.a)(Object(b.a)({},e.parentStyle),function(e){for(var t={},n=0,o=Object.keys(i);n<o.length;n++){var a=o[n];t[a]=i[a].current}return t}())||{}),j=Object(Fa.a)(w,2),T=j[0],O=j[1],S=e.childStyle||{},k=e.grandChildStyle||{},C=e.childByIndexStyle||{},A=t.getNextUuid(),I=function(e){var t=e.target.value,n=e.target.name,o=Object(b.a)(Object(b.a)({},i[n]),{},{current:t});r(Object(b.a)(Object(b.a)({},i),{},Object(x.a)({},n,o))),O(Object(b.a)(Object(b.a)({},T),{},Object(x.a)({},n,t)))};return Object(Ua.jsxs)(Ua.Fragment,{children:[Object(Ua.jsxs)("div",{children:[Object(Ua.jsxs)("div",{children:[Object(Ua.jsx)("label",{htmlFor:"width",children:"Width"}),"\xa0\xa0\xa0\xa0",Object(Ua.jsx)("input",{type:"range",min:300,max:800,value:l,id:"width",onChange:function(e){var t=e.nativeEvent.target.value;d(t)}})]}),Object(Ua.jsxs)("div",{children:[Object(Ua.jsx)("label",{htmlFor:"height",children:"Height"}),"\xa0\xa0\xa0",Object(Ua.jsx)("input",{type:"range",min:400,max:800,value:h,id:"height",onChange:function(e){var t=e.nativeEvent.target.value;u(t)}})]}),Object.keys(i).map((function(e,t){return Object(Ua.jsxs)("div",{children:[Object(Ua.jsxs)("label",{htmlFor:i[e].id,children:[e,":"]}),"\xa0\xa0\xa0\xa0",Object(Ua.jsx)("select",{name:e,id:i[e].id,value:i[e].current,onChange:I,children:Vi(i[e].values)})]},e)})),Object(Ua.jsxs)("div",{children:[Object(Ua.jsx)("label",{htmlFor:A,children:"Number of children:"}),"\xa0\xa0\xa0\xa0",Object(Ua.jsx)("select",{name:"Number of items",id:A,value:y,onChange:function(e){var t=parseInt(e.target.value);v(t)},children:Vi([4,5,8,10,13,17,25])})]})]}),Object(Ua.jsx)("div",{className:"grid-presentation m-4",style:Object(b.a)(Object(b.a)({},T),{},{width:l+"px",height:h+"px"}),children:Gi(y,S,C,k)})]})};var $i=function(e){var t=e.content,n={parent:{display:"flex"},children:{display:"inline-block",flexGrow:1,transform:"translateY(0rem)"},title:{display:"inline-block",fontStyle:"italic",fontSize:"1.4rem",marginLeft:"1rem",marginRight:"1rem",color:"gray"}};return Object(Ua.jsxs)(Ua.Fragment,{children:[Object(Ua.jsx)("div",{style:{height:"1rem"}}),Object(Ua.jsxs)("div",{style:n.parent,children:[Object(Ua.jsx)("span",{style:n.children,children:Object(Ua.jsx)("hr",{})}),Object(Ua.jsx)("span",{style:n.title,children:t}),Object(Ua.jsx)("span",{style:n.children,children:Object(Ua.jsx)("hr",{})})]}),Object(Ua.jsx)("div",{style:{height:"1rem"}})]})};function Ji(e,t,n){return["Section","Article","ExplanationList"].includes(e)?function(e,t){if("Section"===e)return Object(Ua.jsx)("section",{children:t.map((function(e,t){return Object(Ua.jsx)(Xi,{content:e},t)}))});if("UnsignedList"===e)return Object(Ua.jsx)(Ka,{items:t});if("ExplanationList"===e)return Object(Ua.jsx)(Ga,{listItem:t},t.headline);if("Article"===e)return Object(Ua.jsx)("article",{children:t.map((function(e,t){return Object(Ua.jsx)(Xi,{content:e},t)}))})}(e,t):function(e){return["Paragraph","Headline","UnsignedList","Headline-2","Headline-3","Title","ListItem","Link","NoteWarning","Image","Code","SmallHeadline","ConditionalArray","exampleInIframe","HiddenList","ListOfContent","HiddenCode","HiddenDescription","StopWatchState","StopWatchReducer","FlexDemo","GridPresent","Separate"].includes(e)}(e)?function(e,t,n){if("Paragraph"===e)return Object(Ua.jsx)("p",{dangerouslySetInnerHTML:Yi(t)});if("Headline"===e)return Object(Ua.jsx)("h1",{className:"display-2",dangerouslySetInnerHTML:Yi(t)});if("Headline-2"===e)return Object(Ua.jsx)("h3",{className:"display-4",dangerouslySetInnerHTML:Yi(t)});if("Headline-3"===e)return Object(Ua.jsx)("h4",{className:"display-5",dangerouslySetInnerHTML:Yi(t)});if("SmallHeadline"===e)return Object(Ua.jsx)("h4",{dangerouslySetInnerHTML:Yi(t)});if("NoteWarning"===e)return Object(Ua.jsx)(ii,{severity:"warning",content:t});if("Title"===e)return Object(Ua.jsx)("h1",{className:"display-6",children:t});if("ListItem"===e)return Object(Ua.jsx)("li",{children:t},t);if("UnsignedList"===e)return Object(Ua.jsx)(Ka,{items:t});if("Link"===e)return Object(Ua.jsx)(Va,{href:n.href,content:t},t);if("Image"===e)return Object(Ua.jsx)(oi,{name:n.name,alt:n.alt});if("Code"===e)return Object(Ua.jsx)(si,{content:t});if("HiddenCode"===e)return Object(Ua.jsx)(li,{content:t});if("HiddenDescription"===e)return Object(Ua.jsx)(Oi,{legend:t.legend,items:t.items,showLegend:t.showLegend,maxHeight:n.maxHeight});if("GridPresent"===e)return Object(Ua.jsx)(Ki,{parentWidth:n.parentWidth,parentHeight:n.parentHeight,nrOfChildren:n.nrOfChildren,parentStyle:n.parentStyle,childStyle:n.childStyle,grandChildStyle:n.grandChildStyle,childByIndexStyle:n.childByIndexStyle});if("ConditionalArray"===e)return Object(Ua.jsx)(ni,{headlines:n.headItems,contentItems:t});if("exampleInIframe"===e)return Object(Ua.jsx)(hi,{src:n.src,title:n.title,width:n.width,height:n.height});if("HiddenList"===e)return Object(Ua.jsx)(fi,{content:t});if("ListOfContent"===e)return Object(Ua.jsx)(wi,{content:t});if("Separate"===e)return Object(Ua.jsx)($i,{content:t});if("StopWatchState"===e)return Object(Ua.jsx)(di,{});if("StopWatchReducer"===e)return Object(Ua.jsx)(mi,{});if("FlexDemo"===e)return Object(Ua.jsx)(qi,{})}(e,t,n):(console.error("".concat(e," is not supported: contentRenderer.js")),"")}function Xi(e){var t=e.content.elementType,n=e.content.content,o=void 0===t,a={href:e.content.href,name:e.content.name,alt:e.content.alt,headItems:e.content.headItems,src:e.content.src,title:e.content.title,width:e.content.width,height:e.content.height,label:e.content.label,parentWidth:e.content.parentWidth,parentHeight:e.content.parentHeight,nrOfChildren:e.content.nrOfChildren,parentStyle:e.content.parentStyle,childStyle:e.content.childStyle,grandChildStyle:e.content.grandChildStyle,childByIndexStyle:e.content.childByIndexStyle,maxHeight:e.content.maxHeight};return o?n.map((function(e,t){return Object(Ua.jsx)(Xi,{content:e},t)})):Ji(t,n,a)}function Yi(e){return{__html:e}}var Qi=Xi;function Zi(e){return{position:"relative",height:e}}var er=function(e){var t=e.size;return void 0===t&&(t="10rem"),Object(Ua.jsx)("div",{style:Zi(t)})};var tr=function(e){return Object(Ua.jsxs)(Ua.Fragment,{children:[Object(Ua.jsx)(Qi,{content:e}),Object(Ua.jsx)(er,{})]})},nr=n(5);function or(e,t){var n=function(e){return void 0===e||null===e||void 0===e.pathname?[]:e.pathname.split("/").slice(1)}(e);return 1===n.length&&n[0]===t}function ar(e){var t,n=function(e){var t=[];return e.forEach((function(e){t=t.concat(e.content)})),t}(Da()),o=Object(s.a)(n);try{for(o.s();!(t=o.n()).done;){var a=t.value;if(a.summary===e&&console.log(a),a.summary===e)return a.content}}catch(i){o.e(i)}finally{o.f()}return{}}var ir=function(e){var t,n,o=Da(),a=Ra,i=Object(nr.e)(),r=Object(nr.g)();return Object(Ua.jsxs)("div",{className:"container-fluid",children:[Object(Ua.jsx)("nav",{className:"navbar, navbar-expand-sm bg-danger navbar-danger text-center text-white sticky-top p-1",children:"This page is still under developement."}),Object(Ua.jsxs)("div",{className:"container-fluid",children:[Object(Ua.jsxs)("div",{className:"row",children:[Object(Ua.jsx)("button",{className:"btn btn-primary d-sm-block d-md-none",type:"button","data-bs-toggle":"offcanvas","data-bs-target":"#hiddenMenu",children:"\u2630Content\u2630"}),Object(Ua.jsxs)("div",{className:"offcanvas offcanvas-start d-md-none d-sm-block",id:"hiddenMenu",children:[Object(Ua.jsxs)("div",{className:"offcanvas-header",children:[Object(Ua.jsx)("h1",{className:"offcanvas-title",children:"Topics"}),Object(Ua.jsx)("button",{type:"button",className:"btn-close text-reset","data-bs-dismiss":"offcanvas"})]}),Object(Ua.jsx)("div",{className:"offcanvas-body",children:Object(Ua.jsx)("div",{className:"col-12 scrollable",children:Object(Ua.jsx)(za,{menuData:o})})})]}),Object(Ua.jsx)("div",{className:"col-sm-12",children:Object(Ua.jsx)("div",{className:"container-fluid mb-3",children:Object(Ua.jsx)("div",{className:"text-center",children:Object(Ua.jsx)("h1",{className:"display-1",children:"Theory corner: web bulding"})})})})]}),Object(Ua.jsxs)("div",{className:"row",children:[Object(Ua.jsx)("div",{className:"col-md-3 col-lg-3 col-xl-2 scrollable d-sm-none d-none d-md-block",children:Object(Ua.jsx)(za,{menuData:o})}),Object(Ua.jsx)("div",{className:"col-md-9 col-lg-9 col-xl-10 scrollable col-sm-12 col-12",children:Object(Ua.jsxs)("div",{className:"container",children:["/"===i.pathname?Object(Ua.jsx)(tr,{content:a}):"",or(i,"about")?Object(Ua.jsx)(tr,{content:a}):"",(t=r,n="topic",void 0!==t&&void 0!==t[n]?Object(Ua.jsx)(tr,{content:ar(r.topic)}):"")]})})]})]})]})},rr=[{category:"js",level:"easy",subcategory:"server communication",question:"\n            What statements about static server and a dynamic one are true:\n        ",answers:["In communication with a static server only the GET method should be used,","A static server is able to parse queries in routes,","A static server is able to authenticate user,","A dynamic server can reply with data that is not a file,","Both static and dynamic server are capable of responding to routes in URL"],points:1,correctAnswers:[0,3,4],type:"checkbox",explanation:"\n            ".concat($a(["A static server is not capable to process other responces that GET,","A static server is not cabaple of processing routes, however an application that is\n                served by it can be capable of responding to queries in routes,","A static server is not able to identify an user, as it can only provide files,","A dynamic server is designed to serve data other than files, so the answer is <i>Yes</i>","Both servers will respond to routes, but a static server only to find files that needed to be served,\n                and a dynamic one will resolve routes to know what resource needs to be send"])),links:["",""]},{category:"js",level:"easy",subcategory:"server communication",question:"\n        What communication technology is described in below statements?</br>\n        ".concat($a(["Provides a bi-directional client server communication,","Low latancy,","Event based communication,","Same origin policy enforcement,"])),answers:["WebSocket","SSE","XMLHttpRequest","JSONQuery"],points:1,correctAnswers:[0],type:"radio",explanation:"\n        WebSocket\n        ",links:["",""]},{category:"js",level:"easy",subcategory:"server communication",question:"\n        What communication technology is described in below statements?</br>\n        ".concat($a(["After an initial hand-shake communication in only one direction - from a server to client,","Event based communication,","Low latancy,","Automatic reconnection,","Used to constatnt update some data,","Easy to use in browser side, as only one event handler has to be used and work will be done,"])),answers:["WebSocket","SSE","XMLHttpRequest","JSONQuery"],points:1,correctAnswers:[1],type:"radio",explanation:"\n        SSE: Server Send Events\n        ",links:["",""]},{category:"js",level:"easy",subcategory:"server communication",question:"\n        What communication technology is described in below statements?</br>\n        ".concat($a(["Bi-directional communication,","Calls methods like GET, PUT, POST","Should be handled with an async function"])),answers:["WebSocket","SSE","XMLHttpRequest","JSONQuery"],points:1,correctAnswers:[2],type:"radio",explanation:"\n        XMLHttpRequest\n        ",links:["",""]},{category:"js",level:"easy",subcategory:"server communication",question:"\n        Check correct meaning of event handlers of XMLHttpRequest",answers:["<code>onload</code>: when request is successfully completed,","<code>onreadystatechange</code>: when readyState property changes,","<code>onprogress</code> can use event.position and event.totalSize,","<code>onupload</code>: when upload request ends,","<code>onheadersreceived</code>: when headers are ready."],points:3,correctAnswers:[0,1,2],type:"checkbox",explanation:"\n        There is no such event handlers as onupload or noheadersreceived. This may be handled with \n        the <code>onreadystatechange</code> by checking <code>readyState</code> property. <code>readyState == 2</code>\n        is for checking if headers are already received, and <code>readyState == 4</code> is for request finished, so \n        upload end would be handled here. There is also an <code>upload</code> property in XMLHttpRequest, and it returns a \n        <code>XMLHttpRequestUpload</code> object that is only for tracking upload operation progress.\n        ",links:["",""]},{category:"js",level:"easy",subcategory:"server communication",question:"Fill event handlers for web socket:",answers:["<code>ws.</code>{{{}}}<code>('data to send')</code> send data to a server,","<code>ws.</code>{{{}}}<code>()</code> when connection will no longer be needed,","<code>let dataLeft = ws.</code>{{{}}} to get number of bytes of queued data,","<code>ws.</code>{{{}}}<code>=function dataIncommint(event)</code> for handling incomming data."],correctAnswers:[["send"],["close"],["bufferedAmount"],["onmessage"]],type:"fill-in",points:4,explanation:"\n            ".concat($a(["<code>send</code> is for sending data when connection is ready,","<code>close</code> unwanted connection should always be closed, as connections are limited,\n                not closing connections may result in hard to debug memory leaks,","<code>bufferedAmmount</code> is for getting information on how much bytes are queued,","<code>onmessage</code> is an event handler for incomming message."]),"\n        "),links:["",""]}];var sr=[{category:"js",level:"easy",subcategory:"data types",question:"\n            Which are primitive data types in JS?\n        ",answers:["null","undefined","number","BigInt","string","boolean","symbol","object","Array","Date","Set","Map"],points:2,correctAnswers:[0,1,2,3,4,5,6],type:"checkbox",explanation:"\n            ".concat($a(["<code>null</code>, <code>undefined</code>, <code>number</code>, <code>BigInt</code>, <code>string</code>,\n                <code>boolean</code>, <code>symbol</code> are primitives","Object is not a primitive data type","<code>Date</code>, <code>Function</code>, <code>Array</code>, <code>Set</code>, <code>Map</code> are \n                not primitive data types."])),links:["",""]},{category:"js",level:"easy",subcategory:"data types",question:"\n            Which statements are correct?\n        ",answers:["<code>typeof null == 'object'</code>","<code>typeof undefined == 'undefined'</code>","<code>typeof null == undefined</code>","<code>typeof null === 'false'</code>","<code>isNaN(1 + null) == false</code>","<code>isNaN(1 + undefined) == false</code>","<code>let b = new Boolean(false)</code> and now <code>b === flase</code>"],points:1,correctAnswers:[0,1,2,4],type:"checkbox",explanation:"\n            ".concat($a(["<code>typeof null == 'object'</code> as every object derives from null,","<code>typeof undefined == 'undefined'</code>","<code>typeof null == undefined</code>","<code>typeof null == 'false'</code>, but <code>typeof null === 'false'</code> has a strict comparation \n                operator, and types do not match","<code>isNaN(1 + undefined) == true</code>, not false","<code>let b = new Boolean(false)</code> creates a new object with false value, so it is not empty.\n                This is different than <code>let b = Boolean(false)</code>, where b would equal to false."])),links:["",""]},{category:"js",level:"easy",subcategory:"data types",question:"\n            Which statements are correct?\n        ",answers:["<code>Number.isSafeInteger()</code> will indicate if a number will be precise or approximated","<code>-0</code> is the same as <code>0</code> and the same as <code>+0</code>,","<code>5n / 2n</code> will give <code>2.5n</code>,","<code>5n + 3</code> will give <code>8n</code>,","Any number bigger than <code>Number.MAX_SAFE_INTEGER</code> is <code>Infinity</code>,","Any number smaller than <code>Number.MIN_VALUE</code> is a <code>Number.NEGATIVE_INFINITY</code>,"],points:1,correctAnswers:[0,1,2,4],type:"checkbox",explanation:"\n            ".concat($a(["<code>Number.isSafeInteger()</code> indicates if a integer will be only an approximation or not. It \n                checks if it is in range <code>Number.MIN_SAFE_INTEGER</code> to <code>Number.MAX_SAFE_INTEGER</code>","-0 and +0 are not exactly the same, as <code>Infinity / +0 !== Infinity / -0</code>","In BigIng division fractional part is cut off,","BigInt and numbers cannot be added, substracted, divided, multiplied and so on. They may be only compared,","The number bigger than <code>Number.MAX_VALUE</code> is <code>Infinity</code>,","<code>Number.MIN_VALUE</code> is a closest to 0 number, not the smallest possible. Any number smaller than \n                <code>-Number.MAX_VALUE</code> would be <code>-Infinity</code>."])),links:["",""]},{category:"js",level:"easy",subcategory:"data types",question:"\n            Which statements are correct?\n        ",answers:["Symbol is globaly unique","<code>let a=Symbol('a');let b=Symbol('a')</code> in this case <code>a == b</code>","<code>for(let item in someObject)</code> will iterate through all object properties,","<code>Object.getOwnPropertySymbols(someObj)</code> will return only properties with symbol keys,","<code>let a = Symbol(); console.log(a.toString());</code> will print exact symbol content to the screen,"],points:1,correctAnswers:[0,3],type:"checkbox",explanation:"\n            ".concat($a(["Symbols are globaly unique,","<code>let a=Symbol('a');let b=Symbol('a')</code> produces two different symbols, as symbols are\n                unique,","<code>for(let item in someObject)</code> or <code>Object.getOwnPropertyKeys</code>, or \n                <code>Object.keys()</code> will not give an access to symbol key properties,","<code>Object.getOwnPropertySymbols(someObj)</code> lists only properties having symbols as keys","There is no possiblity to peep into a symbol internals. <code>a.toString()</code> will produce\n                'Symbol('a')' it this case."])),links:["",""]},{category:"js",level:"medium",subcategory:"server communication",question:"Fill in well-known symbols",answers:["@@{{{}}} is for setting a function returning a <code>next</code> function and making an object iterable,","@@{{{}}} is for enabling an object to be selected with  <code>instanceof</code>,","@@{{{}}} is for enabling an object to be an operand of +, -, / operations,"],correctAnswers:[["iterator"],["hasInstance"],["toPrimitive"]],type:"fill-in",points:3,explanation:"\n            ".concat($a(["<code>iterator</code>, or Symbol.iterator property is for making an object iterable,","hasInstance is for redefining an <code>instanceof</code>,","toPrimitive well-known symbol makes a primitive out of an object, and allows +, -, / operations"]),"\n        "),links:["",""]}];var cr=[{category:"js",level:"easy",subcategory:"data types",question:"\n            Which are the proper ways of creating a new object\n        ",answers:["<code>var obj = {prop: 'val'}</code>","<code>var obj = Object.create({})</code>","<code>\n<pre>\n    function SomeObject(property){\n        this.property = property;\n    }\n    let obj = new SomeObject(3);\n</pre>            \n            </code>\n            ","\n            <code>\n<pre>\n    class SomeObject{\n        constructor(property){this.someProperty = property}\n    }\n    let obj = new SomeObject(4)\n</pre>            \n            </code>\n            ","<code>var obj = {prop = 'val'}</code>","<code>\n<pre>\n    function SomeObject(property){\n        this.property = property;\n        return this.propery\n    }\n    let obj = new SomeObject(3);\n</pre>            \n            </code>\n            ","\n            <code>\n<pre>\n    class SomeObject() {\n        constructor(property){this.someProperty = property}\n    }\n    let obj = new SomeObject(4)\n</pre>            \n            </code>\n            "],points:1,correctAnswers:[0,1,2,3],type:"checkbox",explanation:"\n            Correct syntaxes:"+$a(["<code>var obj = {prop: 'val'}</code>","<code>var obj = Object.create({})</code>","<code>\n    <pre>\n        function SomeObject(property){\n            this.property = property;\n        }\n        let obj = new SomeObject(3);\n    </pre>            \n                </code>\n                ","\n                <code>\n    <pre>\n        class SomeObject{\n            constructor(property){this.someProperty = property}\n        }\n        let obj = new SomeObject(4)\n    </pre>            \n                </code>\n                "]),links:["",""]},{category:"js",level:"easy",subcategory:"object",question:"\n            What is the right way to access a property descriptor?\n        ",answers:["<code>Object.getOwnPropertyDescriptor(someObject,'someProperty')</code>","<code>someObject.getOwnPropertyDescriptor('someProperty')</code>","<code>someObject['someProperty'].descriptor</code>","<code>someObject.getPropertyDescriptor('someProperty')</code>,","<code>Object.getPropertyDescriptro(someProperty)</code>"],points:1,correctAnswers:[0],type:"radio",explanation:"\n        <code>Object.getOwnPropertyDescriptor(someObject, 'someProperty')</code>, a static method of the Object\n        is used to retrieve the property descriptor.\n        ",links:["",""]},{category:"js",level:"easy",subcategory:"object",question:"\n            Which statements are true?\n        ",answers:["The right order of prototype search chain is: \n            <ol>\n                <li>Object own properties,</li>\n                <li>Object prototype,</li>\n                <li>Objects prototypes prototype,</li>\n                <li>null, as it is the value last prototype points to</li>\n            </ol>\n            ","<code>Object.getOwnPropertyNames()</code> does not search in prototypes","<code>__proto__</code> should be used to set and get an object prototype, it should be used for \n            inheritance,","<code>Object.setPrototypeOf()</code> may be used for setting an objects prototype to some object","Thanks to prototype each object has access to its ancestors properties"],points:1,correctAnswers:[0,1,3,4],type:"checkbox",explanation:"\n        The only incorrect answer is related to <code>__proto__</code>. <code>__proto__</code> is an object \n        that holds elements prototype setter and getter, and it may be used for inheritance (set the prototype to\n        another object), however it <strong>should not</strong> be used, as it is depreciated. <code>Object.setPrototypeOf()</code>\n        and <code>Object.getPrototypeOf()</code> should be used for above purposes.\n        ",links:["",""]},{category:"js",level:"medium",subcategory:"objects",question:"Fill correct attributes to their object descriptor definitions. Please use only small letters",answers:["{{{}}}: indicates if the property value will be allowed to be changed with an assignment operator,","{{{}}}: indicates if the property will be allowed to be listed with a <code>for..in</code> or with a \n            <code>Object.getOwnPropertyNames()</code> or <code>Object.getOwnPropertySymbols()</code>,","{{{}}}: indicates if the property descriptor will be allowed to be changed,","{{{}}}(){}: a method that will be called if there is an attempt to write a new value under property key,","{{{}}}(){}: a method that will be called each time a value is retrieved from the key,"],correctAnswers:[["writable"],["enumerable"],["configurable"],["set"],["get"]],type:"fill-in",points:5,explanation:"\n            ".concat($a(["<strong>writable</strong> attribute indicates if the value will be allowed to be set with an assignment operator,","<strong>enumerable</strong> attribute indicates if the property will be listed with a <code>for..in</code>,\n                <code>Object.getOwnPropertyNames()</code> or <code>Object.getOwnPropertySymboes()</code> methods,","<strong>configurable</code> is an attribute allowing reconfiguration of property descriptor. Note. Once set to \n                true it might be difficult to alter target property, as <code>configurable</code> will not be allowed to change,","<strong>get(), set()</strong> are a getter and a setter, so methods used to put a new value and retireve the \n                value from the key"]),"\n        "),links:["",""]}];function lr(e){return Object(Ua.jsx)("ul",{children:e.map((function(e){return Object(Ua.jsx)("li",{children:"element"},"element")}))})}var dr=[{category:"js",level:"easy",subcategory:"variables",question:"Select all <b>correct</b> variable names for JS",answers:["$someVariable, _someOtherVariable","$32someVariable, _someOtherVariable","3circleInARow, some_variable","circle#, some_variable","some-variable, _someOtherVariable","some_variable, _some_Other_Variable"],correctAnswersIds:[0,1,5],type:"checkbox",explanation:"\n            Correct means in this question that there will be no error if a certain name is used, it does not mean that\n            this name should be used. Some variable names make code dirty.\n            Variables in JS must follow rules:<br>\n            ".concat(lr(["names contain of letters, digits, underscores and dolar signs","names cannot start with a letter, must start with a letter, $ or _","names are case sensitive (x != X)","names cannot be JS reserved keywords","names should be written in camel case (\n                    thisIsACamelCase, ThisIsPascalCase, this-is-kebab-case this_is_snake_case). This is not a must and \n                    there will be no error if not followed, however this is a good practice.","names should be meaningfull, so <q>asdf</q> is correct name, but means nothing and should not be used,\n                 where <q>isQuizModeActive</q> seems a better name, as it indicates what variable does, moreover it indicates\n                 that variable is a boolean."]),"\n        "),links:["https://www.w3schools.com/js/js_variables.asp","https://en.wikipedia.org/wiki/Naming_convention_(programming)"]},{category:"js",level:"easy",subcategory:"variables",question:'\n            What will below code produce?\n            <pre class="alert alert-dark">\n    console.log(a)\n    for(let i = 0; i < 10; i++){\n        if (a = 0) var a = 0;\n        a = i;\n    }\n    console.log(a)\n            </pre>\n        ',answers:["9","10","undefined","null","Uncaught ReferenceError: a is not defined"],correctAnswersIds:[2],type:"radio",explanation:"\n            As <q>a</q> is declaired with a <q>var</q> keyword, its definition will be hoisted: brought to the top of \n            this code. Definition means <code>var a;</code>, so it will automaticly be undefined from the begining of code.\n            If a <q>let</q> keyword would be used, then code would produce an error, as <q>a</q> variable definition\n            would not be konwn\n            ".concat(lr(["<code>var</code>, a keyword for defining variables, if used anywhere in a function makes this variable \n                known in whole function scope, as variable is hoisted.","<code>let</code>, a keyword for defining variables, but this variable would be known only in local block\n                scope, so inside {} where this variable was defined. Its scope is visible in child blocks, but not visible in parent scope","<code>const</code>, a keyword similar to <code>let</code>, with the difference that once asigned, cannot\n                be changed. Its scope is visible in child blocks, but not visible in parent scope"]),"\n        "),links:[]},{category:"js",level:"easy",subcategory:"variables",question:'\n            What will below code produce?\n            <pre class="alert alert-dark">\n    console.log(b)\n    {\n        let b = 2;\n        {\n            console.log(b)\n        }\n    }\n            </pre>\n        ',answers:["2","undefined","null","Uncaught ReferenceError: b is not defined"],correctAnswersIds:["3"],type:"radio",explanation:"\n            Let creates only a local, block scope. It is invisible in parent scope, will be visible in child, but \n            declaration is only for current block.\n            ".concat(lr(["<code>var</code>, a keyword for defining variables, if used anywhere in a function makes this variable \n                known in whole function scope, as variable is hoisted.","<code>let</code>, a keyword for defining variables, but this variable would be known only in local block\n                scope, so inside {} where this variable was defined. Its scope is visible in child blocks, but not visible in parent scope","<code>const</code>, a keyword similar to <code>let</code>, with the difference that once asigned, cannot\n                be changed. Its scope is visible in child blocks, but not visible in parent scope"]),"\n        "),links:[]},{category:"js",level:"easy",subcategory:"variables",question:'\n            What will below code produce?\n            <pre class="alert alert-dark">\n            console.log(b)\n    {\n        const b = 2;\n        {\n            console.log(b)\n        }\n    }\n            </pre>\n        ',answers:["2","undefined","null","Uncaught ReferenceError: b is not defined"],correctAnswersIds:["3"],type:"radio",explanation:"\n            Const creates only a local, block scope. It is invisible in parent scope, will be visible in child, but \n            declaration is only for current block.\n            ".concat(lr(["<code>var</code>, a keyword for defining variables, if used anywhere in a function makes this variable \n                known in whole function scope, as variable is hoisted.","<code>let</code>, a keyword for defining variables, but this variable would be known only in local block\n                scope, so inside {} where this variable was defined. Its scope is visible in child blocks, but not visible in parent scope","<code>const</code>, a keyword similar to <code>let</code>, with the difference that once asigned, cannot\n                be changed. Its scope is visible in child blocks, but not visible in parent scope"]),"\n        "),links:[]},{category:"js",level:"easy",subcategory:"form-validation",question:"Please complete below statements",answers:["<b>Prevent default form validation to implement custom one:</b> <br>\n            <code>&lt;form {{{}}}></code>\n            ","<b>Check if form is valid:</b> <br>\n            <code>if (document.querySelector('form').</code>{{{}}}<code>)...</code>","<b>Check if field has not too great value:</b> <br>\n            <code>if (document.querySelector('#someInput').</code>{{{}}}<code>)...</code>"],correctAnswers:[["nonvalidate"],["validity.valid"],["validity.rangeOverflow"]],type:"fill-in",explanation:"\n            ".concat(lr(["<code>&lt;form nonvalidate></code> prevents whole form from default validation, leaving css pseudoclasses\n                and Constraint Validation API to work with","<code>validity</code> is a property delivered with Constraint Validation API, that allows to check\n                &lt;rangeOverflow> for too great values, &lt;vlid> for checking if whole form is valid, and many more."]),"\n        "),links:["",""]},{category:"js",level:"easy",subcategory:"form-validation",question:"Please complete below statements",answers:["<b>Make validity error message: 'wrong input' appear on form</b> <br>\n            <code>document.querySelector('form').{{{}}}('wrong input')></code>\n            ","<b>Check if pattern in input box is not too long</b> <br>\n            <code>if (document.querySelector('#input').</code>{{{}}}<code>)...</code>","<b>Check if mandatory field is filled:</b> <br>\n            <code>if (document.querySelector('#someInput').</code>{{{}}}<code>)...</code>"],correctAnswers:[["setCustomValidity"],["validity.tooLong"],["validity.valueMissing"]],type:"fill-in",explanation:"\n            ".concat(lr(["<code>&lt;form nonvalidate></code> prevents whole form from default validation, leaving css pseudoclasses\n                and Constraint Validation API to work with","<code>validity</code> is a property delivered with Constraint Validation API, that allows to check\n                &lt;rangeOverflow> for too great values, &lt;vlid> for checking if whole form is valid, and many more."]),"\n        "),links:["",""]},{category:"js",level:"easy",subcategory:"DOM-access",question:"Please complete below statements",answers:["<b>Find element with specified Id</b> <br>\n            <code>let found = document.{{{}}}('someId')</code>\n            ","<b>Find all elements with class 'my-class'</b> <br>\n            <code>let found = document.{{{}}}('.my-class')</code>\n            ","<b>Find all 'p' elements in document</b> <br>\n            <code>let found = {{{}}}.('p')</code>\n            "],correctAnswers:[["getElementById"],["querySelectorAll"],["document.getElementsByTagName"]],type:"fill-in",explanation:"\n            ".concat(lr(["<code>getElementById</code> for accessing element by unique Id","<code>getElementsByTagName</code> for accessing NodeList of elements with specific tag,","<code>getElementsByClassName</code> can be used to access NodeList of elements with specified class name,\n                however in this case there is a dot before class name, and this is a css selector, so <code>querySelectorAll</code>\n                will be a right solution. "]),"\n        "),links:["",""]},{category:"js",level:"easy",subcategory:"DOM-access",question:"Please complete below statements",answers:["<b>get all forms from document</b> <br>\n            <code>let forms = document.{{{}}}</code>\n            ","<b>Set page title to 'my new title'</b> <br>\n            <code>{{{}}} = 'my new title</code>\n            ","<b>Find all elements in document with name 'someName'</b> <br>\n            <code>let found = {{{}}}.('someName')</code>\n            "],correctAnswers:[["forms"],["document.title"],["document.getElementsByName"]],type:"fill-in",explanation:"\n            ".concat(lr(["<code>getElementById</code> for accessing element by unique Id","<code>getElementsByTagName</code> for accessing NodeList of elements with specific tag,","<code>getElementsByClassName</code> can be used to access NodeList of elements with specified class name,\n                however in this case there is a dot before class name, and this is a css selector, so <code>querySelectorAll</code>\n                will be a right solution. "]),"\n        "),links:["",""]},{category:"js",level:"easy",subcategory:"DOM-access",question:"Please complete below statements",answers:["<b>get parent element</b> <br>\n            <code>let parent = element.{{{}}}</code>\n            ","<b>Clone node with its children</b> <br>\n            <code>let cloned = element.{{{}}}</code>\n            ","<b>Insert an element before element'</b> <br>\n            <code>element.{{{}}}()</code>\n            "],correctAnswers:[["parentNode"],["cloneNode(true)"],["insertBefore()"]],type:"fill-in",explanation:"\n            ".concat(lr(["<code>parentNode</code> will access a parent component","<code>element.cloneNode</code> makes exect copy of an element. Beware -> Ids that are supposed to be \n                unique will be cloned aswell","<code>insertBefore </code> inserts an element before given node. "]),"\n        "),links:["",""]},{category:"js",level:"easy",subcategory:"DOM-access",question:'\n            What will be the effect of below code\n            <pre class="alert alert-dark">\n&lt;div id="grand-parent">            \n    &lt;div id="parent">\n        &lt;div id="child-1">&lt;/div>\n        &lt;div id="child-2">&lt;/div>\n        &lt;div id="child-3">&lt;/div>\n    &lt;div>\n&lt;div>\n&lt;script>\n    let child1 = document.getElementById(\'child-1\');\n    let newElement = document.createElement(\'div\');\n    child1.parentNode.insertBefore(newElement);\n&lt;/script>\n            </pre>\n        ',answers:["<code>newElement</code> will be inserted before the <code>#parent</code> element, and will be a direct child\n            of <code>#grand-parent</code>","<code>newElement</code> will be inserted before the <code>#child-1</code> element as a direct child of \n            <code>#parent</code> element","<code>newElement</code> will be inserted as a sibling of the <code>#grandparent</code> node","Will not be inserted at all, as there is no possiblity to get to a parent element in css."],correctAnswersIds:["0"],type:"radio",explanation:"\n            Const creates only a local, block scope. It is invisible in parent scope, will be visible in child, but \n            declaration is only for current block.\n            ".concat(lr(["A <code>parentNode</code> property of <code>Node</code> reaches parent of element on the left","<code>someElement.insertBefore(element)</code> method of <code>Node</code> inserts a element as a sibling of \n                someElement, before <code>someElement</code>","There is no possiblity to reach a parent element in css, but that has nothing to do with this question","Correct answer will be that <code>newElement</code> will be inserted as a child of <code>grand-parent</code>\n                before <code>#parent</code> node"]),"\n        "),links:[]},{category:"js",level:"easy",subcategory:"DOM-access",question:"What are potential drawbacks of creating new elements with a <code>innerHTML</code>?",answers:["It is potentilay dangerous, someone may inject a different code","DOM operatoins are exepnsive, it is better to change only necessary elements in DOM, \n             and with <code>innerHTML</code> too many elements get recreated","No drawbacks, this solutions is easy for a developer","event listeners get lost if were attached to recreated elements","No drawbacks, recreation of more elements that intended is good, because it is good to restart some \n            elements, thanks to this they will not get frozen","<code>innerHTML</code> accepts a string, and string is not validated, so easy to commit a mistake"],correctAnswersIds:[0,1,3,5],type:"checkbox",explanation:"\n            DOM operations are slow, so frameworks like React or Angular are designed to change only necessary elements,\n            but in pure JS whole content under <code>innerHTML</code> gets recreated, so this is slow. As a string \n            is being injected it is possible to inject some dangerous code. Moreover this string will not be \n            validated, so it is possible to commit a mistake. Event listeners get lost if there were any attached\n            to recreated elements. Ofcourse someone may intend to clear event listeners, but this is not the proper\n            way to do so.\n            ".concat(lr([""]),"\n        "),links:["https://www.w3schools.com/js/js_variables.asp","https://en.wikipedia.org/wiki/Naming_convention_(programming)"]},{category:"js",level:"medium",subcategory:"DOM-access",question:'Please complete below statements\n<pre class="alert alert-dark">\n    &lt;div id="grand-parent">            \n        &lt;div id="parent">\n            &lt;div id="child-1">&lt;/div>\n            &lt;div id="child-2">&lt;/div>\n            &lt;div id="child-3">&lt;/div>\n        &lt;div>\n    &lt;div>\n    &lt;script>\n        var parent = document.getElementById(\'parent\');\n        var grandparent = document.querySelector(\'#grand-parent\');\n        var child1 = document.getElementById(\'child-1\');\n        var child2 = document.getElementById(\'child-2\');\n        var child3 = document.getElementById(\'child-3\');\n        ...\n</pre>\n        ',answers:["<b>To remove <code>#child-2</code> element</b> <br>\n            <code>parent.{{{}}}(child2)</code>\n            ","<b>To remove <code>#child-1</code> element'</b> <br>\n            <code>parent.{{{}}}(child2, child1)</code>\n            ","<b>Get <code>#child-2</code> node</b> <br>\n            <code>let ch2 = child1.{{{}}};</code>\n            "],correctAnswers:[["removeChildNode"],["replaceNode"],["nextSibling.nextSibling"]],type:"fill-in",explanation:"\n            ".concat(lr(["<code>parentElement.remove(targetChild)</code> removes a child element","<code>parentElement.replace(child2, child1)</code> replaces the <code>child1</code> element with \n                 the <code>child2</code> element, and as <code>child2</code> already exists in DOM it is remved from previous position,\n                 so final effect in this case is that <code>child1</code> is removed from DOM","This is tricky. As there is a new line symbol after a child 1 element, there will be an extra\n                text node generated after child 1 element, so to get from it to child 2 we need to put <code>nextSibling</code>\n                two times."]),"\n        "),links:["",""]},{category:"js",level:"easy",subcategory:"DOM-access",question:"What statements are ture about shadow DOM elements",answers:["Their great adventage is encapsulation","css rules from inside shadow-root will not effect elements outside shadow-root","css rules from outside shadow-root will influence elements inside shadow-root","When shadow root is created in <code>{mode:'open'}</code>, it is possible to acces its components with\n            <code>document.getElementById('someElementInsideShadowRootId')</code>","When shadow root mode is closed, it is not possible to access its content without some sophisticated hacks","It is not possible to inspect a shadow root element with dev tools"],correctAnswersIds:[0,1,4],type:"checkbox",explanation:"\n            ".concat(lr(["Shadow components are created to provide encapsulation, this is thei main purpose,","css from inside a shadow element will not affect rest of DOM, this is purpose of encapsulation","css from outside of a shadow element will not affect inside of a shadow element, because of encapsulation","To access inside of a shadow DOM component it is needed to find its host, and access it with a <code>shadowRoot</code>,\n                like this <code>someShadowHost.shadowRoot.getElementById('someId')</code>, accessing shadow root just with a document is \n                not possible","It is not possible to access closed mode shadow DOM without sophisticated hacking","It is possible to right-click on a shadow element and inspect it with dev tools. May be tested with an input element\n                as html input elements are shadow elements."]),"\n        "),links:["https://www.w3schools.com/js/js_variables.asp","https://en.wikipedia.org/wiki/Naming_convention_(programming)"]},{category:"js",level:"easy",subcategory:"DOM-access",question:"What statements are ture about document fragment",answers:["Document fragment is a minimal document object not attached to DOM tree","Document fragment is perfect for preparing a part of component before adding it as a whole to DOM","Thanks to preparing a document fragment before adding it to DOM, code is faster due to less DOM operations","Preparation of a document fragment instead of adding a lot of elements one by one to DOM improves user experience","Methods like <code>append(element)</code>, <code>prepend(element)</code>, <code>querySelectorAll</code>, \n            <code>getElementById(element)</code> work with a <code>DocumentFragment</code>"],correctAnswersIds:[0,1,2,3,4],type:"checkbox",explanation:"\n            All statements are true. Document fragment is a no DOM attached object, minimal document version with no parent.\n            Good usage of a document fragment is to prepare a part of a document before adding it to DOM, to speed up \n            operations, and improve user experience. Some DOM access methods work with a <code>DocumentFragment</code>\n            ".concat(lr([]),"\n        "),links:["https://www.w3schools.com/js/js_variables.asp","https://en.wikipedia.org/wiki/Naming_convention_(programming)"]},rr,sr,cr];var pr,mr=[{category:"css",level:"easy",subcategory:"",question:"",answers:[""],correctAnswers:[0],type:"checkbox",explanation:"\n            ".concat((pr=["",""],Object(Ua.jsx)("ul",{children:pr.map((function(e){return Object(Ua.jsx)("li",{children:"element"},"element")}))})),"\n        "),links:["",""]}];var hr=[{category:"css",level:"easy",subcategory:"specifity",question:"Calculate specifity for each selector:",answers:["<code>#body-section#nav.horizontal li:first-child</code> {{{}}}","<code>* body #header#navigation.horizontal li:not(.active)<code> {{{}}}","<code>body>html .container-fluid.col_8.alert.alert-success p b</code> {{{}}}"],correctAnswers:[["221"],["222"],["44"]],type:"fill-in",explanation:"\n            ".concat($a(["<code>#body-section#nav.horizontal li:first-child</code>: there are 2 id selectors, \n                1 class and one pseudo-class selector, and one tag selector. So 2*100 + 2*10 + 1 makes 221.","<code>*</code> adds no specifity, 2 id selectors, \n                2 class selectors: <code>.horizontal</code>, <code>.active</code> and a two tag selectors \n                <code>li</code> and <code>body</code>. A <code>not</code> pseudo-class adds no specifity. \n                So: 2*100 + 2*10 + 2*10 equals 222,\n                ","Class selectors: <code>.container-fluid</code>, <code>col_8</code>, <code>alert</code>,\n                <code>alert-success</code>, tag selectors: <code>body</code>, <code>html</code>, <code>p</code>,\n                <code>b</code>, so 4 class selectors and 4 tag selectors so 4*10 + 4 equals 44."]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"selectors",question:"<code>!important</code> keyword should be avoided, but in some circumstances it might be used. \n            Extract those circumstances from below answers.",answers:["<q>user stylesheets</q>","A complex project with a lot of complicated selectors","As a temporary work-around","For testing and debugging","Rule really important, for example in media queries,\n             an element must be hidden on smaller devices and no risk should be taken that something will interfere","Some complex html and css structure makes it really hard to find other solution","Customizing a third company element"],correctAnswers:[0,3,4,6],type:"checkbox",explanation:"\n            ".concat($a(["User stylesheets are always overwritten by page css, so to change anything without an important \n                keyword would be not possible in many use cases,","Can be used for testing and debugging, as test code is used only in a specific test set and is separated\n                from developement, in separate files,","If applied to some important rule in media queries, sometimes important usege might be justified","Can be justified for customizing third-party code","Never should be used as a temporary solution, as such solutions become permanent solutions,","Never should be used only because something is complex"]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"selectors",question:"Inline styling is not the best practice. However it is left in web developement for some reasons. Mark\n        situations where inline styling usage is justified:",answers:["A mouse-movable element on web page","Some animations","A temporary work-around","Overwrite just one rule, just change text background in a single place in a <code>setTimeout</code> function","When writing in a framework like <i>Angular</i>, because components are encapsulated anyway","In shadow DOM element, because a shadow DOM is only a small portion of encapsulated code, and it is easy to \n            change it anyway"],correctAnswers:[0,1],type:"checkbox",explanation:"\n            To understand when inline styling is justified it is a good idea to work with a css framework, to see \n            how classes an related HTML structure can be build. There is a set of small reusable and generic \n            classes changing only one behaviour. That is why it is better to write some small classes having lets say\n            a <i>background-color: red</i> and manipulate those classes. Then if a specific element needs to be changed, \n            it is done in one place. If the whole set of such elements needs changing, then it can also be done in only a\n            single place.\n            ".concat($a(["Inline is perfect for implementing a mouse-movable element, as while mouse moves with the element, its \n                location on the page is changed a great number of times and it is not possible to do this with classes","Some animations, for the same reason mosue moved elements are allowed, but in case of animations it is \n                better to considerate using keyframes and transitions, as transition functions may be applied. It is alwasy\n                better to use css based animations in the first place, and avoid JS as long as it can be avoided,","No temporary work-around solutions are allowed in programming ever, as they become permanent solutions, and\n                later it is impossible to maintain such code. Remember, that a lot of people work with code at the same time,","Overwriting a single rule in setTimeout can be done with an use of a class that changes only this small \n                behaviour. If such small behaviour is used in more places later it is easier to maintain it when it is \n                in a class","In case of encapsulation it is also a better idea to keep rules in classes, as it is easier to maintain."]),"\n        "),links:["",""]}];var ur=[{category:"css",level:"easy",subcategory:"pseudo-classes",question:"Fill in pseudoclasses matching below definitions. Please use the \n            double quote if a quotation mark is needed.",answers:["<code>:</code>{{{}}} - select every single element on the page","<code>:</code>{{{}}} - select every descendant with attribute <code>data-attr</code> having value \n            'someValue' of any div in document",'<code>[attribute</code>{{{}}}<code>"value"]</code> select any element having the \'attribute\' containing \n            a "value" substring,','<code>[src</code>{{{}}}<code>".jpg"]</code> select any element having the \'src\' attribute ending with\n            ".jpg",'],correctAnswers:[["*"],['div [data-attr="someValue"]'],["*="],["$="]],type:"fill-in",points:4,explanation:"\n            ".concat($a(["<code>*</code>: selects each element,",'<code>div [data-attr="someValue"</code> a space selects all descendant elements, where the rest of \n                construction is porper attribute selection,',"<code>*=</code> will match substrings in the attribute value,","<code>$=</code> will match each element having attribute ending with specified value."]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"pseudo-classes",question:"Fill in pseudoclasses matching below definitions. Please use the \n            double quote if a quotation mark is needed.",answers:['<code>[data-content</code>{{{}}}<code>"telephone"]</code> select each element having the \'data-content\'\n            attribute value containing word "telephone" ','<code>[data-content</code>{{{}}}<code>"Time"]</code> select each element having the \'data-content\'\n            attribute value starting with the word "Time" ','<code>[data-lang</code>{{{}}}<code>"en"]</code> select each element having the \'data-lang\'\n            attribute value starting with the word "en" or "en-" '],correctAnswers:[["~="],["^="],["|="]],type:"fill-in",points:3,explanation:"\n            ".concat($a(["<code>~=</code>: is for selecting an attribute containing some specified word. Word has to be \n                separated with spaces,","<code>^=</code>: is for selecting an attirbute starting with a string","<code>|=</code> is for language specific matches, like 'pl' or 'en-br',"]),"\n        "),links:["",""]}];var br=[{category:"css",level:"easy",subcategory:"pseudo-classes",question:"Fill in pseudoclasses matching below definitions",answers:["<code>:</code>{{{}}} - select each element that has no children","<code>:</code>{{{}}} - select each second child of any parent","<code>:</code>{{{}}} - select each penultimate element of any parent"],correctAnswers:[["empty"],["nth-child(2)"],["nth-last-child(2)"]],type:"fill-in",points:3,explanation:"\n            ".concat($a(["<code>:empty</code>: selects all elements having no children,","<code>:nth-child(2)</code> selects each second child of each element,","<code>:nth-last-child(2)</code> selects each penultimate child"]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"selectors",question:'\n        Which element would be chosen with <code>#outlet div:nth-child(1)</code>\n<pre class="alert alert-dark">\n    &lt;div id="outlet">\n        &lt;p>Some elements&lt;/p>\n        &lt;div>1&lt;/div>\n        &lt;div>2&lt;/div>\n        &lt;div>3&lt;/div>\n    &lt;/div>\n</pre>',answers:["None of elements","The div with innerText '1'","The div with innerText '2'","Parent div element with id equal to outlet"],points:1,correctAnswers:[0],type:"radio",explanation:"\n            None element will be selected, as above selector selects a first child element if it is a 'div' element, and \n            in this case first child is a 'p' element. Interesting thing here is the fact, that in case of \n            <code>element.childNodes</code> in above case there would be listed empty text elements, that would appear \n            due to next-line signs after each html line. But if nth-child pseudo-class is used this empty text nodes\n            are not visible at all.\n        ",links:["",""]},{category:"css",level:"easy",subcategory:"pseudo-classes",question:"\n        Which of below would select all odd child elements?",answers:["<code>nth-child(odd)</code>","<code>nth-child(2n-1)</code>","<code>nth-child(2n+1)</code>","<code>nth-child(n+1)</code>","<code>odd-child</code>","<code>nth-last-child(2n-1)</code>"],points:2,correctAnswers:[0,1],type:"checkbox",explanation:"\n        ".concat($a(["<code>nth-child(odd)</code> and <code>nth-child(2n-1)</code>: are correct answers,","<code>:nth-child(2n+1)</code> would ommit the first element, so would list 3, 5, 7 ...","<code>:nth-child(n+1)</code> selects 2, 3, 4,.... so not correct at all","<code>:odd-child</code> this pseudo-class does not exist at all,","<code>:nth-last-child(2n-1)</code> this element will select either odd or event elements, depending on\n            number of children, so not correct."])),links:["",""]},{category:"css",level:"easy",subcategory:"pseudo-classes",question:"Fill in pseudoclasses matching below definitions",answers:["<code>:</code>{{{}}} - selects all mandatory fields","<code>:</code>{{{}}} - all elements that are not out or allowed range","<code>:</code>{{{}}} - all elements that have not valid input, but only if user interacted with it","<code>:</code>{{{}}} - all elements that have too great or too small value"],correctAnswers:[["required"],["in-range"],["user-invalid"],["out-of-range"]],type:"fill-in",points:4,explanation:"\n            ".concat($a(["<code>:required</code>: selects all mandatory fields,","<code>:in-range</code>: not outside required range, so in range,","<code>:user-invalid</code> selects all invalid inputs when user interacted with them","<code>:out-of-range</code> if value is too great or too small, than it is out of range"]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"pseudo-classes",question:"Fill in pseudoclasses matching below definitions",answers:["<code>:</code>{{{}}} - used on a parent element to style it if its descendant element has foucs","<code>:</code>{{{}}} - styles a selected element","<code>:</code>{{{}}} - user agent dependant focused element. \n                Different bahaviour when tab pressed and different when mouse selected,","<code>:</code>{{{}}} - for example button between mouse left button down and left button up"],correctAnswers:[["focus-within"],["selection"],["focus-visible"],["active"]],type:"fill-in",points:4,explanation:"\n            ".concat($a(["<code>:focus-whithin</code>: should be use on a parent to style it if descendent element is focused,","<code>:selection</code>: should be used to style a highlighted element,","<code>:focus-visible</code> to differ styling on mouse click and on tab key select","<code>:active</code> this styling will be applied for element that is activated, so between left mouse up and \n                left mouse down"]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"pseudo-classes",question:"Fill in pseudoclasses matching below definitions",answers:["<code>:</code>{{{}}} - selects all not visited links","<code>:</code>{{{}}} - styles an already seen link","<code>:</code>{{{}}} - an element that is a destination of the link"],correctAnswers:[["link"],["visited"],["target"]],type:"fill-in",points:3,explanation:"\n            ".concat($a(["<code>:link</code>: styles all not visited links,","<code>:visited</code>: styles all not visited links,",'<code>:target</code> styles an element that is the target of the link. May be used for example to \n                style a link destination that is on the same page, <code>&lt;a href="#samePageId"></code>',"Interesting thing is the fact, that there is no possiblity to get information of what links were \n                visited with js. This is due to security reasons."]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"pseudo-classes",question:"Fill in pseudoclasses matching below definitions",answers:["<code>:</code>{{{}}}<code>(.someClass)</code> - select all elements that do not have 'someClass' in their\n            classList","<code>:</code>{{{}}}(div, p, span):hover - short hand for <code>div:hover</code>, <code>p:hover</code>, <code>span:hover</code>, \n            adds extra class specifity.","<code>:</code>{{{}}} - select the element that has the shadow-root attached, from inside this shadow-root"],correctAnswers:[["not"],["is"],["host"]],type:"fill-in",points:3,explanation:"\n            ".concat($a(["<code>:not(selector)</code>: styles all elements not matched by the 'selector',","<code>:is(list-of-selectors)</code>: takes each selector from the list and applies styling on the right\n                . <code>is</code> also adds class specifity. There is a <code>with</code> pseudo-class, that works in\n                similar way, with the difference, that id does not add any specifity,","<code>:host</code> should be used to match shadow-root host from inside this shadow-root."]),"\n        "),links:["",""]}];var gr=[{category:"css",level:"easy",subcategory:"pseudo-elements",question:'\n        What will show up?\n<pre class="alert alert-dark">\n    &lt;style>\n        div{\n            position:relative;\n            width:0;\n            height:0;\n        }\n        div:before,div:after{\n            position:absolute;\n            width: 50px;\n            height: 50px;\n            background-color:black;\n            border-radius:50%;\n        }\n        div:before{\n            left: 100px;\n            top: 100px;\n        }\n        div:after{\n            left:250px;\n            top:100px;\n        }\n    &lt;/style>\n    &lt;div>\n    &lt;/div>\n</pre>',answers:["Nothing","Onle black circle","Two black circles","Circles and a dot div element"],points:1,correctAnswers:[0],type:"radio",explanation:"\n        Nothing will show up, as pseudo elements need any content property.\n        ",links:["",""]},{category:"css",level:"easy",subcategory:"pseudo-elements",question:"\n        Mark true statements\n        ",answers:["Pseudo elements are good for aligning elements,","Pseudo elements are good for creation of different shapes,","Pseudo elements are good for adding some content to web page,","Pseudo elements are good for creation of tool tips,","Pseudo elements are for example:nth-child, :active, :invalid","Pseudo element is for example a div element that has a <code>display:none</code> property, \n            it is pseudo, because it is in DOM but is not displayed"],points:4,correctAnswers:[0,1,2,3],type:"checkbox",explanation:"\n        Pseudo elements are <code>:before</code>, <code>:after</code>, and they are created only with css,\n        it is not possible to access them with js, except for checking their size, they are good for:\n        aligning elements, creation of shapes, adding content to page, creating tool-tips, and mutch more...\n        ",links:["",""]}];function fr(e){return Object(Ua.jsx)("ul",{children:e.map((function(e){return Object(Ua.jsx)("li",{children:"element"},"element")}))})}var yr=[{category:"css",level:"medium",subcategory:"box-model",question:'What size (not including margins, so width and height returned by \n            document.querySelector(\'.test-div\').getBoundingClientRect()\n        ) will element described with below code have\n        <pre class="alert alert-dark">\n&lt;style>\n    *{box-sizing: padding-box;}\n    .test-div{\n        position: relative;\n        display: inline-block;\n        width: 100px;\n        height: 100px;\n        margin-top: 10px;\n        margin-bottom: 15px;\n        margin-left: 20px;\n        margin-right: 25px;\n        outline: solid transparent 5px;\n        border-top: solid transparent 10px;\n        border-bottom: solid transparent 15px;\n        border-left: solid transparent 20px;\n        border-right: solid transparent 25px;\n        padding: 10px;\n    }\n&lt;/style>\n&lt;div class="test-div">&lt;/div>\n        </pre>\n        ',answers:["width: 165px, height: 145px;","width: 185px, height: 165px;","width: 175px, height: 155px;","width: 195px, height: 175px;","width: 180px, height: 160px;","none, as element is transparent, and will not be visible at all"],correctAnswers:[0],type:"radio",explanation:"\n            ".concat(fr(["<code>box-sizing: padding-box</code>, so padding already included in <code>width: 100px;</code> \n                and <code>height: 100px;</code>","As <b>not</b> <code>border-box</code> border size has to be added to width and height, so \n                <code>width = 100px + border-left + border-right = 145px;</code>, <code>height = 100px \n                + border-top + border-bottom = 165px</code>","Outline is never taken into account, moreover it will overlap marign so it never adds any extra space","Color transparency has nothing to do with element size on page. It will be invisible, but as position \n                is relative it will take space in layout and affect other elements position.",'This solution is based on <a hfer="https://developer.mozilla.org/pl/docs/Web/CSS/box-sizing" target="_blank"\n                developer mozilla</a>, however due to <a href="https://css-tricks.com/almanac/properties/b/box-sizing/">css-tricks</a>\n                padding-box works only on firefox. In my case every browser I have does not support this value, even firefox. However\n                default behaviour (content-box) in all browsers behave like padding box.']),"\n        "),links:["https://developer.mozilla.org/pl/docs/Web/CSS/box-sizing","https://css-tricks.com/almanac/properties/b/box-sizing/"]},{category:"css",level:"medium",subcategory:"",question:'What will be vertical distance between divs from below code:\n        <pre class="alert alert-dark">\n&lt;style>\n    .test-div{\n        position:relative;\n        height: 50px;\n        width: 30px;\n        margin-top: 30px;\n        margin-bottom: 150px;\n        margin-left: 40px;\n        margin-right: 50px;\n        padding-top: 40px;\n        padding-bottom: 50px;\n        border: 5px solid black;\n        outline: 10px solid transparent;\n    }        \n&lt;/style>\n&lt;div class = "test-div">&lt;/div>\n&lt;div class = "test-div">&lt;/div>\n        </pre>\n        ',answers:["150px","180px","270px","280px","300px"],correctAnswers:[0],type:"radio",explanation:"\n            ".concat(fr(["Divs are block elements, so will be placed one below another","Margins will collapse, so biggest of vertical margins between elements will be taken, 150px","Div actual height will be 50px + paddings + borders so 150px, but spacing is created only by margins","No outline is taken into accunt in calculating spacing"]),"\n        "),links:["",""]},{category:"css",level:"medium",subcategory:"",question:'What will be .test-div actual height, returned by <code>document.querySelector(\'.test-div\').getBoundingClientRect().height?\n        <pre class="alert alert-dark">\n&lt;style>\n    .test-div{\n        position:relative;\n        height: 50px;\n        width: 30px;\n        margin-top: 30px;\n        margin-bottom: 150px;\n        margin-left: 40px;\n        margin-right: 50px;\n        padding-top: 40px;\n        padding-bottom: 50px;\n        border: 5px solid black;\n        outline: 10px solid transparent;\n    }        \n&lt;/style>\n&lt;div class = "test-div">&lt;/div>\n&lt;div class = "test-div">&lt;/div>\n        </pre>\n        ',answers:["150px","50px","140px","170px","260px","240px"],correctAnswers:[0],type:"radio",explanation:"\n            ".concat(fr(["Div actual height will be 50px + paddings + borders so 150px, but spacing is created only by margins","No outline is taken into accunt in calculating element size","Margin is not element size, it is spacing between elements"]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"",question:"What paris: propery value are valid",answers:["margin-top: 30px;","outline-bottom: 20px;","outline-bottom: 20px solid white;","border-radius: 5px;","outline-radius: 4px;","padding-left: 4px;"],correctAnswers:[0,3,4],type:"checkbox",explanation:"\n            ".concat(fr(["No possiblity to set outline-bottom, top, left or right sizes, outline size is constatn on all edges","No possiblity to set outline-radius"]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"form-validation",question:"Mandatory fields should have red outline, fields with correct value should have green background,\n            fields with not proper value should have red background. Use proper pseudo classes",answers:["<code>input:</code>{{{}}}<code>{background-color:red;}</code>","<code>input:</code>{{{}}}<code>{background-color:green;}</code>","<code>input:</code>{{{}}}<code>{outline: red solid thin;}</code>"],correctAnswers:[[":invalid"],[":valid"],[":required"]],type:"fill-in",explanation:"\n            ".concat(fr(["<code>&lt;form nonvalidate></code> prevents whole form from default validation, leaving css pseudoclasses\n                and Constraint Validation API to work with","<code>validity</code> is a property delivered with Constraint Validation API, that allows to check\n                &lt;rangeOverflow> for too great values, &lt;vlid> for checking if whole form is valid, and many more."]),"\n        "),links:["",""]},ur,br,gr];function vr(){return yr.concat(hr)}var wr=[{category:"html",level:"easy",subcategory:"form-validation",question:"Please complete below statements",answers:['<b>This input is mandatory:</b> <br><code>&lt;input type="number" </code>{{{}}}<code>="</code>{{{}}}<code>" </code>','<b>This input should have value greater or equal to 6, but not greater then 10:</b> <br>\n            <code>&lt;input type="number" </code>{{{}}}<code>="6" </code>{{{}}}<code>="10"</code>'],correctAnswers:[["required","required"],["min","max"]],type:"fill-in",explanation:"\n            ".concat(function(e){return Object(Ua.jsx)("ul",{children:e.map((function(e){return Object(Ua.jsx)("li",{children:"element"},"element")}))})}(["<code>min</code>, <code>max</code> are properties for minimal and maximum value","<code>required</code> is a property for a mandatory field","<code>min-length</code>, <code>max-length</code> is a property for minimal and maximum length in characters","<code>pattern</code> is for validation against regular expression","<code>type</code> is for checking if data is of specified type, like email, address or telephone."]),"\n        "),links:["",""]}];function xr(e){for(var t=[],n=e.map((function(e,t){return{index:t,content:e}})),o=0;o<e.length;o++){var a=Tr(n.length);t.push({originalIndex:n[a].index,content:n[a].content}),n.splice(a,1)}return t}function jr(e,t,n){var o=function(e,t){var n=Or(t);function o(t){return t.level===e}return console.log(n),n.filter(o)}(t,n),a=o.length;if(a<e)return[];if(a===e)return o;for(var i=[],r=0;r<e;r++){var s=Tr(a);i.push(o[s]),o.splice(s,1),a=o.length}return console.log(i),i}function Tr(e){var t=Math.floor(e);return Math.floor(Math.random()*t)}function Or(e){var t,n,o,a,i=[];return e.includes("js")&&(i=(t=i).concat.apply(t,Object(Pe.a)(dr))),e.includes("ts")&&(i=(n=i).concat.apply(n,Object(Pe.a)(mr))),e.includes("css")&&(i=(o=i).concat.apply(o,Object(Pe.a)(vr()))),e.includes("html")&&(i=(a=i).concat.apply(a,Object(Pe.a)(wr))),i}var Sr=function(e){var t=Object(Fa.a)(e.categoriesHandel,2),n=(t[0],t[1]),o=Object(Fa.a)(e.hardnessLevelHandel,2),a=(o[0],o[1]),i=Object(Fa.a)(e.nrOfQuestionsHandel,2),r=(i[0],i[1]),c=Object(Fa.a)(e.currentQuestionNrHandel,2),l=(c[0],c[1]),d=Object(Fa.a)(e.setOfQuestionsHandel,2),p=(d[0],d[1]),m=e.setCurrentAnswers;function h(e){return["radio","checkbox"].includes(e.type)}return e.answers,Object(Ua.jsx)("div",{className:"container",children:Object(Ua.jsxs)("form",{onSubmit:function(e){e.preventDefault();var t=function(e){var t=e.target.cat,n=[];return t.forEach((function(e){e.checked&&n.push(e.value)})),n}(e),o=e.target.hardness.value,i=parseInt(e.target.nrQuestions.value);n(t),a(o),r(i);var c=jr(i,o,t);!function(e){var t,n=Object(s.a)(e);try{for(n.s();!(t=n.n()).done;){var o=t.value;if(h(o)){var a=xr(o.answers);o.answers=a}}}catch(i){n.e(i)}finally{n.f()}}(c),p(c),m(Object(Pe.a)(Array(i)).map((function(e){return[]}))),l(0)},children:[Object(Ua.jsxs)("div",{children:[Object(Ua.jsx)("h4",{children:"Select category"}),Object(Ua.jsxs)("div",{className:"form-check form-switch",children:[Object(Ua.jsx)("input",{className:"form-check-input",type:"checkbox",id:"jsCatSwitch",name:"cat",value:"js",defaultChecked:!0}),Object(Ua.jsx)("label",{className:"form-check-label",htmlFor:"jsCatSwitch",children:"JS"})]}),Object(Ua.jsxs)("div",{className:"form-check form-switch",children:[Object(Ua.jsx)("input",{className:"form-check-input",type:"checkbox",id:"jsCatSwitch",name:"cat",value:"ts"}),Object(Ua.jsx)("label",{className:"form-check-label",htmlFor:"jsCatSwitch",children:"TS"})]}),Object(Ua.jsxs)("div",{className:"form-check form-switch",children:[Object(Ua.jsx)("input",{className:"form-check-input",type:"checkbox",id:"jsCatSwitch",name:"cat",value:"css"}),Object(Ua.jsx)("label",{className:"form-check-label",htmlFor:"jsCatSwitch",children:"CSS"})]}),Object(Ua.jsxs)("div",{className:"form-check form-switch",children:[Object(Ua.jsx)("input",{className:"form-check-input",type:"checkbox",id:"jsCatSwitch",name:"cat",value:"html"}),Object(Ua.jsx)("label",{className:"form-check-label",htmlFor:"jsCatSwitch",children:"HTML"})]})]}),Object(Ua.jsxs)("div",{children:[Object(Ua.jsx)("h4",{children:"Select hardness level"}),Object(Ua.jsxs)("div",{className:"form-check",children:[Object(Ua.jsx)("input",{type:"radio",className:"form-check-input",id:"radioEasy",name:"hardness",value:"easy",defaultChecked:!0}),Object(Ua.jsx)("label",{className:"form-check-label",htmlFor:"radioEasy",children:"Easy"})]}),Object(Ua.jsxs)("div",{className:"form-check",children:[Object(Ua.jsx)("input",{type:"radio",className:"form-check-input",id:"radioMedium",name:"hardness",value:"medium"}),Object(Ua.jsx)("label",{className:"form-check-label",htmlFor:"radioMedium",children:"Medium"})]}),Object(Ua.jsxs)("div",{className:"form-check",children:[Object(Ua.jsx)("input",{type:"radio",className:"form-check-input",id:"radioHard",name:"hardness",value:"hard"}),Object(Ua.jsx)("label",{className:"form-check-label",htmlFor:"radioHard",children:"Hard"})]})]}),Object(Ua.jsxs)("div",{children:[Object(Ua.jsx)("h4",{children:"Select nr of questions"}),Object(Ua.jsxs)("div",{className:"form-check",children:[Object(Ua.jsx)("input",{type:"radio",className:"form-check-input",id:"nrQuestions1",name:"nrQuestions",value:"3",defaultChecked:!0}),Object(Ua.jsx)("label",{className:"form-check-label",htmlFor:"nrQuestions1",children:"3"})]}),Object(Ua.jsxs)("div",{className:"form-check",children:[Object(Ua.jsx)("input",{type:"radio",className:"form-check-input",id:"nrQuestions2",name:"nrQuestions",value:"10"}),Object(Ua.jsx)("label",{className:"form-check-label",htmlFor:"nrQuestions2",children:"10"})]}),Object(Ua.jsxs)("div",{className:"form-check",children:[Object(Ua.jsx)("input",{type:"radio",className:"form-check-input",id:"nrQuestions3",name:"nrQuestions",value:"20"}),Object(Ua.jsx)("label",{className:"form-check-label",htmlFor:"nrQuestions3",children:"20"})]}),Object(Ua.jsx)("button",{type:"submit",className:"btn btn-primary mt-3",children:"Submit"})]})]})})};function kr(e,t){var n=Dr(e),o=[];console.log(n),console.log(t),Er(e,t)||console.error("quizAnswerEvaluator, getCorrectnessReport: userAnswers and allQuestionDescriptors are unequal in lehgth");for(var a=e.length,i=0;i<a;i++){var r=e[i].type;Nr(e[i].answers,t[i],r)?o.push(Cr(e[i])):o.push(Ar(e[i],t[i]))}return o}function Cr(e){var t=e.type,n=(e.answers,e.correctAnswersIds),o=(e.correctAnswers,e.question),a=e.answers;return"fill-in"===t?{isCorrect:!0,question:o,allAnswers:a,correctAnswers:e.correctAnswers}:{isCorrect:!0,question:o,allAnswers:a,correctAnswers:Pr(e,n)}}function Ar(e,t){return"fill-in"===e.type?function(e,t){e.correctAnswers}(e):function(e,t){e.answers;var n=Lr(e.correctAnswersIds),o=Lr(t),a=e.question,i=e.answers,r=function(e,t){var n,o=[],a=e.concat(t),i=Object(s.a)(a);try{for(i.s();!(n=i.n()).done;){var r=n.value,c=e.includes(r),l=t.includes(r);c&&l&&o.push(r)}}catch(d){i.e(d)}finally{i.f()}return o}(o,n),c=Ir(o,n),l=Ir(n,o),d=Pr(e,r),p=Pr(e,c),m=Pr(e,l);return{isCorrect:!1,question:a,allAnswers:i,correctAnswersContentGivenByUser:d,incorrectAnswersContentGivenByUser:p,correctAnswersOmmitedByUser:m}}(e,t)}function Ir(e,t){var n,o=[],a=Object(s.a)(e);try{for(a.s();!(n=a.n()).done;){var i=n.value;t.includes(i)||o.push(i)}}catch(r){a.e(r)}finally{a.f()}return o}function Pr(e,t){var n=Lr(t),o=[],a=e.answers;function i(e){return function(t){return t.originalIndex===e}}var r,c=Object(s.a)(n);try{for(c.s();!(r=c.n()).done;){var l=r.value;o=a.find(i(l)).content}}catch(d){c.e(d)}finally{c.f()}return o}function Nr(e,t,n){if(!Array.isArray(e)||!Array.isArray(e))return console.error("quizANswerEvaluator, isSingleAnswerCorrect: one of given arrays is not an array"),console.log(e),console.log(t),!1;if("radio"===n||"checkbox"===n)return function(e,t){var n=Object(Pe.a)(Mr(e)),o=Object(Pe.a)(Mr(t));if(e.length!==t.length)return!1;var a,i=Object(s.a)(n);try{for(i.s();!(a=i.n()).done;){var r=a.value,c=o.indexOf(r);if(-1===c)return!1;o.splice(c,1)}}catch(l){i.e(l)}finally{i.f()}return!0}(e,t);if("fill-in"===n){if(!Er(e,t))return!1;for(var o=e.length,a=0;a<o;a++)if(!Hr(e[a],t[a]))return!1;return!0}}function Er(e,t){var n=[e.length,t.length];return n[0]===n[1]}function Hr(e,t){if(!Er(e,t))return!1;for(var n=e.length,o=0;o<n;o++)if(e[o]!==t[o])return!1;return!0}function Mr(e){var t,n=Object(Pe.a)(e),o=Object(s.a)(n);try{for(o.s();!(t=o.n()).done;){var a=t.value;"string"!==typeof a&&(a=a.toString())}}catch(i){o.e(i)}finally{o.f()}return n}function Lr(e){var t,n=Object(Pe.a)(e),o=Object(s.a)(n);try{for(o.s();!(t=o.n()).done;){var a=t.value;"string"===typeof a&&(a=parseInt(a))}}catch(i){o.e(i)}finally{o.f()}return n}function Dr(e){var t,n=[],o=Object(s.a)(e);try{for(o.s();!(t=o.n()).done;){var a=t.value,i=a.type,r=void 0===a.correctAnswers?a.correctAnswersIds:a.correctAnswers;n.push({type:i,answers:r})}}catch(c){o.e(c)}finally{o.f()}return n}var Rr=function(e){var t=e.allQuestionsDescriptors,n=e.userAnswers;return console.log(t),console.log(n),Object(Ua.jsxs)("div",{className:"container my-3",children:[Object(Ua.jsx)("a",{href:"../",children:Object(Ua.jsx)("button",{type:"button",className:"btn btn-primary",children:"Back to theory"})}),Object(Ua.jsx)("button",{type:"submit",className:"btn btn-primary mx-3",onClick:kr.bind(this,t,n),children:"Submit answers"})]})};var Fr=function(e){var t=Object(Fa.a)(e.answersHandel,2),n=t[0],o=t[1],a=Object(Fa.a)(e.isQuizFinishedHandel,2),i=(a[0],a[1]),r=e.currentQuestionDescriptor,s=e.currentQuestionNr,c=e.nrOfQuestions,l=r.category,d=r.level,p=r.subcategory,m=r.question,h=r.answers,u=(r.correctAnswersIds,r.correctAnswers),b=r.type;function g(e,t){return function(e){var t=e.target.value,a=e.target.type;e.target.checked;"radio"===a?function(e){n[s]=[e],o(n)}(t):"checkbox"===a?function(e){if(!1===n[s].includes(e))n[s].push(e);else{var t=n[s].findIndex((function(t){return e===t}));n[s].splice(t,1)}o(n)}(t):console.warn("question.js: What? Target should be either radio or change and is ".concat(a))}}function f(e){return n[s].includes(e.toString())}function y(e){i(!0)}function v(){return"radio"===b?Object(Ua.jsx)("form",{onSubmit:y,children:h.map((function(e,t){return Object(Ua.jsxs)("div",{className:"form-check",children:[Object(Ua.jsx)("input",{type:"radio",className:"form-check-input",id:"radio".concat(t),name:"answers",value:e.originalIndex,onChange:g(),defaultChecked:f(e.originalIndex)}),Object(Ua.jsx)("label",{className:"fomr-check-label",htmlFor:"radio".concat(t),dangerouslySetInnerHTML:Ja(e.content)})]},e.originalIndex)}))}):Object(Ua.jsx)(Ua.Fragment,{})}function w(){function e(e,t){var a=e,i=t;return function(e){var t=e.target.value.trim();!function(e,t,a){function i(e,t){var n=e.length;if(n<t)for(var o=0;o<t-n;o++)e.push([])}var r=n[s],c=h.map((function(e){return e.split("{{{}}}").length-1}));i(r,c.length),function(e,t){for(var n=0;n<e.length;n++){var o=t[n];i(e[n],o)}}(r,c),r[e][t]=a,n[s]=r,o(n),console.log(r)}(a,i,t)}}function t(e,t){var o=n[s];return Array.isArray(o)?void 0===o[e]||void 0===o[e][t]?"":o[e][t]:""}function a(e,t){var n=u[e][t];return Math.ceil(n.length/2)+2}function i(n,o){var i=n.trim().split("{{{}}}");return Object(Ua.jsx)("div",{children:i.map((function(n,r){return Object(Ua.jsxs)("span",{children:[Object(Ua.jsx)("span",{dangerouslySetInnerHTML:Ja(n)}),r<i.length-1?Object(Ua.jsx)("input",{size:a(o,r).toString(),type:"text",onBlur:e(o,r),defaultValue:t(o,r)}):Object(Ua.jsx)(Ua.Fragment,{})]},r)}))},n)}return"fill-in"===b?h.map((function(e,t){return Object(Ua.jsxs)(Ua.Fragment,{children:[Object(Ua.jsx)("div",{className:"card bg-light text-dark",children:Object(Ua.jsx)("div",{className:"card-body",children:i(e,t)})},t),Object(Ua.jsx)("br",{})]})})):Object(Ua.jsx)(Ua.Fragment,{})}function x(){return"checkbox"===b?Object(Ua.jsx)("form",{onSubmit:y,children:h.map((function(e,t){return Object(Ua.jsxs)("div",{className:"form-check",children:[Object(Ua.jsx)("input",{type:"checkbox",className:"form-check-input",id:"checkbox".concat(t),name:"answers",value:e.originalIndex,onChange:g(),defaultChecked:f(e.originalIndex)}),Object(Ua.jsx)("label",{className:"form-check-label",htmlFor:"checkobox".concat(t),dangerouslySetInnerHTML:Ja(e.content)})]},e.originalIndex)}))}):Object(Ua.jsx)(Ua.Fragment,{})}return Object(Ua.jsxs)("div",{className:"container",children:[Object(Ua.jsxs)("h3",{children:["Question ",s+1," of ",c]}),Object(Ua.jsx)("span",{className:"badge rounded-pill bg-primary",children:l}),Object(Ua.jsx)("span",{className:"badge rounded-pill bg-primary",children:p}),Object(Ua.jsx)("span",{className:"badge rounded-pill bg-primary",children:d}),Object(Ua.jsx)("div",{className:"alert alert-light",dangerouslySetInnerHTML:Ja(m)}),Object(Ua.jsx)(v,{}),Object(Ua.jsx)(x,{}),Object(Ua.jsx)(w,{})]})};var Br=function(e){var t,n=e.maxNrOfItems,o=Object(Fa.a)(e.currentItemNrHandel,2),a=o[0],i=o[1],r=(t=n,Object(Pe.a)(Array(function(e){return"number"===typeof e?e:parseInt(e)}(t)).keys()));function s(e){return function(){e!==a&&i(e)}}return Object(Ua.jsx)("ul",{className:"pagination justify-content-center",children:r.map((function(e){return Object(Ua.jsx)("li",{className:"page-item ".concat((t=e,t===a?"active":"")),onClick:s(e),children:Object(Ua.jsx)("a",{className:"page-link",href:"#",children:e+1})},e);var t}))})};var Ur=function(e){var t=Object(o.useState)([]),n=Object(Fa.a)(t,2),a=n[0],i=n[1],r=Object(o.useState)("easy"),s=Object(Fa.a)(r,2),c=s[0],l=s[1],d=Object(o.useState)(4),p=Object(Fa.a)(d,2),m=p[0],h=p[1],u=Object(o.useState)(-1),b=Object(Fa.a)(u,2),g=b[0],f=b[1],y=Object(o.useState)([]),v=Object(Fa.a)(y,2),w=v[0],x=v[1],j=Object(o.useState)([]),T=Object(Fa.a)(j,2),O=T[0],S=T[1],k=Object(o.useState)(!1),C=Object(Fa.a)(k,2),A=C[0],I=C[1];function P(){return-1===g?Object(Ua.jsx)(Sr,{categoriesHandel:[a,i],hardnessLevelHandel:[c,l],nrOfQuestionsHandel:[m,h],currentQuestionNrHandel:[g,f],setOfQuestionsHandel:[O,S],currentQuestionDescriptor:O[g],setCurrentAnswers:x,answers:w}):Object(Ua.jsx)(Ua.Fragment,{})}function N(){return g>-1&&!A?Object(Ua.jsx)(Fr,{currentQuestionNrHandel:[g,f],answersHandel:[w,x],isQuizFinishedHandel:[A,I],currentQuestionDescriptor:O[g],currentQuestionNr:g,nrOfQuestions:m}):Object(Ua.jsx)(Ua.Fragment,{})}function E(){return g>-1&&!A?Object(Ua.jsx)(Br,{maxNrOfItems:m,currentItemNrHandel:[g,f]}):Object(Ua.jsx)(Ua.Fragment,{})}function H(){return g>-1&&!A?Object(Ua.jsx)(Rr,{allQuestionsDescriptors:O,userAnswers:w}):Object(Ua.jsx)(Ua.Fragment,{})}return Object(o.useEffect)((function(){console.log(w)})),Object(Ua.jsxs)(Ua.Fragment,{children:[Object(Ua.jsx)(P,{}),Object(Ua.jsx)(N,{}),Object(Ua.jsx)(H,{}),Object(Ua.jsx)(E,{})]})};var _r=function(e){var t=Object(Fa.a)(e.categoriesHandel,2),n=(t[0],t[1],Object(Fa.a)(e.currentQuestionNrHandel,2)),o=(n[0],n[1]),a=Object(Fa.a)(e.setOfQuestionsHandel,2),i=(a[0],a[1]),r=e.setCurrentAnswers;function c(e){return["radio","checkbox"].includes(e.type)}return e.answers,Object(Ua.jsx)("div",{className:"container",children:Object(Ua.jsxs)("form",{onSubmit:function(e){e.preventDefault();var t=function(e){var t=e.target.cat,n=[];return t.forEach((function(e){e.checked&&n.push(e.value)})),n}(e),n=Or(t),a=n.length;!function(e){var t,n=Object(s.a)(e);try{for(n.s();!(t=n.n()).done;){var o=t.value;if(c(o)){var a=xr(o.answers);o.answers=a}}}catch(i){n.e(i)}finally{n.f()}}(n),i(n),r(Object(Pe.a)(Array(a)).map((function(e){return[]}))),o(0)},children:[Object(Ua.jsxs)("div",{children:[Object(Ua.jsx)("h4",{children:"Select category"}),Object(Ua.jsxs)("div",{className:"form-check form-switch",children:[Object(Ua.jsx)("input",{className:"form-check-input",type:"checkbox",id:"jsCatSwitch",name:"cat",value:"js",defaultChecked:!0}),Object(Ua.jsx)("label",{className:"form-check-label",htmlFor:"jsCatSwitch",children:"JS"})]}),Object(Ua.jsxs)("div",{className:"form-check form-switch",children:[Object(Ua.jsx)("input",{className:"form-check-input",type:"checkbox",id:"jsCatSwitch",name:"cat",value:"ts"}),Object(Ua.jsx)("label",{className:"form-check-label",htmlFor:"jsCatSwitch",children:"TS"})]}),Object(Ua.jsxs)("div",{className:"form-check form-switch",children:[Object(Ua.jsx)("input",{className:"form-check-input",type:"checkbox",id:"jsCatSwitch",name:"cat",value:"css"}),Object(Ua.jsx)("label",{className:"form-check-label",htmlFor:"jsCatSwitch",children:"CSS"})]}),Object(Ua.jsxs)("div",{className:"form-check form-switch",children:[Object(Ua.jsx)("input",{className:"form-check-input",type:"checkbox",id:"jsCatSwitch",name:"cat",value:"html"}),Object(Ua.jsx)("label",{className:"form-check-label",htmlFor:"jsCatSwitch",children:"HTML"})]})]}),Object(Ua.jsx)("button",{type:"submit",className:"btn btn-primary mt-3",children:"Submit"})]})})};var Wr=function(e){var t=Object(o.useState)([]),n=Object(Fa.a)(t,2),a=n[0],i=n[1],r=Object(o.useState)(-1),s=Object(Fa.a)(r,2),c=s[0],l=s[1],d=Object(o.useState)([]),p=Object(Fa.a)(d,2),m=p[0],h=p[1],u=Object(o.useState)([]),b=Object(Fa.a)(u,2),g=b[0],f=b[1],y=Object(o.useState)(!1),v=Object(Fa.a)(y,2),w=v[0],x=v[1];function j(){return-1===c?Object(Ua.jsx)(_r,{categoriesHandel:[a,i],currentQuestionNrHandel:[c,l],setOfQuestionsHandel:[g,f],currentQuestionDescriptor:g[c],setCurrentAnswers:h,answers:m}):Object(Ua.jsx)(Ua.Fragment,{})}function T(){return c>-1&&!w?Object(Ua.jsx)(Fr,{currentQuestionNrHandel:[c,l],answersHandel:[m,h],isQuizFinishedHandel:[w,x],currentQuestionDescriptor:g[c],currentQuestionNr:c,nrOfQuestions:g.length}):Object(Ua.jsx)(Ua.Fragment,{})}function O(){var e=g.length;return c>-1&&!w?Object(Ua.jsx)(Br,{maxNrOfItems:e,currentItemNrHandel:[c,l]}):Object(Ua.jsx)(Ua.Fragment,{})}function S(){return c>-1&&!w?Object(Ua.jsx)(Rr,{allQuestionsDescriptors:g,userAnswers:m}):Object(Ua.jsx)(Ua.Fragment,{})}return Object(o.useEffect)((function(){console.log(m)})),Object(Ua.jsxs)(Ua.Fragment,{children:[Object(Ua.jsx)(j,{}),Object(Ua.jsx)(T,{}),Object(Ua.jsx)(S,{}),Object(Ua.jsx)(O,{})]})},qr=function(e){e&&e instanceof Function&&n.e(3).then(n.bind(null,152)).then((function(t){var n=t.getCLS,o=t.getFID,a=t.getFCP,i=t.getLCP,r=t.getTTFB;n(e),o(e),a(e),i(e),r(e)}))},zr=(n(133),n(134),n(25)),Gr=n.n(zr),Vr=n(40),Kr=function(){onmessage=function(e){var t=e.data.request,n=t.request,o=t.operation,a=t.data,i=t.expectedResult,r=function(e,t){return"strong"===e?function(e){for(var t=1,n=1;n<=e;n++)t*=n;return[t]}(t[0]):null}(o,a),s=function(e,t,n){if("test"===e)return o=t,a=n,JSON.stringify(o)===JSON.stringify(a);var o,a}(n,r,i);postMessage(s)}},$r=n(27),Jr=n(20),Xr=n(28),Yr=n(29),Qr=n(31),Zr=function(e){Object(Xr.a)(t,e);Object(Yr.a)(t);function t(e){Object($r.a)(this,t);var n=e.toString(),o=new Blob(["(".concat(n,")()")]);return Object(Jr.a)(undefined,new Worker(URL.createObjectURL(o)))}return t}(Object(Qr.a)(Worker));function es(e){var t=Object(o.useState)(e.data),n=Object(Fa.a)(t,2),a=n[0],i=(n[1],Object(o.useState)([])),r=Object(Fa.a)(i,2),s=(r[0],r[1],Object(o.useState)(a.request)),c=Object(Fa.a)(s,2),l=c[0],d=(c[1],Object(o.useState)(a.response)),p=Object(Fa.a)(d,2),m=p[0],h=p[1],u=Object(o.useState)(a.expectedResult),b=Object(Fa.a)(u,2),g=b[0],f=(b[1],Object(o.useState)(!1)),y=Object(Fa.a)(f,2);y[0],y[1];return Object(o.useEffect)((function(){ts(a).then((function(e){return console.log("RESOLVED "+e),h(e+""),Promise.resolve()})).catch((function(e){console.log(e)}))}),[m]),Object(Ua.jsx)(Ua.Fragment,{children:Object(Ua.jsxs)("div",{className:"nextLine container mt-3",children:[Object(Ua.jsx)("span",{className:"badge bg-primary m-1",children:l}),Object(Ua.jsxs)("span",{className:"badge bg-success m-1",children:[m," "]}),Object(Ua.jsx)("span",{className:"badge bg-warning m-1",children:g})]})})}function ts(e,t,n,o){return ns.apply(this,arguments)}function ns(){return(ns=Object(Vr.a)(Gr.a.mark((function e(t,n,o,a){var i;return Gr.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(i=new Zr(Kr)).postMessage({request:t,operation:n,data:o,expectedResult:a}),e.abrupt("return",new Promise((function(e){i.onmessage=function(t){e(t.data)}})));case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var os=function(e){var t=Object(o.useState)([{request:"test",operation:"strong",data:[6],expectedResult:[720]},{request:"test",operation:"strong",data:[8],expectedResult:[40320]},{request:"test",operation:"strong",data:[10],expectedResult:[3628800]}]),n=Object(Fa.a)(t,2),a=n[0],i=(n[1],Object(o.useState)([])),r=Object(Fa.a)(i,2),s=r[0];return r[1],Object(Ua.jsxs)(Ua.Fragment,{children:[a.map((function(e,t,n){console.log(e);var o=n[t];return o.request,o.result,o.expectedResult,Object(Ua.jsx)(es,{data:e},t)})),Object(Ua.jsx)("span",{children:JSON.stringify(s[0])})]})},as=function(){onmessage=function(e){console.log(e);var t=e.ports[0];t.postMessage("connected"),console.log("connected"),t.onmessage=function(e){t.postMessage("Shared message"),t.postMessage(e)}}};Worker;function is(e){return console.log(as),'\n<body>\n    <style>body{background-color:#ddd;}</style>\n    <div id ="outlet"></div>\n    <script>\n        '.concat("\n    let worker = (SharedWorkerBuilder(onmessage));\n    let outlet = document.getElementById('outlet');\n    console.log(worker)\n    worker.port.start(); \n    worker.port.addEventListener('message', function(e){console.log(e);outlet.innerText += e.data;});\n    worker.port.onmessage = function(e){console.log(e);outlet.innerText += e.data;};\n    worker.port.start(); \n    worker.port.postMessage(JSON.stringify({type: 'introduction'}));\n    worker.port.postMessage(JSON.stringify({name:'".concat(e,"', type:'frameData'}));\n    console.log(worker)\n    "),"\n    <\/script>\n</body>\n    ")}var rs=function(e){return Object(Ua.jsxs)(Ua.Fragment,{children:[Object(Ua.jsx)("iframe",{className:"m-2",title:"alias",srcDoc:is(1)}),Object(Ua.jsx)("iframe",{className:"m-2",title:"alias",srcDoc:is(2)})]})};r.a.render(Object(Ua.jsx)(a.a.StrictMode,{children:Object(Ua.jsx)(Ba.a,{children:Object(Ua.jsxs)(nr.c,{children:[Object(Ua.jsx)(nr.a,{path:"/",element:Object(Ua.jsx)(ir,{})}),Object(Ua.jsx)(nr.a,{path:"about",element:Object(Ua.jsx)(ir,{})}),Object(Ua.jsx)(nr.a,{path:"/theory/:topic",element:Object(Ua.jsx)(ir,{})}),Object(Ua.jsx)(nr.a,{path:"quiz",element:Object(Ua.jsx)(Ur,{})}),Object(Ua.jsx)(nr.a,{path:"quizTestMode",element:Object(Ua.jsx)(Wr,{})}),Object(Ua.jsx)(nr.a,{path:"dedicatedWobWorker",element:Object(Ua.jsx)(os,{})}),Object(Ua.jsx)(nr.a,{path:"sharedWebWorker",element:Object(Ua.jsx)(rs,{})})]})})}),document.getElementById("root")),qr()},68:function(e,t,n){},69:function(e,t,n){}},[[149,1,2]]]);
//# sourceMappingURL=main.98d28b95.chunk.js.map