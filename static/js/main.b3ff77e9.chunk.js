(this["webpackJsonptheory-corner"]=this["webpackJsonptheory-corner"]||[]).push([[0],{30:function(e,t,n){},31:function(e,t,n){},58:function(e,t,n){"use strict";n.r(t);var o=n(2),a=n.n(o),r=n(25),i=n.n(r),s=(n(30),n(6)),c=(n(31),{summary:"box model",title:"box model",cathegory:"css",searchKeywords:"margin padding collapsed margin top-margin bottom-margin left-margin right-margin padding\n        padding-top padding-bottom padding-left padding-right border outline border-top border-right border-bottom\n        border-left box-sizing border-box content-box padding-box",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Box model"},{elementType:"Paragraph",content:"\n                        Each web page element is placed in rectangular boxes. This boxes describe elements \n                    "},{elementType:"Image",name:"boxModel_browser.png",alt:"Box model"},{elementType:"UnsignedList",content:["<b>margin:</b> This is a rectangular box describing elements outer distance from other elements \n                        on page","<b>border:</b> This is a frame surrounding element, it has its size that may be calculated into\n                        elements size, or not, depending on chosen <code>box-sizing</code>","<b>padding:</b> This is inner element spacing. Distance between border and elements content","<b>content:</b> This is space elements content takes"]},{elementType:"Paragraph",content:"\n                        There is also an <b>outline</b>, an element surrounding border of element. Outline overlaps margin,\n                        as it is never taken into account when calculating elements size. Moreover outline cannot have\n                        its top, left, right, bottom or radius set. It may however be for example solid or dashed, and have its \n                        color set.\n                    "},{elementType:"NoteWarning",content:"\n                        If element is taken out of layout with <code>position</code> equal to <code>absolute</code>,\n                        <code>fixed</code> or <code>sticky</code> margin, padding, border will exist, but \n                        will not determine elements distances to other elements on page.\n                    "},{elementType:"Image",name:"boxModel_example_1.png",alt:"Box model"}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"box-sizing"},{elementType:"Paragraph",content:"How size determined by style height and width is calculated depends on \n                    <code>box-sizing</code> property:"},{elementType:"UnsignedList",content:["<b>content-box: </b>width and height properties set only inner elements content, where \n                        margin, border and padding are not taken into account when setting height and width. So\n                        element as a whole is larger.","<b>border-box: </b>width and height properties contain padding and border of element. Margin \n                        is not taken into account.","<b>padding-box: </b>width and height properties contain padding. However border and margin\n                        are left outside."]},{elementType:"NoteWarning",content:'\n                    This is theory. In practice <code>padding-box</code> is not supported in all browsers I have. In\n                    <a href="https://css-tricks.com/almanac/properties/b/box-sizing/">one source</a> I found that \n                    this value is supported only in firefox, however in my case even this browser, with -moz and -webkit\n                    prefixes failed. Observed default behaviour (content-box) was in all cases the same as \n                    described padding-box\n                    '}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"top, left, right, bottom, radius, style"},{elementType:"Paragraph",content:"Padding, margin and border may have different size in their top, left, bottom or right part\n                    Outline has always constant size on each edge. Border may have different radiuses set to each edge \n                    corner, and there is a possiblity to create interesting effects with this. Outline does not have its \n                    radius property. However border and outline may have different style property. It may be: none, hidden,\n                    dotted, dashed, solid, double, groove, ridge, inset, outset, initial oir inherit. Outline will have \n                    the same styling in each edge, however border style may be different for each edge"},{elementType:"Image",name:"fancy_border.png",alt:"Box model"}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Collapsing margins"},{elementType:"Paragraph",content:"Lets concidere this piece of code"},{elementType:"Code",content:"\n<pre>\n&lt;style>\n    p{margin:25px;}\n&lt;/style>\n&lt;p>Paragraph 1&lt;/p>\n&lt;p>Paragraph 2&lt;/p>\n</pre>                        \n                    "},{elementType:"Paragraph",content:"Margin is set to 25px, so one could expect that as <code>p</code> are block elements \n                    distance between them in vertical cordinance would be 50px. And there is a surprice. Margins will\n                    collapse, and space will be reduced to 25px. There is a link to a marvelous article about this in\n                    a reference section of this article. But in short words:"},{elementType:"UnsignedList",content:["Only vertical margins collapse. Exception is when <code>writing-mode</code> is chenged to \n                        <code>vertical-lr</code>. In this case only horizontal margin collapses. So only <b>block direction</b>\n                        margins collapse","Only <b>adjacend</b> margins collapse. If there is a <code><br></code> between, they are no longer \n                        adjacend and they do not collapse","If margins of adjacent elements are unequal, bigger wins","If one of adjacent elements is nested, this doest not prevent collapsing. Exception is when \n                        parent of nested element has some padding.","Negative margins also collapse. Larger one wins"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Negative margins"},{elementType:"Paragraph",content:"There is a possiblity to set a negative margin value to decrease element spacing. In case\n                    a negative margin collapse with positive one, they values are added (margin 150px with -50px gives\n                        spacing equal to 100px)"}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Inline elements"},{elementType:"Paragraph",content:"\n                        How about inline elements? Yes, they also are in box model. There is a possibility, that \n                        an element will be divided. Some part of it will be in line <i>n</i>, and other part of\n                        it will be moved to line <i>n + 1</i>. In this situation this box model will be broken in \n                        place line ends and moved to next line. To learn more please refer to reference section.\n                    "},{elementType:"Image",name:"boxModel_inline.png",alt:"Box model inline element"}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"w3 org",href:"https://www.w3.org/TR/CSS2/box.html",description:"Word wide web article about box model"},{elementType:"Link",content:"Josh Comeau",href:"https://www.joshwcomeau.com/css/rules-of-margin-collapse/",description:"Great visualisation of margin collapse"},{elementType:"Link",content:"Hack mozilla",href:"https://hacks.mozilla.org/2015/03/understanding-inline-box-model/",description:"Inline elements and box model"},{elementType:"Link",content:"Fancy border generator",href:"https://9elements.github.io/fancy-border-radius/",description:"Online generator making it easy to convert plane div to fancy shapes"},{elementType:"Link",content:"Examples at gitHub",href:"https://github.com/gudmar/theoryCornerExamples",description:"Examples used on this page"}]}]});var l={summary:"specifity",title:"specifity",cathegory:"css",searchKeywords:"",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Specifity"},{elementType:"Paragraph",content:"\n                        If there is only one css selector matching an each element things are simple. But when multiple \n                        different selectors want to influence a single element, what rule should be chosen? The last one\n                        or the first one, or all of them? What should happen if rules deny each other?\n                    "},{elementType:"Image",name:"specifity.png",alt:"specifity"},{elementType:"Paragraph",content:"\n                    There are groups of css selectors, and each group is multiplied by a different factor.\n                    After multiplication points from different groups are added, and result is specifity value.\n                    "},{elementType:"UnsignedList",content:["<code>inline styling</code>: multiplied by 1000","<code>id</code> attribute: multiplied by 100","<code>class, pseudo-class, attribute selector</code>: multiplied by 10","<code>HTML tags</code>: multiplied by 1","<code>* + > ~ , :not()</code>: multiplied by 0","<code>!important</code> multiplied by 10 000. <strong>Beware</strong> this keyword should be used \n                        very reasonably. In 99.9% cases it can be avoided, and if used may cause serious probles with \n                        maintainability"]},{elementType:"Paragraph",content:"Lets look at some examples:"},{elementType:"UnsignedList",content:["<code>div</code>: 0, 0, 0, 1 => as there are no class selectors, no ids, no iniline styling, just a\n                        tag selector. Specifity is 1","<code>body>footer.col_3>div>ul>li</code> 0, 0, 1, 5 => no inline styling, no id attributes, \n                        one class selector, and five tag selectors: body, footer, div, ul, li. \n                        Specifity is 15.",'<code>&lt;div style="background-color:green"></code>: 1, 0, 0, 0 => as there is one inline styling,\n                        so specifity equals 1000',"<code>#someId#someOtherId.col_8.card.content>p>b</code>: 0, 2, 3, 2 => there are two id selectors \n                        (someId and someOtherId) three class selectors (col_9, card, content), and two tag selectors \n                        (b, p), so specifity is 232"]},{elementType:"Headline-2",content:"!important"},{elementType:"Paragraph",content:"\n                    As this keyword overrides all specifity, even inline styling, it should be used very reasonably. \n                    In most cases this keyword should be avoided, as it leads to ignoring the real issues in the HTML \n                    structure and the corresponding CSS. This is especially important when working on a bigger project \n                    in which more people are involved. In some cases <i>important<i> make code impossible to debug, \n                    as removing the it keyword from already existing CSS rule may cause other issues to appear. \n                    Important rules make it difficult to apply <i>user stylesheets</i>. So to summarize:\n                    "},{elementType:"UnsignedList",content:["<code>!important</code> hides problems existing within the HTML structure and corresponding CSS,","<code>!important</code> makes maintainability difficult or even impossible,","<strong>user stylesheets</code> will be hard or impossible to apply,"]},{elementType:"Paragraph",content:"\n                    Why <code>!important</code> keyword exists at all if it is that <i>evil</i>?</code> \n                    It is not completely the <i>dark side of the force</i>. There are a few situations it comes handy. \n                    "},{elementType:"UnsignedList",content:["Testing and debugging,","User stylesheets (browser extentions allowing a user to apply custom stylesheets to each site)","<strong>user stylesheets</strong> will be hard or impossible to apply,","Similar to user stylesheets is working with a third party code, when some CSS rules needs to be \n                        overwritten to suite your needs,","Even Bootstrap uses the important keyword. Considering a <code>hidden-sm</code> class, that \n                        hides elements on smaller devices. It must work in all circumstances. Even when other classes are\n                        applied ","There is an already finished and encapsulated element, lets call it <code>custom-input</code>,\n                        without shadow DOM applied to is. If <code>custom-input</code> is nested, and other elements\n                        start interfering with <code>custom-input</coed> css, then using <code>!important</code> may\n                        be considerated inside the <code>custom-input</code>. However it would be better to use \n                        a custom web element with shadow root instead."]},{elementType:"Paragraph",content:"\n                    <code>!important</code> cannot be applied as a selector. It is applied to each css property individually.\n                    "},{elementType:"Code",content:"\n<pre>\n.some-class{\n    display: inline-block;\n    position: relative;\n    widht: 100px;\n    height: 100px;\n    background-color: blue !important;\n}\n</pre>                    \n                    "},{elementType:"Paragraph",content:"\n                    Now every element having the <q>some-class</q> applied will be forced to have a blue background. \n                    Can it be changed? Yes, only by another <code>!important</code> keyword somewhere beneath previous \n                    usage.\n                    "},{elementType:"Headline-2",content:"Inline styling"},{elementType:"Paragraph",content:"\n                    This is considered an another bad practice, however in some cases may be useful.\n                    "},{elementType:"UnsignedList",content:["Inline stylings are difficult to alter when applied to a great number of elements,","Inline stylings are not reusable,","When applied to <i>content security policy</i> pages they will not work,","They are not applied to media queries,","They might be useful when applied with JS to style some elements. Suppose there is an\n                        element that needs to be moved by a mouse on a page. Inline styling this element with JS seems\n                        a good idea."]},{elementType:"Headline-2",content:"Conclusion"},{elementType:"Paragraph",content:"\n                    <strong>Fighting with specifity is a bad idea</strong>. Selectors needed to be applied to style some \n                    element might be quite complex, and in bigger applications they might get out of hand. \n                    So the best solution is to understand specifity, know the rules, but avoid it in the code. \n                    It is mutch better to use more classes and keep less selectors than use specifity based ones. \n                    It is a very interesting experience to build something with a css framework to see how it works. \n                    Css frameworks are reusable and generic, so classes are named in a proper way, and whey do not use \n                    specifity based selectors much.\n                    "},{elementType:"Headline-2",content:"More than one selectors have the same specifity"},{elementType:"Paragraph",content:"\n                    In this case the one that has lower position in our css file will be applied.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"css-tircks",href:"https://css-tricks.com/specifics-on-css-specificity/",description:"Nice visual explanation of specifity calculation"},{elementType:"Link",content:"developintelligence",href:"https://www.developintelligence.com/blog/2018/02/css-important-rule-use-correctly/",description:"Important good usecases"},{elementType:"Link",content:"Stackoverflow",href:"https://stackoverflow.com/questions/35709447/why-does-bootstrap-use-important-for-responsive-classes",description:"Important in bootstrap"},{elementType:"Link",content:"Content security policy - CSP",href:"https://infosec.mozilla.org/guidelines/web_security#content-security-policy",description:""}]}]};n(32);var d=[l,c,{summary:"selectors",title:"selectors",cathegory:"css",searchKeywords:"selector selectors combinator combinators class classes tag id pseudo-class",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Selectors and combinators"}]},{elementType:"Article",content:[{elementType:"Paragraph",content:'\n                    Selector defines element or set of elements that a set of css rules should apply to. Selectors may\n                    be joined with combinators. Which rule is chosen in case more selectors apply to some elements is \n                    determined by <a href="./#/theory/specifity">specifity</a>.\n                    '},{elementType:"Headline-2",content:"Selectors"},{elementType:"UnsignedList",content:["<code>*</code>: this selects each single element on web page","<code>article</code>, <code>section</code>, <code>div</code>, <code>span</code>, <code>a</code>, \n                        <code>i</code>, <code>strong</code> and all other html tags are tag selectors. They chose all\n                        elements with this tag name,","<code>.some-class-name</code>: a selector with a dot is a class selector. Choses each element with\n                        containing this class in class list","<code>[attribute]</code>, select all elements having the 'attribute',","<code>[attribute=\"value\"]</code>: selects all elements having the 'attribute' value equal to\n                        'value'","<code>[attribute~=\"value\"]</code> selects all elements with an 'attribute' containing the word 'value'.\n                        As word needs to be separated with pauses, then a substring <code>somevalue</code> will not be selected.\n                        Only <code>some value</code> or <code>some value some</code> or <code>value some</code> will be selected.",'<code>[attribute*="value"]</code> selects all elements with an \'attribute\' containing the <strong>\n                        substring</strong> value. In this case all selections made by <code>[attribute]~="value"</code> are \n                        contained, and moreover <code>attribute="somevaluesome"</code> will be matched.','<code>[attribute|="value"]</code> selects all elements having an attribute starting with word \'value\' \n                        immediately followed by "-" (U+002D) or being equal to \'value\', so for example \n                        <code>attr="my-attr"</code> or <code>attr="my"</code>, but not <code>myattr</code>. \n                        This selector was designed to match locale/language codes like , <i>pl</i> or <i>en-gb</i>','<code>[attribute^="value"]</code> selects all elements having the "attribute" starting with "value", \n                        so both <i>my-attr</i> and <i>myattr</i> will match','<code>[attribute$="value"]</code> selects all elements thats "attribute" value ends with a "value" \n                        word. For expample: <code>[attribute$=".pdf"]</code> is good for selecting all elements ending with a \n                        <q>.pdf</q>','<code>:first-child</code>, <code>:not(p)</code>: pseudo class selectors. To learn more please refer to \n                        <a href="./pseudo%20classes>pseudo class</a> section,','<code>:before</code>, <code>:after</code>: pseudo-element selectrs select pseudo-elements. Those\n                        elements do not exist in HTML, however they are present in DOM and they are defined in CSS. To learn \n                        more read the <a href="./#/theory/pseudo%20elements">pseudo elements</a> article.',"<code>#myId</code>: is an Id selector. Id should be an unique value in the whole, so this should \n                        select only one element if not combined with selectors comming after it"]},{elementType:"Headline-2",content:"Combinators"},{elementType:"Paragraph",content:"\n                    Combinators are used to join css selectors together.\n                    <strong>There is currently (year 2021) no possibility to selec a parent element with css</strong>\n                    "},{elementType:"UnsignedList",content:["A space &#8594; <code>div p</code> will select all p elements that are descendants of div. Chidren, their \n                        children and so on,","<code>></code> &#8594; <code>div>p</code> will select only direct children, so only <code>p</code>\n                        elements if they are direct child of div,","<code>+</code> &#8594; <code>div+p</code> matches adjacent elements, so matches a <code>p</code> \n                        element only if it is a next direct sibling of the <code>div</code>","<code>~</code> &#8594; <code>div~p</code> matches a <code>p</code> element if it s a sibling of the\n                        <code>div</code> element, but in this case it does not have to be a direct sibling, but can be \n                        placed anywhere under the same parent."]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"w3schools",href:"https://www.w3schools.com/cssref/css_selectors.asp",description:"Nice visual explanation of specifity calculation"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Combinators",description:"Combinators explanation"}]}]},{summary:"position",title:"position",searchKeywords:"absolute relative static sticky fixed z-index css",cathegory:"css",content:[{elementType:"Article",content:[{elementType:"Headline",content:"About position"},{elementType:"Paragraph",content:"\n                            <b>Lorem ipsum</b> dolor sit amet, consectetur adipiscing elit. \n                            Vestibulum et lacinia arcu, ut tempor lacus. Integer euismod, est et pharetra eleifend, \n                            magna nibh congue nulla, eu ornare lacus sem eu leo. Sed aliquet tincidunt neque non tempor. \n                            Sed feugiat, massa at tempus tincidunt, tortor turpis rhoncus orci, nec cursus purus dui vel ipsum. \n                            Sed pellentesque sem nec dictum auctor. Morbi tempus lectus vitae ultrices volutpat. \n                            Vivamus convallis mauris urna. Phasellus rhoncus felis eget mi tincidunt malesuada. \n                            Pellentesque in velit viverra nunc ultrices maximus. Duis in leo dolor.             \n                        "}]}]},{summary:"pseudo elements",title:"pseudo elements",cathegory:"css",searchKeywords:"selector before after",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Pseudo elements"}]},{elementType:"Article",content:[{elementType:"Paragraph",content:"\n                        There are two elements in web design, that are not a part of the HTML. They are \n                        added to DOM only with CSS, and their behaviour is also defined with css. \n                        This elements are:\n                    "},{elementType:"UnsignedList",content:["\n                    <code>::before</code>, that is added as a sort of <i>first child</i> of the element that before is applied to,\n                    hovever this is not exectly a child element, as it is neither listed with <code>element.childNodes</code>,\n                    nor styled with pseudo-class elements\n                    ","<code>::after</code> is added as a sort of <i>last child</i> of element that it is being applied to."]},{elementType:"Paragraph",content:"\n                        Pseudo elements cannot be accessed with JS in other way than with <code>\n                        window.getComputedStyle(document.querySelector(someElement), ':before')</code>.\n                        It may be styled with JS by modifying <code>&lt;style></code> rules.\n                    "},{elementType:"NoteWarning",content:"\n                    Pseudo element will not show up, if it has no <strong>content</strong> property set. It is \n                    important to set it at least to an empty string.\n                    "},{elementType:"Headline-2",content:"Usages of pseudo elements"},{elementType:"UnsignedList",content:['\n                        A tooltip:\n\n                        </div>\n                        <style>\n                            #tooltipTarget{\n                                margin:30px;\n                                position:relative;width:100px;padding:5px;text-align:center;\n                                line-height:1.5rem;background-color:green;border-radius:4px;\n                                color:white;cursor:default;\n                            }\n                            #tooltipTarget:before{\n                                content:attr(data-tooltip);position:absolute;top:0;left:0;transform:translateY(-100%);\n                                background-color:yellow;color:black;\n                                visibility:hidden;\n                            }\n                            #tooltipTarget:hover:before{\n                                visibility:visible;\n                            }\n\n                        </style>\n                            <div id="tooltipExample">\n                            <div id="tooltipTarget" data-tooltip="Some advice">Hover me</div>\n                        </div>\n                        <div class="alert-dark alert">\n<pre>\ndiv:before{\n    position:absolute;\n    top:0;left:0;\n    transform:translateY(-100%);\n    content:attr(data-tooltip);\n    backgrond-color:yellow;\n    color:balck;\n    visibility:hidden;\n}\ndiv:hover:before{visiblity:visible;}\n</pre>\n \n                        ',"\n                        Put fancy shadow:\n\n                        <style>\n#fancyShadowExample{\n    display:flex;align-items:center;justify-items:center;justify-content:center;\n    text-align:center;\n    position:relative;\n    width: 250px;\n    height:150px;\n    background-color:#ebebeb;\n    margin: 30px;\n}\n#fancyShadowExample>span{\n    display:inline-block;\n}\n#fancyShadowExample:before,#fancyShadowExample:after{\n    position:absolute;\n    content:'';\n    width: 75px;\n    height:20px;\n    -webkit-box-shadow: 0px 25px 36px 15px rgba(0,0,0,0.36); \n    box-shadow: 0px 10px 36px 15px rgba(0,0,0,0.36);\n    bottom:10px;\n    left: 25px;\n    transform:rotate(-9deg);\n    z-index:-1;\n}\n#fancyShadowExample:after{\n    left: unset;\n    right: 25px;\n    transform:rotate(9deg);\n}\n</style>\n                        \n                        <div id=\"fancyShadowExample\">\n                            <span>Example of fancy shadow</span>\n                        </div>\n                        <div class=\"alert-dark alert\">\n<pre>\ndiv{\n    position:relative;\n    width: 150px;\n    height:250px;\n    background-color:#ebebeb;\n}\ndiv:before,div:after{\n    position:absolute;\n    content:'';\n    width: 75px;\n    height:20px;\n    -webkit-box-shadow: 0px 25px 36px 15px rgba(0,0,0,0.36); \n    box-shadow: 0px 10px 36px 15px rgba(0,0,0,0.36);\n    bottom:10px;\n    left: 25px;\n    transform:rotate(-9deg;);\n}\ndiv:after{\n    left: unset;\n    right: 25px;\n    transform:rotate(9deg;);\n}\ndiv:hover:before{visiblity:visible;}\n</pre>\n</div>\n\n                        \n                        ",'\n                        An information box:\n\n                        <style>\n                        #information-ex{\n                            margin:30px;\n                            width: 250px;\n                            position:relative;\n                            background-color: rgb(200,200,255);\n                            border-left:medium blue solid;\n                            border-radius: 5px;\n                            padding:10px;\n                            padding-left: 50px;\n                        }\n                        #information-ex:before{\n                            position:absolute;\n                            width: 30px;\n                            height:30px;\n                            content:\'!\';\n                            line-height:30px;\n                            text-align:center;\n                            background-color:blue;\n                            color:white;\n                            top:10px;\n                            left:10px;\n                            z-index:2;\n                            border-radius:50%;\n                            \n                        }\n                    </style>\n                    <div id="information-ex">\n                        <span>This box uses before element to display "!"</span>\n                    </div>\n                        <div class="alert-dark alert">\n<pre>\n\n&lt;style>\ndiv{\n    width: 250px;\n    position:relative;\n    background-color: rgb(200,200,255);\n    border-left:medium blue solid;\n    border-radius: 5px;\n    padding:10px;\n    padding-left: 50px;\n}\ndiv:before{\n    position:absolute;\n    width: 30px;\n    height:30px;\n    content:\'!\';\n    line-height:30px;\n    text-align:center;\n    background-color:blue;\n    color:white;\n    top:10px;\n    left:10px;\n    z-index:2;\n    border-radius:50%;\n}\n&lt;/style>\n&lt;div>Info box&lt;/div>\n</pre>                        \n                        </div>\n\n                        ','Pseudo elements may be used to cerate different shapes with only CSS. Here is an example:\n\n                        <style>\n                        #heart{\n                            margin: 30px;\n                            position:relative;\n                            width: 50px;\n                            height: 50px;\n                            background-color:red;\n                            transform:rotate(45deg);\n                        }\n                        #heart:before,#heart:after{\n                            width:50px;\n                            height:50px;\n                            background-color:red;\n                            position:absolute;\n                            border-radius:50%;\n                            content:\'\';\n                        }\n                        #heart:before{\n                            left:-50%;\n                        }\n                        #heart:after{\n                            top:-50%;\n                        }\n\n                    </style>\n                    <div id="heart"></div>\n                        <div class="alert-dark alert">\n<pre>\n&lt;style>\n#heart{\n    position:relative;\n    width: 50px;\n    height: 50px;\n    background-color:red;\n    transform:rotate(45deg);\n}\n#heart:before,#heart:after{\n    width:50px;\n    height:50px;\n    background-color:red;\n    position:absolute;\n    border-radius:50%;\n    content:\'\';\n}\n#heart:before{\n    left:-50%;\n}\n#heart:after{\n    top:-50%;\n}\n\n&lt;/style>\n&lt;div id="heart">&lt;/div>\n</pre>                        \n                        </div>\n\n                        ','Or a speach bubble:\n\n                        </div>\n                        <style>\n                        #speachBubbleEx{\n                            margin: 30px;\n                            width: 150px;\n                            height: 80px;\n                            display:flex;\n                            align-items: center;\n                            justify-content: center;\n                            padding:10px;\n                            background-color: #ededed;\n                            border-radius:10px;\n                            position:relative;\n                        }\n                        #speachBubbleEx:before{\n                            position:absolute;\n                            content:\'\';\n                            width: 0;\n                            height: 0;\n                            border-right: 30px solid #ededed;\n                            border-top: 15px solid transparent;\n                            border-bottom: 15px solid transparent;\n                            top: 10px;\n                            left: -30px;\n                        }\n                        </style>\n                        <div id="speachBubbleEx"> I say...</div>\n                        <div class="alert-dark alert">\n<pre>\n&lt;style>\n#speachBubbleEx{\n    width: 150px;\n    height: 80px;\n    display:flex;\n    align-items: center;\n    justify-content: center;\n    padding:10px;\n    background-color: #ededed;\n    border-radius:10px;\n    position:relative;\n}\n#speachBubbleEx:before{\n    position:absolute;\n    content:\'\';\n    width: 0;\n    height: 0;\n    border-right: 30px solid #ededed;\n    border-top: 15px solid transparent;\n    border-bottom: 15px solid transparent;\n    top: 10px;\n    left: -30px;\n}\n&lt;/style>\n&lt;div id="speachBubbleEx"> I say...&lt;/div>\n</pre>\n\n\n                        ',"Pseudo elements with keyframes animation may be used for a winding effect, where \n                        and element is constatnly winded in one direction (please see my notePad linker for example)","Pseudo elements may be used for aligning purposes"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"cssportal",href:"https://www.cssportal.com/css3-shapes/",description:"More only css shapes examples"}]}]},{summary:"pseudo classes",title:"pseudo classes",searchKeywords:":dir :lang :any-link :link :visited :local-link :target :target-within :scope :hover :active\n        :focus :focus-visible :focus-within :current :past :future :playing :paused :autofill :enabled :disabled \n        :read-only :read-write :placeholder-shown :dafault :checked :indeterminate :blank :valid :invalid :in-range\n        :out-of-range :reequired :optional :user-invalid :root :empty :nth-child :nth-last-child :firslt-child :only-child\n        :nth-of-type :nth-last-of-type :first-of-type :last-of-type :only-of-type",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Pseudo classes"},{elementType:"Paragraph",content:'\n                        <b>Pseudo classes</b> allow to select an element based on its current or history state or position\n                        in DOM tree.\n                        They are not real classes added to HTML, but can be used as <a href="./selectors">css selectors</a>. \n                        For example a <code>:hover</code> pseudo class\n                        allows to select an element that has mouse over it, a <code>div:nth-child(3)</code> pseudo class\n                        allows to select an element that is a third in row child of each div. There is a great \n                        number of pseudo selectors in css, and there is no point in rewriting sources like \n                        <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes" target="_blank">\n                        developer.mozilla</a> webside, so lets focus only on some of them here.\n                    '},{elementType:"Headline-3",content:"Structural pseudo-classes"},{elementType:"Paraghraph",content:"Matches elements based on their position in DOM."},{elementType:"ExplanationList",content:[{headline:":empty",content:"Matches all elements having no children other than white spaces. <b>Beware!</b>\n                            as this matches also elements not capable of having children, like an <code>input</code>."},{headline:":nth-child(x)",content:"Matches an x child of element placed on left of this plesudo selector. If there is nothing\n                            on the left of nth-child pseudo selector, then rule will be applied as if it was <code>*:nth-child</code>\n                            For example:\n                                <ul>\n                                <li key='1'>\n                                    <code>div:nth-child(2)</code> will select all second child elements of each div,\n                                </li>\n                                <li key='3'>\n                                    <code>:nth-child(odd)</code> represents each odd element being a child of something, \n                                </li>\n                                <li key='4'>\n                                    <code>:nth-child(even)</code> each even element being a child of something\n                                </li>\n                                <li key='5'>\n                                    <code>:nth-child(5n)</code> each element that is (indexOfElement modulo 5), so each\n                                    5, 10, 15, 20, 25... 50 ... element being a child of any element\n                                </li>\n                            "},{headline:":first-child",content:"Each element that is a first child of element on the left of pseudo selector.\n                            If no element given, each element will be matched"},{headline:":last-child",content:"Each element that is a last child of element on the left of pseudo selector.\n                            If no element given, each element will be matched"},{headline:":nth-first-child(An+B)",content:"Combines first child with nth child, this would select first of all elements \n                            selected by pattern in brackets notation. Example:\n                            <ul>\n                                <li><code>:nth-first-child(5n)</code> - each 5-th child element</li>\n                                <li><code>:nth-first-child(even)</code> - each second child, as\n                                    even matches each 2n element and <q>first</q> select first of them\n                                </li>\n                            </ul>\n                            "},{headline:":nth-last-child(An+B)",content:"Combines last child with nth child, this would select last of all elements \n                            selected by pattern in brackets notation. Example:\n                            <ul>\n                                <li><code>.target:nth-last-child(5n)</code> - in case there are 34 elements that are a child\n                                of <code>.target</code> then 30-th element would be selected</li>\n                                <li><code>target:nth-last-child(even)</code> - In case of 41 elements being a child of \n                                <code>.target</code> then 40-th element will be selected\n                                </li>\n                            </ul>"},{headline:":only-child",content:"matches elements having only one child,"},{headline:":nth-of-type(An+B)",content:"Matches nth child element of type of element on the left. Example:\n                            <ul>\n                                <li><code>:nth-of-type(n)</code> will match each element in DOM</li>,\n                                <li><code>p:nth-of-type(2n)</code> will match each second 'p' child element in DOM</li>,\n                                <li><code>div:nth-of-type(3n-1)</code> every third -1 element, so 3, 5, 8 ...</li>\n                            </ul>"},{headline:":nth-last-of-type(An+B)",content:"Similar to <code>nth-of-type</code>, however matches element counting from the end:\n                            <ul>\n                                <li><code>#outlet div:nth-last-of-type(7n)</code>In case of 23 div child elements of \n                                element with id 'outlet', items 17, 10 and 3 would be chosen (indexing from 1) </li> \n                                <li><code>p:nth-last-of-type(2n-1)</code> in case of 6 child p elements, items 6, 4, 2 would be\n                                chosen (indexing from 1) </li>,\n                            </ul>"},{headline:":first-of-type, :last-of-type, :only-of-type",content:'As in example:\n                            <ul>\n                                <li><code>#outlet p:first-of-type</code> in case element has\n<pre class="alert alert-dark">\n    &lt;div id="outlet">\n        &lt;span></span>\n        &lt;input/>\n        &lt;p>\n    &lt;/div>\n</pre>    \n                                this p element will be matched, because it is the first of type,</li>      \n                                <li><code>#outlet input:only-type-of</code> in case element has\n<pre class="alert alert-dark">\n    &lt;div id="outlet">\n        &lt;span></span>\n        &lt;input/>\n        &lt;input/>\n        &lt;p>\n    &lt;/div>\n</pre>    \n                                Nothing will be selected, as input is not the only one of its type.</li>                       \n                            </ul>'}]},{elementType:"Headline-3",content:"input pseudo-classes"},{elementType:"Paraghraph",content:""},{elementType:"ExplanationList",content:[{headline:":autofill",content:"Input attribute <code>autocomplete</code> is for displaying a browser added \n                            menu with last used values of certain data type. For example last added e-mail addresses.\n                            This matches an input that was filled by chosing element from this list,"},{headline:":enabled",content:"If input is enabled, can be interacted with,"},{headline:":disabled",content:"If an input is disabled and cannot be inteacted with,"},{headline:":read-only",content:"If element cannot be filled by a user, for example contenteditable is set to false,"},{headline:":read-write",content:"If element can be edited by a user. Also contenteditable set to true,"},{headline:":placeholder-shown",content:"If element displayes a placeholder (a html attribute available only on some inputs, not\n                                on contenteditable),"},{headline:":default",content:"If element is checked by default. Element stayes default even after checking another one,"},{headline:":checked",content:"Checkbox or radio-button if it is currentl checked. This changes when other element is \n                            chosen and becomes checked, unlike in a <code>default</code> pseudo-class, as default element will\n                            not change when interacted,"},{headline:":indeterminate",content:"A checkbox may be in indeterminate state, meatning it is neither true nor false. This is \n                            like a third boolean value, and comes handy when multiple checkboxes are set by a complicated algorithm,"},{headline:":valid",content:"Matches an input with valid value,"},{headline:":invalid",content:"Matches an input that has invalid value,"},{headline:":in-range",content:"Applies to an input with range limitations, thats value is in allowed range,"},{headline:":out-of-range",content:"Applies to an input with range limitations, thats value is out of allowed range,"},{headline:":required",content:"If input, textarea, select has a required attribute,"},{headline:":optional",content:"When input, textarea, select that does not have a required attribute,"},{headline:":user-invalid",content:"An input, textarea, select with invalid input, but only if user interacted wiht it."}]},{elementType:"Headline-3",content:"User action pseudo-classes"},{elementType:"ExplanationList",content:[{headline:":hover",content:"Matches an element if mouse is placed over it"},{headline:":active",content:"Element that is being activated. On button example, active state starts when\n                            mouse button is being pressed, and finishes with mouse button up. May be used to \n                            indicate element is being pressed. Significant with mobile devices, where user does not \n                            hover over an element very often"},{headline:":focus",content:"When element was chosen with a mouse or a tab key"},{headline:":focus-visible",content:"\n                            User agent dependent. Different behaviour when an element is selected with mouse click, and\n                            different when tab key used. Visible on for example a button element."},{headline:":focus-within",content:"Should be used on parent element. If descendant gains focus, this selector matches.\n                            Can be used for example on a <code>form</code> element. When descendants gain focus, form will\n                            change styling."},{headline:":selection",content:"Matches a portion of a document selected by user, for example with press left mouse button and \n                            drag it over selected element."}]},{elementType:"Headline-3",content:"Location pseudo-classes"},{elementType:"ExplanationList",content:[{headline:":link",content:"A not visited link,"},{headline:":any-link",content:"Both: visited and not visited links,"},{headline:":target",content:'\n                            Element that is the target of the link. Useful, when link is on the same page:\n                            <span id="targetControl">\n                            <a href="#targetExample">Try it out</a>\n                            <a href="#" class="clear">Clear</a>\n                            </span>\n                            <style>\n                                #targetParent li:target{background-color: yellow;}\n                                #targetControl a{\n                                    padding:2px;border-radius: 3px;\n                                    display: inline-block;\n                                    background-color: green;\n                                    color: white;\n                                    text-decoration: none;\n                                }\n                                #targetControl a:hover{\n                                    background-color: rgb(155,220,150);\n                                }\n                                #targetControl .clear:hover{background-color:rgb(255,150,150);}\n                                #targetControl a.clear{background-color:red;}\n                            </style>\n                            <ul id="targetParent">\n                                <li>This is not the element</li>\n                                <li id ="targetExample">This is the element</li>\n                                <li>This is not the element</li>\n                            </ul>\n                            '}]},{elementType:"Headline-3",content:"Other"},{elementType:"ExplanationList",content:[{headline:":not(selector)",content:"Selects all elements that do <strong>not</strong> match the given selector.\n                            "},{headline:":host",content:"\n                            In shadow DOM matches the host of a <code>shadow-root</code>. Usable also in Angular for \n                            targeting a component from inner css file.\n                            "},{headline:":host-context(selector)",content:"\n                            In shadow DOM matches the host of a <code>shadow-root</code> only if any ancessor of the host\n                            matches the given selector. May be used to implement a dark theme,\n                            "},{headline:":is(selector, selector)",content:'Takes a selector list, and matches each element in this list. This element counts to\n                            <a href="./#/theory/specifity">specifity</a> as a class, so multiplication 10:\n                            <ul>\n                                <li><code>:is(.danger, .warning, .info) p</code> will match all of <code>.danger p</code>,\n                                <code>.warning p</code>, <code>.info p</code>.</li>\n                            </ul>\n                            '},{headline:":where(selector, selector)",content:"Exectly the same as an <code>is</code> pseudo-class, except for the fact, that\n                            it <strong>counts to specifity as 0</strong>:\n                            <ul>\n                                <li><code>:is(.danger, .warning, .info) p</code> will match all of <code>.danger p</code>,\n                                <code>.warning p</code>, <code>.info p</code>,</li>\n                            </ul>\n                            "},{headline:":first-letter",content:"Selects the first letter of each element,\n                            "},{headline:":first-line",content:"Selects the first line.\n                            "},{headline:":defined",content:"For the CWC: custom web components. If the component is defined with the \n                            <code>window.customElements.define()</code>, this will be selected. In case of \n                            <code>:not(:defined)</code> all not registered elements may be made to be transparent,\n                            "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"},{elementType:"Link",content:"W3schools tutorial",href:"https://www.w3schools.com/css/css_pseudo_classes.asp"}]}]}]},{summary:"tables",title:"tables",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Tables"},{elementType:"Paragraph",content:"\n                            <b>Lorem ipsum</b> dolor sit amet, consectetur adipiscing elit. \n                            Vestibulum et lacinia arcu, ut tempor lacus. Integer euismod, est et pharetra eleifend, \n                            magna nibh congue nulla, eu ornare lacus sem eu leo. Sed aliquet tincidunt neque non tempor. \n                            Sed feugiat, massa at tempus tincidunt, tortor turpis rhoncus orci, nec cursus purus dui vel ipsum. \n                            Sed pellentesque sem nec dictum auctor. Morbi tempus lectus vitae ultrices volutpat. \n                            Vivamus convallis mauris urna. Phasellus rhoncus felis eget mi tincidunt malesuada. \n                            Pellentesque in velit viverra nunc ultrices maximus. Duis in leo dolor.             \n                        "}]}]}];var p=[{summary:"validation",title:"validation",cathegory:"HTML",content:[{elementType:"Article",content:[{elementType:"NoteWarning",content:"\n                        Server side validations should not be ommited, due to front-end hacking possiblities.<br>\n                        There is an <a href='./#/theory/form%20validation%20api' target=\"_blank\"><span> JS\n                         api</span></a> that can be used for validation purposes.\n                        "},{elementType:"Headline",content:"Validating a form with HTML"},{elementType:"Paragraph",content:'\n                            Form fields mey need validation due to whole variety of reasons, from security to problems with \n                            precessing data. That is why web form due to <abbr title="Web Content Accessibility Guidelines">\n                            WCAG</abbr> standarts should inform user what data format sould be used and why data is needed.\n                            There is a possiblity to use HTML and CSS build in features to validate forms. There is an JS api\n                            that can be used in case HTML and CSS does not satisfy our needs.\n                        '}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Input"},{elementType:"Paragraph",content:"\n                            A HTML <code>&lt;input&gt;</code> field is a build in borwser web element for inputting \n                            a whole sort of variety of data. This element will change its apperance and behaviour \n                            depending on its <strong>type</strong> property. These properties may be:\n                        "},{elementType:"UnsignedList",content:['<strong>button:</strong>  <input type="button" value="Button">','<strong>checkbox:</strong>  <input type="checkbox">','<strong>color:</strong>  <input type="color">','<strong>date:</strong>  <input type="date">','<strong>datetime-local:</strong>  <input type="datetime-local">','<strong>email:</strong>  <input type="email">','<strong>file:</strong>  <input type="file">','<strong>month:</strong>  <input type="month">','<strong>number:</strong>  <input type="number">','<strong>password:</strong>  <input type="password">','<strong>radio:</strong>  <input type="radio">','<strong>range:</strong>  <input type="range">','<strong>reset:</strong>  <input type="reset">','<strong>search:</strong>  <input type="search">','<strong>submit:</strong>  <input type="submit">','<strong>tel:</strong>  <input type="tel">','<strong>text:</strong>  <input type="text">','<strong>url:</strong>  <input type="url">','<strong>week:</strong>  <input type="week">']},{elementType:"Paragraph",content:"\n                            There are some more input types not mentioned here. \n                            Please visit references section to learn more.\n                        "},{elementType:"Paragraph",content:"\n                            There is a set of input field vaildation methods available with only HTML or CSS.\n                        "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"HTML vaildation possibilities"},{elementType:"UnsignedList",content:["<code>required='required'</code> can be applied to \n                            <code>text</code>,\n                            <code>serach</code>,\n                            <code>url</code>,\n                            <code>tel</code>,\n                            <code>email</code>,\n                            <code>password</code>,\n                            <code>date</code>,\n                            <code>month</code>,\n                            <code>week</code>,\n                            <code>datetime-local</code>,\n                            <code>number</code>,\n                            <code>checkbox</code>,\n                            <code>radio</code>,\n                            <code>file</code> and <code>&lt;select&gt;</code>, <code>&lt;textarea&gt;</code>\n                            In case this input is not filled, there will be a message displayed\n                            ","\n                            <code>min-length</code> and <code>max-length</code> may be applied to <code>&lt;input&gt;</code>\n                            or <code>&lt;textarea&gt;</code>, and indicates minimal and maximum length in characters.\n                            In case field is not valid there will be a message displayed and form will not be submited.\n                            ","<code>min</code>, <code>max</code> may be applied to:\n                            <code>date</code>,\n                            <code>month</code>,\n                            <code>week</code>,\n                            <code>time</code>,\n                            <code>datatime-local</code>,\n                            <code>number</code>,\n                            <code>range</code>. \n                            In case field is not valid there will be a message displayed and form will not be submited.\n                            ","<code>type</code> indicates what sort of data certain input accepts,","<code>pattern</code> uses a regular expression to specify data that are valid."]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"How to inform user that data is invalid"},{elementType:"Paragraph",content:"\n                            There is a set of CSS pseudoclasses that can be used to inform user about data invalid issue:\n                        "},{elementType:"UnsignedList",content:["<code>input:valid</code>","<code>input:invalid</code>","<code>input:required</code>","<code>input:invalid:required</code>"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation",description:"Tutorial"},{elementType:"Link",content:"Developer mozilla",href:"http://localhost:3000/theory/validation",description:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"}]}]},{summary:"semantic elements",title:"semantic elements",cathegory:"HTML",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Semantic elements"},{elementType:"Paragraph",content:"\n            \n                        "}]}]},{summary:"inputs",title:"inputs",cathegory:"HTML",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Input elements"},{elementType:"Paragraph",content:"\n            \n                        "}]}]}];var m={summary:"form validation api",title:"form validation api",searchKeywords:"valid invalid required pattern long short range input pseudoclasses",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Form validation API"},{elementType:"NoteWarning",content:'\n                        This article is an extention of a <a href="./#/theory/validation" target="_blank">HTML form validation article</a>,\n                        where HTML input elements, validation related CSS pseudoclasses and HTML validation realted\n                        attributes are introduced. If you did not get familiar with that topics please start reading from there.\n                    '},{elementType:"Paragraph",content:"\n                        HTML based validation is usable and in many cases is good enough. However not valid warning message\n                        cannot be styled, or its language cannot be changed (browser default). In order to \n                        alter styling or message content JS <strong>Constraint Validation API</strong> may be used.\n                        This API can be used on folowing elements:\n                        <code>HTMLButtonElement</code> (<code>&lt;button&gt;</code>),\n                        <code>HTMLFieldSetElement</code> (<code>&lt;fieldset&gt;</code>),\n                        <code>HTMLInputElement</code> (<code>&lt;input&gt;</code>),\n                        <code>HTMLOutputElement</code> (<code>&lt;output&gt;</code>),\n                        <code>HTMLSelectElement</code> (<code>&lt;select&gt;</code>),\n                        <code>HTMLTextAreaElement</code> (<code>&lt;textArea&gt;</code>).\n                        <strong>Constraint Validatoin API</strong> makes below properties available on listed elements:\n                    "},{elementType:"UnsignedList",content:["\n                    <code>validationMessage</code>: Message that will be displayed when input is invalid. In case\n                    input is valid this will be empty string. This property needs to be set by <code>setCustomValidity()</code>\n                    method\n                    ","<code>willValidate</code>: <code>true</code> if element will be validated when form is submitted, \n                    <code>false</code> if not.","<code>validity</code>: This will return validity state of element. This will return one of the following:\n                    <ul>\n                        <li><code>patternMismatch</code> corresponding to <code>pattern</code> property in HTML, validated with regExp,\n                        <li><code>tooLong</code> corresponding to <code>max-length</code> property in HTML, will be true if length is \n                        longer than expected. If length is too short this will still be false</li>\n                        <li><code>tooShort</code> corresponding to<code>min-length</code> property in HTML, will be true if length is\n                        shorter than expected. If length is too great, this will still be false</li>\n                        <li><code>rangeOverflow</code> corresponding to <code>max</code> property in HTML. Will be true if \n                        value in input field is greated than expected. If value is below expected value this will be false</li>\n                        <li><code>rangeUnderflow</code> corresponding to <code>min</code> property in HTML. Will be true if \n                        value of corresponding input field is not large enough, but will be false if value is too great</li>\n                        <li><code>typeMismatch</code> corresponds to HTML <code>type</code> property. \n                        will be true if value is in not proper syntax (eg. eMail or URL)</li>\n                        <li><code>valueMissing</code> corresponds to HTML <code>required</code> property. Will be true if \n                        corresponding field is empty.\n                        <li><code>valid</code> is true if all validation constraints are met</li>\n                    </ul>\n                    "]},{elementType:"Paragraph",content:"\n                    There is a set of methods that can be used with a <code>&lt;form&gt;</code> element:\n                    "},{elementType:"UnsignedList",content:["<code>checkValidity()</code>: forces validity check, returns true if field is valid, false if not.\n                        Can be used for example in input event listener","<code>reportValidity()</code>: returns true if all form input fields are valid, or false if at\n                        least one of them is not valid","<code>setCustomValidity(message)</code>: if message is a not empty string this will make\n                        validation error custom message appear on screen. This may be used to customize error message.\n                        If message is an empty string then message will not show up on the screen"]},{elementType:"Code",content:"\n<pre>\n  &lt;form>\n    &lt;input type=\"number\" id=\"number\" min=\"5\">\n    &lt;button>Submit</button>\n &lt;/form>\n\n const nrBox = document.querySelector('#number');\n const submitButton = document.querySelector('button');\n submitButton.addEventListener('click', (e)={\n     if(nrBox.vlidity.rangeUnderflow) e.target.setCustomValidity('Number is too small')\n     else e.target.setCustomValidity('');\n })\n</pre>                        \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"<form nonvalidate>"},{elementType:"Paragraph",content:"\n                    This property set on a form element will prevent build in validity check, and will prevent \n                    messages from informing what box is invalid. Hovewer css pseudoclasses like <code>:invalid</code> \n                    will still function. This allows user to customize not only messages, but also their form.\n                    Elements for displaying validation results may be placed in DOM, and filled in event listeners\n                    with customized code. For example please refer to references section of this article.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation",description:"Tutorial"}]}]};var u={summary:"DOM access methods",title:"DOM access methods",cathegory:"js",searchKeywords:"DOM getElementById getElementsByTagName querySelectorAll, getElementByClassName getElements \n    document.froms document.images document.title, document.cookie document.referrer createElement appendChild prepend\n    removeElement baseURI childNodes firstChild lastChild nextSibing previousSibling nodeName value type parentNode parentElement\n    cloneNode hasChildNodes appendCHild inserBefore isEqualNode isSameNode removeChildNode shadow innerHTML inserAdjacentHTML\n    DocumentFragment fagment",content:[{elementType:"Article",content:[{elementType:"Headline-2",content:"What is DOM?"},{elementType:"Paragraph",content:"\n                        DOM stands for <strong>Document Object Model</strong> and is a tree based representation of \n                        XML and HTML documents. In HTML DOM consists of a root Document object, that has \n                        a &lt;html> child, and &lt;html> has &lt;head> section and &lt;body> section. All elements\n                        visible on web page are situated in DOM. Each browser gives a set of useful methods that \n                        can be used to find and access elements in DOM. \n                    "},{elementType:"Headline-2",content:"Getting to DOM elements"},{elementType:"UnsignedList",content:["\n                    <code>getElementById('someId')</code>: id is a html attribute, that should be unique in whole document.\n                    This method returns an element with specified Id.\n                    ","<code>getElementsByTagName('someTag')</code>: allows to find an NodeList of all elements with specified\n                    tag name in subtree. Example tags in HTML are: <code>p</code>, <code>html</code>, <code>div</code>,\n                    <code>span</code>, <code>form</code>. There is no necessity to search whole DOM tree starting from\n                    a <code>document</code> root node, as \n                    <code>document.getElementById('someId').getElementsByTagName('p')</code> will find all <code>p</code>\n                    elements that are nested in element with id equal to 'someId'. So if we have <code>document.getElementById('someId')\n                    </code> stored in some variable already, we may start from already fonund element <code>someElement.document.getElementsByTagName...</code>","<code>querySelector('.css-selector')</code>: this method allows user to find a NodeList with\n                     <b>first element</b> matching specified <a href=\"./#/theory/selectors\">css selector</a>.","<code>querySelectorAll('.css-selector')</code>: this method returns a NodeList of elements matching\n                    specified <a href=\"./#/theory/selectors\">css selector</a> in whole subtree.","<code>getElementsByClassName('class-name')</code>: will return a NodeList of all elements having \n                    specified class","<code>getElementsByName('name')</code>: will return a NodeList of all elements having name attribute\n                    equal to name speficied as argument passed to this method","<code>element.closest('cssSelector')</code> Searches for a first parent of element, that matches \n                    the given css selector,","<code>element.matches('cssSelector')</code> ture if element would be selected by the given css selector,","<code>document.forms['someFormId']</code>: forms is a read only HTMLCollection of all forms in the document","<code>document.images</code>: readonly collection of all <code>img</code> elements in a document.","<code>document.title</code>: title element in head document. This is displayed in browser tab. Can be \n                    changed with this attribute","<code>document.cookie</code>: perhaps not related to DOM, but useful, all cookies related to this page,","<code>document.referrer</code>: also not DOM related, but returns a page that linked to current page, or null\n                    if page was accessed directly.","<code>document.querySelecotr('iframe').dontentDocument.querySelector()</code> for accessing an \n                    iframe method,"]},{elementType:"Headline-2",content:"Creating, removing, adding DOM elements, moving elements to another pareng"},{elementType:"UnsignedList",content:["\n                    <code>document.createElement('tagName')</code>: will create an element specified by a tag.\n                    This will not add element to DOM.\n                    ","<code>someElement.appendChild(createdElement)</code>: will add already created element as a last\n                    child of someElement","<code>someElement.prepent(setOfNodeObjects)</code>: inserts a set of Node objects before first child\n                    of <i>someElement</i>",'<span class="bg-warning"><code>newParent.appendChild(oldParent.childNodes[0])</code> moves an <code>child.Nodes[0]</code>\n                    element to the new parent,</span>',"<code>someElement.removeElement()</code>: removes element.","<code>element.appendChild.document.adoptNode(targetNodeFromIframe)</code> is for \n                    moving a node to the different document."]},{elementType:"Headline-2",content:"Classes"},{elementType:"Paragraph",content:"<code>class</code> is a html attribute, that may be added to any web page element.\n                    It holds a list of classes, that may be used as css selectors and used for styling purposes.\n                    There is a comfortable api for accessing and modyfing a class list: <code>classList</code>"},{elementType:"UnsignedList",content:["\n                    <code>element.classList</code>: a read only DOMTokenList, a list of classes attached to the element,\n                    ","<code>element.classList.add(someClass)</code>: adds a new element to element class list, if the\n                    someClass already exists, then does nothing,","<code>element.classList.remove(someClass)</code>: removes the someClass from elements class list. If\n                    class is not present, then does nothing,","<code>element.classList.toggle(someClass[, force])</code>: In case force flag is not defined,\n                    adds someClass in case the class is not present in the class list, or removes the class if it \n                    was present in class list. In case force is set to true, then adds class to the element if it is \n                    not present and does not remove it in case it is present, in case force is set to false, removes \n                    the element in case it is present, but does nothing if element is already absent","<code>element.classList.item(index)</code> returns the class under the target index","<code>element.classList.contains(someClass)</code> returns true if element has target class, and \n                    false in other case."]},{elementType:"Headline-2",content:"Node - abstract class"},{elementType:"Paragraph",content:"\n                        This is an abscract class, so has no instances. However other classes may extend Node class.\n                        For example HTMLElement extends Node class and inherits its behavoiurs and methods.\n                        Node has following properties:\n                    "},{elementType:"UnsignedList",content:["<code>Node.baseURI</code>: returns a string containing a base URL of document","<code>Node.childNodes</code>: returns a NodeList containing children of node or null.\n                        This returns also text and comments, and as this is a live node, all changes will ba updated","<code>Node.firstChild</code> returns a first direct child node of target element,  or null\n                        in case there are no children.","<code>Node.lastChild</code> returns a last child of target node","<code>Node.nextSibling</code> returns a next to current node child of parent node","<code>Node.previousSibling</code> returns a previous child node of current nodes parent, or null.","<code>Node.nodeName</code>: returns either node name in capital letters ('DIV') or <code>#document</code>,\n                        or <code>#text</code in case of text node.","<code>Node.value</code>: returns a value under <code>value</code> attribute of target node, or null if element\n                         has no value attribute.","<code>Node.type</code>: returns a number representing what is the type of current node: \n                            <ul>\n                            <li><code>ELEMENT_NODE</code>: 1</li><li><code>ATTRIBUTE_NODE</code>:2</li>\n                            <li><code>TEXT_NODE</code>: 3</li><li><code>CDATA_SECTION_NODE</code>: 4</li>\n                            <li><code>PROCESSING_INSTRUNCTION_NODE</code>: 7</li><li><code>COMMENT_NODE</code>: 8</li>\n                            <li><code>DOCUMENT_NODE</code>: 8</li><li><code>DOCUMENT_TLYPE_NODE</code>: 10</li>\n                            <li><code>DOCUMENT_FRAGMENT_NODE</code>: 11</li>\n                            </ul>\n                        ","<code>Node.parentNode</code>: returns a parent <strong>Node</strong> of current node, or null in case there is no parent.","<code>Node.parentElement</code>: returns a parent <strong>Element</strong> of current node, or null in case no parent.","<code>Node.textContent</code>: returns/<strong>sets</strong> text content of element and descendants. <strong>\n                        This will set text content, so <code>element.textContent = '&lt;div>'some content&lt;/div>'</code> will not\n                        create a div, but will insert this text literaly.</strong>","<code>Node.cloneNode(deep)</code>, deep is an optional parameter. If true node and its content will be clonde \n                        recursively with all descendants, if false then sahllow clone of current node will be made. <strong>Beware, \n                        as id attributes will be cloned</strong>. New clonded node will be returned.","<code>Node.hasChildNodes()</code>: true if node has child nodes, else false.","<code>Node.appendChild()</code>: known from previous section, adds target node as last child of current node.\n                        <strong>If target node points to a node attached to DOM, this node will be detached from previous position and\n                        attached to new one</strong>\n                        ","<code>Node.insertBefore()</code> inserts node given as argument before current node under current nodes parent.","<code>Node.isEqualNode()</code> compares current node with given target node. Compares types and defining data.","<code>Node.isSameNode()</code> true if target node given as argument and current node are the same nodes","<code>Node.replaceNode()</code> swaps current node with target node","<code>Node.removeChildNode()</code> removes target node if it is a child of current node."]},{elementType:"Headline-2",content:"Beware - unwanted text nodes"},{elementType:"Code",content:'\n<pre>\n    &lt;!-- A --\x3e\n    &lt;div id="Aparent">\n        &lt;div id="Achild-1">\n        &lt;div id="Achild-2">\n        &lt;div id="Achild-3">\n    &lt;/div>\n\n    &lt;!-- B --\x3e\n    &lt;div id="Bparent">&lt;div id="Bchild-1">&lt;div id="Bchild-2">&lt;div id="Bchild-3">&lt;/div>\n    &lt;script>\n        const parentA = document.getElementById(\'Aparent\');\n        const parentB = document.getElementById(\'Bparent\');\n    &lt;script>\n</pre>                    \n                    '},{elementType:"Paragraph",content:"\n                    What is the difference between those snippets? Output of <code>parentA.childNodes</code>\n                    will be [<code>text</code>, <code>div#Achild-1</code>, <code>text</code>, <code>div#Achild-2</code>,\n                    <code>text</code>, <code>div#Achild-3</code>, <code>text</code>], where <code>parentB.childNodex</code>\n                    will produce [<code>div#Bchild-1</code>, <code>div#Bchild-2</code>, <code>div#Bchild-3</code>],\n                    so in filst examplet there are additional text nodes added. First code was written with new line \n                    symbols after each <code>div</code> element for readebility, but this gives unwanted side effect\n                    not every one is avare of, as this new line symbols become additional text nodes.\n                    In second example there are no extra spaces and no extra new line symbols. It is not as easy to read \n                    this code, but no extra nodes added.\n                    "},{elementType:"Headline-2",content:"\n                    Shadow DOM\n                    "},{elementType:"Paragraph",content:"\n                    Usualy css rules apply to all elements in document. But if encapsulation is needed (for\n                    example a reusable component working with many pages and not interfering with existing css) is \n                    , there is a possiblity to create a <q>shadow DOM</p> inside DOM.\n                    Shadow DOM will be encapsulated. CSS inside shadow DOM will not affect DOM css rules,\n                    and css rules from document will not be applied to shadow DOM elements. Moreover it will not \n                    be possible to find elements inside a shadowRoot with DOM searching methods launched on \n                    <code>document</code>. To search a shadow DOM <code>shadowHost.shadowRoot.querySelectorAll...</code>\n                    needs to be used. So all DOM searching methods will have to be called from <code>shadowHost.shadowRoot</code>\n                     where shadowHost is a element hosting shadow DOM. To learn more about encapsulation and how to use shadow\n                     best way is to read about <strong>custom web components</code> - please go to references section.\n                    "},{elementType:"UnsignedList",content:["<code>let shadow = element.attachShadow({mode: 'open'/'close'})</code> to create a shadow DOM element.\n                        ","With mode open there is a possiblity to acces shadowDOM with <code>hostElement.shadowRoot</code>,\n                        when mode is closed there will be no possiblity to manipulate shadow DOM. Of course there is a way around\n                        it, but it is not straight forward."]},{elementType:"Paragraph",content:"\n                    Creating shadow DOM.\n                    "},{elementType:"Code",content:"\n<pre>\nconst someElement = document.createElement('div');\nconst shadowRoot = someElement.attachShadow({mode:'open'});\nshadowRoot.innerHTML = `&lt;style>...&lt;style>&lt;div> ... &lt;/div>`\n</pre>                    \n                    "},{elementType:"WarningNote",content:"Not every node can host a shadow root. For example an input cannot."},{elementType:"Headline-2",content:"Creating a element from a HTML string"},{elementType:"UnsignedList",content:["<code>element.innerHTML=stringWithHTML</code>","<code>element.insertAdjacentHTML('beforeend', stringWithHTML)","create a document fragment and append it to the DOM"]},{elementType:"Code",content:"\n<pre>\nlet elementToAdd = docuemnt.createRange().createContextualFragment(strHTML);\nhostElement.appendChild(elementToAdd)\n</pre>                    \n                    "},{elementType:"Headline-2",content:"Document fragment"},{elementType:"Paragraph",content:"\n                    In case a part of document (a component) needs to be created and added to DOM it is good to \n                    create this document part outside DOM, and add it at once. This is due to fact, that \n                    DOM manipulation is not cheap. In this case it is good to create a <i>document fragment</i> and\n                    attach its content to DOM when finished. Document fargment is similar to DOM, the difference is\n                    it will not be visible untill not attached to DOM, and it has less manipulation methods.\n                    "},{elementType:"UnsignedList",content:["<code>DocumentFragment()</code> creates and returns a new DocumentFragment object,","<code>DocumentFragment.childElementCount</code> returns the ammount of children","<code>DocumentFragment.children</code> returns a HTMLCollection of children","<code>DocumentFragment.firstElementCHild</code> returns first child,","<code>DocumentFragment.lastElementChild</code> returns last child","<code>DocumentFragment.append(element)</code> inserts element after last document fragment child","<code>DocumentFragment.prepend(element)</code> inserts element before first document fragment child","<code>DocumentFragment.querySelector()</code> returns first node matching css selector,","<code>DocumentFragment.querySelectorAll()</code> returns a NodeList of all nodes from \n                        document fragment matching css selector","<code>DocumentFragment.replaceChildren()</code> replaces all children of the document fragment\n                        with new set of elements","<code>DocumentFragment.getElementById()</code> returns element with matched id"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"w3.org",href:"https://www.w3.org/TR/2000/WD-DOM-Level-2-HTML-20001113/html.html#ID-1689064",description:"Description of some DOM interfaces"},{elementType:"Link",content:"developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode",description:"Node abstract class description"},{elementType:"Link",content:"developers google",href:"https://developers.google.com/web/fundamentals/web-components/customelements",description:"About custom web components"}]}]};var h={summary:"server communication",title:"server communication",searchKeywords:"XMLHttpRequest SSE Server-Send Event WebSocket \n    HTTP HTTPS GET POST PUT HEAD DELETE TRACE OPTIONS CONNECT PATCH SSL TSL",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Server side communication"},{elementType:"Paragraph",content:"\n                    A pure front-end application might do some work, but it must be served in some way. However \n                    modern programming is cloud/web based, so there is a sort of a client side code and data \n                    is provided by a server. That is why understanding client-server side communication is necessary\n                     "},{elementType:"Paragraph",content:"\n                    It is more and more difficult to find a web page based on HTTP, as due to security reasons \n                    we got a HTTPS era. However understanding HTTP is a must, as HTTPS = HTTP + TLS or SSL, in\n                    other terms this is still HTTP, but wrapped in another protocol, Transport Layer Security (formerly\n                    known as Secure Sockets Layer). In other words HTTP is wrapped in a secure protocol at another layer.\n                    \n                     "}]},{elementType:"Article",content:[{elementType:"Headline-3",content:"HTTP overwiev"},{elementType:"UnsignedList",content:["<strong>URI</strong>: Uniform Resource Indicator. URI = URN + URL,","<strong>URL</strong>: Uniform Resource Locator, tels where a specific resource is located, does\n                    not refere to it by the name.","<storng>URN</strong>: Unifrom Resource Name, refers to the specific name of the resource, not \n                    telling mutch where to look for this resource. Example: <i>urn:isbn:0-486-27557-4</i>,","<strong>IRI</strong>: International Resource Identifier, extends URI with national languates other\n                    then English. Can be used instead of URI or URL in applications supporting IRI."]},{elementType:"Paragraph",content:"\n                        URI and URL are often used interchangebly, but they are not the same. Here we will concentrate on \n                        URL. Lets parse an example: \n                        <i><pre>http://www.some-page.pl:8080/catalog/some%20file?parameter1=value&parameter2=val2#document_fragment</pre></i>\n                    "},{elementType:"UnsignedList",content:["<code>http</code>: A protocol field. In this case the \n                    Hypertext transfer protocol, an application layer protocol (layer 7 of OSI, and layer 4 of TCP/IP model),\n                    that is used to transfer documents as text. Other protocol type in this field might be eg. ftp,","<code>www.some-page.pl</code> is domain name. This will be send to DNS server to extract IP from it,","<code>:8080</code> is a port number. As <code>www.some-page.pl</code> is a server location (like a city, street\n                        and flat number), port is a concrete application address. Application query is addressed to listens to requests\n                        on port 8080. This may be considered a certain person reachable under a city, \n                        street and number of flat address. If this is ommited in URL, it does not mean it is not present. It may be\n                        for example set by dafault. It is an important field, as a server always listens on some port,","<code>/catalog/some%20file</code> is a detailed resource location. Years ago (90s), when web pages were based on static model,\n                    this was an exact location of a html file that was to be served. \n                    In present times this is just a route. This route might be resolved by a server,\n                    but front end applications are also capable of resolving routes like this. URL accepts no spaces, so <code>%20</code> is \n                    URL encoded space symbol,","<code>?</code> is a separator, dividing URL into location section and a query section,","<code>parameter1=value</code> here we set the <code>parameter1</code> to <code>value</code>,","<code>parameter2=val</code> here some parameter <code>parameter2</code> is set to value of <code>val</code>. Both\n                    parameters are joined with a <code>&</code> separator,","Query section between <code>?</code> and <code>#</code> indicate, that URL does not point to a static html file, but\n                    to a resource route that is resolved dynamically,","<code>#document_fragment</code> is a concrete document fragmet that browser will rewind to after DOM is displayed.\n                    If someone is familiar with css selectors this may look familiar, as this is equal to a <code>[attr=id]</code> selector,","URL encoding is genius, as it is capable of encoding any data, including images."]},{elementType:"Paragraph",content:"\n                    HTTP supports a banch of request methods:\n                    "},{elementType:"UnsignedList",content:["<code>GET</code>: a method capable of only fetching data from a server,","<code>PUT</code>: update an existing resource, or create a new resource and add data to it, if\n                        resource does not exist,","<code>POST</code> creates a new resource and adds data to it. Difference between POST and PUT is,\n                        that POST is designed to always create a new resource and add data, where is PUT is designed to \n                        update data, and creates a resource if needed. So if resource exists PUT is the right method,","<code>HEAD</code> fetches only resource metadata, so no content, no body. May be used to peep if \n                        a resource is worth downloading or to allow a user to decide if it is worth downloading,","<code>DELETE</code> deletes a specified resource,","<code>CONNECT</code> is for creating a tunnel to the server identified by the target resource,","<code>OPTIONS</code> is for describing communication options for the target resource,","<code>TRACE</code> message loop-back test along the path of the target resource,","<code>PATCH</code> partial modificatoins to a resource."]},{elementType:"Headline-3",content:"Responses"},{elementType:"UnsignedList",content:["<strong>201: Created</strong>: as a response to POST or some PUT, \n                            resource was created as a result","<strong>203 Non-Authoritive Information</strong>: server got a third-party data copy. Case of 200 OK,","<strong>303 See other</strong>: server wants client to get request resource at another URI wit \n                        GET,","<strong>304 Not modified</strong>: Resource was not modified, so client should user cached version,","<strong>400 Bad request</strong>: server could not understand the request due to invalid syntax,","<strong>401 Unauthorized</strong>: Client must authenticate to get the requested response, client identity\n                        is not known to a server,","<strong>403 Forbidden</strong>: Clients identity is known to a server and client has no access rights,","<strong>404 Not found</strong>: Resource not exists. Server may chose to hide its topology by sending a \n                        403 - forbidden instead. This is most used and known code. It is good to design a custom page to \n                        display this error, and give possiblities/existing redirections there. If a static server is used, \n                        then a <code>404.html</code> page may be placed in base folder, and it will be loaded when needed,","<strong>405: Method not allowed</strong>: method is known to a server, but not allowed for the resource,\n                        for example the DELETE method may be forbidden to use on a specific resournce,","<strong>408 Request Timeout</storng> server would like to close unused connection,","<strong>409 Conflict</strong> request is in conflict with the current server state,","<strong>410 Gone</strong> resource is gone, so cached data should be removed, API should not be used anymore,","<strong>418 I'm a teapot</strong> The server refuses the attempt to brew coffee with a teapot. This is aprils fool month\n                        1998 joke :), but it really exists in standard,","<strong>429 Too many requests</stron>: client send too many requests in too short ammount of time,","<strong>451 Unavailable For legal reasons</strong>: page may be censored,","<strong>500 Internal server error</strong>: server encountered a situation it does not know how to handle","<strong>501 Not Implemented</strong>: server has no support for this method,","<strong>502 Bad Gateway</strong>: server working as a gateway got invalid response,","<strong>503 Service unavailable: </strong>: server cannot handle a request at the moment, as it is \n                         in maitenance or is overloaded. Some frilendly page should be displayed at this moment","<strong>504 Gateway Timeout</strong>: server acting as a gateway did not get a response in expected time,","<strong>508 Loop detected</strong>: Server went into an infinite loop while processing the request,","<strong>511 Network authentication required</strong>: Client needs to authenticate to gain network access,"]},{elementType:"Paragraph",content:"There are much more resopnses, and above list is just a snippet. To see all available request\n                    please go to the reference section"}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Static and dynamic"},{elementType:"Paragraph",content:"\n                        JS history started in 1996 with netscape. However before JS started becomming more popular\n                        internet pages were build as static resources. There was a folder structure, and HTML files.\n                        Pages were linked together with <code>a href</code> links. Today this approach is also \n                        possible, but pages bigger than just a one html file would not be maintainable. That is why\n                        there are other solutions. However serving static pages is still good enough for some \n                        simpler content, as JS and CSS files may be served this way. Moreover applicatoin may be \n                        build in a framework like Angular or with React and served as static files. The drwaback is \n                        however no server side, as server in this solution does not more than just serve ready files.\n                        There is no way to store data on server or exchange it between client computers. \n                        I wrote a notePad application, that can store user notes on pages, that are then grouped in \n                        sheet components. Moreover this application has a build in calendar enabling to store and manage\n                        events, and a feature allowing easy store and search user added links. Quite usable functionalities,\n                        but this is just a static page, so user data may be saved to the browser memory, or exported to a file.\n                        This data will not be synchronized even between two browsers on the same machine.</br>\n                        My notePad application uses routing system, so although it is a client site application, link in\n                        browser address bar changes when a user switches between linker, calendar and notePad. Such SPA applications\n                        are capable of parsing queries passed with URL, so it may be difficult to say if this is really only\n                        a static application.\n                    "},{elementType:"Paragraph",content:"\n                        Nowadays static servers may serve js, css and html files. They may also serve SPA. \n                        Drawback is no real server side support, as\n                        server only sends files, and does not share client data.\n                    "},{elementType:"Paragraph",content:"\n                        <strong>SPA</strong>, or a single page application is a web page quite similar to native \n                        applications. Only one HTML file is uploaded form a server, and this HTML file is modified \n                        later on with JS, so DOM may be changed entirely. You want to send a friend a link directing to a \n                        certain location is SPA? This is possible thanks to described above routing mechanism. Even \n                        http queries may be passed with URL. Does this mean SPA is a static file page? Not at all. It may be,\n                        but does not have to be. It is not efficient to download all data at once, as it will take ages and\n                        some data may be even restricted. So SPA allows user login, and lazy loading (download content only\n                        if it is needed). Mentioned Angular and React are good for creating such apps. SPA may be serverd as\n                        a static content, but may also be an application that works dynamically.\n                    "},{elementType:"Paragraph",content:"\n                        So what does dynamic server do? Sometimes it may be difficult to see this from a client perspective,\n                        as staticly served applicatoin may have lazy loaded <b>files</b> and respond to route queries. However \n                        word <i>files</i> is a key here. Dynamic server will respond to routes, and will not just serve \n                        whole files. It will serve data. So either ready HTML content, or data as for example json or XML, \n                        so client side may parse it and create some view content out of it. Server will make queries to \n                        data base, will make some calculations and send ready results, will make it possible to identify a \n                        user and send data if the user is authorized to use this data, and will store data for the user, so it is \n                        available on other machine. In other words server gets an URI and responds to it with data, not just\n                        with a static file. This is like working with an API.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"HTTPS"},{elementType:"Paragraph",content:"\n                        HTTP has a serious drawback. Lets consider user login:\n                        <i>http://some-portal.pl/login?user=johnDoe&password=myPass11</i>.\n                        After reading section about URL it is not hard to guess, that \n                        login is <i>johnDoe</i> and password is <i>myPass11</i>. So getting \n                        data passed with HTTP is not hard at all, and data passed with HTTP\n                        is not safe at all. That is why HTTP is wrapped in the TLS protocol to encript it \n                        and make things a lot more complicated. It is not important from client side what sort\n                        of communication is used. Both http and https will be handled in the same way.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Communication methods"},{elementType:"Headline-3",content:"WebSocket"},{elementType:"Paragraph",content:"\n                        Enables establishing a full-duplex connection stream between a client and a server.\n                        Ws protocol is platform independant, but in this case client is the browser. \n                        WebSocket opens a connection with a server, so communication is handled with\n                        events, making it redundant to send requests over and over again. WebSocket\n                        provides:\n                    "},{elementType:"UnsignedList",content:["Low latency in both directions,","Interoperability with HTTP,","Message oriented communication,","Event driven approach","Same origin policy enforcement","After establishing a connection with HTTP, webSocket switches to the WebSocket protocol."]},{elementType:"Paragraph",content:"\n                        Sample server side snippet:\n                    "},{elementType:"Code",content:"\n<pre>\nconst WebSocketServer = require('ws').Server\nconst wss = new WebSocketServer({ port: 8081 });\nwss.on('connection', ((ws) =&gt; {\nws.on('message', (message) =&gt; {\nconsole.log(`received: ${message}`);\n});\nws.on('end', () =&gt; {\nconsole.log('Connection terminated.');\n});\nws.send('Data from server');\n}));\n</pre>                        \n                    "},{elementType:"Paragraph",content:"\n                        And a client side snippet:\n                    "},{elementType:"Code",content:'\n<pre>\nvar ws = new WebSocket("ws://127.0.0.1:8081");\nws.onopen = function (event) {\nconsole.log(\'Connection oppened\');\nws.send("Data from client");\n};\nws.onerror = function (err) {\nconsole.log(\'error: \', err);\n}\nws.onmessage = function (event) {\nconsole.log(event.data);\n};\nws.onclose = function() {\nconsole.log("Connection closed");\n}\n</pre>                        \n                    '},{elementType:"Paragraph",content:"WebSocket browser side API description:"},{elementType:"UnsignedList",content:["<code>ws = new WebSocket(url, protocols)</code> is for establishing a connection to an\n                        <i>url</i>. <i>protocols</i> is a string or an array of strings listing sub-protocols that may \n                        be negotiated with the server. Server will pick one of those sub-protocols. Sub-protocols\n                        are custom user implemented subprotocols for exchanging eg. metadata. This field may be left \n                        empty. A <i>protocols</i> field has no effect on WebSocket protocol itself.","<code>ws.send('some data')</code> will send data to a server once a connection is established","<code>ws.readyState</code> indicates in what is the state of the web socket object. \n                        <ul>\n                            <li><strong>0: CONNECTING</strong> A socket was created, but the connection is not yet open,</li>\n                            <li><strong>1: OPEN</strong> ready to communicate,\n                            <li><strong>2: CLOSING</strong> connection is being closed,\n                            <li><strong>3: CLOSED</strong> connection is closed and could not be opened.\n                        <i>OPEN</i>\n                        </ul>","<code>ws.onopen = function(event){}</code> this is an event handler for on open event,","<code>ws.onerror = function(event){}</code> this is an event handler for an error,","<code>ws.close()</code> this <b>must</b> run on connection end,","<code>ws.onclose = function(event){}</code> is an event handler launched when connection is closed,","<code>ws.onmessage = function(event){}</code> is an evnet handler that will be run when a \n                        message occures,","<code>ws.protocol</code> is a protocol that was chosen by the server,","<code>ws.url</code> the absolute URL of the WebSocket.","<code>ws.binaryType</code> property that controls the type of binary data received,","<code>ws.bufferedAmount</code> a number of bytes of queued data,"]},{elementType:"NoteWarning",content:"\n                    Number of WebSocket connections may be limited for the whole browser up to 6 instances.\n                    "},{elementType:"Headline-3",content:"SSE or Server Send Events"},{elementType:"Paragraph",content:"\n                        An event based low latency one way connection communication technology. Allows server to update data \n                        on client side. No possibility to send data back to server. If needed other server-client \n                        communication means may be used. Hmm... Better using web-socket, as it provides \n                        bi-directional communication? Not quite, as SSE provides some unique features, like automatic reconnection,\n                        event ids and ability to send arbitrary events.\n                    "},{elementType:"Paragraph",content:"\n                        Example usege on client side:\n                    "},{elementType:"Code",content:"\n<pre>\nconst eventSource = new EventSource(\"//someApi.com/example.php\", {withCredentials: true});\neventSource.onmessage = function(event){\n    let elementToBeUpdated = document.getElementById('to-be-updated-id');\n    elementToBeUpdated.innerText = event.data;\n}\n</pre>                        \n                    "},{elementType:"Paragraph",content:"\n                        And thats it. Data will be updated in this element automatically. No need to worry about it.\n                        Below a short API descriptoin is added:\n                    "},{elementType:"UnsignedList",content:['<code>eS = new EventSource("//someAPI.com", conf) </code> is a constructor\n                        returning a SSE object. It takes and URL of our connection endpoint, and a <code>conf</code>\n                        that is an optional field being an object, and having only <code>withCredentials</code> property,\n                        that is by default set to false,\n                        ',"<code>eS.onmessage = function(event){}</code> handler for an message source event,","<code>eS.addEventListener.('customEvent', handler)</code> adds a custom event listener to\n                        an event source","<code>eS.onError = function(err)</code> an error handler,","<code>eS.close()</code> connection has to be closed by a client side if not used anymore."]},{elementType:"Headline-3",content:"XMLHttpRequest"},{elementType:"Paragraph",content:"\n                        XMLHttpRequest enables browser script data transfer with JS. It may be used to serve not \n                        only XML, but also JSON, binary and so on. XMLHttpRequest should be used asynchronously, not to \n                        block side interactions. Most simple usege would be:\n                    "},{elementType:"Code",content:"\n<pre>\nvar req = new XMLHttpRequest();\nreq.open('GET', 'http://some-example.com/', false); // false -> not async\nreq.send(null);\nif(req.status == 200)\n  dump(req.responseText);\n}\n</pre>                        \n                    "},{elementType:"Paragraph",content:"\n                        XMLHttpRequest should be used as an async function, so page is not blocked with request:\n                    "},{elementType:"Code",content:"\n<pre>\nvar req = new XMLHttpRequest();\nreq.open('GET', 'http://some-example.com/', true); // true -> an async request\nreq.onreadystatechange = function(asyncEvent) {\n    if(req.readyState == 4) {\n        if(req.status == 200) dump(req.responseText);\n        else console.error('An error with side loading occured');\n    }\n}\nreq.send(null);\n\n</pre>                        \n                    "},{elementType:"Paragraph",content:"\n                        There is a set of properties, event handlers and methods that can be used with XMLHttpRequest:\n                    "},{elementType:"UnsignedList",content:["<code>onprogress = function f(event)</code>: An event handler. Given event has properties \n                        <code>event.position</code> for\n                        indicating how much data is already downloaded, and <code>event.totalSize</code> to state\n                        how much data has to be downloaded.","<code>onerror = function f(event)</code>: for handling an error, <code>e.target.status</code>\n                        indicates a HTTP status of error,","<code>onabort</code> function that will be called if reequest is cancelled by the user,","<code>onload</code>: will be called when the request is successfully completed,","<code>onreadystatechange</code>: an event handler called whenever the readyState attribute changes,","<code>onloadend = function f(event)</code>: when load ends","<code>ontimeout = function f(event)</code>: when response does not meet time constraints","<code>overrideMimeType(newMimeType)</code>: used to force a new mime type on handled document,","<code>readyState</code>: \n                            <ul>\n                                <li><strong>0: UNSET</strong> no open() method called yet,</li>\n                                <li><strong>1: OPENED</strong> open() was called already,</li>\n                                <li><strong>2: HEADERS_RECEIVED</strong></li>\n                                <li><strong>3: LOADING</strong></li> downloading, responseText holds partial data,</li>\n                                <li><strong>4: DONE</strong></li> The operation is complete</li>\n                            <ul>\n                        ","<code>upload</code> a property returning a <code>XMLHttpRequestUpload</code> object allowing an user\n                        to monitor upload process progress. Has similar to <code>XMLHttpRequest</code> event handlers:\n                        <code>onabort</code>, <code>onerror</code>, <code>onloadend</code>, <code>onloadstart</code>,\n                        <code>onprogress</code>, <code>ontimeout</code>","<code>setRequestHeader()</code> for setting a custom HTTP request header <b>before</b> sending it,","<code>getResponseHeader()</code> for getting a response header from server,","<code>abort()</code> for aborting already opened request,"]},{elementType:"NoteWarning",content:"\n                        There is a maximum default number of XMLHttpRequest connections that may be established at the time.\n                        This is sed by default to 2, and is browser instance dependant. A user may change this, but a \n                        page developer may not. This may be altered in firefox in <code>about:config</code> in address bar\n                        and <code>network.http.max-persistent-connections-per-server</code>. In chrome it is a lot more \n                        complicated, as this will force to build a custom version of the browser form the source code.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Client-Server_overview",description:"Overwiev"},{elementType:"Link",content:"medium",href:"https://medium.com/@joekarlsson/complete-guide-to-node-client-server-communication-b156440c029",description:"Guide to client server communication"},{elementType:"Link",content:"IBM",href:"https://www.ibm.com/docs/en/cics-ts/5.3?topic=concepts-components-url",description:"The components of a URL"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/pl/docs/Web/API/XMLHttpRequest",description:"XMLHttpRequest description"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status",description:"HTTP statuses"},{elementType:"Link",content:"hpbn.co/websocket",href:"https://hpbn.co/websocket/",description:"Web-socket more detailed description"},{elementType:"Link",content:"developer Mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket",description:"API short description"}]}]};var b,f,y,g,v,w,j,O,T,x,S,k,N,I,P,A,E,C,L,H,M,D,R,F,U,B,_=n(0),q={summary:"array methods",title:"array methods",searchKeywords:"array methods mutable unmutable push pop shift unshift splice slice concat forEach indexOf \n    includes find findIndex filter map sort reverse split join reduce isArray",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Array methods"},{elementType:"Paragraph",content:"\n                    "},{elementType:"NoteWarning",content:"\n                    Array indexes cannot be larger, than a number represented in 32 bit integer. If an array \n                    gets bigger, then indexes start becomming keys represented as a string\n                    "},{elementType:"Unsigned list",content:["<code>array like</code> is an object not created with an <code>Array</code> constructor, \n                        that has a non negative <code>lengtn</code> property, and some indexed properties. An\n                        array like object will be created from:\n                        <ul>\n                            <li><code>let al = {length:5}</code></li>\n                            <li><code>let al = {0: 'a', 1: 'b', 2: 'c', length:3}</code></li>\n                            <li>An object having an iterator placed under [Symbol.iterator]</li>\n                            <li>A string</li>\n                            <li>A Map object</li>\n                            <li>A Set object</li>\n                            <li>document.forms</li>\n                            <li>document.querySelectorAll('div')</li>\n                            <li>document.getElementsByTagName('body')[0].chidren</li>\n                        </ul>\n                        "]},{elementType:"ConditionalArray",headItems:["Method","Arguments","Returns","Mutating","Description"],content:[(b={},Object(_.a)(b,Symbol("title"),"Array (constructor)"),Object(_.a)(b,Symbol("code"),"\n                            \n<pre>\nlet arr1 = [1, 'string', true];\n\nlet arr2 = [];\narr2[10] = 9;\n// [,,,,,,,,,9]\n\nlet arr3 = Array(10);\n//[,,,,,,,,,,] so array with 10 empty elements\n\nlet arr4 = Array(1, 2, 3);\n//[1, 2, 3];\n\nlet arr5 = new Array(7);\n//[,,,,,,,]\n\nlet arr6 = new Array(1, 2, 3);\n//[1, 2, 3]\n\n\n</pre>                            \n                            \n                            "),Object(_.a)(b,"Method","<code>Array(size | items)</code>"),Object(_.a)(b,"Arguments","\n                                Counstructor, that is overloaded.\n                                <ul>\n                                <li>In case a single number is given <code>size</code>, an array of empty elements\n                                is returned</li>\n                                <li>In case a list of elements is given, an array containing these elements is returned</li>\n                                </ul>\n                            "),Object(_.a)(b,"Returns","A new array"),Object(_.a)(b,"Mutating","-"),Object(_.a)(b,"Description","Constructor returning a new array, a list like element"),b),(f={},Object(_.a)(f,Symbol("title"),"of"),Object(_.a)(f,Symbol("code"),"\n                            \n<pre>\n\nlet constructorExample1 = Array(5);\n// [,,,,,]\nlet constructorExample2 = Array(1, 2, 3);\n//[1, 2, 3]\nlet ofExample1 = Array.of(5);\n// [5]\nlet ofExample2 = Array.of(1, 2, 3);\n// [1, 2, 3]\n\n</pre>                            \n                            \n                            "),Object(_.a)(f,"Method","<code>of(items)</code>"),Object(_.a)(f,"Arguments","\n                            <code>items</code>: elements \n                            "),Object(_.a)(f,"Returns","A new array"),Object(_.a)(f,"Mutating","-"),Object(_.a)(f,"Description","Creates a new instance of the Array object from the given items list"),f),(y={},Object(_.a)(y,Symbol("title"),"from"),Object(_.a)(y,Symbol("code"),"\n                            \n<pre>\n\nlet arrLike1 = {length: 5};\nlet arr1 = Array.from(arrLike1);\nconsole.log(arr1);\n//[undefined, undefined, undefined, undefined, undefined]\n\nlet arrLike2 = {a: 'a', b: 'b', c: 'c', length: 3}\nlet arr2 = Array.from(arrLike2);\nconsole.log(arr2);\n//[undefined, undefined, undefined]\n\nlet arrLike3 = {0: 'a', 2: 'b', 1: 'c', length: 3}\nlet arr3 = Array.from(arrLike3);\n// ['a', 'c', 'b']\n\nlet arrLike4 = {0: 'a', 2: 'b', 1: 'c', length: 2}\nlet arr4 = Array.from(arrLike4);\n// ['a', c']\n\nlet arrLike5 = document.forms;\n\nfunction iterator(){\n    let current = 0;\n    return {\n        next: function(){\n        current++;\n        return {\n            value: current -1,\n            done: current > 4\n        }\n    }\n    }\n}\n\nlet arrLike6 = {};\narrLike6[Symbol.iterator]=iterator;\nlet arr6 = Array.from(arrLike6);\nconsole.log(arr6); \n// [0, 1, 2, 3]\n// arrLike6 becomes an arrayLike object, and becomes iterable, \n// is accessable with an Array.from and with for..of loop\n\nlet arrLike7 = document.forms;\nlet arrLike8 = document.querySelectorAll('div');\nlet arrlike9 = document.getElementsByTagName('body')[0].children\n\n\n\n</pre>                            \n                            \n                            "),Object(_.a)(y,"Method","<code>from(arrayLikeObject[, mapFunction[, thisArg]])</code>"),Object(_.a)(y,"Arguments","\n                            <ul>\n                            <li><code>arrayLikeObject</code>: elements </li>\n                            <li><code>mapFunction</code>: an <code>arrayLikeObject</code> elements \n                            transforming function, taking:<code>item</code>, <code>index</code>, <code>arr</code>,\n                            this is similar to the <code>.map</code> method of the Array</li>\n                            <li><code>thisArg</code> is an argument indicating what will be the value of <code>this</code></li>\n                            </ul>\n                            "),Object(_.a)(y,"Returns","A new array"),Object(_.a)(y,"Mutating","-"),Object(_.a)(y,"Description","Creates a new instance of the Array object from the given array like object."),y),(g={},Object(_.a)(g,Symbol("title"),"push"),Object(_.a)(g,Symbol("code"),"\n                            \n<pre>\nlet arr = [1, 2, 3];\nconsole.log(arr.push(4)); // 4\nconsole.log(arr); //[1, 2, 3, 4]\n</pre>                            \n                            \n                            "),Object(_.a)(g,"Method","<code>push(item)</code>"),Object(_.a)(g,"Arguments","item"),Object(_.a)(g,"Returns","added item"),Object(_.a)(g,"Mutating","Mutating"),Object(_.a)(g,"Description","Add a new item to the end of the array"),g),(v={},Object(_.a)(v,Symbol("title"),"pop"),Object(_.a)(v,Symbol("code"),"\n                            \n<pre>\nlet arr = [1, 2, 3];\nconsole.log(arr.pop());// 4\nconsole.log(arr); //[1, 2]\n</pre>                            \n                            \n                            "),Object(_.a)(v,"Method","<code>pop()</code>"),Object(_.a)(v,"Arguments","-"),Object(_.a)(v,"Returns","removed element"),Object(_.a)(v,"Mutating","Mutating"),Object(_.a)(v,"Description","Remove an element from the end of the array,"),v),(w={},Object(_.a)(w,Symbol("title"),"shift"),Object(_.a)(w,Symbol("code"),"\n                            \n<pre>\nlet arr = [1, 2, 3];\nconsole.log(arr.shift());// 1\nconsole.log(arr); //[2, 3]\n</pre>                            \n                            \n                            "),Object(_.a)(w,"Method","<code>shift())</code>"),Object(_.a)(w,"Arguments","-"),Object(_.a)(w,"Returns","removed element"),Object(_.a)(w,"Mutating","Mutating"),Object(_.a)(w,"Description","Remove the first element from the array"),w),(j={},Object(_.a)(j,Symbol("title"),"unshift"),Object(_.a)(j,Symbol("code"),"                    \n<pre>\nlet arr = [1, 2, 3];\nconsole.log(arr.unshift(0));// 0\nconsole.log(arr); //[0, 1, 2, 3, 4]\n</pre>                            \n                            \n                            "),Object(_.a)(j,"Method","<code>unshift()</code>"),Object(_.a)(j,"Arguments","item"),Object(_.a)(j,"Returns","added item"),Object(_.a)(j,"Mutating","Mutating"),Object(_.a)(j,"Description","Add a new item to the begining of the array"),j),(O={},Object(_.a)(O,Symbol("title"),"splice"),Object(_.a)(O,Symbol("code"),"\n                            \n<pre>\n// Delete a single element from the middle of an array:\nlet arr = [1, 2, 3, 4, 5];\nconsole.log(arr.splice(3,1));// 4\n//starting from index 0, index 3 has value 4\n// so 4 removed.\n\n// Add an element to the middle of an array:\nlet arr = [1, 2, 3, 5];\nconsole.log(arr.splice(3, 0, 4)); // []\n//Nothing removed from the array, so [] returned\nconsole.log(arr);//[1, 2, 3, 4, 5]\n\n//Adding an element far above array length\nlet arr = [1, 2, 3];\nconsole.log(arr.splice(10, 0, 1)); // []\nconsole.log(arr)\n//[1, 2, 3, 1] as there are no 10 elements in this array\n\n//Removing a not existing element\nlet arr = [1, 2, 3];\nconsole.log(arr.splice(10, 1)); // []\nconsole.log(arr)\n//[1, 2, 3] as there are no 10 elements in this array\n\n\n//Delete and add elements at the same time\nlet arr = [1, 2, 3, 4, 5];\nconsole.log(arr.splice(1, 2, 0, 0, 0));\n// [2, 3]\nconsole.log(arr);\n// [1, 0, 0, 0, 4, 5]\n\n</pre>                            \n                            \n                            "),Object(_.a)(O,"Method","<code>splice(start, nrOfDel, item...)</code>"),Object(_.a)(O,"Arguments","\n                            <ul>\n                                <li><code>start</code> index of element to start mutation of the array</li>\n                                <li><code>nrOfDel</code> nr of elements to delete starting from <code>start</code> index</li>\n                                <li><code>item..</code> items to be added after <code>start</code></li>\n                            </ul>\n                            "),Object(_.a)(O,"Returns","Array of deleted items"),Object(_.a)(O,"Mutating","Mutating"),Object(_.a)(O,"Description","Modify an array"),O),(T={},Object(_.a)(T,Symbol("title"),"slice"),Object(_.a)(T,Symbol("code"),"                    \n<pre>\nlet arr = [1,2,3,4,5];\nlet arrCopy = arr.slice(0, arr.length);\n\n//cut off first and last\nlet middle = arr.length <= 2 ? [] : arr.slice(1, arr.length-1)\n</pre>                            \n                            \n                            "),Object(_.a)(T,"Method","<code>slice(start, end)</code>"),Object(_.a)(T,"Arguments","start, end"),Object(_.a)(T,"Returns","New subarray (from start to end)"),Object(_.a)(T,"Mutating","Not mutating"),Object(_.a)(T,"Description","Returns a new subarray (from start to end)"),T),(x={},Object(_.a)(x,Symbol("title"),"concat"),Object(_.a)(x,Symbol("code"),"                    \n<pre>\nlet arr1 = [1,2,3];\nlet arr2 = [4, 5];\nlet arr3 = [6, 7];\nlet arr4 = [8];\nlet together = arr1.concat(arr2, arr3, arr4);\nconsole.log(together);\n// [1, 2, 3, 4, 5, 6, 7, 8]\n</pre>                            \n                            \n                            "),Object(_.a)(x,"Method","<code>arr1.concat(arr2, arr3...)</code>"),Object(_.a)(x,"Arguments","list of arrays"),Object(_.a)(x,"Returns","New array"),Object(_.a)(x,"Mutating","Not mutating"),Object(_.a)(x,"Description","concatenates arrays and returns a new array"),x),(S={},Object(_.a)(S,Symbol("title"),"forEach"),Object(_.a)(S,Symbol("code"),"                    \n<pre>\narr = [1, 2, 3];\narr.forEach((item, index, array)=>{\n    console.log([item, index, array]);\n})\n//[1, 0, [1,2,3]]\n//[2, 0, [1,2,3]]\n//[3, 0, [1,2,3]]\narr.forEach(()=>{console.log('dummy')})\n//dummy\n//dummy\n//dummy\n</pre>                            \n                            \n                            "),Object(_.a)(S,"Method","<code>arr.forEach(cb, thisArg)</code>"),Object(_.a)(S,"Arguments","\n                            <ul>\n                            <li><code>cb</code> a callback function taking:\n                            <ul>\n                                <li><code>item</code>: a current element</li>\n                                <li><code>index</code>: an index of current element</li>\n                                <li><code>array</code>: the whole array</li>\n                            </ul>\n                            </li>\n                            <li><code>thisArg</code>: what will be the value of <code>this</code></li>\n                            </ul>\n                            All arguments are optional\n                            "),Object(_.a)(S,"Returns","undefined"),Object(_.a)(S,"Mutating","Not mutating"),Object(_.a)(S,"Description","Runns a callback function for each element in the array."),S),(k={},Object(_.a)(k,Symbol("title"),"indexOf"),Object(_.a)(k,Symbol("code"),"                    \n<pre>\nlet arr1 = [1,2,3,4,5,6];\nconsole.log(arr1.indexOf(3));// 2;\nconsole.log(arr1.indexOf(9));//-1;\nconsole.log(arr1.indexOf(6, 3)); //5\n</pre>                            \n                            \n                            "),Object(_.a)(k,"Method","<code>arr.indexOf(item, from)</code>"),Object(_.a)(k,"Arguments","\n                            <ul>\n                                <li><code>item</code>: item to serach array for</li>\n                                <li><code>from</code>: index to start search from, optional</li>\n                            </ul>\n                            "),Object(_.a)(k,"Returns","index of found element or -1 if nothing found"),Object(_.a)(k,"Mutating","Not mutating"),Object(_.a)(k,"Description","Searches an array for a given element and returns -1 if nothing \n                            found or found element index. Uses a '===' operator."),k),(N={},Object(_.a)(N,Symbol("title"),"lastIndexOf"),Object(_.a)(N,Symbol("code"),"                    \n<pre>\nlet arr1 = [1,2,3,4,5,6];\nconsole.log(arr1.lastIndexOf(3));// 2;\nconsole.log(arr1.lastIndexOf(9));//-1;\nconsole.log(arr1.lastIndexOf(6, 3));\n// -1 as starts from 3 element from the end and in this case \n// does not find 6, as it is the first element form the end\n</pre>                            \n                            \n                            "),Object(_.a)(N,"Method","<code>arr.lastIndexOf(item, from)</code>"),Object(_.a)(N,"Arguments","\n                            <ul>\n                                <li><code>item</code>: item to serach array for</li>\n                                <li><code>from</code>: index to start search from counting from the end of the array</li>\n                            </ul>\n                            "),Object(_.a)(N,"Returns","index of found element or -1 if nothing found"),Object(_.a)(N,"Mutating","Not mutating"),Object(_.a)(N,"Description","Searches an array starting from the end for a given element and returns \n                            -1 if nothing found or found element index. Uses a '===' operator."),N),(I={},Object(_.a)(I,Symbol("title"),"includes"),Object(_.a)(I,Symbol("code"),"                    \n<pre>\nlet arr1 = [1,2,3,4,5,6];\nconsole.log(arr1.includes(3));// true;\nconsole.log(arr1.includes(9));// false;\nconsole.log(arr1.includes(6, 3)); // true;\n</pre>                            \n                            \n                            "),Object(_.a)(I,"Method","<code>arr.includes(item, from)</code>"),Object(_.a)(I,"Arguments","\n                            <ul>\n                                <li><code>item</code>: item to serach array for</li>\n                                <li><code>from</code>: index to start search from counting from the end of the array</li>\n                            </ul>\n                            "),Object(_.a)(I,"Returns","<code>true</code> if found, <code>false</code> if not."),Object(_.a)(I,"Mutating","Not mutating"),Object(_.a)(I,"Description","Searches an array starting from the end for a given element and returns \n                            -1 if nothing found or found element index. Uses a '===' operator."),I),(P={},Object(_.a)(P,Symbol("title"),"find"),Object(_.a)(P,Symbol("code"),"                    \n<pre>\nlet arr = [1,2,3,4,5,6];\nlet found = arr.find((item, index, array)=>{\n    console.log(`Searching item ${item} at ${index} of ${array.toString}`);\n    return item % 3 == 0 ? true : false;\n})\n//Searching item 1 at 0 of 1,2,3,4,5,6\n//Searching item 2 at 1 of 1,2,3,4,5,6\n//Searching item 3 at 2 of 1,2,3,4,5,6\nconsole.log(found) //3;\n</pre>                            \n                            \n                            "),Object(_.a)(P,"Method","<code>arr.find(cb[, thisArg])</code>"),Object(_.a)(P,"Arguments","\n                            <ul>\n                            <li><code>cb</code>: a callback function taking\n                            <ul>\n                                <li><code>item</code>: currently processed array item</li>\n                                <li><code>index</code>: index of currently processed item</li>\n                                <li><code>array</code>: given array</li>\n                            </ul>\n                            and returning <code>true</code> if element is found or <code>false</code>\n                            </li>\n                            <li><code>thisArg</code>: what will be the value of <code>this</code></li>\n                            </ul>\n                            "),Object(_.a)(P,"Returns","found element or <code>undefined</code> if nothing found"),Object(_.a)(P,"Mutating","Not mutating"),Object(_.a)(P,"Description","Calls a callback function on each element of the given array, and \n                            if callback returns true function stops and returns found element. If each callback\n                            execution returns false then <code>find</code> returns <code>undefined</code>"),P),(A={},Object(_.a)(A,Symbol("title"),"findIndex"),Object(_.a)(A,Symbol("code"),"                    \n<pre>\nlet arr = [1,2,3,4,5,6];\nlet found = arr.findIndex((item, index, array)=>{\n    console.log(`Searching item ${item} at ${index} of ${array.toString}`);\n    return item % 3 == 0 ? true : false;\n})\n//Searching item 1 at 0 of 1,2,3,4,5,6\n//Searching item 2 at 1 of 1,2,3,4,5,6\n//Searching item 3 at 2 of 1,2,3,4,5,6\nconsole.log(found) // 2;\n</pre>                            \n                            \n                            "),Object(_.a)(A,"Method","<code>arr.findIndex(cb[, thisArg])</code>"),Object(_.a)(A,"Arguments","\n                            <ul>\n                            <li>A callback function taking\n                            <ul>\n                                <li><code>item</code>: currently processed array item</li>\n                                <li><code>index</code>: index of currently processed item</li>\n                                <li><code>array</code>: given array</li>\n                            </ul>\n                            and returning <code>true</code> if element is found or <code>false</code>\n                            </li>\n                            <li><code>thisArg</code>: what will be the value of <code>this</code></li>\n                            </ul>\n                            "),Object(_.a)(A,"Returns","found element or -1 if nothing found"),Object(_.a)(A,"Mutating","Not mutating"),Object(_.a)(A,"Description","Calls a callback function on each element of the given array, and \n                            if callback returns true function stops and returns an index of the found element. \n                            If each callback\n                            execution returns false then <code>findIndex</code> returns <code>-1</code>"),A),(E={},Object(_.a)(E,Symbol("title"),"filter"),Object(_.a)(E,Symbol("code"),"                    \n<pre>\nlet arr = [1,2,3,4,5,6];\nlet found = arr.findIndex((item, index, array)=>{\n    console.log(`Processing item ${item} at ${index} of ${array.toString}`);\n    return item % 2 == 0 ? true : false;\n})\n//Processing item 1 at 0 of 1,2,3,4,5,6\n//Processing item 2 at 1 of 1,2,3,4,5,6\n//Processing item 3 at 2 of 1,2,3,4,5,6\n//Processing item 4 at 0 of 1,2,3,4,5,6\n//Processing item 5 at 1 of 1,2,3,4,5,6\n//Processing item 6 at 2 of 1,2,3,4,5,6\nconsole.log(found) // [2, 4, 6];\n</pre>                            \n                            \n                            "),Object(_.a)(E,"Method","<code>arr.filter(cb[, thisArg])</code>"),Object(_.a)(E,"Arguments","\n                            <ul>\n                            <li>A callback function taking\n                            <ul>\n                                <li><code>item</code>: currently processed array item</li>\n                                <li><code>index</code>: index of currently processed item</li>\n                                <li><code>array</code>: given array</li>\n                            </ul>\n                            and returning <code>true</code> if element matches or <code>false</code>\n                            </li>\n                            <li><code>thisArg</code>: what will be the value of <code>this</code></li>\n                            </ul>\n                            "),Object(_.a)(E,"Returns","Array of found elements"),Object(_.a)(E,"Mutating","Not mutating"),Object(_.a)(E,"Description","Calls a callback function for each array element. Returns an array of elements,\n                            for which the callback returned <code>true</code>"),E),(C={},Object(_.a)(C,Symbol("title"),"map"),Object(_.a)(C,Symbol("code"),'                    \n<pre>\nlet arr = [1,2,3,4,5,6];\nlet found = arr.map((item, index, array)=>{\n    return <div>${item}</div>\n})\nconsole.log(found) \n// ["&lt;div>1&lt;/div>", "&lt;div>2&lt;/div>", "&lt;div>3&lt;/div>", \n// "&lt;div>4&lt;/div>", "&lt;div>5&lt;/div>", "&lt;div>6&lt;/div>"];\n</pre>                            \n                            \n                            '),Object(_.a)(C,"Method","<code>arr.map(cb[, thisArg])</code>"),Object(_.a)(C,"Arguments","\n                            <ul>\n                            <li><code>cb</code> a callback function taking:\n                            <ul>\n                                <li><code>item</code>: currently processed array item</li>\n                                <li><code>index</code>: index of currently processed item</li>\n                                <li><code>array</code>: given array</li>\n                            </ul>\n                            </li>\n                            <li><code>thisArg</code>: what will be the value of <code>this</code></li>\n                            </ul>\n                            and returning an item value for the new array\n                            "),Object(_.a)(C,"Returns","Array of elements"),Object(_.a)(C,"Mutating","Not mutating"),Object(_.a)(C,"Description","\n                            Calls a callback function for each element of the given array and returns a new array\n                            of elements returned by the callback function.\n                            "),C),(L={},Object(_.a)(L,Symbol("title"),"sort"),Object(_.a)(L,Symbol("code"),"                    \n        <pre>\n        let arr = [3,2,5,7,3];\n        let sorted = arr.sort((a,b)=>{\n            if (a<b) return -1;\n            if (a == b) return 0;\n            return 1\n        })\n        console.log(arr);\n        //[2, 3, 3, 5, 7]\n        console.log(sorted);\n        //[2, 3, 3, 5, 7]\n        \n        </pre>                            \n                            \n                            "),Object(_.a)(L,"Method","<code>arr.sort((a, b))</code>"),Object(_.a)(L,"Arguments","\n                            A callback comparing function taking 2 elements that will be compared\n                            Callback should return:\n                            <ul>\n                                <li><code>-1</code>: if a > b</li>\n                                <li><code>0</code>: if a == b due to sorting criteria</li>\n                                <li><code>1</code>: if a < b</li>\n                            </ul>\n                            "),Object(_.a)(L,"Returns","Array of elements"),Object(_.a)(L,"Mutating","Mutating"),Object(_.a)(L,"Description","\n                            Sorts a given array, elements are compared by the callback function, the mutated, sorted array\n                            is returned.\n                            "),L),(H={},Object(_.a)(H,Symbol("title"),"reverse"),Object(_.a)(H,Symbol("code"),"                    \n        <pre>\n        let arr = [3,2,5,7,3];\n        let reversed = arr.reverse();\n        console.log(arr);\n        // [3,2,5,7,3]\n        console.log(reversed);\n        // [3,7,5,2,3]\n        console.log(Object.is(arr, reversed));\n        //true\n        \n        </pre>                            \n                            \n                            "),Object(_.a)(H,"Method","<code>arr.reverse()</code>"),Object(_.a)(H,"Arguments","-"),Object(_.a)(H,"Returns","Array of elements"),Object(_.a)(H,"Mutating","Mutating"),Object(_.a)(H,"Description","\n                            Reverses the order of the elements in given array. Mutates the array.\n                            "),H),(M={},Object(_.a)(M,Symbol("title"),"join"),Object(_.a)(M,Symbol("code"),"                    \n<pre>\nlet arr = [3,2,5,7,3];\nlet joined = arr.join('=>');\nconsole.log(joined);\n// \"3=>2=>5=>7=>3\"\n</pre>                            \n                    \n                            "),Object(_.a)(M,"Method","<code>arr.join(conjunction)</code>"),Object(_.a)(M,"Arguments","<code>conjunction</code>: a string element that serves as a glue, is pressed between\n                            array elements"),Object(_.a)(M,"Returns","String"),Object(_.a)(M,"Mutating","Not mutating"),Object(_.a)(M,"Description","\n                            Forms a string from array elements, pressing the <code>conjunction</code> between array elements.\n                            "),M),(D={},Object(_.a)(D,Symbol("title"),"Array.isArray"),Object(_.a)(D,Symbol("code"),"                    \n<pre>\nconsole.log(Array.isArray([2,3,4]));\n//true\nconsole.log(Array.isArray({a:1,b:2}));\n//false\n</pre>                            \n                    \n                            "),Object(_.a)(D,"Method","<code>Array.isArray(arr)</code>"),Object(_.a)(D,"Arguments","<code>arr</code>: an object/primitive that needs to be compared"),Object(_.a)(D,"Returns","Boolean"),Object(_.a)(D,"Mutating","Not mutating"),Object(_.a)(D,"Description",'\n                            A static method, true if <code>arr.constructor.name==="Array"</code>\n                            '),D),(R={},Object(_.a)(R,Symbol("title"),"reduce"),Object(_.a)(R,Symbol("polifill"),"\n<pre>\n\n</pre>\n                            "),Object(_.a)(R,Symbol("code"),"                    \n<pre>\nlet arr = [3,2,5,7,3];\nlet summ = arr.reduce((acc,element,index,arr)=>{\n    return acc + element;\n}, 0)\nconsole.log(summ / arr.length)\n\nlet average = arr.reduce((acc,element,index,arr)=>{\n    if(index < arr.length - 1){\n        return acc + element;\n    }\n    return (acc + element) / arr.length\n}, 0);\nconsole.log(average)\n</pre>                            \n                    \n                            "),Object(_.a)(R,"Method","<code>arr.reduce(cb(acc, item[, index[, arr]])[, acc0])</code>"),Object(_.a)(R,"Arguments","\n                            <code>cb</code>: a callback taking:\n                            <ul>\n                            <li><code>acc</code>: accumulated value, that will be passed to next cb call</li>\n                            <li><code>item</code>: currently processed array element</li>\n                            <li><code>index</code>: index of currently processed element</li>\n                            <li><code>arr</code>: whole array</li>\n                            </ul>\n                            and a <code>acc0</code> which is an accumulator initial value\n                            "),Object(_.a)(R,"Returns","A single value"),Object(_.a)(R,"Mutating","Not mutating"),Object(_.a)(R,"Description","\n                            Reduces an array to a single value, defined in a callback function\n                            "),R),(F={},Object(_.a)(F,Symbol("title"),"flat"),Object(_.a)(F,Symbol("polifill"),"\n<pre>\nlet arr = [1, 2, 3, [4, 5],[[6, 7], 8], [[[9, 10]]]];\nif (!Array.prototype.flat){\n    Array.prototype.flat = function(deph){\n        let flattened = [];\n        let arr = this;\n        for (let item of this){\n            if (Array.isArray(item) && deph > 0){\n                let guts = item.flat2(deph - 1);\n                for(let gut of guts){flattened.push(gut)}\n            } else {\n                flattened.push(item)\n            }\n        }\n        return flattened\n    }\n}\nconsole.log(arr.flat(2)) //to test\n\n</pre>\n                            "),Object(_.a)(F,Symbol("code"),"                    \n<pre>\nlet arr = [1, 2, 3, [4, 5],[[6, 7], 8], [[[9, 10]]]];\nlet flatten = arr.flat(2)\nconsole.log(flatten);\n//[1, 2, 3, 4, 5, 6, 7, 8, [9, 10]]\n\n</pre>                            \n                    \n                            "),Object(_.a)(F,"Method","<code>arr.flat(depth)</code>"),Object(_.a)(F,"Arguments","\n                            <code>depth</code>: a value indicating how deeply nested arrays will be flattened\n                            "),Object(_.a)(F,"Returns","A flattened array"),Object(_.a)(F,"Mutating","Not mutating"),Object(_.a)(F,"Description","\n                            Takes all nested arrays and concatenates them into a single flat array\n                            "),F),(U={},Object(_.a)(U,Symbol("title"),"every"),Object(_.a)(U,Symbol("code"),"                    \n<pre>\nlet arr = [2,4,6,8]\nlet e1 = arr.every((item)=>{\n    return item%2==true\n});//ture\nlet e2 = arr.every((item)=>{\n    if (item == 2) retrun true;\n    if (item == 4) return true;\n    if (item == 6) return true;\n    return false;\n}); //false, for 8 cb returns false\n</pre>                            \n                    \n                            "),Object(_.a)(U,"Method","<code>arr.every(cb, thisArg)</code>"),Object(_.a)(U,"Arguments","\n                            <ul>\n                            <li>\n                                <code>cb</code>: is a callback taking:\n                                <ul>\n                                    <li><code>item</code> currently processed array item,</li>\n                                    <li><code>index</code> an index of the currently processed item</li>\n                                    <li><code>arr</code> array of processed elements</li>\n                                </ul>\n                            </li>\n                            <li><code>thisArg</code>: what will be the value of <code>this</code></li>\n                            </ul>\n                            "),Object(_.a)(U,"Returns","Boolean"),Object(_.a)(U,"Mutating","Not mutating"),Object(_.a)(U,"Description","\n                            True if callback for each given array element returns <code>true</code>\n                            "),U),(B={},Object(_.a)(B,Symbol("title"),"some"),Object(_.a)(B,Symbol("code"),"                    \n<pre>\nlet arr = [2,4,6,8]\nlet e1 = arr.some((item)=>{\n    return item%3==true\n});//ture\nlet e2 = arr.some((item)=>{\n    return item%5 == true;\n}); //false, none of items in array evaluates to true;\n</pre>                            \n                    \n                            "),Object(_.a)(B,"Method","<code>arr.some(cb, thisArg)</code>"),Object(_.a)(B,"Arguments","\n                            <ul>\n                            <li>\n                                <code>cb</code>is a callback taking:\n                                <ul>\n                                    <li><code>item</code> currently processed array item,</li>\n                                    <li><code>index</code> an index of the currently processed item</li>\n                                    <li><code>arr</code> array of processed elements</li>\n                                </ul>\n                            </li>\n                            <li><code>thisArg</code>: what will be the value of <code>this</code></li>\n                            </ul>\n                            "),Object(_.a)(B,"Returns","Boolean"),Object(_.a)(B,"Mutating","Not mutating"),Object(_.a)(B,"Description","\n                            True if callback for at least one given array element returns <code>true</code>\n                            "),B)]},{elementType:"Paragraph",content:"\n                    There is a set of methods that can be used with a <code>&lt;form&gt;</code> element:\n                    "},{elementType:"Code",content:"\n<pre>\n</pre>                        \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Methods"},{elementType:"Paragraph",content:"\n\n                    "}]}]};var W={summary:"data types",title:"data types",searchKeywords:"\n        object array set map null undefined boolean number BigInt string symbol basic types variable well-known symbols\n        ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Data types, mutability"},{elementType:"Paragraph",content:"\n                    There are 7 primitive data types in JS: <code>null</code>, <code>undefined</code>,\n                    <code>boolean</code>, <code>number</code>, <code>string</code>, <code>symbol</code>,\n                    <code>BigInt</code>. A primitive value is unmutable, so it cannot be changed. Instead an\n                    expression <code>someVariable = 'new value'</code> does not modify a variable. It instead\n                    creates a new variable with a new value in a new place in memory, and puts it into a \n                    <code>someVariable</code> container. So <code>someVariable</code> points to a different\n                    place in memory after this operation.<br>\n                    The only other data type in JS is an <code>object</code>. All types like an <code>Array</code>, a\n                    <code>Set</code>, a <code>Map</code>, a <code>Function</code>, a <code>Date</code> and so on are\n                    <code>typeof(...) -> \"object\"</code>.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline",content:"Primitive data types"},{elementType:"UnsignedList",content:['<code>null</code> has only one value, that is <code>null</code>. It represents an intentional absence\n                        of any object value. It is treated as <strong>falsy</strong><br>\n                        <a href ="#nullUseCases" class="btn btn-primary m-3" data-bs-toggle="collapse" data-bs-target="#nullUseCases">\n                            Difference from undefined\n                        </a>\n                        <div id="nullUseCases" class="collapse m-3">\n                            <ul>\n                                <li><code>typeof null</code> "object", not "null" as every object derives from null,</li>\n                                <li><code>typeof undefined</code> "undefined",</li>\n                                <li><code>null === undefined</code> false</li>\n                                <li><code>null == undefined</code> true</li>\n                                <li><code>null === null</code> true</li>\n                                <li><code>null == null</code> true</li>\n                                <li><code>!null</code> true</li>\n                                <li><code>isNaN(1 + null)</code> false</li>\n                                <li><code>isNaN(1 + undefined</code> true</li>\n                            </ul>\n                        </div>\n                        ',"\n                        <code>undefined</code> is automaticlly assigned to variables that have just been declared but not\n                        defined. Undefined is not writable, enumerable or configurable. However, it may be used as a variable name,\n                        in this case it gets overwritten. Nevertheless overwriting undefined seems a very bad idea and should be\n                        never done. Undefined should be compared with a <i>strict equality</i> operator <code>===</code>. \n                        In case an object key does not exist its returned value will be undefined. <strong>It is better to use </storng>\n                        <code>typeof x === 'undefined'</code> in stead of <code>x === undefined</code> to avoid an error if x id not declaired.\n                        ",'<code>boolean</code>: has only two values: <code>true</code> or <code>false</code><br>\n                        <a href ="#booleanUseCases" class="btn btn-primary m-3" data-bs-toggle="collapse" data-bs-target="#booleanUseCases">\n                            Boolean detailes\n                        </a>\n                        <div id="booleanUseCases" class="collapse m-3">\n                            <ul>\n                                <li><code>let x = false</code> declaration and definition of a boolean primitive</li>\n                                <li><code>let y = new Boolean(false)</code> creates a new <code>typeof y == \'object\'</code>,\n                                    so in this case it is <strong>not a primitive</strong>. So \n                                    <code>y === true</code>, despite it was constructed with a false value. <code>y</code>\n                                    is a not empty object, and not empty objects are evaluated to true.\n                                </li>\n                                <li><code>let z = Boolean(false)</code> does not create an object anymore, \n                                as it is a call of the function, not a constructor. \n                                It casts value a given as an argument to a boolean primitive value,\n                                    so <code>z != y</code>, <code>z === false</code>\n                                </li>\n                                <li><code>Boolean(undefined)==false</code></li>\n                                <li><code>Boolean(null)==false </code></li>\n                                <li><code>Boolean(\'\')==false </code></li>\n                                <li><code>Boolean(0)==false </code></li>\n                                <li><code>Boolean({})==true </code></li>\n                                <li><code>Boolean([])==true </code></li>\n                                <li><code>!!(false)</code> does the same as <code>Boolean(false)</code>, it casts an\n                                expression to a boolean primitive</li>\n                            </ul>\n                        </div>\n                        ','<code>number</code>: is a double-precision 64-bit binary format value, that is in range \n                        <code>Number.MIN_SAFE_INTEGER</code> to <code>Number.MAX_SAFE_INTEGER</code>, so (2^52-1) to\n                        (2^53+1). There are <code>Number.MAX_VALUE</code> and <code>Number.MIN_VALUE</code>\n                        values that are in the range of approximately (5e-324) to (1.79e+308), but it is not safe to use \n                        those values, as they are a double-precision floating point approximation of the value<br>\n                        There is an <code>Infinity</code>, a global property for representing numbers greater ths number max\n                        values.<br>\n                        <a href ="#numberUseCases" class="btn btn-primary m-3" data-bs-toggle="collapse" data-bs-target="#numberUseCases">\n                            Number detailes\n                        </a>\n                        <div id="numberUseCases" class="collapse m-3">\n                            <ul>\n                                <li><code>Number.MAX_VALUE</code> property representing the largest possible numeric value\n                                    in JS (about 1.8e+308). Every value greater that this will be an <code>Infinity</code>\n                                    This is an unsafe range, as any number greater than <code>Number.MAX_SAFE_INTEGER</code>\n                                    will be approximated,\n                                </li>\n                                <li><code>Number.MIN_VALUE</code> property representing the smallest possible numeric value\n                                    in JS (about 5e-324), in other words this value is the <b>closest to 0</b> value,\n                                </li>\n                                <li><code>Number.MIN_SAFE_INTEGER</code> (-(2^53 - 1)). Any number smaller than this will\n                                    be an approximation,\n                                </li>\n                                <li><code>Number.MAX_SAFE_INTEGER</code>(2^53 + 1). Any number greater than this will\n                                    be an approximation,\n                                </li>\n                                <li><code>Infinity</code> A global object property. Is the same as <code>Number.POSITIVE_INFINITY</code></li>\n                                <li><code>Number.POSITIVE_INFINITY</code> The same as an <code>Infinity</code>\n                                    <ul>\n                                        <li><code>POSITIVE_INFINITY * POSITIVE_INFINITY == POSITIVE_INFINITY</code></li>\n                                        <li><code>NEGATIVE_INFINITY * POSITIVE_INFINITY == NEGATIVE_INFINITY</code></li>\n                                        <li><code> anyPositiveNumber / POSITIVE_INFINITY == +0</code></li>\n                                        <li><code> anyNegativeNumber / POSITIVE_INFINITY == -0</code></li>\n                                        <li><code> 0 * POSITIVE_INFINITY == NaN</code></li>\n                                        <li><code> NaN * POSITIVE_INFINITY == NaN</code></li>\n                                        <li><code>POSITIVE_INFINITY / anyNegativeNumber == NEGATIVE_INFINITY</code></li>\n                                        <li><code>POSITIVE_INFINITY / anyPositiveNumber == POSITIVE_INFINITY</code></li>\n                                        <li><code>POSITIVE_INFINITY / POSITIVE_INFINITY == NaN</code></li>\n                                        <li><code>POSITIVE_INFINITY / NEGATIVE_INFINITY == NaN</code></li>\n                                    </ul>\n                                </li>\n                                <li><code>Number.NEGATIVE_INFINITY</code> The same as a <code>-Infinity</code>\n                                    <ul>\n                                        <li><code>NEGATIVE_INFINITY * NEGATIVE_INFINITY == POSITIVE_INFINITY</code></li>\n                                        <li><code>NEGATIVE_INFINITY * anyNegativeNumber == POSITIVE_INFINITY</code></li>\n                                        <li><code>NEGATIVE_INFINITY * POSITIVE_INFINITY == NEGATIVE_INFINITY</code></li>\n                                        <li><code> anyPositiveNumber / NEGATIVE_INFINITY == -0</code></li>\n                                        <li><code> anyNegativeNumber / NEGATIVE_INFINITY == +0</code></li>\n                                        <li><code> 0 * NEGATIVE_INFINITY == NaN</code></li>\n                                        <li><code> NaN * NEGATIVE_INFINITY == NaN</code></li>\n                                        <li><code>NEGATIVE_INFINITY / anyNegativeNumebr == POSITIVE_INFINITY</code></li>\n                                        <li><code>NEGATIVE_INFINITY / anyPositiveNumebr == NEGATIVE_INFINITY</code></li>\n                                        <li><code>NEGATIVE_INFINITY / POSITIVE_INFINITY == NaN</code></li>\n                                        <li><code>NEGATIVE_INFINITY / NEGATIVE_INFINITY == NaN</code></li>\n                                    </ul>\n                                </li>                                \n                                <li><code>isFinite(x)</code> is better that <code>if (x < Infinite)</code></li>\n                                <li><code>+0 === -0</code> is true, hovewer <code> 4 / +0</code> is Infinity, and\n                                <code> 4 / -0</code> is -Infinity.</li>\n                                <li><code>Number.isSafeInteger()</code> indicates if a number given as an argument is \n                                    a safe integer\n                                </li>\n                                <li><code>isNaN()</code> indicates if the value passed as an argument is a number</li>\n                                <li><code>NaN</code> a global property representing a not a number</li>\n                            </ul>\n                        </div>\n                        ','<code>BigInt</code> is a type for representing values larger than <code>Number.MAX_SAFE_INTEGER</code>\n                        and smaller than <code>Number.MIN_SAFE_INTEGER</code>. They are said not go be bounded, but in practice\n                        they can be overflowed. BigInt numbers have an <i>n</i> at the end, so <code>let a = 1n</code> defines a\n                        BigInt variable.<br>\n                        <a href ="#bigIntUseCases" class="btn btn-primary m-3" data-bs-toggle="collapse" data-bs-target="#bigIntUseCases">\n                            BigInt detailes\n                        </a>\n                        <div id="bigIntUseCases" class="collapse m-3">\n                            <ul>\n                                <li><code>2n == 2 is true</code> BitInts can be compared with numbers, and give proper results,</li>\n                                <li><code>[4n, 6n, 10, 0, 0n].sort() == [0, 0n, 4n, 6n, 10]</code> so BigInts can be sorted together with\n                                numbers</li>\n                                <li><code>typeof 1n == \'bigint\', typeof BigInt(1) == \'bigint\'</code></li>\n                                <li><code>let a = new BigInt(1)</code><strong>!!!</strong> this is not a primitive anymore,\n                                so <code>typeof a == \'object\'</code></li>\n                                <li>BigInt primitives, objects and mixed BigInt primitives with objects \n                                may be used with operators +, -, /, *, **, %. \n                                Only one-argument + is not supported,</li>\n                                <li>BigInts and plane numbers cannot be added, subtracted, divided or multiplied,</li>\n                                <li><code>5n / 2n == 2n</code> no fractions here</li>\n                                <li>Cannot be used in JSON.stringify, unless a toJSON method is added to the BigInt prototype</li>\n                            </ul>\n                        </div>','\n                        <code>string</code> is a type for representing textual data in a set of 16-bit unsigned integer values.\n                        Please refer to the <a href="./#/theory/string%20methods">string</a> section for more information.\n                        ',"\n                        <code>symbol</code> is a type a specially designed to serve as a key for the object, as objects keys in JS\n                        may only be of a type string or symbol.<br>\n                        "]},{elementType:"NoteWarning",content:"\n                        Beware of creating primitives as objects: <code>new Boolean()</code>, <code>new Number()</code>,\n                        as this is not a primitive anymore and will cause problems.\n                    "},{elementType:"NoteWarning",content:'\n                        <code>Number.prototype.toString([redix])</code>, where radix is a number from 2 to 36.\n                        Shadows the <code>Object.prototype.toString</code> method. This method converts a number to the \n                        string representation of the object in the specified radix:</br>\n                        <code>let a = 5; a.toString(2) == "101";</code>\n                    '},{elementType:"NoteWarning",content:"\n                        Oposite to <code>Number.prototype.toString([redix])</code> would be \n                        <code>Number.parseInt(str, radix)</code> converting a string to a number with\n                        given radix.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-3",content:"Symbols"},{elementType:"Paragraph",content:"As symbols serve as keys for objects, they are a sort of a bridge between \n                    primitives and objects when talking about \n                    JS types. Of course symbols are primitives, but they purpose is to serve as a part of an object,\n                    so it is difficult not to mention objects in this section.<br> "},{elementType:"Paragraph",content:"\n                    Keys described by symbols are not plane keys, as they don't \n                    show up with <code>Object.getOwnPropertyNames()</code>, <code>Object.keys()</code> or \n                    <code>for(let key in someObject) </code>. So how to use symbols with objects?\n                    With a <strong>computed property name</strong> syntax, that allows one to get to an object value, \n                    with a key taken from a variable:\n                    "},{elementType:"Code",content:"\n<pre>\nEx 1:\nlet s1 = Symbol('someSymbol');\nlet s2 = Symbol('someSymbol');\nlet obj = {\n    aProp: 'abc',\n    bProp: 'cde',\n    [Symbol('c')]: 'efg',\n    [s1]:'hij'\n}\n\nconsole.log(Object.keys(obj));\n// ['aProp','bProp']\nconsole.log(Object.getOwnPropertyNames(obj));\n// ['aProp','bProp']\nfor(let i in obj){\n    console.log(i);\n}\n//aProp\n//bProp\nconsole.log(Object.getOwnPropertySymbols(obj));\n//[Symbol(c), Symbol(someSymbol)]\n</pre>                    \n                    "},{elementType:"Headline-3",content:"Symbol features"},{elementType:"Paragraph",content:"So now it is known how to access object symbol keyed properties, and it is known, that\n                    they are hidden if accessed in most common way. But what exactly are symbols and why to use them?"},{elementType:"Code",content:"\n<pre>\nEx 1:\nlet s1 = Symbol('someSymbol');\nlet s2 = Symbol('someSymbol');\n// s1 != s2\n\nEx2:\nalert(s1);\n// TypeError cannot conver a Symbol to a string,\nalert(s1.toString());\n// OK, displayes 'Symbol('someSymbol');\nalert(s1.description);\n// Ok, displayes 'someSymbol'\n\nEx3:\nlet s3 = Symbol(); \n//description argument optional\n\nEx4:\nlet s4 = Symbol('abc');\nconsole.log(Symbol.for('abc')); // will return a Symbol('abc') not as a string\nlet s5 = Symbol.for('cde'); // there is no such symbol, so a new one will be created and returned,\n\nEx5:\nlet globSym = Symbol.for('fgh');\nconsole.log(Symbol.keyFor(globSym)); // this will print 'fgh'\n</pre>                     \n                    "},{elementType:"UnsignedList",content:["(Ex1) Symbols are guaranteed to be unique,","(Ex2) Symbols are not by default converted to a string,","(Ex3) Description, the only argument, is optional, so in this case code will also work.\n                        A description optional field is only for debugging purposes,","(Ex4) <code>Symbol.for(key)</code> returns a symbol for the specified key or \n                        creates a new symbol and returnes it in case symbol does not exist,","(Ex5) <code>Symbol.keyFor(Symbol('keyToReturn'))</code> returns a shared symbol key from the \n                        global registry","There is a global symbol registry","There is a term <i>well-known-symbols</i> in JS, and these are keys, where we can put \n                        our own values/functions to overwritte a default object behaviour."]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Well-known symbols"},{elementType:"Paragraph",content:"As mentioned, well-known symbols allow defining or redefining of some custom\n                    defined object behavoiurs. This is for inheritance purposes, not for redefinition of \n                    existing object's behavour.\n                    "},{elementType:"Headline-3",content:"@@iterator"},{elementType:"Paragraph",content:"An iterator is a function knowing how to get to next collection item, and knowing when\n                    whole collection is already iterated through. An iterator function returns a <code>next()</code>\n                    function, that returns an object having a <code>value</code> property, keeping a next item of the\n                    collection, and a <code>done</code> property that equals to <code>fasle</code> if there are still\n                    more elements in the collection, or <code>true</code> if there are no more elements in the collection.\n                    In case of <code>done == false</code> a value field may not exist.\n                    "},{elementType:"Paragraph",content:"An object is iterable, if it has an iterator function under its <code>Symbol.iterator</code>\n                    property. Such object is capable of:\n                    "},{elementType:"UnsignedList",content:["Being used in a <code>for..of iterabelObj</code> loop,","An array may be created with a spread operator <code>[...iterableObj]</code>,","An array of elements may be created using <code>Array.from(iterableObj)</code>","In promise static methods <code>Promise.all(iterableObj)</code>, <code>Promise.race(iterableObj)</code>"]},{elementType:"Code",content:"\n<pre>\nfunction someIterator() {\n    let n = 0;\n    return {\n      next: function() {\n        n += 10;\n        return n > 100?{done:true}:{value:n, done:false};\n      }\n    };\n  }\n  let a = {};\n  a[Symbol.iterator] = someIterator;\n  //now this will work\n  for(let i of a ) {console.log(i)}\n</pre>                    \n                    "},{elementType:"Headline-3",content:"@@hasInstance"},{elementType:"Paragraph",content:"Can be used to customise an <code>instanceof</code> operator work:\n                    "},{elementType:"Code",content:"\n<pre>\n    class SomeNewType{\n        static [Symbol.hasInstance](obj){\n            return true\n        }\n    }\n    //now every existing instance of any object \n    //will be also an instance of SomeNewType\n    let arr = [2, 3];\n    arr instanceof Array; //true;\n    arr instanceof Object; // true;\n    arr instanceof SomeNewType; //true;\n</pre>                    \n                    "},{elementType:"Headline-3",content:"@@toPrimitive"},{elementType:"Paragraph",content:"If custom object [symbol.toPrimitive] holds a function returning a primitive, then \n                    this object may be used with operators like <code>+</code>, <code>-</code>, <code>==</code>.\n                    There is a <code>hint</code> property taking a suggested primitive type that object should be \n                    converted into\n                    "},{elementType:"Code",content:"\n<pre>                    \nfunction myToPrimitive(hint){\n    if (hint=='number') return 44;\n    if (hint=='string') return '44';\n    else return this.toString();\n}\nlet arr = [2, 3];\narr[Symbol.toPrimitive] = myToPrimitive;\n//now this is possible:\nlet c = arr + 5;\n</pre>\n                    "}]},{elementType:"Headline-3",content:"@@toStringTag"},{elementType:"Paragraph",content:"\n                    A <code>.toString</code> method is capable of turning arrays, numbers, booleans or dates into \n                    strings. However if a generic object is concerned, <code>{}.toString()</code> would return a \n                    <code>[object Object]</code>. If there is a need of customizing this returned tag, a <code>\n                    @@toStringTag</code> is a good key to set this custom tag. This may be needed only to work with backward\n                    compatibility. Should not be used in the present code.\n                    "},{elementType:"Code",content:'\n<pre>\nlet obj = {};\nconsole.log(obj.toString());// [Object object]\nobj[Symbol.toStringTag] = "someTag";\nconsole.log(obj.toString());// [Object someTag]\n</pre>                        \n                    '},{elementType:"Headline-3",content:"@@species"},{elementType:"Paragraph",content:"\n                    Some methods, like <code>.map()</code> belonging to Array return a object.\n                    In case of Array, object returned by the <code>.map()</code> method is Array. If there is \n                    a class <code>SomeArray</code> derived from an <code>Array</code> class, then a <code>.map()</code>\n                    would return a object of the type <code>SomeArray</code>. If there was a necessity to get an \n                    <code>Array</code> object with <code>someArrayInstence.map()</code>, the <code>SomeArray[Symbol.species]</code>\n                    would have to be set to an <code>Array</code> function. So <code>Symbol.species</code> should be used to\n                    specify a property, whose value is a constructor function used to create derived objects.\n                    \n                    "},{elementType:"Headline-3",content:"@@match, @@replace, @@serach, @@split"},{elementType:"Paragraph",content:"\n                    String prototype has methods <code>match</code>, <code>replace</code>, <code>search</code>,\n                    <code>split</code> to test a string against a regular expression. These methods may be redefined\n                    to accept values other than a <code>RegExp</code>, and <code>@@match</code>, <code>@@replace</code>,\n                    <code>@@serach</code>, <code>@@split</code> well-known symbols are keys where new functions should \n                    be placed.\n                    "},{elementType:"Paragraph",content:"\n                    If there is a necessity to create a custom class using methods \n                    <code>match</code>, <code>replace</code>, <code>search</code>,\n                    <code>@@match</code>, <code>@@replace</code>,\n                    <code>@@serach</code>, <code>@@split</code> would be a perfect place to put them.\n                    "},{elementType:"Headline-3",content:"@@isConcatSpreadable"},{elementType:"Code",content:"\n<pre>\nlet a1 = [1, 2, 3];\nlet a2 = [4, 5, 6];\nlet a3 = [7, 8, 9];\na3[Symbol.isConcatSpreadable] = false;\nlet a12 = a1.concat(a2); // [1, 2, 3, 4, 5, 6]\nlet a13 = a1.concat(a2, a3);\n//[1, 2, 3, 4, 5, 6, [7, 8, 9]]\n\n</pre>                    \n                    "},{elementType:"Paragraph",content:"\n                        If <code>@@isContentSpreadable</code> if false, then a target array is not spread \n                        in concatenation process. It stayes in the new array as an individual array.\n                    "},{elementType:"Headline-3",content:"@@unscopables"},{elementType:"Paragraph",content:"\n                    An object valuated property defined for an <code>Array</code> in ES2015. It\n                    determines what methods will be allowed to be used in a <code>with</code> binding \n                    block. As <code>unscopables</code> is defined for a whole object, value added under this key is an\n                    object:\n                    "},{elementType:"Code",content:"\n<pre>\nclass someArray extends Array{\n    constructor(){super();}\n    static get [Symbol.unscopables]() {\n        return {\n            concat: false,  //default\n            entries: true   // default\n        }\n    }\n};\nlet a = new someArray(1, 2, 3);\nwith (a){\n    concat(3); // ok\n    entries; // nok, unscoped\n}\n</pre>                    \n                    "},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",description:"null"},{elementType:"Link",content:"dmitripavlutin.com",href:"https://dmitripavlutin.com/detailed-overview-of-well-known-symbols/",description:"well-known symbols introduction with examples"}]}]};console.error("@@species from https://dmitripavlutin.com/detailed-overview-of-well-known-symbols/");var z,K,V,G,J,X,Y,Q,$,Z,ee,te,ne,oe,ae,re,ie,se,ce,le,de,pe,me,ue,he=n(5),be=[{elementType:"Headline-3",content:"comparison operators"},{elementType:"Paragraph",content:"\n            comparison operators evaluate the left and the right operand expression, compares them and \n            returns the result. The operands of the non strict comparisons (<code>==</code>, <code>!=</code>) \n            that are not of the same type are converted to the same type, usually numeric. \n        "},{elementType:"SmallHeadline",content:"Avoid non strict comparisons: <code>==</code>, <code>!=</code>"},{elementType:"Paragraph",content:"\n            The algorithm:\n        "},{elementType:"UnsignedList",content:["If both operands are of the same type, compare with strict algorithm","Undefined and null are considered equal,","If string and a number, convert to string,","If non-boolean and boolean, convert the boolean to a number and start the procedure again,","If an object is compared with a number or a string, convert the object to a primitive","If both are strings, then this is already covered, operands are of the same type and \n            are compared with a strict algorithm","If none of above, then operands are not equal"]},{elementType:"Paragraph",content:"\n            Problems:\n        "},{elementType:"UnsignedList",content:["<code>2 == true is false</code> as true is converted to 1,","<code>'2' == true is false</code>","<code>'\n\t123\r ' == 123 is true</code> and this may not be ok","<code>{} == '[object Object]' is true</code>","<code>[] == 0 is true</code>","<code>['12'] == 12 is true</code>","<code>new String('') == new String('') is false</code>","<code>NaN == NaN is false</code>, isNaN() should be used"]},{elementType:"Paragraph",content:"\n            Instead of a non strict comparison use:\n        "},{elementType:"Paragraph",content:'\n        <table class = "table">\n        <thead><tr><th>Do not use</th><th>Use</th></tr></thead>\n        <tbody>\n            <tr>\n                <td><code>if (x != null)</code></td>\n                <td><code>if (x)</code> or <code>if (x !== undefined && x != null)</code></td>\n            </tr>\n            <tr>\n                <td><code>if (x == 123)</code></td>\n                <td><code>if (Number(x) === 123)</code></td>\n            </tr>\n            <tr>\n                <td><code>isNaN == isNaN</code></td>\n                <td><code>isNaN()</code></td>\n            </tr>\n        </tbody>\n        </table>\n        '},{elementType:"ConditionalArray",headItems:["Operator","Name","Usage","Description"],content:[(z={},Object(_.a)(z,Symbol("title"),"=="),Object(_.a)(z,Symbol("code"),"\n                \n<pre>\nnull == undefined; // true\n3 == true; // false; as boolean is converted to a number,\n1 == true; // true;\n0 == false; // true;\n\n'' == false; // true;\n'1' == true; // true;\n'2' == true; // false, as true is converted to 1,\n'some string' == true // false, as true is converted to 1,\n({} == '[object Object]') // true, as object is converted to a \n// primitive using a <b>@@toStringTag</b> well known symbol\n</pre>                            \n                \n                "),Object(_.a)(z,"Operator","<code>==</code>"),Object(_.a)(z,"Name","Equal"),Object(_.a)(z,"Usage","g() == f()"),Object(_.a)(z,"Description","true if both operands are equal, if the operands are of a different type try to\n                convert them to the same type: the number type is preferred, objects are converted to \n                primitives. <strong>Use strict operator instead</strong>"),z),(K={},Object(_.a)(K,Symbol("title"),"!="),Object(_.a)(K,Symbol("code"),"\n                \n<pre>\nnull != undefined; // false\n3 != true; // true; as boolean is converted to a number,\n1 != true; // false;\n0 != false; // false;\n\n'' != false; // false;\n'1' != true; // false;\n'2' != true; // true, as true is converted to 1,\n'some string' != true // true, as true is converted to 1,\n({} != '[object Object]') // false, as object is converted to a \n// primitive using a <b>@@toStringTag</b> well known symbol\n</pre>                            \n                \n                "),Object(_.a)(K,"Operator","<code>!=</code>"),Object(_.a)(K,"Name","Equal"),Object(_.a)(K,"Usage","g() == f()"),Object(_.a)(K,"Description","true if both operands are not equal, if the operands are of a different type try to\n                convert them to the same type: the number type is preferred, objects are converted to \n                primitives. <strong>Use strict operator instead</strict>"),K),(V={},Object(_.a)(V,Symbol("title"),"==="),Object(_.a)(V,Symbol("code"),"\n                \n<pre>\nNaN === NaN; // false !!\n// isNaN() should be used\n\n+0 === -0; // true;\n\n2 === 2; // true;\n2 === 1; // false;\n2 === '2' // false;\n'some caption' === 'some caption' // true;\n'some caption' === 'some caption ' // false; additional space at the end\nnull === undefined // false\n\nlet obj1 = {a:1, b:2};\nlet obj2 = {a:1, b:2};\nlet obj3 = obj1;\nobj1 === obj2; // false; the keys and values are the same,\n// the type is the same, but obj1 and obj2 refer to different\n// places in memory, these objects are not the same\nobj1 === obj3; // true; as obj3 was assigned the value obj1 is pointing to\n// so obj1 and obj3 are the same objects\n</pre>                            \n                \n                "),Object(_.a)(V,"Operator","<code>===</code>"),Object(_.a)(V,"Name","Strict equal"),Object(_.a)(V,"Usage","g() === f()"),Object(_.a)(V,"Description","Returns true, if both operands are of the same type and have the same value.\n                If objects compared, then it is compared if both variables point to the same object."),V),(G={},Object(_.a)(G,Symbol("title"),"!=="),Object(_.a)(G,Symbol("code"),"\n                \n<pre>\n2 !== 2; // false;\n2 !== 1; // true;\n2 !== '2' // true;\n'some caption' !== 'some caption' // false;\n'some caption' !== 'some caption ' // true; additional space at the end\nnull !== undefined // true\n\nlet obj1 = {a:1, b:2};\nlet obj2 = {a:1, b:2};\nlet obj3 = obj1;\nobj1 !== obj2; // true; the keys and values are the same,\n// the type is the same, but obj1 and obj2 refere to different\n// places in memory, these objects are not the same\nobj1 !== obj3; // false; as obj3 was assigned the value obj1 is pointing to\n// so obj1 and obj3 are the same objects\n</pre>                            \n        \n                "),Object(_.a)(G,"Operator","<code>!==</code>"),Object(_.a)(G,"Name","Strict equal"),Object(_.a)(G,"Usage","g() !== f()"),Object(_.a)(G,"Description","Returns true, if both operands are not of the same type or have different value.\n                If objects compared, then it is compared if both variables point to the same object."),G),(J={},Object(_.a)(J,Symbol("title"),">"),Object(_.a)(J,Symbol("code"),"\n            <ul>\n                <li>Convert objects to primitives</li>\n                <li>Strings should be compared with the lexicographical comparison of 16-bit code units</li>\n                <li>Try to convert both operands to numbers</li>\n                <li>Symbols cannot be compared, as they are not convertible to a number</li>\n            </ul>\n                                        \n<pre>\n\n3 > 2; //true;\n[3] > [2]; // true;\n({a:2}>{a:1}); // false\n({a:2}<{a:1}); // false\n'3' > 2; // true\n'2' > 3; // false\n'a' > 'b'; // false;\n'b' > 'a'; // true;\n'bcd' > 'abc'; // true;\n'b' > '1'; // true;\n'b' > 1; // false as b is not convertible to a number\n'b' < 1; // false as b is not convertible to a number\n\nBigInts\n3n > 2n; // true;\n3n > 2; // true;\n3 > 2n; // true;\n\nUndefined\nundefined > 3; // false;\n3 > undefined; // false;\n\nNull\n3 > null; // true\ntrue > null; // true;\nnull < 'some str'; // false as not comparable\nnull > 'some str'; // false\n\nBoolean\ntrue > false; // true\ntrue > 0; // true\ntrue > '0'; // true\ntrue > 'a'; // false\ntrue < 'a'; // false, as 'a' cannot be converted to a number\n\nNaN\nNaN > 3; // false\n3 > NaN; // false\n</pre>                            \n        \n                "),Object(_.a)(J,"Operator","<code>></code>"),Object(_.a)(J,"Name","Greater than"),Object(_.a)(J,"Usage","g() > f()"),Object(_.a)(J,"Description","Returns true, left operand is greater than the right one."),J),(X={},Object(_.a)(X,Symbol("title"),"<"),Object(_.a)(X,Symbol("code"),"\n            <ul>\n                <li>Convert objects to primitives</li>\n                <li>Strings should be compared with the lexicographical comparison of 16-bit code units</li>\n                <li>Try to convert both operands to numbers</li>\n                <li>Symbols cannot be compared, as they are not convertible to a number</li>\n            </ul>\n                                        \n<pre>\n2 < 3; //true;\n[1] < [2]; // true;\n({a:2}<{a:1}); // false\n({a:2}>{a:1}); // false\n'1' < 2; // true\n'2' < 1; // false\n'a' < 'b'; // false;\n'b' < 'a'; // true;\n'bcd' < 'xyz'; // true;\n'2' < 'd'; // true;\n'b' < 1; // false as b is not convertible to a number\n'b' > 1; // false as b is not convertible to a number\n\nBigInts\n1n < 2n; // true;\n1n < 2; // true;\n1 < 2n; // true;\n\nUndefined\nundefined < 3; // false;\n3 < undefined; // false;\n\nNull\nnull < 3; // true\nnull < true; // true;\nnull < 'some str'; // false as a string cannot be converted to a number\nnull > 'some str'; // false\n\nBoolean\nfalse < true; // true\n0 < true;   // true\n'0' < true;  // true\n'a' < true;  // false\n'a' > true;  // false\n\nNaN\nNaN < 3; // false\n3 > NaN; // false\n</pre>                            \n        \n                "),Object(_.a)(X,"Operator","<code><</code>"),Object(_.a)(X,"Name","Less than"),Object(_.a)(X,"Usage","g() < f()"),Object(_.a)(X,"Description","Returns true, left operand is smaller than the right one."),X),(Y={},Object(_.a)(Y,Symbol("title"),"<="),Object(_.a)(Y,Symbol("code"),"\n            <ul>\n                <li>Convert objects to primitives</li>\n                <li>Strings should be compared with the lexicographical comparison of 16-bit code units</li>\n                <li>Try to convert both operands to numbers</li>\n                <li>Symbols cannot be compared, as they are not convertible to a number</li>\n            </ul>\n                                        \n<pre>\nNumbers\n1 <= 2; // true;\n3 <= 3; // true;\n\nBigInt\n1n <= 2n; // true;\n3n <= 3n; // true;\n1n <= 2; // true;\n3n <= 3; // true;\n\nStrings\n'5n' <= 6; // false as '5n' is not converted into BigInt\n'abc' <= 'cde'; // true;\n'abc' <= 'abc'; // true;\n'abc' <= '0bc'; // false;\n'4' <= 4; // true;\n'a' <= 4; // false, not comparable\n'a' >= 4; // false;\n\nSymbols\nlet s1 = Symbol();\nlet s2 = Symbol();\ns1 <= s2; //Error, symbols cannot be converted to a number,\n// moreover symbols are unique, but there is no possibility to get a symbol\n// real value, so no point to compare them\n\nundefined and null\nnull >= undefined; // false;\nnull <= undefined; // false; undefined cannot be converted to a number\nnull <= true; // true;\ntrue <= null; // false\nnull <= 0; // true\n0 <= null; // true\nundefined <= 0; // false\n0 <= undefined; // false\n\nBooleans\ntrue <= false; // false;\nfalse <= true; // true;\ntrue <= 1; // true;\ntrue <= 4; // true;\ntrue <= 's'; // false\n's' <= true; // false\nnull <= false; // true;\n1n <= true; // true;\n0n <= true; // true;\n0n <= false; // true;\n1n <= false; // false;\n\n\nObjects\n({} <= {}); // TRUE\n({a:2}<={a:1}); // TRUE\n({a:1, b:2, c:3} <= {a:0}) // TRUE\n({a:1, b:2, c:3} >= {a:0}) // TRUE\n({a:1, b:2, c:3} <= []); // false\n({a:1, b:2, c:3} >= []); // true\n({a:1, b:2, c:3} <= [1, 2, 3, 4, 5]); // false\n({a:1, b:2, c:3} >= [1, 2, 3, 4, 5]); // true\n\nArrays\n[2,3] <= [1,2,3]; // false\n[2,3] >= [1,2,3]; // true\n[5] <= [5,6]; // true\n[5] >= [5,6]; // true\n// seems the first value is compared\n</pre>                            \n        \n                "),Object(_.a)(Y,"Operator","<code><=</code>"),Object(_.a)(Y,"Name","Less than"),Object(_.a)(Y,"Usage","g() <= f()"),Object(_.a)(Y,"Description","Returns true, left operand is smaller than or equal to the right one."),Y),(Q={},Object(_.a)(Q,Symbol("title"),">="),Object(_.a)(Q,Symbol("code"),"\n           Please refer to the less or equal than <code><=</code> operator examples\n                                        \n<pre>\n</pre>                            \n        \n                "),Object(_.a)(Q,"Operator","<code>>=</code>"),Object(_.a)(Q,"Name","Less than"),Object(_.a)(Q,"Usage","g() >= f()"),Object(_.a)(Q,"Description","Returns true, left operand is greater than or equal to the right one."),Q)]}];var fe,ye,ge,ve,we,je,Oe,Te,xe,Se,ke=[{elementType:"Headline-3",content:"Assignment operators"},{elementType:"Paragraph",content:"\n            Assignment operators assigns its right operand value to its left operand value.\n        "},{elementType:"ConditionalArray",headItems:["Operator","Name","Usage","Description"],content:[($={},Object(_.a)($,Symbol("title"),"="),Object(_.a)($,Symbol("code"),"\n                \n<pre>\nlet sum = function(acc, element){\nreturn acc + element;\n};\nlet a = 0; let b = 1; let c = 2;\nlet d = 3, e = 4; // d is 3, e is 4;\ne = a + b + [c, d, e].reduce(sum, 0);\nconsole.log(e);// 10;\n\ne = a = b = c = d;\n//e, a, b, c and d, all are equal to 3, as 'd' was 3\n//when assigned\n\nChain assignments evaluate from left to right, but then they are assigned from\nright to left:\na = (b = (c = (f() )))\nHowever chaining assignments is discouraged, aspecialy with <code>const</code>\n<code>let</code>, <code>var</code> it creates strage behaviours:\nlet a = b = c = 5;\nwill declare only a, and the rest (c, b) will:\n1) Not be declared at all and cause an error,\n2) May silently be declared as global variables.\n\n</pre>                            \n                \n                "),Object(_.a)($,"Operator","<code>=</code>"),Object(_.a)($,"Name","Assignment"),Object(_.a)($,"Usage","a = f()"),Object(_.a)($,"Description","Assigns the right evaluated expression to its left operand,"),$),(Z={},Object(_.a)(Z,Symbol("title"),"+="),Object(_.a)(Z,Symbol("code"),"          \n<pre>\nlet a = 1;\nlet b = 2\nlet c = '4';\nlet d = 'word';\nlet e = 5;\n\na += b; console.log(a); // 3;\na += c; console.log(a); \n// '34', because c was a string a gets converted to a string,\n// and the result is a string;\n\nd += a; // d is word34, as a was 34, and addition assignment \n//concatenates strings,\nb =+ a; // b is now 34, as there is no =+\n//operator in JS, so '=' is an assignment, and '+ a'\n// converts a (that was a string of 34) back to the number, so\n// b is a number of 34\n\n\n</pre>                                   \n                "),Object(_.a)(Z,"Operator","<code>+=</code>"),Object(_.a)(Z,"Name","Addition assignment"),Object(_.a)(Z,"Usage","a += f()"),Object(_.a)(Z,"Description","Adds or concatenates the evaluated expression on the right to the left operand\n                and assignes the result to the operand on the left,"),Z),(ee={},Object(_.a)(ee,Symbol("title"),"-="),Object(_.a)(ee,Symbol("code"),"          \n<pre>\nlet a = 'Hello World';\na -= 'World'; // NaN, no string substraction\nlet b = 10;\nb -= 1; // 9;\n</pre>                                   \n                "),Object(_.a)(ee,"Operator","<code>-=</code>"),Object(_.a)(ee,"Name","Substraction assignment"),Object(_.a)(ee,"Usage","a -= f()"),Object(_.a)(ee,"Description","\n                <code>a = a - f()</code> \n                Substracts the evaluated expression on the right from the left operand, and assignes the\n                reusult to the operand on the left,\n                "),ee),(te={},Object(_.a)(te,Symbol("title"),"*="),Object(_.a)(te,Symbol("code"),"          \n<pre>\nlet a = 'Hello World';\na *= 'World'; // NaN, no string multiplication\nlet b = 10;\nb *= 7; // 70;\n</pre>                                   \n                "),Object(_.a)(te,"Operator","<code>*=</code>"),Object(_.a)(te,"Name","Multiplication assignment"),Object(_.a)(te,"Usage","a *= f()"),Object(_.a)(te,"Description","\n                <code>a = a * f()</code> \n                Multiplicates the evaluated expression on the right with the left operand and assignes to the \n                variable on the left,\n                "),te),(ne={},Object(_.a)(ne,Symbol("title"),"/="),Object(_.a)(ne,Symbol("code"),"          \n<pre>\nlet a = 'Hello World';\na /= 2; // NaN, no string division\nlet b, c, d, e;\nb = c = d = e = 70;\nb /= 7; // 10;\nc /= -0; // -Infinity;\nd /= +0; // +Infinity;\n</pre>                                   \n                "),Object(_.a)(ne,"Operator","<code>/=</code>"),Object(_.a)(ne,"Name","Division assignment"),Object(_.a)(ne,"Usage","a /= f()"),Object(_.a)(ne,"Description","\n                <code>a = a / f()</code> \n                Divides the left operand by the evaluated expression on the rigth, and assigns the result to the\n                operand on the left,\n                "),ne),(oe={},Object(_.a)(oe,Symbol("title"),"%="),Object(_.a)(oe,Symbol("code"),"          \n<pre>\nlet a = 'Hello World';\na %= 2; // NaN, no string division\nlet b, c, d, e;\nb = c = d = e = 10;\nb /= 7; // 3;\nc /= -0; // NaN;\nd /= 0; // NaN;\n</pre>                                   \n                "),Object(_.a)(oe,"Operator","<code>%=</code>"),Object(_.a)(oe,"Name","Remainder assignment"),Object(_.a)(oe,"Usage","a %= f()"),Object(_.a)(oe,"Description","\n                <code>a = a % f()</code> \n                Divides the left operand by the evaluated expression on the rigth, and assigns the remainder to the\n                operand on the left,\n                "),oe),(ae={},Object(_.a)(ae,Symbol("title"),"**="),Object(_.a)(ae,Symbol("code"),"          \n<pre>\nlet a = 'Hello World';\na **= 2; // NaN, no raising a string to any power\nlet b, c, d;\nb = c = 5;\nd = Infinity;\nb **= 3; // 125;\nb **= +0; // 1;\nd **= -0; // 1;\nb **= Infinity; // 1 ** Infinity == NaN\nc **= Infinity; // Infinity;\nd **= Infinity; // Infinity;\n</pre>                                   \n                "),Object(_.a)(ae,"Operator","<code>**=</code>"),Object(_.a)(ae,"Name","Exponential assignment"),Object(_.a)(ae,"Usage","a **= f()"),Object(_.a)(ae,"Description","\n                <code>a = a ** f()</code> \n                Raises the value of a variable to the power of the right operand and assigns the result to the\n                left operand\n                "),ae),(re={},Object(_.a)(re,Symbol("title"),"<<="),Object(_.a)(re,Symbol("code"),"          \n<pre>\nlet a = 5;\nlet str = 'string';\nlet inf = Infinity;\nlet boolT = true;\nlet boolF = false;\na << =2; //20;\na.toString(20); //10100\nstr <<= 4; // 0;\ninf <<= 3; // 0;\nboolT <<= 3; // 8\nboolT.toString(2); // 1000\nboolF <<= 5; // 0;\n\nlet m = -5;\nm <<= 3; // -40\n\nIn general:\nn << m is n ** (2*m)\n</pre>                                   \n                "),Object(_.a)(re,"Operator","<code><<=</code>"),Object(_.a)(re,"Name","Left shift assignment"),Object(_.a)(re,"Usage","a <<= f()"),Object(_.a)(re,"Description","\n                <code>a = a <<= f()</code> \n                Moves the specified amount of bits to the left and asigns the result to the left operand;\n                "),re),(ie={},Object(_.a)(ie,Symbol("title"),">>="),Object(_.a)(ie,Symbol("code"),"          \n<pre>\nlet a, b, c;\na = b = c  = 100;\nlet str = 'string';\nlet inf = Infinity;\nlet boolT = true;\nlet boolF = false;\na >>= 1; // 50;\nb >>= 2; // 25;\nc >>= 3; // 12;\nstr >>= 4; // 0;\ninf >>= 3; // 0;\nboolT >>= 0; // 1;\nboolT >>= 1; // 0;\nboolF >>= 5; // 0;\n\nlet m = -100;\nm >>= 1;//-50\n\nIn general:\nn >> m is floor(n ** (0.5 * m));\n</pre>                                   \n                "),Object(_.a)(ie,"Operator","<code>>>=</code>"),Object(_.a)(ie,"Name","Sign propagating right shift assignment"),Object(_.a)(ie,"Usage","a >>= f()"),Object(_.a)(ie,"Description","\n                <code>a = a >>= f()</code> \n                Moves the specified amount of bits to the right and asigns the result to the left operand;\n                If a negative number is processed, then the literal negative value is taken\n                "),ie),(se={},Object(_.a)(se,Symbol("title"),">>>="),Object(_.a)(se,Symbol("code"),"          \n<pre>\nSee representation of negative numbers section for\nmore details.\nlet positive =  100;\nlet negative = -100;\npositive >>>= 1; // 50;\nnegative >>>= 1; // 2147483598\n-100 >> 1; // -50\n\n</pre>                                   \n                "),Object(_.a)(se,"Operator","<code>>>>=</code>"),Object(_.a)(se,"Name","Zero-fill right shift assignment"),Object(_.a)(se,"Usage","a >>>= f()"),Object(_.a)(se,"Description","\n                <code>a = a >>>= f()</code> \n                Moves the specified amount of bits to the right and asigns the result to the left operand;\n                "),se),(ce={},Object(_.a)(ce,Symbol("title"),"&="),Object(_.a)(ce,Symbol("code"),"          \n<pre>\nlet a = 5; // 101;\nlet b = 2; // 010;\na &= b; // 0 & 1 is 0, so 000 is the result;\nconsole.log(a); // 0\n\nlet c = 5;\nc &= 3; // 101 and 011, common bit is 001,\nconsole.log(c); // 1\n\nlet d = -5; // 11111111111111111111111111111011\n// this is the negative number representatnion:\n// (a >>> 0).toString(2);\nd &= 5; // 00...00101\n//common bit of 1011 and 0101 is 0001\nconsole.log(d); // 1\n\n\n</pre>                                   \n                "),Object(_.a)(ce,"Operator","<code>&=</code>"),Object(_.a)(ce,"Name","Bitwise AND assignment"),Object(_.a)(ce,"Usage","a &= f()"),Object(_.a)(ce,"Description","\n                <code>a = a &= f()</code> \n                Takes a binary representation of both operands, does a bitwise AND operation on them \n                and assigns the result to the left operator,\n                "),ce),(le={},Object(_.a)(le,Symbol("title"),"^="),Object(_.a)(le,Symbol("code"),"          \n<pre>\n0 ^ 0 == 0;\n1 ^ 1 == 0;\n0 ^ 1 == 0;\n1 ^ 0 == 0;\nlet a = 5;\na ^= 3; // 110 is 6\nlet b = -5;\nb ^= 3; \n// 11111111111111111111111111111011 ^\n// 00000000000000000000000000000101 =\n// 11111111111111111111111111111000 \n// and that is -8\n\n</pre>                                   \n                "),Object(_.a)(le,"Operator","<code>^=</code>"),Object(_.a)(le,"Name","Bitwise XOR assignment"),Object(_.a)(le,"Usage","a ^= f()"),Object(_.a)(le,"Description","\n                <code>a = a ^= f()</code> \n                Takes a binary representation of both operands, does a bitwise XOR on them and assigns the \n                result to the left operator,\n                "),le),(de={},Object(_.a)(de,Symbol("title"),"|="),Object(_.a)(de,Symbol("code"),"          \n<pre>\nlet a = 5;\na |= 3; // 101 | 011 is 111 so 7\nlet b = -8;\nb |= 8; // -8\n// -8 is  11111111111111111111111111111000\n// +8 is  00000000000000000000000000001000\n// result 11111111111111111111111111111000\n\n</pre>                                   \n                "),Object(_.a)(de,"Operator","<code>|=</code>"),Object(_.a)(de,"Name","Bitwise OR assignment"),Object(_.a)(de,"Usage","a |= f()"),Object(_.a)(de,"Description","\n                <code>a = a |= f()</code> \n                Takes a binary representation of both operands, does a bitwise OR on them and assigns the \n                result to the left operator,\n                "),de),(pe={},Object(_.a)(pe,Symbol("title"),"||="),Object(_.a)(pe,Symbol("code"),"          \n<pre>\nfalse || false === false;\ntrue || false === true;\nfalse || true === true;\ntrue || true === true;\n\nso:\nlet a = false;\na ||= false; //false\na ||= true; //true\na ||= false; // true, as it was already true in previous step;\n\nlet b = 5;\nb ||= true; //5\nb ||= false; //5\n\nlet c = 0;\nc ||= true; // 1\n\n5 || 7 === 5;\n7 || 5 === 7;\nnull || 'something' === 'something'\n\nfalse || null === null\nfalse || undefined === undefined\nnull || false === false;\n// it is important what will be the right side operand\n\nNOTE:\nlet notChanged = 0;\nlet f = () => {\nnotChanged = 5;\nreturn true;\n}\nlet d = true;\nd ||= f();\n// notChanged is still 0,\n// as there was no need to evaluate it\n\n</pre>                                   \n                "),Object(_.a)(pe,"Operator","<code>||=</code>"),Object(_.a)(pe,"Name","Logical OR assignment"),Object(_.a)(pe,"Usage","a ||= f()"),Object(_.a)(pe,"Description","\n                <code>x = y || f()</code> <code>x || (y = z)</code>, not <code> x = x || y</code>\n                Evaluates the right side operand expression <strong>only if the left site does not \n                determine the result</strong> and assigns to x <strong>only if the right sight\n                is evaluated and would change the left site operand value</strong>. However if the \n                right side operand is evaluated, the assertion will take place \n                <code>null || undefined === undefined</code> \n                "),pe),(me={},Object(_.a)(me,Symbol("title"),"&&="),Object(_.a)(me,Symbol("code"),"          \n<pre>\nfalse && false === false;\ntrue  && false === false;\nfalse && true === false;\ntrue  && true === true;\n\nso:\nlet a = false;\na &&= false; //false\na &&= true; //false\na &&= false; // No possibility to make true out of this with &&\nlet b = true;\nb &&= true; //true\nb &&= false; //false\nb &&= true; //false, as was made false in previous line\n\nlet b = 6;\nb &&= true; // true\nb &&= false; // false\n\nlet c = true;\nc &&= 5; // 5\nc &&= false; \nc &&= 5; //false\n\n5 && 7 === 7;\n7 && 5 === 5;\nnull && 'something' === null;\n\nNOTE:\nlet notChanged = 0;\nlet f = () => {\nnotChanged = 5;\nreturn true;\n}\nlet d = false;\nd &&= f();\n// notChanged is still 0,\n// as there was no need to evaluate it\n\n</pre>                                   \n                "),Object(_.a)(me,"Operator","<code>&&=</code>"),Object(_.a)(me,"Name","Logical AND assignment"),Object(_.a)(me,"Usage","a &&= f()"),Object(_.a)(me,"Description","\n                <code>x = y && f()</code> <code>x && (y = z)</code>, not <code> x = x && y</code>\n                Evaluates the right side operand expression <strong>only if the left side does not \n                determine the result</strong> and assigns to x the x AND f() result <strong>only if\n                necessarry</strong>\n                "),me),(ue={},Object(_.a)(ue,Symbol("title"),"??="),Object(_.a)(ue,Symbol("code"),"          \n<pre>\nlet a = null;\nlet b = undefined;\na ??= undefined; \n// a is undefined\nb ??= null;\n// b is null;\na ??= 5; // a is 5\nb ??= 'val'; // b is 'val'\na ?? 7; // a is 5, as it was not undefined or null\n\nNOTE:\nlet notChanged = 0;\nlet f = () => {\nnotChanged = 5;\nreturn true;\n}\nlet d = '';\nd ??= f();\n// notChanged is still 0,\n// as there was no need to evaluate it, d was != undefined or null\n\n</pre>                                   \n                "),Object(_.a)(ue,"Operator","<code>??=</code>"),Object(_.a)(ue,"Name","Logical nullish assignment"),Object(_.a)(ue,"Usage","a ??= f()"),Object(_.a)(ue,"Description","\n                Assigns a right hand expression only if left hand operand is <code>null</code> or\n                <code>undefined</code>. If left hand operand is not null or undefined the right hand\n                expression is not evaluated at all.\n                "),ue)]}];var Ne,Ie,Pe,Ae,Ee,Ce,Le,He=[{elementType:"Headline-3",content:"Arithmetic operators"},{elementType:"Paragraph",content:"\n        Arithmetic operators take left and right operand, perform an operation and return the result. \n        In case types of the operands do not match, an attempt to convert operands to a number is being performed.\n        BigInt type will not be converted to a number by default, though <code>Number(2n)</code> works.\n        In general, if there is no possibility to convert not matching type to a number, there will be an error.\n        There is an exception, the addition operator <code>+</code> is capable of joining strings. Moreover,\n        this operator will convert numbers to strings, so <code>5 + '5' === '55'</code>\n    "},{elementType:"ConditionalArray",headItems:["Operator","Name","Usage","Description"],content:[(fe={},Object(_.a)(fe,Symbol("title"),"+"),Object(_.a)(fe,Symbol("code"),"\n            <ul>\n                <li>Both numeric operands: returns a sum</li>\n                <li>At least one operand is a string: converts the second operand to string and returns a string</li>\n                <li>undefined + number is NaN</li>\n                <li>undefined + null is NaN</li>\n                <li>undefined + string is a string</li>\n                <li>null + number is the number</li>\n                <li>In case of an object (and Array) and any other operand converts to a string, where \n                object conversion is '[object Object]'</li>\n                <li>A BigInt will not be automatically converted into a number, but will be converted to \n                a string if the second operand is a string</li>\n            </ul>                   \n<pre>\n4 + 5 // 9\n4 + '5' // '45'\n\n<b>undefined and null</b>\nundefined + 5 // NaN\nundefined + null // NaN\nundefined + '5' // 'undefined5';\nnull + 5 // 5\n\n<b>Object</b>\n{a: 5} + 6; // 6, as equals to some block and a <code>+6</code> \n// a number with an unary operator <code>+</code>\n({a: 8} + 4); // '[object Object]4'\n[4] + 3; // '43'\n[3] + [4]; // '44'\n\n<b>BigInt</b>\n2n + 5; // Error, bigint will not be converted\nNumber(2n) + 5; // 7\n4n + '5'; // '45'\n\n<b>String</b>\n'abc' + 'cde' = 'abccde'\n\n</pre>                            \n            \n            "),Object(_.a)(fe,"Operator","<code>+</code>"),Object(_.a)(fe,"Name","Addition"),Object(_.a)(fe,"Usage","g() + f()"),Object(_.a)(fe,"Description","\n            In case of two number type operands returns a sum in case of two string operands returns a \n            concatenated string. In case of two different types, performes a conversion. See code section for more \n            (in case of a non mobile device click this row)\n            "),fe),(ye={},Object(_.a)(ye,Symbol("title"),"-"),Object(_.a)(ye,Symbol("code"),"                 \n<pre>\n5 - 6.5; // -1.5\n'5' - '4'// 1\n'5' - true; // 4\n4 - null; // 4\n\n'2n' - 1 // NaN conversion not possible\n3 - 's' // NaN conversion not possible\nundefined - null; // NaN, conversion not possible\n\n2n - 1; // Error, BigInt will not be converted by default\nNumber(2n) - 1; // 1\n\n</pre>                            \n            \n            "),Object(_.a)(ye,"Operator","<code>-</code>"),Object(_.a)(ye,"Name","Substraction"),Object(_.a)(ye,"Usage","g() - f()"),Object(_.a)(ye,"Description","\n            Evaluates operands and returns their difference. There will be an attempt to \n            convert operands to a number if they are not a number and conversion is \n            possible\n            "),ye),(ge={},Object(_.a)(ge,Symbol("title"),"*"),Object(_.a)(ge,Symbol("code"),"                 \n<pre>\n5 * 6.5; // 32.5\n'5' * '4'// 20\n'5' * true; // 5\n4 ) null; // 4\n\n'2n' * 1 // NaN conversion not possible\n3 * 's' // NaN conversion not possible\nundefined * null; // NaN, conversion not possible\n\n2n * 1; // Error, BigInt will not be converted by default\nNumber(2n) * 1; // 2\n\n</pre>                            \n            \n            "),Object(_.a)(ge,"Operator","<code>*</code>"),Object(_.a)(ge,"Name","Multiplication"),Object(_.a)(ge,"Usage","g() * f()"),Object(_.a)(ge,"Description","\n            Evaluates operands and returns their product value. There will be an attempt to \n            convert operands to a number if they are not a number and conversion is \n            possible. \n            "),ge),(ve={},Object(_.a)(ve,Symbol("title"),"/"),Object(_.a)(ve,Symbol("code"),"                 \n<pre>\n5 / 6.5; // 0.7692307692307693\n'5' / '4'// 1.25\n'5' / true; // 5\n4 / null; // Infinity\n4 / Infinity; // 0\n4 / -Infinity; // -0\n\n'2n' / 1 // NaN conversion not possible\n3 / 's' // NaN conversion not possible\nundefined / null; // NaN, conversion not possible\n\n2n / 1; // Error, BigInt will not be converted by default\nNumber(2n) / 1; // 2\n\n'5' / [4]; // 1.25 as both may be converted to numbers\n'4' / [2, 33]; // NaN, as array with 2 elements will not be converted to a number\n\n</pre>                            \n            \n            "),Object(_.a)(ve,"Operator","<code>/</code>"),Object(_.a)(ve,"Name","Division"),Object(_.a)(ve,"Usage","g() / f()"),Object(_.a)(ve,"Description","\n            Evaluates operands and returns their quotient value. There will be an attempt to \n            convert operands to a number if they are not a number and conversion is \n            possible\n            "),ve),(we={},Object(_.a)(we,Symbol("title"),"%"),Object(_.a)(we,Symbol("code"),"   \n    This is not a modulo operator known from, for example Python, or Microsoft C++ (in C++ % operator may be\n    modulo or remainder, depending on the implementation).\n    <table class=\"table\">\n    <thead><tr><th>expression</th><th>Remainder</th><th>Modulo</th></tr></thead>\n    <tbody>\n        <tr><td>10 % 3</td><td>1</td><td>1</td></tr>\n        <tr><td>-10 % 3</td><td>-1</td><td>1</td></tr>\n        <tr><td>10 % -3</td><td>1</td><td>-1</td></tr>\n        <tr><td>-10 % -3</td><td>-1</td><td>-1</td></tr>\n    </tbody>\n    </table>\n    So in the <u>reminder case, the sign of the result will always be the same as the sign of the first operand</u>, \n    where in the case of the modulo the sign of the result will always be the same as the sign of the second operand.\n    The result should always be an integer, however, refer to the number representation article to learn why this \n    does not happen in all cases.\n<pre>\n 10 %  3; //  1\n-10 %  3; // -1\n 10 % -3; //  1\n-10 % -3; // -1\n\n0.2 % 0.5; // 0.2\n// But\n0.5 % 0.1; // 0.09999999999999998 :o\n// This is because it is not possible to \n// represent 0.1 in binary format without an error\n\n[-4] % [6]; // -4 - conversion to numbers\n'[-4]' % [6]; // NaN - this cannot be converted anymore\n\nInfinity % 5; // NaN\n5 % Infinity; // 5\n\n-0 % 5; // -0 - there are 2 zeros in JS\n// see number representation section to learn more\n5 % 0; // NaN\n\n1 % Number.MIN_VALUE; // 0\n// But\n1 % 0; // NaN\n\n</pre>                            \n    \n    "),Object(_.a)(we,"Operator","<code>%</code>"),Object(_.a)(we,"Name","Remainder"),Object(_.a)(we,"Usage","g() % f()"),Object(_.a)(we,"Description","\n    Evaluates operands and returns the remainder of their division operation. There will be an attempt to \n    convert operands to a number if they are not a number and the conversion is possible. <b>This is not\n    a modulo</b> operator, see code section (in not mobile devices click on a row) to learn more\n    "),we),(je={},Object(_.a)(je,Symbol("title"),"++"),Object(_.a)(je,Symbol("code"),"   \n<ul>\n<li>If <code>++<</code> is a prefix operator <code>++a</code> incrementation is done before the returnment</li>\n<li>If <code>++<</code> is a postfix operator <code>a++</code> incrementation is done after the returnment</li>\n<li>Bad code because of code readability issues. It might be error prone. It is better to be more verbose.</li>\n</ul>\n<pre>\nlet i = 0;\ni++++; // SyntaxError: do not combine\n(i++)++; // SyntaxError: left side operator not correct\n++i++; // SyntaxError: again :)\nlet j = i++; //j is 0, i is 1; as if ++ is a postrix incrementation is done after returning\nlet k = ++i; //k is 2 and i is 2, as if ++ is a prefix incremetation is done before returning\n\n\nlet a = 1;\nlet b = 2;\nlet c = a++ + ++b;\n// a is 2 after this operation, but when taken to the sum operation, it was still 1\n// b is 3 and was 3 when was taken as a sum operand\n// c is 4, as a was 1 when the sum was performed, and b has already been 3\n// This might get tangled when used like this, and is error prone\n// I guess this is the reason why not to use this.\n\nThe alternative would be:\nlet c = a + (b += 1);\n\nBut this is not a straightforward syntax either, so better to be more verbose:\nlet a = 1;\nlet b = 2;\nlet b += 1;\nlet c = a + b;\nlet a += 1;\n// More lines, but better readability\n</pre>                            \n    \n    "),Object(_.a)(je,"Operator","<code>++</code>"),Object(_.a)(je,"Name","Remainder"),Object(_.a)(je,"Usage","i++ or ++i"),Object(_.a)(je,"Description","\n    Increments an operand by 1 before or after returning it. This operator is considered a <b>bad code</b> and should\n    not be used.\n    "),je),(Oe={},Object(_.a)(Oe,Symbol("title"),"--"),Object(_.a)(Oe,Symbol("code"),"   \n<ul>\n<li>If <code>--<</code> is a prefix operator <code>--a</code> decrementation is done before the returnment</li>\n<li>If <code>--<</code> is a postfix operator <code>a--</code> decrementation is done after the returnment</li>\n<li>Bad code because of code readability issues. It might be error prone. It is better to be more verbose.</li>\n</ul>\n<pre>\nlet i = 1;\ni----; // SyntaxError: do not combine\n(i--)--; // SyntaxError: left side operator not correct\n--i--; // SyntaxError: again :)\nlet j = i--; //j is 1, i is 0; as if -- is a postrix decrementation is done after returning\nlet k = --i; //k is -1 and i is -1, as if -- is a prefix decremetation is done before returning\n\n\nlet a = 1;\nlet b = 2;\nlet c = a-- - --b;\n// a is 0 after this operation, but when taken to the sum operation, it was still 1\n// b is 1 and was 1 when was taken as a sum operand\n// c is 0, as a was 1 when the sum was performed, and b has already been 1\n// This might get tangled when used like this, and is error prone\n// I guess this is the reason why not to use this.\n\nThe alternative would be:\nlet c = a - (b -= 1);\n\nBut this is not a straightforward syntax either, so better to be more verbose:\nlet a = 1;\nlet b = 2;\nlet b -= 1;\nlet c = a - b;\nlet a -= 1;\n// More lines, but better readability\n</pre>                            \n    \n    "),Object(_.a)(Oe,"Operator","<code>++</code>"),Object(_.a)(Oe,"Name","Remainder"),Object(_.a)(Oe,"Usage","i-- or --i"),Object(_.a)(Oe,"Description","\n    Decrements an operand by 1 before or after returning it. This operator is considered a <b>bad code</b> and should\n    not be used.\n    "),Oe),(Te={},Object(_.a)(Te,Symbol("title"),"unary -"),Object(_.a)(Te,Symbol("code"),"                      \n    Normally --1 is +1, but due to the fact, that there is an <code>--</code> operator in JS this should be written \n    with brackets: <code>-(-1)</code>. However <code>-+-+-1 === -1</code> is true without any error\n<pre>\nlet a = 10;\na =- 1; // a is -1 !!! Note. This is not the same as <code>a -= 1</code>\n// In JS there is no =- operator, and this may be the cause of a bug. \nlet a = -1; // The correct way of using spaces;\n\nlet a = -+-+-1; // -1;\nlet a = ---1; // Error, should be -(--a);\n\n-'-4'; // 4\n'-+-+4' + 2; // NaN\n\n</pre>\n    "),Object(_.a)(Te,"Operator","<code>unary -</code>"),Object(_.a)(Te,"Name","Unary negation"),Object(_.a)(Te,"Usage","-i"),Object(_.a)(Te,"Description","\n    Has only a right operand. Converts the operand to the number if necessary and doable, converts a positive \n    operand to its negative substitute, and a negative operand to its positive substitute. Works like a <code>Number(a) * (-1)</code>\n    "),Te),(xe={},Object(_.a)(xe,Symbol("title"),"unary +"),Object(_.a)(xe,Symbol("code"),"                      \n    Normally ++1 is +1, but due to the fact, that there is an <code>++</code> operator in JS this should be written \n    with brackets: <code>+(+1)</code>. However <code>+-+-+1 === 1</code> is true without any error. This is pure \n    theory, as it is better to write <code>1</code>\n<pre>\nlet a = 10;\nlet a =+ 1; // a is 1 !!! Note. This is not the same as <code>a += 1</code>\n// In JS there is no =+ operator, and this may be the cause of a bug. \nlet a = -1; // The correct way to use spaces;\n\nlet a = +-+-+1; // 1;\nlet a = +++1; // Error, should be +(++a);\n\n</pre>\n    "),Object(_.a)(xe,"Operator","<code>unary +</code>"),Object(_.a)(xe,"Name","Unary plus"),Object(_.a)(xe,"Usage","-i"),Object(_.a)(xe,"Description","\n    Has only a right operand. Converts the operand to the number if necessary and doable, Perform the \n    evaluation of the operand if necessary. Does nothing more, because it converts a positive number to positive,\n    and negative to the negative. May be omitted.\n    "),xe),(Se={},Object(_.a)(Se,Symbol("title"),"**"),Object(_.a)(Se,Symbol("code"),"                      \n    In some languages (PHP, Pythom) ** has a higher precedence than unary operators. In JS if a left side operator\n    has to have an unary operator applied, it should, together with the unary operator, be surrounded with brackets.\n    \n<pre>\n2 ** 9; // 512;\n2 ** -9; //0.001953125;\n-2 ** 9; // Error\n(-2) ** 9; // -512;\n\n(-2)**1.345; // NaN; In reality, this is a complex number: (-1.18868303 - 2.24503157 i)\n// Would be calculated by Python, but not by JS\n// Is JS worst? It has not a build in mechanism, but can be done with a library:\n// https://mathjs.org/\nmath.pow(-2, 1.345); // u\xa0{re: -1.1886830266845214, im: -2.2450315667823326}\n// This is math.pow, not Math.pow!!\n\n'3' ** 4; // 81\n\n\n</pre>\n    "),Object(_.a)(Se,"Operator","<code>**</code>"),Object(_.a)(Se,"Name","Exponentiation"),Object(_.a)(Se,"Usage","a ** b"),Object(_.a)(Se,"Description","\n    <code>Math.pow(a, b)</code> except <code>**</code> accepts BigInts. Returns a power of b. \n    Left side operand may not have an unary operator directly applied.\n    "),Se)]}];var Me,De,Re,Fe,Ue=[{elementType:"Headline-3",content:"Bitwise operators"},{elementType:"NoteWarning",content:"\n        Bitwise operators make take both: BitInts and numbers as operands. Exception is ther right shift zero-fill\n        operator. The condition is that both operands are of the same type.\n        "},{elementType:"Paragraph",content:'\n            Bitwise operators are covered in more details in the <a href="./#/theory/bitwise%20use%20cases">bitwise use cases</a>\n            article. This is just a summary.\n        '},{elementType:"UnsignedList",content:['Numbers in JS are represented in a \n            <a href = "./#/theory/number%20representation">double precision floating point representation</a>\n            However the longest it is possible they are represented on 32 bits, as an integer. Double precision\n            is applied only if the number does not fit into range -2<sup>31</sup> to 2<sup>31</sup> or becomes a \n            fraction. \n            ',"Bitwise operations are safest in the range of numbers, that can be represented on 32 bits. \n            In case of the bigger number only the last 32 bit part is taken into account: <code>~85899345925 === ~-5</code>,\n            <code>~5.35 === ~ 5<code>","There are problems when shifting with a bitwise operator with a number of bits >= 32, because in some \n            circumstances last bit is discarded, and on other occassions it becomes rewinded back to the first positions:\n            <code>5 >> 64 === 5</code>, but <code>5 >> 65 === 2</code>. This is predictable, however may be error prone."]},{elementType:"ConditionalArray",headItems:["Operator","Name","Usage","Description"],content:[(Ne={},Object(_.a)(Ne,Symbol("title"),"~"),Object(_.a)(Ne,Symbol("code"),"\n                <ul>\n                    <li><code>~0</code>: 1</li>\n                    <li><code>~1</code>: 0</li>\n                </ul>\n\n<pre>\n~-1; // 0;\n~5; // -6; as -6 is 11111111111111111111111111111010 and -5 is 101\n~4; // -5;\n~4.32; // -5\n~(2**32); // -1, as ((2**32)>>>0) is 0, this number cannot be \n// represented on 32 bits, due to the fact, that the most significant bit is \n// a sign bit\n</pre>                            \n                "),Object(_.a)(Ne,"Operator","<code>~</code>"),Object(_.a)(Ne,"Name","Bitwise NOT"),Object(_.a)(Ne,"Usage","~ a"),Object(_.a)(Ne,"Description","Inverts bits of its operand,"),Ne),(Ie={},Object(_.a)(Ie,Symbol("title"),"&"),Object(_.a)(Ie,Symbol("code"),"\n                <ul>\n                    <li><code>0 & 0</code>: 0</li>\n                    <li><code>0 & 1</code>: 0</li>\n                    <li><code>1 & 0</code>: 0</li>\n                    <li><code>1 & 1</code>: 1</li>\n                    <li><code>A & 0</code>: 0</li>\n                    <li><code>A & ~A</code>: 0</li>\n                    <li><code>A & A</code>: A</li>\n                    <li><code>A & -1</code>: A</li>\n                </ul>\n\n<pre>\n22 & 21; // 20\n// 22 = 10110 &\n// 21 = 10101 \n// 20 = 10100\n\n22n & 21n; // 20n;\n\n22.34 & 21.32; //20\n\n</pre>                            \n                "),Object(_.a)(Ie,"Operator","<code>&</code>"),Object(_.a)(Ie,"Name","Bitwise AND"),Object(_.a)(Ie,"Usage","a & b"),Object(_.a)(Ie,"Description","Performs a logical AND operation for each bit position of operands"),Ie),(Pe={},Object(_.a)(Pe,Symbol("title"),"|"),Object(_.a)(Pe,Symbol("code"),"\n                <ul>\n                    <li><code>0 | 0</code>: 0</li>\n                    <li><code>0 | 1</code>: 1</li>\n                    <li><code>1 | 0</code>: 1</li>\n                    <li><code>1 | 1</code>: 1</li>\n                    <li><code>A | 0</code>: A</li>\n                    <li><code>A | ~A</code>: -1</li>\n                    <li><code>A | A</code>: A</li>\n                    <li><code>A | -1</code>: -1</li>\n                </ul>\n\n<pre>\n22 | 21; // 23\n// 22 = 10110 |\n// 21 = 10101 \n// 20 = 10111\n\n22n | 21n; //23n\n\n22.34 | 21.32; //20\n\n</pre>                            \n                "),Object(_.a)(Pe,"Operator","<code>|</code>"),Object(_.a)(Pe,"Name","Bitwise OR"),Object(_.a)(Pe,"Usage","a | b"),Object(_.a)(Pe,"Description","Performs a logical OR operation for each bit position of operands"),Pe),(Ae={},Object(_.a)(Ae,Symbol("title"),"^"),Object(_.a)(Ae,Symbol("code"),"\n                <ul>\n                    <li><code>0 ^ 0</code>: 0</li>\n                    <li><code>0 ^ 1</code>: 1</li>\n                    <li><code>1 ^ 0</code>: 1</li>\n                    <li><code>1 ^ 1</code>: 0</li>\n                    <li><code>A ^ 0</code>: A</li>\n                    <li><code>A ^ ~A</code>: -1</li>\n                    <li><code>A ^ A</code>: 0</li>\n                    <li><code>A ^ -1</code>: ~A</li>\n                </ul>\n\n<pre>\n22 ^ 21; // 3\n// 22 = 10110 ^\n// 21 = 10101 \n// 20 = 00011\n\n22n ^ 21n; // 3n;\n\n22.34 ^ 21.32; //3\n\n</pre>                            \n                "),Object(_.a)(Ae,"Operator","<code>^</code>"),Object(_.a)(Ae,"Name","Bitwise ^"),Object(_.a)(Ae,"Usage","a ^ b"),Object(_.a)(Ae,"Description","Performs a logical XOR operation for each bit position of operands"),Ae),(Ee={},Object(_.a)(Ee,Symbol("title"),"<<"),Object(_.a)(Ee,Symbol("code"),"\n                \n\n<pre>\n// tests the replacement function\nlet left = (a, b) => {return (Math.floor(a) * (2 ** (Math.floor(b>>>0) % 32))) & -1}\nlet leftBit = (a, b) => {return a << b}\nconsole.log(left(5, 32) === leftBit(5, 32)); // true\nconsole.log(left(5, 33) === leftBit(5, 33)); // true\nconsole.log(left(5, 2) === leftBit(5, 2)); // true\nconsole.log(left(-5, 2) === leftBit(-5, 2)); // true\nconsole.log(left(5.3, 2.3) === leftBit(5.3, 2.3)); // true\nconsole.log(left(5, -1) === leftBit(5, -1)); // true\nconsole.log(left(52, -2) === leftBit(52, -2)); // true\nconsole.log(left(5, 0) === leftBit(5, 0)); // true\n\n22 << 2; // 88\n// 22 = 0010110 << 2\n// 28 = 1010100 \n\n22n << 2n; // 88n\n\n(5.5 << 2.5) === (5 << 2); //true;\n\n5 << -1; // -2147483648\n5 << -2; // 1073741824\n5 << -3; // -1610612736\n// 101 << -1 is 10000000000000000000000000000000\n// 101 << -2 is 01000000000000000000000000000000\n// 101 << -3 is 10100000000000000000000000000000\n\n\n</pre>                            \n                "),Object(_.a)(Ee,"Operator","<code><<</code>"),Object(_.a)(Ee,"Name","Left shift"),Object(_.a)(Ee,"Usage","a << b"),Object(_.a)(Ee,"Description","\n                In general:\n                <code>a << b is a * (2 ** b) </code>, in reality: <br>\n                <code>Math.floor(a) * (2 ** (Math.floor(b>>>0) % 32))) & -1</code>,<br>\n                Changes the left and right operand to the 32 integer representation, and shifts the left operand \n                bits the number of positions indicated by the right operand modulo 32 to the left.\n                \n                "),Ee),(Ce={},Object(_.a)(Ce,Symbol("title"),">>"),Object(_.a)(Ce,Symbol("code"),"\n                \n\n<pre>\n// tests the replacement function\nlet right = (a, b) => {\n    maskOfLeftMostZeros = b === 0?-1:2**(32-b%32)-1;\n    if (a < 0) {return (Math.floor(a / (2 ** b)) & maskOfLeftMostZeros)}\n    return (Math.floor(a >>> 0) / (2 ** (Math.floor(b>>>0) % 32))) & -1\n}\nlet rightBit = (a, b) => {\n    return a >>> b}\nconsole.log(right(5, 32) === rightBit(5, 32)); // true\nconsole.log(right(5, 33) === rightBit(5, 33)); // true\nconsole.log(right(5, 2) === rightBit(5, 2)); // true\nconsole.log(right(-5, 2) === rightBit(-5, 2)); // true\nconsole.log(right(-5, 1) === rightBit(-5, 1)); // true\nconsole.log(right(-5, 3) === rightBit(-5, 3)); // true\nconsole.log(right(-5, 4) === rightBit(-5, 4)); // true\nconsole.log(right(-5, 5) === rightBit(-5, 5)); // true\nconsole.log(right(-52, 5) === rightBit(-52, 5)); // true\nconsole.log(right(-52, 4) === rightBit(-52, 4)); // true\nconsole.log(right(-52, 3) === rightBit(-52, 3)); // true\nconsole.log(right(5.3, 2.3) === rightBit(5.3, 2.3)); // true\nconsole.log(right(5, -1) === rightBit(5, -1)); // true\nconsole.log(right(52, -2) === rightBit(52, -2)); // true\nconsole.log(right(52, -31) === rightBit(52, -31)); // true\nconsole.log(right(5, 0) === rightBit(5, 0)); // true\n\n22 >> 2; // 5\n// 22 = 0010110 >> 2\n//  5 = 0000101 \n\n22n >> 2n; // 5n;\n\n(5.5 >> 2.5) === (5 >> 2); //true;\n-5 >> 2; // -2\n-5.5 >> 2.5; // 1\n// -5 is 11111111111111111111111111111011\n// -2 is 11111111111111111111111111111110\n\n5 >> 1; // 2\n5 >> 2; // 1\n\n\n5 >> -1; // 0;\n5 >> - 2; // 0;\n5 >> - 3; // 0;\n...\n5 >> -30; // 1\n5 >> -31; // 2\n5 >> -32; // 5\n// 101 >> -30 is 00000000000000000000000000000001\n// 101 >> -31 is 00000000000000000000000000000010\n// 101 >> -32 is 00000000000000000000000000000101\n\n5 >> -1; // -1;\n5 >> -3; // -1;\n...\n5 >> -30; // -2;\n\n\n</pre>                            \n                "),Object(_.a)(Ce,"Operator","<code>>></code>"),Object(_.a)(Ce,"Name","Sign-propagating Right shift"),Object(_.a)(Ce,"Usage","a >> b"),Object(_.a)(Ce,"Description","\n                In general:\n                <code>a >> b is Math.floor(a / (2 ** b)) </code>, in reality a bit more comples.\n                Changes the left and right operand to the 32 bit integer representation, and shifts the left operand \n                bits the number of positions indicated by the right operand modulo 32 to the right.\n                \n                "),Ce),(Le={},Object(_.a)(Le,Symbol("title"),">>>"),Object(_.a)(Le,Symbol("code"),"\n<pre>\n// tests the replacement function\n// let right = (a, b) => {return (Math.floor(a) / (2 ** (Math.floor(b>>>0) % 32))) & -1}\nlet right = (a, b) => {\n    if (a < 0) return Math.floor(a / (2 ** b))\n    return (Math.floor(a >> 0) / (2 ** (Math.floor(b>>>0) % 32))) & -1\n}\nlet rightBit = (a, b) => {return a >>> b}\nconsole.log(right(5, 32) === rightBit(5, 32)); // true\nconsole.log(right(5, 33) === rightBit(5, 33)); // true\nconsole.log(right(5, 2) === rightBit(5, 2)); // true\nconsole.log(right(-5, 2) === rightBit(-5, 2)); // true\nconsole.log(right(-5, 1) === rightBit(-5, 1)); // true\nconsole.log(right(-5, 3) === rightBit(-5, 3)); // true\nconsole.log(right(-5, 4) === rightBit(-5, 4)); // true\nconsole.log(right(-5, 5) === rightBit(-5, 5)); // true\nconsole.log(right(-52, 5) === rightBit(-52, 5)); // true\nconsole.log(right(-52, 4) === rightBit(-52, 4)); // true\nconsole.log(right(-52, 3) === rightBit(-52, 3)); // true\nconsole.log(right(5.3, 2.3) === rightBit(5.3, 2.3)); // true\nconsole.log(right(5, -1) === rightBit(5, -1)); // true\nconsole.log(right(52, -2) === rightBit(52, -2)); // true\nconsole.log(right(52, -31) === rightBit(52, -31)); // true\nconsole.log(right(5, 0) === rightBit(5, 0)); // true\n\n22 >>> 2; // 5\n// 22 = 0010110 >>> 2\n//  5 = 0000101 \n\n(5.5 >> 2.5) === (5 >> 2); //true;\n-5 >> 2; // 1073741822\n-5.5 >> 2.5; // 1073741822\n// -5         is 11111111111111111111111111111011\n// 1073741822 is 00111111111111111111111111111110\n\n5 >>> -1; // 0;\n5 >>> -2; // 0;\n5 >>> -3; // 0;\n...\n5 >>> -30; // 1\n5 >>> -31; // 2\n5 >>> -32; // 5\n// 101 >> -30 is 00000000000000000000000000000001\n// 101 >> -31 is 00000000000000000000000000000010\n// 101 >> -32 is 00000000000000000000000000000101\n\n</pre>                            \n                "),Object(_.a)(Le,"Operator","<code>>>></code>"),Object(_.a)(Le,"Name","Zero-fill right shift"),Object(_.a)(Le,"Usage","a >>> b"),Object(_.a)(Le,"Description","\n                This operator takes two arguments, and converts the left one to 32-bit integer if possible. \n                    The bits of the left operand will be shifted the number of positions indicated by the right \n                    operand % 32 to the right. Left most bits will be filled with zeros. <br>\n                    This is currently the only operator in JS allowing to see how the real bit representation of a \n                    negative number looks like: <code>(-5 >>> 0).toString(2)</code> will show all bits, including the\n                    sign bit. The bits that do not fit (are moved to the right of the bit with index 0) will be lost.\n                "),Le)]}];var Be,_e,qe,We,ze,Ke,Ve,Ge,Je,Xe=[{elementType:"Headline-3",content:"Logical operators"},{elementType:"Paragraph",content:"\n           The expressions being operands of the logical operators evaluate from the left to the right, but only if the first\n           opearand does not determine the result. In case the first operand determines the result, it is returned, and \n           the second one is not evaluated, meaning, that side effects related to evaluation of the second operand will not \n           take place.\n        "},{elementType:"Paragraph",content:"\n           Operators <code>||</code>, <code>&&</code>, <code>??</code> return expressions, values (not only booleans),\n           and the negation <code>!</code> returns a boolean.\n        "},{elementType:"SmallHeadline",content:"What evaluates to false?"},{elementType:"Paragraph",content:"\n           <code>NaN</code>, <code>null</code>, <code>undefined</code>, <code>0</code>, <code>''</code> and \n           <code>0n</code> evaluate to <code>false</code>. The rest evaluates to true.\n        "},{elementType:"NoteWarning",content:"\n        <code>new Boolean(false)</code> evaluates to <strong>true</code>, as it is an object, not a \n        primitive\n        "},{elementType:"ConditionalArray",headItems:["Operator","Name","Usage","Description"],content:[(Me={},Object(_.a)(Me,Symbol("title"),"!"),Object(_.a)(Me,Symbol("code"),"\n                <ul>\n                <li><code>!true</code>: false</li>\n                <li><code>!false</code>: true</li>\n                <ul>\n<pre>\n    !true === false\n    !false === true;\n    !-1 === false;\n    !0 === true;\n    !NaN === true;\n    !undefined === true;\n    !0n === true;\n    !null === true;\n    !'' === true;\n    ![] === false\n    !{} === false;\n\n    !!x === Boolean(x); // a conversion \n\n    let a = new Boolean(false);\n    !a === false; // a is an object\n</pre>                    \n                "),Object(_.a)(Me,"Operator","<code>!</code>"),Object(_.a)(Me,"Name","Logical NOT"),Object(_.a)(Me,"Usage","!expression"),Object(_.a)(Me,"Description","\n                <ul>\n                <li>If expression is true, returns false</li>\n                <li>If expression is false, returns true</li>\n                </ul>\n                "),Me),(De={},Object(_.a)(De,Symbol("title"),"||"),Object(_.a)(De,Symbol("code"),'\n                <ul>\n                <li><code>(ex1 === true) || (ex2)</code>: ex1</li>\n                <li><code>(ex1 === false) || (ex2)</code>: ex2</li>\n                <ul>\n<pre>\n"text1" || "text2"; // "text1"\n"" || "text1"; // "text1"\n\nnull || 0; // 0;\n0 || null; // null;\n\nlet a = 3;\nlet f = ()=>{a+=1}\n1 || f(); // 1\nconsole.log(a); // 3; f not executed, as left operand was already true;\n0 || f(); // undefined, as f does not return anything;\nconsole.log(a); // 4; now f was executed\n\n</pre>                    \n                '),Object(_.a)(De,"Operator","<code>||</code>"),Object(_.a)(De,"Name","Logical OR"),Object(_.a)(De,"Usage","expression1 || expression2"),Object(_.a)(De,"Description","\n                <ul>\n                <li>If expression1 evaluates to true, returns first expression, does not evaluate expression2 at all</li>\n                <li>If expression1 evaluates to false, returns the second expression, in this case both expressions\n                are evaluated</li>\n                </ul>\n                "),De),(Re={},Object(_.a)(Re,Symbol("title"),"&&"),Object(_.a)(Re,Symbol("code"),'\n                <ul>\n                <li><code>(ex1 === false) && (ex2)</code>: ex1</li>\n                <li><code>(ex1 === true) && (ex2)</code>: ex2</li>\n                <ul>\n<pre>\n"text1" && "text2"; // "text2"\n"" && "text1"; // ""\n\nnull && 0; // null;\n0 && null; // 0;\n\nlet a = 3;\nlet f = ()=>{a+=1}\n0 && f(); // 0\nconsole.log(a); // 3; f not executed, as left operand already determined the result;\n1 && f(); // undefined, as f does not return anything;\nconsole.log(a); // 4; now f was executed\n\n</pre>                    \n                '),Object(_.a)(Re,"Operator","<code>&&</code>"),Object(_.a)(Re,"Name","Logical AND"),Object(_.a)(Re,"Usage","expression1 && expression2"),Object(_.a)(Re,"Description","\n                <ul>\n                <li>If expression1 evaluates to false, returns first expression, does not evaluate expression2 at all</li>\n                <li>If expression1 evaluates to true, returns the second expression, in this case both expressions\n                are evaluated</li>\n                </ul>\n                "),Re),(Fe={},Object(_.a)(Fe,Symbol("title"),"??"),Object(_.a)(Fe,Symbol("code"),"\n                <ul>\n                <li><code>(ex1 === (null || undefined)) ?? (ex2)</code>: ex2</li>\n                <li><code>(ex1 !== (null || undefined)) ?? (ex2 === (null || undefined))</code>: ex1</li>\n                <ul>\n<pre>\n'text1' ?? null; // 'text1'\nundefined ?? 'text1'; // 'text1'\n\nnull ?? undefined; // undefined;\nundefined ?? null; // null;\n\nfalse ?? null; // false;\n'' ?? 'text'; // 'text';\nlet a = 1;\nlet f = ()=> {a += 1};\ntrue ?? f(); // true;\nconsole.log(a); // 1, as f was not evaluated, because left side operand \n// already determined the result;\nnull ?? f(); // undefined, as f() returns nothing;\nconsole.log(a); // 2; as left operand was null, and right had to be evaluated;\n\n</pre>                    \n                "),Object(_.a)(Fe,"Operator","<code>??</code>"),Object(_.a)(Fe,"Name","Logical nullish coalescing"),Object(_.a)(Fe,"Usage","expression1 ?? expression2"),Object(_.a)(Fe,"Description","\n                <ul>\n                <li>If the left expression evaluates to something other than null or undefined, returns the \n                result of the first expression</li>\n                <li>If left expression evaluates to null or undefined, returns the result of the second expression</li>\n                </ul>\n                "),Fe)]}];var Ye=[{elementType:"Headline-3",content:"Other operators"},{elementType:"Paragraph",content:"\n        The other operators are: a <i>conditional (ternary)</i> operator, a <i>comma</i> operator, a <i>delete</i> \n        operator, a <i>typeof</i> operator, a <i>void</i> operator, an <i>instanceof</i> operator and an <i>in</i> operator, , \n        "},{elementType:"SmallHeadline",content:"Releasing memory in JS"},{elementType:"Paragraph",content:"\n        Memory management in JS is done automatically. There is no possiblity to tirgger manual memory release.\n        Memory may be alocated by creating a new property, variable or with a <code>new</code> operator.\n        There are two algorithms for releasing the allocated memory (garbage collection):\n        "},{elementType:"Paragraph",content:"\n        <strong>A reference counting garbage collection</strong>: if the property has any reference pointing to it\n         it will not be garbage collected. There is a problem with the circural references. If an object points \n         somehow to itsself, it will not be garbage collected with this algorithm\n        "},{elementType:"Code",content:"\n<pre>\nlet obj = {\n    a: {\n        b: 3\n    }\n} // obj.a is a reference to the a property\n// obj.a.b is a reference to an b property\n\nlet x = obj.a; //now a property has two references, so\ndelete obj.a; // will make a property unavailable from the obj, \n// but it may not be garbage collected, as it is still referenced by the x variable\n\nlet obj = {\n    a: {\n        x: {val: 3},\n        y: {val: 4}\n    }\n}\nobj.a.x[ref] = obj.a.y;\nobj.a.y[ref] = obj.a.x;\ndelete obj.a\n// now a is unreachable from anywhere, as the only reference was deleted,\n// but it may not be garbage collected, as there is a cycle reference\n// This would cause a memory leak if this algorithm is applied\n\n</pre>        \n        "},{elementType:"Paragraph",content:"\n        <strong>Mark-and-sweep</strong>: a property may be garbage collected if it is not reachable from the \n        global object in any way. This approach is used since 2012, and prevents memory leaks.\n        "},{elementType:"ConditionalArray",headItems:["Operator","Name","Usage","Description"],content:[(Be={},Object(_.a)(Be,Symbol("title"),"conditional ternary"),Object(_.a)(Be,Symbol("code"),"\n<pre>\n ''?'expr1':'expr2'; expr2, as '' converts to false\n (()=>{return true})()?(()=>{return 'expr1'})():(()=>{return 'expr2'})();\n // 'expr1', as first IFEE evaluated to true;\n true?1:2;// 1;\n\n let f = () => {\n     return condition ? val1 \n        : condition2 ? val2\n        : condition3 ? val3\n        : val4;\n }\n\n// this is an example of the if .. else .. else if statement\nlet f2 = () => {\n    if (condition) {return val1}\n    else if (condition2) {return val2}\n    else if (condition3) {return val3}\n    else {return val4}\n}\n\n</pre>                    \n                "),Object(_.a)(Be,"Operator","<code>?:</code>"),Object(_.a)(Be,"Name","Conditional (ternary)"),Object(_.a)(Be,"Usage","condition ? expr1 : expr2"),Object(_.a)(Be,"Description","\n                If the condition evaluates to <code>true</code>, result is <code>expr1</code> else the result is \n                <code>expr2</code>. Can be chained into a structure similar to the <code>if..else..else if..</code>\n                "),Be),(_e={},Object(_.a)(_e,Symbol("title"),"Comma"),Object(_.a)(_e,Symbol("code"),"\n                This is not the comma from objects or arryays, this is the comma known from for example a <i>for</i>\n                operator.\n<pre>\nfor (let i=0; i < 10; i++){};\n\nfunction(){\n    ...\n    return (x +=1, x);\n} // in this example x will be incremented before it is returned\n// comma may perform an action bofore returning something.\n\nlet a, b, c; // declaring a set of variables;\n\nlet z = (a = 3, b = 4, c = 6); // z is 6, a is 3, b is 4, c is 6;\n\n</pre>                    \n                "),Object(_.a)(_e,"Operator","<code>,</code>"),Object(_.a)(_e,"Name","Comma"),Object(_.a)(_e,"Usage","expr1, expr2"),Object(_.a)(_e,"Description","\n                Evaluates each of the given expressions, and returns the last in the chain. May be chained.                "),_e),(qe={},Object(_.a)(qe,Symbol("title"),"delete"),Object(_.a)(qe,Symbol("code"),"\n                Object property cannot be deleted if: \n                <ul>\n                    <li>it is not an own object property (for example it belongs somewhere to a prototype chain)</li>\n                    <li>is created with a var, let or const keyword (these properties are non-configurable)</li>\n                    <li>is a non-configurable property set in objects descriptor</li>\n                    <li>is a non-writable property set in objects descriptor</li>\n                    <li>if object is sealed or frozen its properties may not be deleted</li>\n                    <li>is an array element. In this case a value of the array index will be set to <i>empty</i>\n                    and will not be removed with the delete operator</li>\n                </ul>\n<pre>\nlet obj = {\n    a: 5,\n    b: {c: 6}\n}\n\nconsole.log(delete obj); // false, obj is set with the let keyword\n// in case of a strict mode Error\n\nconsole.log(delete b); // true, b object is garbage collected\n// no need to worry about memory releasing\nconsole.log(obj); // {a: 5}\n\nlet nonConfig = {\n    configurable: false,\n    value: 3\n}\nObject.defineProperty(obj, 'x', nonConfig);\ndelete obj.x; // false, or an error, obj.x is not configurable;\n\nlet nonWritable = {\n    writable: false,\n    value: 3\n}\n\nObject.defineProperty(obj, 'y', nonWritable);\nconsole.log(delete obj.y); // false\n\ndelete obj; // false of Error, created with let\n\n\no2 = {a: 3}\nObject.defineProperty(o2, 'x', nonConfig);\ndelete o2; // true\n\nlet s = Symbol('test');\nlet o3 = {\n    a: 3,\n    [s]: 4\n}\ndelete o3[s];\n\no2 = {a:3};\nObject.seal(o2);\ndelete o2.a; // false or error, object is sealed\n\nlet a = [1,2,3,4,5];\ndelete a[0]; // true;\n// a is [empty, 2, 3, 4, 5]\n// use a.splice(0,1) instead or arr.shift();\n\nfunction f(){};\ndelete f; // true\n\n\n\n\n</pre>                    \n                "),Object(_.a)(qe,"Operator","<code>delete</code>"),Object(_.a)(qe,"Name","delete"),Object(_.a)(qe,"Usage","delete obj.prop"),Object(_.a)(qe,"Description","\n                Removes a property from an object if this property is allowed to be removed. \n                Does not free alocated memory. Returns <code>true</code> if the operation was successfull,\n                and false in other cases. If in strict mode, if operation is nusuccessfull will throw an error.\n                "),qe),(We={},Object(_.a)(We,Symbol("title"),"typeof"),Object(_.a)(We,Symbol("code"),'\n                <table class="table">\n                    <thead><tr><th>Type</th><th>Result</th></tr></thead>\n                    <tbody>\n                        <tr><td>Undefined</td><td>"undefined"</td></tr>\n                        <tr><td>Null</td><td>"object"</td></tr>\n                        <tr><td>Boolean</td><td>"boolean"</td></tr>\n                        <tr><td>Number</td><td>"number"</td></tr>\n                        <tr><td>BigInt</td><td>"bigint"</td></tr>\n                        <tr><td>String</td><td>"string"</td></tr>\n                        <tr><td>Symbol</td><td>"symbol"</td></tr>\n                        <tr><td>Function</td><td>"function"</td></tr>\n                        <tr><td>Others</td><td>"object"</td></tr>\n                    </tbody>\n                </table>\n                Exceptions:\n                <ul>\n                    <li><code>typeof document.all</code> is "undefined"</li>\n                    <li><code>typeof null</code> is "object"</li>\n                </ul>\n<pre>\nlet a = new Boolean(false);\ntypeof a; // "object", the same with new Number() ...\n\ntypeof 3; // "number"\n\nlet date = Date.now();\ntypeof date; // number\nlet date2 = new Date;\ndate2.now;\ntypeof date2; // object\n\nfunction() {\n    typeof a; // ReferenceError\n    // a is in TDZ - temporal dead zone\n    // not declared with a var keyword, not hoisted\n    let a = 3;\n}\n\ntypeof /s/; // should be \'object\' but in some browsers may be \'function\'\n\n</pre>                    \n                '),Object(_.a)(We,"Operator","<code>typeof</code>"),Object(_.a)(We,"Name","typeof"),Object(_.a)(We,"Usage","typeof someProp"),Object(_.a)(We,"Description","\n                Returns a string indicating a type of the object\n                "),We),(ze={},Object(_.a)(ze,Symbol("title"),"void"),Object(_.a)(ze,Symbol("code"),'\n                Brackets should be used to mark correct precedence of the void expression:\n                <code>let a = void (expression)</code>\n\n<pre>\nvoid function iife(){}()\n// without void there would be a syntax error, \n// other method to call this is \n(function iife(){})()\n\n&lt;a href="javascript:void(0);">Clicking does nothing&lt;/a>\n&lt;a href="javascript:void(document.body.style.color=\'blue\');">change background&lt;/a>\n\nbutton.onclick = () => void someArray.pop();\n// normally this expression would return a removed element, \n// in this case returns undefined\n\nlet a = void 5 + 5; // a is nudefined\nlet b = void 5**3; // SyntaxError, \nlet b = void (3**5); // b is undefined\n\n</pre>                    \n                '),Object(_.a)(ze,"Operator","<code>void</code>"),Object(_.a)(ze,"Name","void"),Object(_.a)(ze,"Usage","void expression"),Object(_.a)(ze,"Description","\n                Evaluates the expression and returns undefined\n                "),ze),(Ke={},Object(_.a)(Ke,Symbol("title"),"in"),Object(_.a)(Ke,Symbol("code"),"\n                \n\n<pre>\nlet arr = [1,2,3,4];\n8 in arr; // false;\n3 in arr; // true;\n'length' in arr; // true;\nSymbol.iterator in arr; // true;\n\nlet obj = {a: 2, b: 3, c: 4}\nfor (let key of obj) { console.log(key)};\n// a, b, c\n\nfunction SomeObj(){this.a = 3}\nSomeObj.prototype.b = 4;\nSomeObj.constructor = SomeObj;\nlet instance = new SomeObj();\nfor (let key in instance) {console.log(key)}\n// a, b\n\n</pre>                    \n                "),Object(_.a)(Ke,"Operator","<code>in</code>"),Object(_.a)(Ke,"Name","in"),Object(_.a)(Ke,"Usage","prop in obj"),Object(_.a)(Ke,"Description","\n                Returns true if the property is in the specified object or its prototype chain or if <code>index in arr</code>\n                index is in the arr.\n                "),Ke),(Ve={},Object(_.a)(Ve,Symbol("title"),"instanceof"),Object(_.a)(Ve,Symbol("code"),"\n                <ul>\n                <li>Primitives do not have a prototype, so a number 3 is not an instance of the <code>new Numbsee(3)</code></li>\n                <li>If an objects instances prototype is changed, then instanceof result may change</li>\n                </ul>\n<pre>\nlet s = 'someString';\nlet so = new String('someStringObject');\ns instanceof String; // false, as s is a primitive and has no constructor\nso instanceof String; // true, so is already an object having a constructor\n\nfunction SomeConstructor(){};\nfunction Child(){\n    SomeConstructor.call(this);\n}\nChild.prototype = Object.create(SomeConstructor.prototype);\nChild.prototype.constructor = Child;\n// equals to :\n// class SomeConstructor{};\n// class Child extends SomeConstructor{constructor(){super();}}\n\nlet sc = new SomeConstructor();\nlet c = new Child();\nsc instanceof SomeConstructor; // true;\nc instanceof SomeConstructor; // true;\nc instanceof Object; // true\nc instanceof String; // false\n\nclass Shape{}\n\nclass Circle extends Shape{\n    constructor(){\n        super();\n    }\n}\n\nlet s = new Shape();\nlet cir = new Circle();\n\ncir instanceof Circle; // true\ncir instanceof Shape; // true\ncir instanceof Object; // true\ns instanceof Circle; // false\n\nObject.setPrototypeOf(cir, Object.create(String.prototype))\n\ncir instanceof Shape; // false\ncir instanceof String; // true\n\ncir.__prototype__ = Number.prototype;\n\n</pre>                    \n                "),Object(_.a)(Ve,"Operator","<code>instanceof</code>"),Object(_.a)(Ve,"Name","instanceof"),Object(_.a)(Ve,"Usage","o instanceof SomeConstructor"),Object(_.a)(Ve,"Description",'\n                Returns true if the prototype of the left side operand is the same as the prototype of the right side operand.\n                The left side operand has to be a type of a "function" or an error will occure.\n                '),Ve),(Ge={},Object(_.a)(Ge,Symbol("title"),"Grouping operator (...)"),Object(_.a)(Ge,Symbol("code"),"\n<pre>\n2 * 3 + 4 = 10;\n2 * (3 + 4) = 14;\n\nlet o = {a:2, b:4};\n{a, b} = o; // SyntaxError\n\nlet o = {a:2, b:4};\n({a, b} = o); // now it works\n\nfunction ifee(){}(); // SyntaxError\n(function ifee(){})(); // now it works\n\nlet a = 0; let b = 0;\nlet c = a+=1 + b+=1;\n// SyntaxError\n\nlet a = 0; let b = 0;\nlet c = (a+=1) + (b+=1);\n// now it works\n//a is 1, b is 1, c is 2;\n\nlet a = 0;\na++++; // SyntaxError\n(a++)++; // now works, but this is a bad code anyway\n\n</pre>                    \n                "),Object(_.a)(Ge,"Operator","<code>(...)</code>"),Object(_.a)(Ge,"Name","Grouping operator"),Object(_.a)(Ge,"Usage","a * (b + c)"),Object(_.a)(Ge,"Description","\n                This operator controls the precedence of evaluation in expressions. May be used to change an non\n                expression to an expression (like in the ifee call or with the object descructive operaotrs)\n                "),Ge),(Je={},Object(_.a)(Je,Symbol("title"),"new"),Object(_.a)(Je,Symbol("code"),"\n<pre>\nlet b = new Boolean(false); // Should not be used, primitives should not be constructed\n// with the new operator, as they are not primitives anymore\n\nfunction Car(make, model){\n    this.make = make;\n    this.model = model;\n}\n\nlet myCar = new Car('Subaru', 'Legacy')\nmyCar instanceof Car; // true;\n\n</pre>                    \n                "),Object(_.a)(Je,"Operator","<code>new</code>"),Object(_.a)(Je,"Name","new"),Object(_.a)(Je,"Usage","new ConstructorFunction(..)"),Object(_.a)(Je,"Description","\n                Creates a new instance of an object described by the constructor function that is delivered as an \n                operand. This operator:\n                <ul>\n                <li>Creates a new JS object</li>\n                <li>Adds a property that will link newly created object to the prototype of the constructor function,\n                that property is often named <code>__proto__</code></li>\n                <li>Binds newly created object to the <code>this</code> property in the creator function</li>\n                <li>Retruns <code>this</code> if the creator function does not return anything</li>\n                <li>If the constructor function returnes something this returned object becomes the newly created\n                object instead</li>\n                </ul>\n                "),Je)]}];var Qe=[{elementType:"Headline-3",content:"Operators precedences"},{elementType:"Paragraph",content:"\n           The highest is 20, lowest is 1\n        "},{elementType:"Paragraph",content:'\n        <table class="table">\n            <thead><tr><th>Precedence</th><th>Operators</th></tr><thead>\n            <tbody>\n                <tr>\n                    <td>20</td>\n                    <td>\n                        <ul>\n                            <li><code>(...)</code>: grouping</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>19</td>\n                    <td>\n                        <ul>\n                            <li><code>__.__</code>: dot: member access</li>\n                            <li><code>...[...]</code>: computed member access</li>\n                            <li><code>new ...(...) :</code>: new with args</li>\n                            <li><code>function() :</code>: function call</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>18</td>\n                    <td>\n                        <ul>\n                            <li><code>new ... :</code>: new with <b>no</b> args</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>17</td>\n                    <td>\n                        <ul>\n                            <li><code>...++</code>: postfix incrementation</li>\n                            <li><code>...--</code>: postfix decrementation</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>16</td>\n                    <td>\n                        <ul>\n                            <li><code>!...</code>: Logical NOT</li>\n                            <li><code>~...</code>: Bitwise NOT</li>\n                            <li><code>+...</code>: Unary plus</li>\n                            <li><code>-...</code>: Unary minus</li>\n                            <li><code>++...</code>: Prefix increment</li>\n                            <li><code>--...</code>: Prefix decrement</li>\n                            <li><code>typeof...</code>: typeof</li>\n                            <li><code>void...</code>: void</li>\n                            <li><code>delete ....</code>: delete</li>\n                            <li><code>await ...</code>: await</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>15</td>\n                    <td>\n                        <ul>\n                            <li><code>...**...</code>: Exponentiation</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>14</td>\n                    <td>\n                        <ul>\n                            <li><code>/</code>: Division</li>\n                            <li><code>*</code>: Multiplication</li>\n                            <li><code>%</code>: Reminder</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>13</td>\n                    <td>\n                        <ul>\n                            <li><code>...+...</code>: Addition</li>\n                            <li><code>...-...</code>: Substraction</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>12</td>\n                    <td>\n                        <ul>\n                            <li><code>...<<...</code>: Left shift</li>\n                            <li><code>...>>...</code>: Right shift</li>\n                            <li><code>...>>>..</code>: Bitwise Zero-fill right shift</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>11</td>\n                    <td>\n                        <ul>\n                            <li><code>...<...</code>: Less than</li>\n                            <li><code>...<=...</code>: Less than or equal</li>\n                            <li><code>...>...</code>: Greater than</li>\n                            <li><code>...>=...</code>: Greater than or equal</li>\n                            <li><code>...in...</code>: in</li>\n                            <li><code>instanceof...</code>: instanceof</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>10</td>\n                    <td>\n                        <ul>\n                            <li><code>...==...</code>: Equal</li>\n                            <li><code>...!=...</code>: Inequal</li>\n                            <li><code>...===..</code>: Strict equal</li>\n                            <li><code>...!==..</code>: Strict not equal</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>9</td>\n                    <td>\n                        <ul>\n                            <li><code>...&...</code>: Bitwise AND</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>8</td>\n                    <td>\n                        <ul>\n                            <li><code>...^...</code>: Bitwise XOR</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>7</td>\n                    <td>\n                        <ul>\n                            <li><code>...|...</code>: Bitwise OR</li>\n                        </ul>\n                    </td>\n                </tr>\n                <tr>\n                    <td>6</td>\n                    <td>\n                        <ul>\n                            <li><code>...&&...</code>: Logical AND</li>\n                        </ul>\n                    </td>\n                </tr>   \n                <tr>\n                    <td>5</td>\n                    <td>\n                        <ul>\n                            <li><code>...||...</code>: Logical OR</li>\n                        </ul>\n                    </td>\n                </tr>    \n                <tr>\n                    <td>4</td>\n                    <td>\n                        <ul>\n                            <li><code>.. ? .. : ..</code>: Conditional</li>\n                        </ul>\n                    </td>\n                </tr>    \n                <tr>\n                    <td>3</td>\n                    <td>\n                        <ul>\n                            <li><code>...=...</code>: Assignment</li>\n                            <li><code>...+=...</code>: Addition assignment</li>\n                            <li><code>...-=...</code>: Substraction assignment</li>\n                            <li><code>...*=...</code>: Multiplication assignment</li>\n                            <li><code>.../=...</code>: Division assignment</li>\n                            <li><code>...%=...</code>: Remainder assignment</li>\n                            <li><code>...**=...</code>: Exponential assignment</li>\n                            <li><code>...<<=...</code>: Left shift assignment</li>\n                            <li><code>...>>=...</code>: Right shift assignment</li>\n                            <li><code>...>>>=...</code>: Zero-fill rithg shift assignment</li>\n                            <li><code>...&=...</code>: Bitwise AND assignment</li>\n                            <li><code>...|=...</code>: Bitwise OR assignment</li>\n                            <li><code>...^=...</code>: Bitwise XOR assignment</li>\n                            <li><code>...||=...</code>: Logical OR assignment</li>\n                            <li><code>...&&=...</code>: Logical AND assignment</li>\n                            <li><code>...??=...</code>: Logical nullish assignment</li>\n                        </ul>\n                    </td>\n                </tr>       \n                <tr>\n                    <td>2</td>\n                    <td>\n                        <ul>\n                            <li><code>yield ...</code>: yield</li>\n                            <li><code>yield* ...</code>: yield*</li>\n                        </ul>\n                    </td>\n                </tr> \n                <tr>\n                    <td>1</td>\n                    <td>\n                        <ul>\n                            <li><code>.. , .. : ..</code>: Comma</li>\n                        </ul>\n                    </td>\n                </tr>                                                                                                                                                           \n            </tbody>\n        </table>\n        '}];var $e={summary:"operators",title:"operators",searchKeywords:"+ - / * = % > < << >> == === void \n    binary representation of a negative number\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Operators"},{elementType:"Paragraph",content:"\n                        \n                    "},{elementType:"UnsignedList",content:["\n                     <code>void</code>: This operator always takes an expression and evaluates it to an undefined. \n                     Can be used instead of an undefined value or to execute some JS code and return undefined, if \n                     something has to be returned,\n                    "]}].concat(Object(he.a)(be),Object(he.a)(He),Object(he.a)(Ue),Object(he.a)(Xe),Object(he.a)(ke),Object(he.a)(Ye),Object(he.a)(Qe))},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators",description:"Tutorial"},{elementType:"Link",content:"iii-lo.tarman.pl/",href:"http://www.iii-lo.tarman.pl/informatyka/ladustrone.php?p1=informatyka&p2=44",description:"Negative number representation"},{elementType:"Link",content:"blog.logrocket.com",href:"https://blog.logrocket.com/interesting-use-cases-for-javascript-bitwise-operators/",description:"Use cases of bitwise operations"},{elementType:"Link",content:"ebhor.com",href:"https://www.ebhor.com/operator-precedence-and-associativity-in-javascript/",description:"Precedences source"}]}]};var Ze={summary:"string methods",title:"string methods",searchKeywords:"string methods unmutable ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"String methods"},{elementType:"Paragraph",content:"\n                    "},{elementType:"UnsignedList",content:["\n                    "]},{elementType:"Paragraph",content:"\n                    There is a set of methods that can be used with a <code>&lt;form&gt;</code> element:\n                    "},{elementType:"Code",content:"\n<pre>\n</pre>                        \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Methods"},{elementType:"Paragraph",content:"\n\n                    "}]}]};var et=[{elementType:"Article",content:[{elementType:"Headline-2",content:"Prototype chain"},{elementType:"Paragraph",content:"\n                Everything in JS is an object. Each object has its private property binding it to other objects.\n                This property is called a <strong>prototype</storng>. Each prototype has its own prototype.\n                The last prototype in this chain points to <code>null</code>.\n                "},{elementType:"NoteWarning",content:"\n                Prototypes of existing objects (like <code>Array</code>) should never be modified as this \n                practice breaks encapsulation. Instead a new class extending some class should be created, and\n                needed properties should be added to newly created class.<br>\n                Only situation an existing object prototype should be modified is an implementation of the \n                <i>polyfill</i>.<br>\n                Modifying the prototype of the existing object is expensive, as all objects and references\n                pointing to this object must be processed. This is the other reason for not extending the prototypes\n                of existing objects.\n                "},{elementType:"SmallHeadline",content:"A type"},{elementType:"Paragraph",content:'\n                Types in JS are: number, bigInt, string, boolean, null, undefined, symbol and object. However, when\n                speaking of objects in general, it is assumed, that each object has its own type, and this type is \n                related to this objects interface. An interface is a set of public methods and properties. So an \n                object communicates with the outside world with its interface. Two objects are said to be equal if they have \n                the same interface (due to "Design Patterns" by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides).\n                JS does not recognize different types of objects, but in Type Script this imperfection is fixed.\n                In this article it will be assumed, that two objects are of the same type if they are created with the same\n                constructor. \n                '},{elementType:"SmallHeadline",content:"__proto__"},{elementType:"UnsignedList",content:["Each object in JS holds a reference to the prototype object of its constructor,","There is a single instance of the prototype for each type of objects (for all instances \n                        created with the same constructor). Thanks to this a property added to the prototype is \n                        available in all instances,","Each object in JS has its hidden property [[Prototype]] that references that object constructor \n                    protytype","<code>__proto__</code> (not an ECMA script solution) is a property allowing to access the objects\n                    prototype. It holds, for example a setter and getter to the prototype. <code>__proto__</code> gives\n                    access to the hidden property [[Prototype]],","<code>__proto__</code> is available, but should not be used, as it is depracated. \n                    <code>Object.getPrototypeOf(o)</code>\n                    and <code>Object.setPrototypeOf(o)</code> should be used instead."]},{elementType:"Headline-3",content:"A chain"},{elementType:"Paragraph",content:"\n                In general, a prototype is an object, that allows inheritance in JS. Each function in JS has \n                a prototype object. Each object in JS has access to its constructor prototype, so each instance of the \n                certain object type has access to the same prototype. Adding a method to an object's prototype \n                makes this method accessible in each instance of this object type. Prototypes in JS are linked together,\n                forming a chain. This chain ends with the Object's prototype followed by a null. If there is a request \n                to find a property of an object, firstly the own object's methods are searched. Then, if nothing is \n                found, there is the objects prototype searched. If nothing found, then the prototypes prototype is \n                searched, and so on, until null is reached. In this case it is obvious, that the property does not \n                exist.\n                "},{elementType:"SmallHeadline",content:"An example"},{elementType:"Paragraph",content:"\n                Object => Vehicle => CombustionEngineVehicle => Car\n                "},{elementType:"Paragraph",content:"\n                Let's assume, that there is a <code>bicycle</code> object, that is an instance of a <code>Vehicle</code> \n                class. This <code>bicycle</code> has a property named <code>__proto__</code>.\n                "},{elementType:"UnsignedList",content:["The <code>__proto__</code> of the <code>bike</code> Vehicle instance, points to the Vehicle prototype","Vehicle prototype has property named <code>constructor</code> pointing to the function that constructs\n                    the vehicle object","Vehicle constructor has the <code>prototype</code> property pointing back to the prototype (back, as \n                        prototype itself points to the constructor with the constructor property)","Because the vehicles constructor is a function, it has a <code>__proto__</code> property pointing to \n                    the prototype of the function. And prototype of the function constructor points to the prototype of\n                    the object, and the prototype of the object is null,","Vehicle's <code>__proto__</code> points to the object's prototype, as Vehicle inherits by default after Object","Every object in JS finally has the prototype of the <code>Object</code> in its chain","Objects prototype points to null"]},{elementType:"Paragraph",content:"\n                Now let's examine a more complex example, with the Object => Vehicle => CombustionEngineVehicle => Car\n                inheritance.\n                "},{elementType:"Code",content:"\n<pre>\nfunction Vehicle(nrOfWheels, poweredBy){\n    this.nrOfWheels = nrOfWheels;\n    this.poweredBy = poweredBy;\n}\nVehicle.prototype.examples = ['bicycle', 'motorcycle', 'car', 'train']\nVehicle.prototype.giveExamples = function(){\n    console.log(this.examples)\n}\n\n// a static method:\nVehicle.whatSortOf = function(nrOfWheels){\n    if (nrOfWheels === 4) return 'Probably a car';\n    if (nrOfWheels === 2) return 'Probably a motorcycle or a bicycle';\n    if (nrOfWheels >= 8 && nrOfWheels % 2 === 0) return 'Could be a train';\n    return 'I don't know'\n}\n\nfunction CombustionEngineVehicle(nrOfWheels){\n    Vehicle.call(this, nrOfWheels, 'combustion engine');\n    // this.examples = ['car', 'motorcycle']\n}\nCombustionEngineVehicle.prototype = Object.create(Vehicle.prototype);\nCombustionEngineVehicle.prototype.constructor = CombustionEngineVehicle;\nCombustionEngineVehicle.prototype.examples =  ['car', 'motorcycle'];\n\nfunction Car(make, model, year){\n    CombustionEngineVehicle.call(this, 4);\n    this.make = make;\n    this.model = model;\n    this.year = year;\n    // this.examples = ['subaru impreza', 'maserati biturbo', 'ford mustang']\n}\nCar.prototype = Object.create(CombustionEngineVehicle.prototype);\nCar.prototype.constructor = Car;\nCar.prototype.examples = ['subaru impreza', 'maserati biturbo', 'ford mustang'];\nCar.prototype.introduction = function(){\n    console.log(`I am ${this.make} ${this.model} from ${this.year}`);\n}\n\nlet subaruLegacy = new Car('subaru', 'legacy', '2005');\nlet peugeot206 = new Car('peugeot', '206', '2004');\npeugeot206.examples = ['2.0 HDI', '2.0GTI', '1.1 SOHC'];\npeugeot206.introduction(); // I am peugeot 206 from 2004\n// from Car prototype\n\nObject.getOwnPropertyNames(subaruLegacy); // [\"make\", \"model\", \"year\"]\nObject.getOwnPropertyNames(peugeot206); // [\"make\", \"model\", \"year\", \"examples\"]\n// as here concrete examples were specified\npeugeot206.examples; // [\"2.0 HDI\", \"2.0GTI\", \"1.1 SOHC\"]\nsubaruLegacy.examples; // [\"subaru impreza\", \"maserati biturbo\", \"ford mustang\"]\n// taken from the prototype, as no specific for this object were added\n\npeugeot206.giveExamples(); // [\"2.0 HDI\", \"2.0GTI\", \"1.1 SOHC\"]\n// This method is taken from Vehicle prototype, as \n// it is not available neither in peugeot206, nor in the Car prototype,\n// nor in the CombustionEngine prototype.\n// Data is taken from the peugeot206 instance, as it was specified there.\n\npeugeot206.__proto__.__proto__.__proto__.__proto__ === Object.prototype; // true;\npeugeot206.__proto__.__proto__.__proto__.__proto__.__proto__ === null; // true;\n</pre>                \n                "},{elementType:"Paragraph",content:"\n                A graph describing above situation:\n                "},{elementType:"Image",name:"protoChain_carGraph.png",alt:"Prototype chain"},{elementType:"Paragraph",content:"\n                So in general:\n                "},{elementType:"UnsignedList",content:["Each object in JS has a reference to its constructors prototype (property <code>__proto__</code> that should not\n                        be used anymore, or <code>Object.getPrototypeOf(o)</code>)","Each prototype has a reference to the prototype it inherits from, until the Object is reached with its \n                    prototype reference pointing to null","Each prototype has a constructor property pointing to the constructor that creates objects with the \n                    prototype,","Each constructor has a prototype property that all instances created with the construcotr will refer to,","Each constructor has its <code>__proto__</code> pointing to the function prototype, as each constructor is \n                    a function,","The prototype property can be overridden (<code>Object.setPrototypeOf(o, pr)</code>, \n                    or depraciated <code>o.__proto__ = pr</code>,","New elements may be added to the existing prototype, but this is discouraged,","Each function in JS has a direct prototype property. This is not common, as most objects have only a \n                    reference like <code>__proto__</code>"]},{elementType:"SmallHeadline",content:"\n                The same example written with classes\n                "},{elementType:"Code",content:"\n<pre>\nclass Vehicle{\n    static whatSortOf = function(nrOfWheels){\n        if (nrOfWheels === 4) return 'Probably a car';\n        if (nrOfWheels === 2) return 'Probably a motorcycle or a bicycle';\n        if (nrOfWheels >= 8 && nrOfWheels % 2 === 0) return 'Could be a train';\n        \n        return `I don't know`\n    }\n\n    constructor(nrOfWheels, poweredBy){\n        this.nrOfWheels = nrOfWheels;\n        this.poweredBy = poweredBy;\n        this.constructor.prototype.examples = ['bicycle', 'motorcycle', 'car', 'train'];\n        this.constructor.prototype.giveExamples = function(){\n            console.log(this.examples)\n        }.bind(this);\n    }\n}\n\nclass CombustionEngineVehicle extends Vehicle{\n    constructor(nrOfWheels){\n        super(nrOfWheels, 'combustion engine');\n        this.constructor.prototype.examples = ['car', 'motorcycle'];\n    }\n    \n}\n\nclass Car extends CombustionEngineVehicle{\n    constructor(make, model, year){\n        super(4);\n        this.make = make;\n        this.model = model;\n        this.year = year;\n        this.constructor.prototype.examples = ['subaru impreza', 'maserati biturbo', 'ford mustang'];\n        this.constructor.prototype.introduction = function(){\n            console.log(`I am ${this.make} ${this.model} from ${this.year}`);\n        }.bind(this);\n    }\n}\n\n\nlet subaruLegacy = new Car('subaru', 'legacy', '2005');\n// subaruLegacy.examples = ['2.0 H4 SOHC', '2.0 H4 DOHC', '2.5 H4 DOHC Turbo', '3.0 H6']\nlet peugeot206 = new Car('peugeot', '206', '2004');\npeugeot206.examples = ['2.0 HDI', '2.0GTI', '1.1 SOHC'];\n</pre>                \n                "}]}];var tt={summary:"objects",title:"objects",searchKeywords:"computed property name syntax prototype __proto__ key value inheritance",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Objects"},{elementType:"Paragraph",content:"\n                        An object is a set of pairs: <strong>key</strong>, <strong>value</strong>, where a key may be of a \n                        type string or symbol, and value may be of any type including other object. This makes objects a great \n                        tool for storing data. Objects may get big and complicated.\n                    "},{elementType:"Code",content:"\n<pre>\n    let place = {\n        country: 'Poland',\n        city: 'Wroclaw',\n        street: 'Hubska',\n        number: 353\n    }\n    let person = {\n        firstName: 'John',\n        familyName: 'Doe',\n        gender: 'Man',\n        address: place\n    }\n</pre>                    \n        "},{elementType:"Paragraph",content:"\n                        A new property could be set to an object by calling it and new property key in brackets:\n                        <code>person['height'] = 184cm</code>, or with a dot notation: <code>person.height</code>.\n                        If the <code>heigth</code> property does not exist, it \n                        will be created under the person object. In case it would already exist, it would be \n                        overriden with a new value.\n                    "},{elementType:"Paragraph",content:"\n                        An object property may be referred in similar way it is created: by object name and \n                        a property name in brackets: <code>let gender = person['gender']</code>, or with a dot\n                        notation <code>let gender = person.gender</code>. In case a property does not exist under \n                        a person object <code>undefined</code> is returned.\n                    "},{elementType:"Paragraph",content:"\n                        If a symbol has to be used as a key, then the bracket notation is the right one:\n                        <code>person[Symbol('height')]</code>. To learn more about symbols please visit a \n                        <a href=\"./#/theory/data%20types\">data types</a> section.\n                    "},{elementType:"Paragraph",content:"Ways to access object keys."},{elementType:"UnsignedList",content:["<code>let keys = Object.keys(person)</code> is a way to get an Array of object keys,","<code>for(let key in person)</code> loop,","<code>Object.getOwnPropertyNames(someObject)</code>,","<code>Object.getOwnPropertySymbols(someObject)</code>","<code>Reflect.getOwnPropertySymbols(somObject)</code>: this gets both: symbol and string\n                        keys","There is no guarantee that keys will come up in some repetable order"]},{elementType:"Headline-3",content:"Descriptor"},{elementType:"Paragraph",content:'There is a way to hide object properties from some key listing methods, and there is a way to \n                        block object properties from being modified. There are methods like <code>Object.freeze()</code> or\n                        <code>Object.seal()</code> or <code>Object.preventExtentions()</code>, but these are described in the\n                        <a href="./#/theory/object%20methods">object methods</a> section. Here an object descriptor will be covered.'},{elementType:"UnsignedList",content:["<strong>value</strong>: this is the value property will have, by default it is <code>undefined</code>","<strong>writable</strong>: this indicates if property value may be changed with an assignment operator","<strong>enumerable</strong>: indicates if a property will show up in the <code>Object.keys()</code>\n                        or <code>for..in</code> loop,","<strong>configurable</strong>: if true, then objects descriptor property may be modified or property may\n                        be deleted,","<strong>get(){}</strong>: This is a getter, a special function that if defined, will be executed when\n                        the property appears as a right-hand operand. This functions value will be returned instead of actual \n                        property value. This function may be used if property value does not exist, and is dynamically computed, \n                        or is taken from the view (DOM) at the time it is enquired. A getter must return a value.\n                        A getter should never attempt to change any state of the application!","<strong>set(val){}</strong>: This is the function that will be executed when the property appears as a \n                        left-hand operator instead of setting a value to it. This function is called a setter. This function\n                        may be used for some side-effects when the parameter is being set. For example, it may update the view."]},{elementType:"Paragraph",content:"Getter and setter cannot be set together with a value or writable property, as if a property is \n                        set or evaluated dynamically it cannot have a static value. There are methods that should be \n                        used to set/get a property descriptor:"},{elementType:"UnsignedList",content:["\n                    <code>Object.defineProperty(obj, prop, descriptor)</code> is an Object static method that can be used\n                    to define an object property together with its descriptor. \n                    ","\n                    <code>Object.defineProperties</code> can be used to define a few properties at once:\n<pre>\n    Object.defineProperties(obj,\n        {\n            prop1: {enumerable:false, writable:false, configurable:false},\n            prop2: {enumerable:false, writable:false, configurable:false},\n            prop3: {enumerable:false, writable:false, configurable:false}\n        }\n    )\n</pre>                    \n                    \n                    ","<code>Object.getOwnPropertyDescriptor(propName)</code> returns a property descriptor object,","<code>Object.defineProperty</code> method may be used to <string>modify</code> once set \n                    property descriptor. If however object descriptor has its configurable attribute set to false this \n                    will not work,"]},{elementType:"Headline-3",content:"Constructor"},{elementType:"Paragraph",content:['\n                        An object may be created with a constructor function. It is a good practice to start a \n                        constructor name with a capital letter. Each object in JS has its constructor property.\n                        When object is created with <code>let obj = {}</code> then <code>obj.constructor.name === "Object"\n                        </code>. But if an object is created with a constructor function, then the constructor name of \n                        newly created object would be the name of the constructor function.\n                        ']},{elementType:"Code",content:"\n<pre>\nfunction Person(firstName, familyName, age){\n    this.firstName = firstName;\n    this.familyName = familyName;\n    this.age = age;\n}\n\nlet newPerson = new Person('John', 'Doe', '45');\n</pre>                    \n                    "},{elementType:"Headline-3",content:"Ways of creating new objects"},{elementType:"UnsignedList",content:["Basic syntax: <code>var obj = {prop: 'val'};","With a constructor (see above)","With a\n                        <code>\n<pre>\nvar obj = {prop: 'val'};\nvar obj2 = Object.create(obj); // obj2 inherits obj\n</pre>                        \n                        </code>\n                        ","With classes\n                        <code>\n<pre>\nclass Basic {\n    constructor(){this.prop = 'val'}\n}\nclass Extending extends Basic{\n    constructor(){\n        super(); //mandatory in class extending another class,\n        // without this no possibility to refer to this keyword\n        this.prop2 = 'val2'\n    }\n}\nlet instance = new Extending();\n</pre>                        \n                        </code>\n                        "]},{elementType:"Headline-3",content:"Methods"},{elementType:"Paragraph",content:['Object has some methods allowing its manipulation. To learn more please visit the \n                        <a href="./#/theory/object%20methods">object methods</a> section.']}]}].concat(Object(he.a)(et),[{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",description:"About descriptor"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Object",description:"About Object"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/pl/docs/Web/JavaScript/Inheritance_and_the_prototype_chain",description:"Prototype chain"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto",description:"__proto__"},{elementType:"Link",content:"medium.com",href:"https://medium.com/beginners-guide-to-mobile-web-development/super-and-extends-in-javascript-es6-understanding-the-tough-parts-6120372d3420",description:"Super and Extends in JS ES6: an example of how inheritance worked before ES6"},{elementType:"Link",content:"kenneth-kin-lum.blogspot.com",href:"http://kenneth-kin-lum.blogspot.com/2012/10/javascripts-pseudo-classical.html",description:"An explanation with a readable illustration showing prototype inheritance"}]}])};var nt={summary:"object methods",title:"Object methods",searchKeywords:"static assign prototype defineProperty defineProperties freeze getOwnPropertyDescriptor getOwnPropertySymbols\n    getOwnPropertyNames getOwnPropertyDescriptor getPrototypeOf is isExtensible isFrozen isSealed keys preventExtensions seal\n    setPrototypeOf getPrototypeOf values ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Paragraph",content:"\n                    A static method or property is called not on an instance of an object, but on a constructor\n                    or class name:                    \n                    "},{elementType:"Code",content:"\n<pre>\nlet isThisAnArray = Array.isArray([1,2,3]); //a static method\nlet arrLenght = [1, 2, 3].length; // not a static method\n</pre>                    \n                    "},{elementType:"Headline",content:"Object methods and properties"},{elementType:"SmallHeadline",content:"Object.prototype"},{elementType:"Paragraph",content:"\n                    This is a static property of the Object. It may be used to add methods or properties to the Object.\n                    Because each object in JS inherits the Objects methods and properties with the prototype, \n                    a method or property added to the Object will be available in each JS object.\n                    Adding to the global prototype should be avoided, as it breaks encapsulation. Moreover, changing the \n                    prototype of existing objects is time consuming, as all code having access to this prototype is affected.\n                    "},{elementType:"Paragraph",content:"\n                    Not every object has a prototype. In most cases there is a <code>__proto__</code> object \n                    holding a setter and getter of the prototype.\n                    "},{elementType:"Code",content:"\n<pre>\nObject.prototype = ()=>{console.log('abc')};\n//now this is available in each JS object in the document,\n//including Arrays, Maps, Dates etc\n\nlet a = {};\na.prototype.someF = ()=>{};\n//error, a prototype is undefined, does not exist\n\na.__proto__.someF = ()=>{};\n//This is correct\n\nObject.getPrototypeOf(a).someF = ()=>{};\n//This is correct, but someF is available in all JS objects\n//since prototype of a is the same prototype as the Object \n//prototype\n\nfunction Creator(a){ // a constructor\n    this.a = a; \n}\nlet b = new Creator(3);\nObject.getPrototypeOf(b).someOtherF = ()=>{}\n//this is avaliable only in each object created by\n//the Creator, and each object that inherits after the Creator,\n//but not availabel in each JS object, since because a constructor\n//was used the Object.prototype is not the same as the prototype of \n//the Creator\n\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"__proto__"},{elementType:"Paragraph",content:"\n                    A non static property of an object, holds the prototype setter and getter. \n                    <code>Object.getPrototypeOf()</code> and <code>Object.setPrototypeOf()</code> should be used \n                    instead.\n                    "},{elementType:"SmallHeadline",content:"Object.assign(destination, ...sources)"},{elementType:"Paragraph",content:"\n                    Assigns all <strong>own</strong> properties and property values from sources to destination.\n                    If source has the same property value that the destination, destinations value is overridden.\n                    The key word is '<storn>assign</code>' as values are copied using getters and setters, so this\n                    is not a real copy.\n                    "},{elementType:"Code",content:"\n<pre>\nlet commonSymbol = Symbol();\nlet destination = {a: 'destinationA', [commonSymbol]:'symbolDest'};\nlet s1 = {a:'s1A', b:'s1B', [commonSymbol]: 'commonSymb1'};\nlet s2 = {a:'s2A', [commonSymbol]: 'commonSymb2'};\nlet newDestination = Object.assign(destination, s1, s2);\nconsole.log(newDestination === destination); //true\nconsole.log(destination);\n//{a: \"s2A\", b: \"s1B\", Symbol(): \"commonSymb2\"}\n\n</pre>                    \n                    "},{elementType:"NoteWarning",content:"\n                    <ul>\n                    <li>This should not be used for deep object cloning. If a object is nested, then\n                    only a reference would be passed with <code>Object.assign</code>, and attempt to \n                    alter something in a nested object part would result in changing the nested object itself,\n                    and change would be visible in the original object as well\n                    </li>\n                    <li>This does not copy property descriptors</li>\n                    <li>This does not work if the writable property of the descriptor is set to false</li>\n                    </ul>\n                    "},{elementType:"SmallHeadline",content:"Object.create(obj, properties)"},{elementType:"Paragraph",content:"\n                    Creates a new object with a prototype set to <code>obj</code>. <code>obj</code> is an \n                    object that will become the newly created objects prototype. <code>obj</code> argument is mandatory,\n                    <code>properties</code> argument is optional, and takes an object with keys as property names, and \n                    values as descriptors\n                    "},{elementType:"Code",content:"\n<pre>\nlet objA = Object.create(); // TypeError, there is a mandatory argument,\nlet objB = Object.create({}); //Ok;\nlet objC = Object.create({a: 1, b:2, c:3},\n    {\n        a: {enumerable:false, writable:false, configurable:false},\n        b: {enumerable:false, writable:false, configurable:false},\n        c: {enumerable:false, writable:false, configurable:false},\n    });//OK\n\n</pre>                    \n                    "},{elementType:"NoteWarning",content:"\n                    Beware of creating an object out of null: <code>let obj = ObjectCreate(null)</code>.\n                    This may cause difficult to debug situations, as this object has no __proto__, nore \n                    prototype. A prototype could be set with <code>Object.setPrototypeOf(obj, Object.prototype)\n                    </code> and this would solve some problems.\n                    "},{elementType:"SmallHeadline",content:"Object.defineProperty(obj, properyKey, descriptor)"},{elementType:"Paragraph",content:"\n                        Each property in JS object has a descriptor: an object with property settings:\n                    "},{elementType:"UnsignedList",content:["<code>value</code>: this key describes the value under property,","<code>writable</code>: if false then there will be no possibility to assign a new value to this \n                        property","<code>enumerable</code>: if set to false this property will not show up when accessed with <code>\n                        for..in</code>, or <code>Object.getOwnPropertyKeys</code> or <code>Object.getOwnPropertySymbols</code>,","<code>configuralble</code>: if set to false, then this property will not be able to be re-configured. None\n                        of descriptor attributes will be allowed to be changed. If set to false, this property will not be \n                        allowed to be deleted,","<code>get(){return...}<code> a getter function,","<code>set(){}</code> a setter function,"]},{elementType:"Paragraph",content:"\n                        <code>Object.defineProperty()</code> is for setting a property optionally with it \n                        descriptor. It is also used to <strong>modify</code> a property or its descriptor.\n                    "},{elementType:"NoteWarning",content:"\n                        A descriptor is not allowed to have both: (value or writable) and (getter or setter).\n                        A getter or setter does not have to be objects own properties, they may be inherited.\n                    "},{elementType:"SmallHeadline",content:"Object.defineProperties(obj, props)"},{elementType:"Paragraph",content:"\n                        Does the same as <code>Object.defineProperty()</code> but for many properties at the same time\n                    "},{elementType:"Code",content:"\n<pre>\nlet obj = {};\nObject.defineProperties(obj,\n    {\n        prop1: {enumerable:true,writable:true,value:1},\n        prop2: {enumerable:true,writable:true,value:2},\n        prop3: {enumerable:true,writable:true,value:3},\n    })\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"Object.freeze(obj)"},{elementType:"Paragraph",content:"\n                        Frozen object is not extensible, its properties are non-configurable, all its data properties \n                        are non-writable. <br>\n                        <code>Object.freeze()</code>Makes an shallow object fixed. \n                        Attempt to change, add or delete frozen objects properties \n                        will throw slient or not silent errors. Getters and setters will work, however, they will\n                        not change a value that belongs to the frozen object. Nested objects\n                        will not be frozen, so to make them fixed they need to be frozen recursively.\n                    "},{elementType:"Code",content:"\n<pre>\nlet out = 0;\nfunction Obj(a){\n    this.a = a;\n    Object.defineProperty(this, 'b', {\n        configurable: true,\n        get: ()=>{return this.a},\n        set: (val)=>{this.a = val;}\n    });\n    Object.defineProperty(this, 'c', {\n        get: ()=> {return out;},\n        set: (val)=> {out = val;}\n    });\n}\nlet obj = new Obj(3);\nobj.b = 4;\nconsole.log(obj.a); // 4;\nObject.freeze(obj);\nobj.a = 1;\nconsole.log(obj.a); // 4\nobj.b = 1;\nconsole.log(obj.b); // 4, as obj.a was not set, as obj is frozen\nobj.c = 1;\nconsole.log(out); // 1, as out is not a member of the obj.\n//Getters and setters work in frozen objects\n\n</pre>                    \n                    "},{elementType:"NoteWarning",content:"\n                    Once frozen object cannot be unfrozen.\n                    "},{elementType:"SmallHeadline",content:"Object.isFrozen(obj)"},{elementType:"Paragraph",content:"\n                    Returns <code>true</code> if an <code>obj</code> is frozen, and <code>false</code> if not.\n                    Argument of <code>Object.isFrozen()</code> should <b>not</b> be a primitive value, as a \n                    <code>TypeError</code> will be thrown.\n                    "},{elementType:"SmallHeadline",content:"Object.seal(obj)"},{elementType:"Paragraph",content:"\n                        Object property values remain mutable, however, there is no possibility to \n                        add or remove properties from the object. Prototype chain is not affected by this method,\n                        however <code>__proto__</code> is sealed as well.\n                    "},{elementType:"NoteWarning",content:"\n                    Once sealed object cannot be unsealed.\n                    "},{elementType:"SmallHeadline",content:"Object.isSealed(obj)"},{elementType:"Paragraph",content:"\n                    Returns <code>true</code> if an <code>obj</code> is sealed, and <code>false</code> if not.\n                    Argument of <code>Object.isSealed()</code> should <b>not</b> be a primitive value, as a \n                    <code>TypeError</code> will be thrown.\n                    "},{elementType:"SmallHeadline",content:"Object.preventExtensions(obj)"},{elementType:"Paragraph",content:"\n                    A object is extensible if it can have new properties added to it. <code>Object.preventExtensions()</code>\n                    makes it impossible to add new own properties to an object. It can still have properties added to the\n                    [[Prototype]], however changing the [[Prototype]] itself causes a silent <code>TypeError</code>.\n                    In the <code>Strict mode</code> this error will not be silent. \n                    "},{elementType:"Code",content:"\n<pre>\nfunction Fixed(a, b, c){\n    this.a = a;\n    this.nested = {};\n    this.nested.b = b;\n    this.nested.c = c;\n}\nlet fixed = new Fixed(1, 2, 3);\nconsole.log(fixed);\nObject.preventExtensions(fixed);\nfixed.d = 4;\n//a silent TypeError, as not in strict mode;\nObject.getPrototypeOf(fixed).f = 8;\nconsole.log(fixed.f); // 8, as added to prototype\nObject.setPrototypeOf(fixed, Object); // fail\nlet notFixed = new Fixed(5, 6, 7);\nObject.getPrototypeOf(notFixed).e = 8;\nconsole.log(notFixed.e); // e is 8\nconsole.log(fixed.e); //e is 8, as it was added to the prototype\nfixed.nested.g = 9; \nconsole.log(fixed.nested.g); // 9, as nested was not made not extensible together with fixed\n</pre>                    \n                    "},{elementType:"NoteWarning",content:"\n                    Making an object not extensible cannot be reverted.\n                    "},{elementType:"SmallHeadline",content:"Object.isExtensible(obj)"},{elementType:"Paragraph",content:"\n                    Returns <code>true</code> if an <code>obj</code> can have new properties added to it, and false if not.\n                    Argument of <code>Object.isExtensible()</code> should <b>not</b> be a primitive value, as a \n                    <code>TypeError</code> will be thrown.\n                    "},{elementType:"SmallHeadline",content:"Object.getOwnPropertyDescriptor(obj)"},{elementType:"Paragraph",content:'\n                    Returns a descriptor of object own (not inherited with a prototype) property, or\n                    undefined in case the property on this object does not exist. The descriptor is an object describing\n                    a property behaviour, and has the attributes:\n                    <code>value</code>, <code>writable</code>, <code>enumerable</code>, <code>configurable</code>,\n                    <code>get</code> and <code>set</code>. Please see an <a href = "./#/theory/object">object</a> article to learn more.\n                    '},{elementType:"SmallHeadline",content:"Object.getOwnPropertyKeys(obj)"},{elementType:"Paragraph",content:"\n                    Returns an array of own (not inherited with a prototype), string <strong>enumerable and not \n                    enumerable</strong> properties. This method does not return symbol keyed properties.\n                    "},{elementType:"SmallHeadline",content:"Object.getOwnPropertySymbols(obj)"},{elementType:"Paragraph",content:"\n                    Returns an array of own (not inherited with a prototype), symbol <strong>enumerable and not \n                    enumerable</strong> properties. This method does not return string keyed properties.\n                    "},{elementType:"SmallHeadline",content:"Object.getPrototypeOf(obj)"},{elementType:"Paragraph",content:"\n                    Returns a prototype of the given object. A new property can be added to the object with\n                    <code>Object.getPrototypeOf(obj).newProperty = value</code>\n                    "},{elementType:"SmallHeadline",content:"Object.setPrototypeOf(obj, newPrototype)"},{elementType:"Paragraph",content:"\n                    Sets a <code>newPrototype</code> as <code>obj</code> prototype.\n                    "},{elementType:"NoteWarging",content:"\n                    Changeing the [[Prototype]] is an expensive operation, as it requires the change not only to\n                    the [[Prototype]], but also to all code having access to that [[Prototype]]. It is better to\n                    create a new object with a new [[Prototype]] instead.\n                    "},{elementType:"SmallHeadline",content:"Object.is(obj1, obj2)"},{elementType:"Paragraph",content:"\n                    True if 2 objects fill one of the following conditions:\n                    "},{elementType:"UnsignedList",content:["both objects are undefined,","both objects are null,","both objects are true,","both objects are false,","both objects are stirngs and have characters in the same order,","both refer to the same place in the memory,","both are <code>+0</code>,","both are <code>-0</code>,","both are <code>NaN</code>,","both are numbers or BigInts of the same value"]},{elementType:"Code",content:"\n<pre>\nlet objA = {\n    a: 1, b:2, c:3, d: {f:4, g:5}\n}\nlet objB = {\n    a: 1, b:2, c:3, d: {f:4, g:5}\n}\nconsole.log(Object.is(objA, objB));\n\nlet objC = {a: 5};\nlet objD = {a: 5};\nconsole.log(Object.is(objC, objD));\n\nconsole.log(objA == objB); //false\nconsole.log(objA === objB);//false\n\nObject.is({}, {}); //false as not the same place in memory\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"Object.keys()"},{elementType:"Paragraph",content:"\n                    Returns an array of objects <b>own</b> and <b>enumerable</b> property names (string keys)\n                    "},{elementType:"Code",content:"\n<pre>\nlet objA = {\n    a: 1, b: 2, c: 3, [Symbol('d')]:4, [Symbol('e')]:5\n}\nconsole.log(Object.keys(objA)) // ['a', 'b', 'c']\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"Object.values()"},{elementType:"Paragraph",content:"\n                    Returns an array of objects <b>own</b> and <b>enumerable</b> property values that have keys as \n                    strings. Symbol keyed values are not included.\n                    "},{elementType:"Code",content:"\n<pre>\nlet objA = {\n    a: 1, b: 2, c: 3, [Symbol('d')]:4, [Symbol('e')]:5\n}\nconsole.log(Object.values(objA)) // ['a', 'b', 'c']\n</pre>                    \n                    "}]}]};var ot={summary:"reflect",title:"Reflect",searchKeywords:"apply construct, defineProperty deleteProperty get getOwnProperyDescriptor getPrototypeOfHas isExtensible \n    ownKeys preventExtensions set setPrototypeOf\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Reflect"},{elementType:"Paragraph",content:"\n                    <code>Reflect</code> is a non function build in object providing a set of useful, but duplicated with\n                    the <code>Object</code> and <code>Proxy</code> ones. They are even named the same way. The instance of\n                    <code>Reflect</code> cannot be created. This object provides static methods\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.apply(target, thisArg, argList)</code>"},{elementType:"Paragraph",content:"like the \n                    <code>Function.prototype.apply()</code>, where <code>target</code> is a function that will be\n                    called with the apply call."},{elementType:"SmallHeadline",content:"<code>Reflect.construct(target, argList, newTarget)</code>"},{elementType:"Paragraph",content:"like the \n                    Like a cunstructor, but this is a function. Gives an opportunity to set a new constructor, that's\n                    prototype should be used:"},{elementType:"UnsignedList",content:["<code>target</code>: object, that will be created","<code>argList</code>: an array like object","<code>newTarget</code>: optional, a constructor name, that will be set as an prototype for newly created\n                        object"]},{elementType:"Paragraph",content:"returns an instance of the newly created object"},{elementType:"SmallHeadline",content:"<code>Reflect.defineProperty(target, propKey, descriptor)</code>"},{elementType:"Paragraph",content:"\n                        Please read about the <code>Object.defineProperty()</code> for more. The difference is, that\n                        this property returns <code>true</code> if succeeded, and <code>false</code if failed. In case of the Object \n                        property this method returned the object, or throwed an error.\n                    "},{elementType:"UnsignedList",content:["<code>target</code>: target object, that property will be set on","<code>propKey</code>: The property name","<code>descriptor</code>: Similar to the Object descriptor, \n                        having: value, writable, enumerable, configurable, set and get\n                        properties describing the behaviour of the property"]},{elementType:"SmallHeadline",content:"<code>Reflect.deleteProperty(target, propKey)</code>"},{elementType:"Paragraph",content:"\n                        Similar to the non-strict <code>delete</code> operator\n                    "},{elementType:"UnsignedList",content:["<code>target</code>: target object, that property will be deleted from","<code>propKey</code>: The property name"]},{elementType:"SmallHeadline",content:"<code>Reflect.get(target, propKey[, thisArg])</code>"},{elementType:"Paragraph",content:"\n                        Similar to <code>target[propKey]</code> with the difference, that this allows \n                        to set this keyword to some other value. Useful when working with a Proxy\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.set(target, propKey[, thisArg])</code>"},{elementType:"Paragraph",content:"\n                        Similar to <code>target[propKey]</code> with the difference, that this allows \n                        to set this keyword to some other value. Useful when working with a Proxy\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.getOwnPropertyDescriptor(target, propKey[, thisArg])</code>"},{elementType:"Paragraph",content:"\n                        Similar to the Object.getPropertyOf, with the difference non object arguments are \n                        handled. This will throw an error, where Object method will return an object\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.getPrototypeOf(target)</code>"},{elementType:"Paragraph",content:"\n                    The same as <code>Object.getPrototypeOf(target)</code>\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.getPrototypeOf(target)</code>"},{elementType:"Paragraph",content:"\n                    Similar to <code>Object.setPrototypeOf(target)</code> with the difference, that this \n                    returns true if the operation was successful, and false if not, where the object method returns \n                    the object.\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.<b>has</b>(target, propKey)</code>"},{elementType:"Paragraph",content:"\n                    Returns <code>true</code> if there is a property <code>propKey</code> in the object\n                    given as the <code>target</code>\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.isExtinsable(target)</code>"},{elementType:"Paragraph",content:"\n                    The same as the <code>Object.isExtinsible()</code>, true if object can have properties added to it,\n                    and <code>false</code> if not,\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.preventExtensions(target)</code>"},{elementType:"Paragraph",content:"\n                    Makes it impossible to add any properties to the <code>target</code> object.\n                    This operation cannot be reverted.\n                    "},{elementType:"SmallHeadline",content:"<code>Reflect.ownKeys(target)</code>"},{elementType:"Paragraph",content:"\n                    Returns an array of the <code>target</code> objects keys. \n                    This returns <b>both: symbol and string keys</b>,\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",description:"Tutorial"},{elementType:"Link",content:"on github",href:"https://github.com/tvcutsem/harmony-reflect/wiki",description:"Use cases"}]}]};var at={summary:"this keyword",title:"this keyword",searchKeywords:"this scope",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"this"},{elementType:"Paragraph",content:"\n                        <code>this</code> is a reserved keyword, thats value depends on the context <code>this</code> keyword\n                        is used in.\n                    "},{elementType:"UnsignedList",content:["<strong>Object constructor</strong>: this context is provided with the <code>new</code> operator,"]},{elementType:"Paragraph",content:"\n                   \n                    "},{elementType:"UnsignedList",content:[""]},{elementType:"Code",content:"\n<pre>\n\n</pre>                        \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation",description:"Tutorial"}]}]};var rt,it,st,ct,lt,dt,pt,mt,ut,ht,bt,ft,yt,gt,vt,wt,jt,Ot,Tt,xt,St,kt,Nt,It,Pt,At,Et,Ct,Lt,Ht,Mt,Dt,Rt,Ft,Ut,Bt,_t,qt,Wt,zt,Kt={summary:"proxy",title:"Proxy",searchKeywords:"getPrototypeOf setPrototypeOf isExtensible preventExtensions getOwnPropertyDescriptor \n    defineProperty has get set deleteProperty ownKeys apply constructor\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Proxy"},{elementType:"Paragraph",content:"\n                    The <code>Proxy</code> is an API allowing user to wrap an existing object to make some additional \n                    operations when Object methods are being called on this object. There is a banch of methods that \n                    the proxy allows to use. Proxy takes 2 \n                    arguments: a <code>target</code> object, and a <code>handler</code> - an object having \n                    traps. Traps are functions that will allow to implement a specific behaviour on object operations.\n                    "},{elementType:"SmallHeadline",content:"Proxy creation"},{elementType:"UnsignedList",content:["<code>let p = new Proxy(target, handler)</code>, where the <code>target</code> is an object, \n                        that will be handled \n                        by the proxy, and <code>handler</code> is a set of methods, \n                        that will be called when proxy is used,","<code>let pr = new Proxy.revocable(target, handler)</code>, where the <code>target</code>\n                        is an object, that will be handled by the proxy, <code>handler</code> is an object with \n                        traps, and <code>revocable</code> means, that the proxy may be turned off (revoked) with a\n                        call of <code>pr.revoke()</code>. Once revoked proxy is useless, and can be garbage collected, as\n                        there is no possibility to turn proxy again."]},{elementType:"SmallHeadline",content:"Traps"},{elementType:"UnsignedList",content:["<code>handler.getPrototypeOf(target)</code>, a trap for the <code>Object.getPrototypeOf()</code> method","<code>handler.setPrototypeOf(target, newPrototype)</code>, a trap for the \n                        <code>Object.setPrototypeOf()</code> method","<code>handler.isExtensible(target)</code>, a trap for the <code>Object.isExtensible()</code> method","<code>handler.preventExtensions(target)</code>, a trap for the <code>Object.preventExtensions</code> \n                        method","<code>handler.getOwnPropertyDescriptor</code> is a trap for the <code>Object.getOwnPropertyDescriptor()\n                        </code> method","<code>handler.defineProperty(target, property, descriptor)</code> \n                        is a trap for the <code>Object.defineProperty()</code> method","<code>handler.has(target, property)</code> is the trap for the <code>in</code> operator,","<code>handler.get(target, property, thisArg)</code> is a trap for getting a property with lets say an <code>=</code>\n                        operator","<code>handler.set(target, property, thisArg)</code> is a trap for setting a property,","<code>handler.deleteProperty(target, property)</code>: a trap for the delete operator,","<code>handler.ownKeys(target)</code>, a trap for the <code>Reflect.ownKeys()</code>,\n                        or <code>Object.getOwnKeyNames</code>, <code>Object.getOwnSymbols()</code> method,","<code>handler.apply(target, thisArg, argumentsList)</code> a trap for the function call,","<code>handler.construct()</code>, a trap for the <code>new</code> operator. This tarp has to\n                        return an object (not a primitive), and needs the target of this proxy to be a constructor"]},{elementType:"SmallHeadline",content:"Example"},{elementType:"UnsignedList",content:["Defining a new property on the proxy will cause a corresponding element in DOM to appear, or\n                        update if property was already defined,","Getting a property from the proxy will cause an alert message to appear,","Deleting an existing property from the proxy will cause a corresponding element from the DOM to disappear,","Note, that properties are defined under <code>proxy[someProperty]</code>, and in reality they exist under\n                        a nested object: <code>targetObject.contentStorage</code>"]},{elementType:"Code",content:"\n<pre>\nfunction Binder(outletId){\n    let form = document.forms[0];\n    form.onsubmit = submit;\n    this.outletId = outletId;\n    this.getIdFromKey = function(key){\n        return 'id'+key\n    };\n    this.contentStorage = {};\n};\nlet handler = {\n    set: function(target, key, value){\n        if (key !== 'storage'){\n            let isAlreadyAdded = Reflect.has(target.contentStorage, key);\n            let newValue = 'prop: '+key+ ' ' + 'val: '+ value;\n            if (isAlreadyAdded){\n                let elementInDom = document.getElementById(target.getIdFromKey(key));\n                elementInDom.innerText = newValue;\n            } else {\n                let newElement = document.createElement('div');\n                let outlet = document.getElementById(target.outletId);\n                newElement.setAttribute('id', target.getIdFromKey(key))\n                newElement.innerText = newValue;       \n                outlet.appendChild(newElement)\n            }\n            target.contentStorage[key] = value;\n        }\n    },\n    get: function(target, key){\n        if (key == 'storage') return target.contentStorage;\n        let elementExists = Reflect.has(target.contentStorage, key);\n        let value = null;\n        if (elementExists) value = target.contentStorage[key];\n        window.alert(\n            elementExists?'Item value is: '+ value:'Item does not exist'\n        )\n        return value;\n    },\n    deleteProperty: function(target, key){\n        console.log(target);\n        console.log(key)\n        let elementExists = Reflect.has(target.contentStorage, key);\n        if (elementExists){\n            let domElement = document.getElementById(target.getIdFromKey(key));\n            let infoText = 'Element '+domElement.innerText+' will was removed';\n            domElement.remove();\n            Reflect.deleteProperty(target.contentStorage, key);\n            console.log(target.contentStorage)\n            window.alert(infoText);\n        } else {\n            window.alert('Element '+key+' not found')\n        }\n    },\n}\n\nlet targetObject = new Binder('someId');\nlet proxy = new Proxy(targetObject, handler)\n\n</pre>                    \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Proxy",description:"Tutorial"}]}]};var Vt={summary:"bitwise use cases",title:"Bitwise use cases",searchKeywords:"left shift rigth shift bitwise and or not xor masking rgb hex conversion\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Bitwise use cases"},{elementType:"Paragraph",content:"\n                    There is a set of 7 bitwise (assignment bitwise operators not counted) operators:\n                    "},{elementType:"UnsignedList",content:["<code>~</code>: NOT,","<code>&</code>: AND,","<code>|</code>: OR,","<code>^</code>: XOR,","<code><<</code>: Left shift,","<code>>></code>: sign proprgating right shift,","<code>>>></code>: Zero-fill right shift,"]},{elementType:"Paragraph",content:"\n                    Lets see some use cases of these operators. To learn more, please refer to the article from\n                    the reference section.\n                    "},{elementType:"NoteWarning",content:"\n                    Bitwise operators make take both: BitInts and numbers as operands. Exception is ther right shift zero-fill\n                    operator. The condition is that both operands are of the same type.\n                    "},{elementType:"SmallHeadline",content:"How are values in examples calculated?"},{elementType:"UnsignedList",content:["<i>Binary expression</i> and <i>Binary outcome</i>: <code>(val).toString(2)</code>","<i>>>> expression</i> and <i>>>> outcome</i>: <code>(val).toString(2 >>> 0)</code>, \n                        zero-fill right shift operator is the only way, that \n                        allow to preserve original coding of negative numbers"]},{elementType:"NoteWarning",content:"\n                    These bits work only in <code>Number</code> type, that are integers small enough to be \n                    as a 31 bit binary (sign not included, the most significant bit of the 32 bit representation is a \n                    sign bit)\n                    "},{elementType:"Headline-3",content:"<code>~</code>: NOT"},{elementType:"UnsignedList",content:["<code> ~ 1 </code>: 0,","<code> ~ 0 </code>: 1,"]},{elementType:"Paragraph",content:"\n                    This operator negates each bit of the number: \n                    "},{elementType:"ConditionalArray",headItems:["Expression","Outcome","Binary expression","Binary outcome",">>> expression",">>> outcome"],content:[(rt={},Object(_.a)(rt,Symbol("title"),"~"),Object(_.a)(rt,"Expression","<code>~5</code>"),Object(_.a)(rt,"Outcome","<code>-6</code>"),Object(_.a)(rt,"Binary expression","101"),Object(_.a)(rt,"Binary outcome","-110"),Object(_.a)(rt,">>> expression","00000000000000000000000000000101"),Object(_.a)(rt,">>> outcome","11111111111111111111111111111010"),rt),(it={},Object(_.a)(it,Symbol("title"),"~"),Object(_.a)(it,"Expression","<code>~-1</code>"),Object(_.a)(it,"Outcome","<code>0</code>"),Object(_.a)(it,Symbol("code"),' \n                            If converted to a boolean value, this will become true.\n<pre>\n    let finder = function(itemToSearch){\n        return function(item, index){\n            if (item == itemToSearch) return true;\n            return false    \n        }\n    }\n    let arr = [0, 1, 2, 3];\n    let find3 = finder(3);\n    let find4 = finder(4);\n\n    findIndex returns -1 if does not find an element \n    meeting criteria from a callback function, and returns\n    a found element index in other cases\n\n    let isElementFound_true = ~arr.findIndex(find3);\n    // (~3 >>> 0).toString(2) == "11111111111111111111111111111100"\n    // and this is true, every  value that is != -1 \n    // after negation with bitwise NOT will be true\n\n    let isElementFound_false  = ~arr.findIndex(find4);\n    // (~-1 >>> 0).toString(2) == "00000000000000000000000000000000"\n    // NOT is perfect for converting array seach index function\n    // outcome to a boolean value\n\n</pre>                            \n                                                        '),Object(_.a)(it,"Binary expression","1"),Object(_.a)(it,"Binary outcome","-1"),Object(_.a)(it,">>> expression","11111111111111111111111111111111"),Object(_.a)(it,">>> outcome","00000000000000000000000000000000"),it),(st={},Object(_.a)(st,Symbol("title"),"~"),Object(_.a)(st,"Expression","<code>~0</code>"),Object(_.a)(st,"Outcome","<code>-1</code>"),Object(_.a)(st,"Binary expression","1"),Object(_.a)(st,"Binary outcome","-1"),Object(_.a)(st,">>> expression","00000000000000000000000000000000"),Object(_.a)(st,">>> outcome","11111111111111111111111111111111"),st),(ct={},Object(_.a)(ct,Symbol("title"),"~"),Object(_.a)(ct,"Expression","<code>~1</code>"),Object(_.a)(ct,"Outcome","<code>-2</code>"),Object(_.a)(ct,"Binary expression","1"),Object(_.a)(ct,"Binary outcome","-1"),Object(_.a)(ct,">>> expression","00000000000000000000000000000001"),Object(_.a)(ct,">>> outcome","11111111111111111111111111111110"),ct),(lt={},Object(_.a)(lt,Symbol("title"),"~"),Object(_.a)(lt,"Expression","<code>~true</code>"),Object(_.a)(lt,"Outcome","<code>-2</code>"),Object(_.a)(lt,"Binary expression","1"),Object(_.a)(lt,"Binary outcome","-1"),Object(_.a)(lt,">>> expression","00000000000000000000000000000001"),Object(_.a)(lt,">>> outcome","11111111111111111111111111111110"),lt),(dt={},Object(_.a)(dt,Symbol("title"),"~"),Object(_.a)(dt,"Expression","<code>~14147483690</code>"),Object(_.a)(dt,Symbol("code")," \nNote that 14147483690 > 2147483647, so is greater than the greatest number that can be represented within 31 bits,\nthat is why left most bits are discarded.\n                            "),Object(_.a)(dt,"Outcome","<code>-1262581803</code>"),Object(_.a)(dt,"Binary expression","1001011010000010111100000101010"),Object(_.a)(dt,"Binary outcome","10110100101111101000011111010101"),Object(_.a)(dt,">>> expression","1101001011010000010111100000101010"),Object(_.a)(dt,">>> outcome","11111111111111111111111111111110"),dt)]},{elementType:"UnsignedList",content:["<code>~</code> should not be mistaken with a <code>!</code> operator, the second one \n                        negates boolean expressions, and the first one converts to binary,","<code>~array.findIndex(cb())</code> will return true or false instead of -1 or an index.\n                        Click above table <code>~-1</code> row to see more,","<code>~~val</code> could be an equivalent to <code>Math.floor(val)</code> in case the\n                        <code>val</code> is not greater than <code>2**31-1</code>"]},{elementType:"Headline-3",content:"&: AND"},{elementType:"UnsignedList",content:["<code>0 & 0 == 0;</code>,","<code>0 & 1 == 0;</code>,","<code>1 & 0 == 0;</code>,","<code>1 & 1 == 1;</code>,"]},{elementType:"SmallHeadline",content:"Useful properties"},{elementType:"UnsignedList",content:["<code>A & 0 == 0;</code>,","<code>A & ~A == 0;</code>,","<code>A & A == A;</code>,","<code>A & -1 == A;</code>,"]},{elementType:"ConditionalArray",headItems:["Expression","Outcome","Binary expression","Binary outcome",">>> expression",">>> outcome"],content:[(pt={},Object(_.a)(pt,Symbol("title"),"&"),Object(_.a)(pt,"Expression","<code>192.168.255.10 & 255.255.255.0</code>"),Object(_.a)(pt,Symbol("code")," \n                            If converted to a boolean value, this will become true.\n<pre>\nThis example is related to computer networks, a bitwise AND is used for IP masking\n192.168.255.10 == C0.A8.FF.00 ==\n11000000.10101000.11111111.00001010 &\n11111111.11111111.11111111.00000000\n-------------------------------------\n11000000.10101000.11111111.00000000\n\nand this is an address of the network,\nthis network can have hosts from \n192.168.255.1 to 192.168.255.254,\n192.168.255.255 is reserved for the broadcast address,\n192.168.255.0 is a network address.\n\n</pre>                            \n                                                        "),Object(_.a)(pt,"Outcome","<code>192.168.255.0</code>"),Object(_.a)(pt,"Binary expression","C0.A8.FF.00 & FF.FF.FF.00"),Object(_.a)(pt,"Binary outcome","Click to see"),Object(_.a)(pt,">>> expression","Click to see"),Object(_.a)(pt,">>> outcome","Click to see"),pt),(mt={},Object(_.a)(mt,Symbol("title"),"&"),Object(_.a)(mt,"Expression","<code>#FFABCD & BLUE_FLAG</code>"),Object(_.a)(mt,"Outcome","<code>CD</code>"),Object(_.a)(mt,Symbol("code")," \n                            If converted to a boolean value, this will become true.\n<pre>\nAND operator is perfect for extracting red, green, blue\ningrediance from some hexadecimal format:\nlet RED_FLAG = (255 << 16);\nlet GREEN_FLAG = (255 << 8);\nlet BLUE_FLAG = (255);\n\nfunction prefixWith0(hexColorAsStr){\n    if(hexColorAsStr.length == 3){\n        let slicedStr = hexColorAsStr.split('');\n        slicedStr.unshift('');\n        return slicedStr.join('0');\n    }\n    return hexColorAsStr;\n}\n\nfunction getRed(hexColor){\n    \n    return (parseInt(hexColor,16) & RED_FLAG) >> 16\n}\nfunction getGreen(hexColor){\n    return (parseInt(hexColor,16) & GREEN_FLAG) >> 8\n}\nfunction getBlue(hexColor){\n    return parseInt(hexColor,16) & BLUE_FLAG\n}\n\nfunction hex2RGB(hexString){\n    if (hexString[1]==\"#\") hexString = hexString.substring(1);\n    hexString = prefixWith0(hexString)\n    let r = getRed(hexString);\n    let g = getGreen(hexString);\n    let b = getBlue(hexString);\n    \n    return `rgb(${r}, ${g}, ${b})`\n}\n\n</pre>                            \n                                                        "),Object(_.a)(mt,"Binary expression","Click to see"),Object(_.a)(mt,"Binary outcome","Click to see"),Object(_.a)(mt,">>> expression","Click to see"),Object(_.a)(mt,">>> outcome","Click to see"),mt),(ut={},Object(_.a)(ut,Symbol("title"),"&"),Object(_.a)(ut,Symbol("code"),"\n<pre>\n00000000000000000000000011001000 &\n00000000000000000000000001100100 \n----------------------------------\n00000000000000000000000001000000 \n</pre>                            \n                            "),Object(_.a)(ut,"Expression","<code>200 & 100</code>"),Object(_.a)(ut,"Outcome","<code>64</code>"),Object(_.a)(ut,"Binary expression","11001000 & 1100100"),Object(_.a)(ut,"Binary outcome","1000000"),Object(_.a)(ut,">>> expression","11001000"),Object(_.a)(ut,">>> outcome","1100100"),ut),(ht={},Object(_.a)(ht,Symbol("title"),"&"),Object(_.a)(ht,Symbol("code"),"\n<pre>\nfunction isEvent(int){\n    return int & 1 == 0\n}\nfunction isOdd(int){\n    return int & 0 == 1\n}\n00000000000000000000000001100101 &\n00000000000000000000000000000001 \n----------------------------------\n00000000000000000000000000000001 \n//false\n</pre>                            \n                            "),Object(_.a)(ht,"Expression","<code>isEven(101)</code>"),Object(_.a)(ht,"Outcome","<code>false</code>"),Object(_.a)(ht,"Binary expression","1100101 & 1 == 0"),Object(_.a)(ht,"Binary outcome","1"),Object(_.a)(ht,">>> expression","1100101"),Object(_.a)(ht,">>> outcome","1"),ht)]},{elementType:"UnsignedList",content:["IP masking","Flags, making sure bits are turned off","Getting RGB ingredients from a hex number","Checking if a number is even or odd"]},{elementType:"Headline-3",content:"<code>|</code>: OR"},{elementType:"UnsignedList",content:["<code>0 | 0 == 0;</code>,","<code>0 | 1 == 1;</code>,","<code>1 | 0 == 1;</code>,","<code>1 | 1 == 1;</code>,"]},{elementType:"SmallHeadline",content:"Useful properties"},{elementType:"UnsignedList",content:["<code>A | 0 == A;</code>,","<code>A | ~A == -1;</code>,","<code>A | A == A;</code>,","<code>A | -1 == -1;</code>,"]},{elementType:"UnsignedList",content:["Turning on bits when calling a function with a flag","Converting RGB to Hex"]},{elementType:"SmallHeadline",content:"RGB to Hex"},{elementType:"Code",content:"\n<pre>\n    function getRed(int){\n        return (int << 16)\n    }\n    function getGreen(int){\n        return (int << 8)\n    }\n    function getBlue(int){\n        return (int << 0)\n    }\n    function rgb2Hex(str){\n        let ingredients = str.split('(')[1].split(',');\n        let r = getRed(parseInt(ingredients[0]));\n        let g = getGreen(parseInt(ingredients[1]));\n        let b = getBlue(parseInt(ingredients[2]));\n        return '#'+ (r | g | b).toString(16);\n    }\n</pre>                    \n                    "},{elementType:"Headline-3",content:"<code>^</code>: XOR"},{elementType:"UnsignedList",content:["<code>0 ^ 0 == 0;</code>,","<code>0 ^ 1 == 1;</code>,","<code>1 ^ 0 == 1;</code>,","<code>1 ^ 1 == 0;</code>,"]},{elementType:"SmallHeadline",content:"Useful properties"},{elementType:"UnsignedList",content:["<code>A ^ 0 == A;</code>,","<code>A ^ ~A == -1;</code>,","<code>A ^ A == 0;</code>,","<code>A ^ -1 == ~A;</code>,"]},{elementType:"UnsignedList",content:["Toggling bits","Color inversion"]},{elementType:"SmallHeadline",content:"Color inversion"},{elementType:"Code",content:"\n<pre>\n    function invertSingle(int){\n        return (int ^ 255)\n    }\n    function invert(str){\n        let ingredients = str.split('(')[1].split(',');\n        let r = invertSingle(parseInt(ingredients[0]));\n        let g = invertSingle(parseInt(ingredients[1]));\n        let b = invertSingle(parseInt(ingredients[2]));\n        return `rgb(${r},${g},${b})`\n    }\n    //white -> black;\n    //green -> magenta;\n    //red -> cyan;\n    //blue -> yellow;\n</pre>                    \n                    "},{elementType:"Headline-3",content:"<code><<</code>: a Left shift operator"},{elementType:"Paragraph",content:"\n                    Changes the left and right operand to the 32 integer representation, and shifts the left operand \n                    bits the number of positions indicated by the right operand modulo 32.\n                    "},{elementType:"Paragraph",content:"\n                    The behaviour of this operator may be complicated in some cases, that is why it is needed to be \n                    careful when the result would not fit into 31 bits\n                    "},{elementType:"Paragraph",content:"\n                    For simplicity: <code>a << b === a * (2 ** b)</code> but the real replacement would be:<br> \n                    Math.floor(a) * (2 ** (Math.floor(b>>>0) % 32))) & -1\n                    "},{elementType:"ConditionalArray",headItems:["Expression","Outcome","Binary expression","Binary outcome",">>> expression",">>> outcome"],content:[(bt={},Object(_.a)(bt,Symbol("title"),"<<"),Object(_.a)(bt,"Expression","<code>1 << 10</code>"),Object(_.a)(bt,"Outcome","<code>1024</code>"),Object(_.a)(bt,"Binary expression","1"),Object(_.a)(bt,"Binary outcome","10000000000"),Object(_.a)(bt,">>> expression","1"),Object(_.a)(bt,">>> outcome","10000000000"),bt),(ft={},Object(_.a)(ft,Symbol("title"),"<<"),Object(_.a)(ft,"Expression","<code>5 << 10</code>"),Object(_.a)(ft,"Outcome","<code>5120</code>"),Object(_.a)(ft,"Binary expression","101"),Object(_.a)(ft,"Binary outcome","1010000000000"),Object(_.a)(ft,">>> expression","101"),Object(_.a)(ft,">>> outcome","1010000000000"),ft),(yt={},Object(_.a)(yt,Symbol("title"),"1 << 31"),Object(_.a)(yt,"Expression","<code>1 << 31</code>"),Object(_.a)(yt,"Outcome","<code>-2147483648</code>"),Object(_.a)(yt,"Binary expression","1"),Object(_.a)(yt,"Binary outcome","-10000000000000000000000000000000"),Object(_.a)(yt,">>> expression","00000000000000000000000000000001"),Object(_.a)(yt,">>> outcome","10000000000000000000000000000000"),yt),(gt={},Object(_.a)(gt,Symbol("title"),"1 << 32"),Object(_.a)(gt,"Expression","<code>1 << 32</code>"),Object(_.a)(gt,"Outcome","<code>1</code>"),Object(_.a)(gt,Symbol("code")," \n                            Here is an example that, for example, in Chromium 90.0.4430.72 or Firefox 88.0 \n                            first bit is not forgotten. 5 << 32 === 5, so bits are moved back to their \n                            initial position                           \n                                                        "),Object(_.a)(gt,"Binary expression","1"),Object(_.a)(gt,"Binary outcome","1"),Object(_.a)(gt,">>> expression","1"),Object(_.a)(gt,">>> outcome","1"),gt),(vt={},Object(_.a)(vt,Symbol("title"),"5 << 30"),Object(_.a)(vt,"Expression","<code>5 << 30</code>"),Object(_.a)(vt,"Outcome","<code>1073741824</code>"),Object(_.a)(vt,Symbol("code")," \n                            Here behaviour is different from 1 << 32. One bit is forgotten, and one is moved.\n                            The conclusion is, that if there is chance that a number will fall out of the given \n                            boundaries, it is better not to use this operator, as behaviour may be \n                            hard to predict and will not be readable\n                                                        "),Object(_.a)(vt,"Binary expression","101"),Object(_.a)(vt,"Binary outcome","1000000000000000000000000000000"),Object(_.a)(vt,">>> expression","101"),Object(_.a)(vt,">>> outcome","1000000000000000000000000000000"),vt),(wt={},Object(_.a)(wt,Symbol("title"),"123456789 << 32"),Object(_.a)(wt,"Expression","<code>123456789 << 32</code>"),Object(_.a)(wt,"Outcome","<code>123456789</code>"),Object(_.a)(wt,Symbol("code")," \n                            In this example, all bits are rewound, as we move whole number exactly 32 bits, but \n                            please see the next example.\n                                                        "),Object(_.a)(wt,"Binary expression","111010110111100110100010101"),Object(_.a)(wt,"Binary outcome","111010110111100110100010101"),Object(_.a)(wt,">>> expression","111010110111100110100010101"),Object(_.a)(wt,">>> outcome","111010110111100110100010101"),wt),(jt={},Object(_.a)(jt,Symbol("title"),"123456789 << 39"),Object(_.a)(jt,"Expression","<code>123456789 << 39</code>"),Object(_.a)(jt,"Outcome","<code>-1377400192</code>"),Object(_.a)(jt,Symbol("code")," \n                            Here it is visable, that some bits are rewound (due to 32 bit shift), and some are\n                            discarded (due to the fact, that this shift is greater than 32). This example \n                            illustrates a hard to predict not readable case\n                                                        "),Object(_.a)(jt,"Binary expression","111010110111100110100010101"),Object(_.a)(jt,"Binary outcome","10101101111001101000101010000000"),Object(_.a)(jt,">>> expression","111010110111100110100010101"),Object(_.a)(jt,">>> outcome","10101101111001101000101010000000"),jt),(Ot={},Object(_.a)(Ot,Symbol("title"),"5.5 << 2.5"),Object(_.a)(Ot,"Expression","<code>5.5 << 2.5</code>"),Object(_.a)(Ot,"Outcome","<code>20</code>"),Object(_.a)(Ot,Symbol("code")," \n                            Here it is visable, that some bits are rewound (due to 32 bit shift), and some are\n                            discarded (due to the fact, that this shift is greater than 32). This example \n                            illustrates a hard to predict not readable case\n                                                        "),Object(_.a)(Ot,"Binary expression","101.1"),Object(_.a)(Ot,"Binary outcome","10100"),Object(_.a)(Ot,">>> expression","101"),Object(_.a)(Ot,">>> outcome","10100"),Ot),(Tt={},Object(_.a)(Tt,Symbol("title"),"5 << -1"),Object(_.a)(Tt,"Expression","<code>5 << -1</code>"),Object(_.a)(Tt,"Outcome","<code>-2147483648</code>"),Object(_.a)(Tt,Symbol("code")," \n                            \n                                                        "),Object(_.a)(Tt,"Binary expression","101"),Object(_.a)(Tt,"Binary outcome","10000000000000000000000000000000"),Object(_.a)(Tt,">>> expression","00000000000000000000000000000101"),Object(_.a)(Tt,">>> outcome","10000000000000000000000000000000"),Tt),(xt={},Object(_.a)(xt,Symbol("title"),"5 << -2"),Object(_.a)(xt,"Expression","<code>5 << -2</code>"),Object(_.a)(xt,"Outcome","<code>1073741824</code>"),Object(_.a)(xt,Symbol("code")," \n                            \n                                                        "),Object(_.a)(xt,"Binary expression","101"),Object(_.a)(xt,"Binary outcome","01000000000000000000000000000000"),Object(_.a)(xt,">>> expression","00000000000000000000000000000101"),Object(_.a)(xt,">>> outcome","01000000000000000000000000000000"),xt),(St={},Object(_.a)(St,Symbol("title"),"5 << -3"),Object(_.a)(St,"Expression","<code>5 << -3</code>"),Object(_.a)(St,"Outcome","<code>-1610612736</code>"),Object(_.a)(St,Symbol("code")," \n                            \n                                                        "),Object(_.a)(St,"Binary expression","101"),Object(_.a)(St,"Binary outcome","10100000000000000000000000000000"),Object(_.a)(St,">>> expression","00000000000000000000000000000101"),Object(_.a)(St,">>> outcome","10100000000000000000000000000000"),St)]},{elementType:"Headline-3",content:"<code>>></code>: a right shift sign-propagating operator"},{elementType:"Paragraph",content:"\n                    Changes the left and right operand to the 32 bit integer representation, and shifts the left operand \n                    bits the number of positions indicated by the right operand modulo 32 to the right. \n                    This operator preserves its sign, so in case a negative number\n                    is shifted, most significant bits will be filled with 1, and in case a positive number is shifted,\n                    most significant bits will be filled with 0.\n                    "},{elementType:"Paragraph",content:"\n                    The idea of this operand can be represented by below pattern<br>\n                    <code>a >> b === Math.floor(A / (2 ** b)</code>\n                    In reality, however behaviour of this operator is slightly more complicated:\n<pre>\n<code>\nlet right = (a, b) => {\n    if (a < 0) return Math.floor(a / (2 ** b))\n    return (Math.floor(a >>> 0) / (2 ** (Math.floor(b>>>0) % 32))) & -1\n}\n// tests proving this works are in the operators article\n</code>\n</pre>\n                    "},{elementType:"ConditionalArray",headItems:["Expression","Outcome","Binary expression","Binary outcome",">>> expression",">>> outcome"],content:[(kt={},Object(_.a)(kt,Symbol("title"),">>"),Object(_.a)(kt,"Expression","<code>10 >> 1</code>"),Object(_.a)(kt,"Outcome","<code>5</code>"),Object(_.a)(kt,"Binary expression","1010"),Object(_.a)(kt,"Binary outcome","101"),Object(_.a)(kt,">>> expression","1010"),Object(_.a)(kt,">>> outcome","101"),kt),(Nt={},Object(_.a)(Nt,Symbol("title"),">>"),Object(_.a)(Nt,"Expression","<code>10.5 >> 1.5</code>"),Object(_.a)(Nt,"Outcome","<code>5</code>"),Object(_.a)(Nt,"Binary expression","1010"),Object(_.a)(Nt,"Binary outcome","101"),Object(_.a)(Nt,">>> expression","1010"),Object(_.a)(Nt,">>> outcome","101"),Nt),(It={},Object(_.a)(It,Symbol("title"),">>"),Object(_.a)(It,"Expression","<code>1024 >> 10</code>"),Object(_.a)(It,"Outcome","<code>1</code>"),Object(_.a)(It,"Binary expression","10000000000"),Object(_.a)(It,"Binary outcome","1"),Object(_.a)(It,">>> expression","10000000000"),Object(_.a)(It,">>> outcome","1"),It),(Pt={},Object(_.a)(Pt,Symbol("title"),">>"),Object(_.a)(Pt,"Expression","<code>5120 >> 11</code>"),Object(_.a)(Pt,"Outcome","<code>2</code>"),Object(_.a)(Pt,"Binary expression","1010000000000"),Object(_.a)(Pt,"Binary outcome","10"),Object(_.a)(Pt,">>> expression","1010000000000"),Object(_.a)(Pt,">>> outcome","10"),Pt),(At={},Object(_.a)(At,Symbol("title"),">>"),Object(_.a)(At,"Expression","<code>-5 >> 2</code>"),Object(_.a)(At,"Outcome","<code>-2</code>"),Object(_.a)(At,"Binary expression","-101"),Object(_.a)(At,"Binary outcome","-10"),Object(_.a)(At,">>> expression","11111111111111111111111111111011"),Object(_.a)(At,">>> outcome","11111111111111111111111111111110"),At),(Et={},Object(_.a)(Et,Symbol("title"),">>"),Object(_.a)(Et,"Expression","<code>5 >> 32</code>"),Object(_.a)(Et,"Outcome","<code>5</code>"),Object(_.a)(Et,Symbol("code")," \n                            When moving the number n*32 bits, where n is a positive integer, \n                            the outcome is the same number\n                                                        "),Object(_.a)(Et,"Binary expression","101"),Object(_.a)(Et,"Binary outcome","101"),Object(_.a)(Et,">>> expression","101"),Object(_.a)(Et,">>> outcome","101"),Et),(Ct={},Object(_.a)(Ct,Symbol("title"),">>"),Object(_.a)(Ct,"Expression","<code>5 >> 31</code>"),Object(_.a)(Ct,"Outcome","<code>0</code>"),Object(_.a)(Ct,Symbol("code")," \n                            All bits are discarded, none is rewound as there is a sign bit\n                                                        "),Object(_.a)(Ct,"Binary expression","101"),Object(_.a)(Ct,"Binary outcome","0"),Object(_.a)(Ct,">>> expression","101"),Object(_.a)(Ct,">>> outcome","0"),Ct),(Lt={},Object(_.a)(Lt,Symbol("title"),">>"),Object(_.a)(Lt,"Expression","<code>5 >> 33</code>"),Object(_.a)(Lt,"Outcome","<code>2</code>"),Object(_.a)(Lt,"Binary expression","101"),Object(_.a)(Lt,"Binary outcome","10"),Object(_.a)(Lt,">>> expression","101"),Object(_.a)(Lt,">>> outcome","10"),Lt),(Ht={},Object(_.a)(Ht,Symbol("title"),">>"),Object(_.a)(Ht,"Expression","<code>5 >> -1</code>"),Object(_.a)(Ht,"Outcome","<code>0</code>"),Object(_.a)(Ht,"Binary expression","101"),Object(_.a)(Ht,"Binary outcome","0"),Object(_.a)(Ht,">>> expression","101"),Object(_.a)(Ht,">>> outcome","0"),Ht),(Mt={},Object(_.a)(Mt,Symbol("title"),">>"),Object(_.a)(Mt,"Expression","<code>5 >> -2</code>"),Object(_.a)(Mt,"Outcome","<code>0</code>"),Object(_.a)(Mt,"Binary expression","101"),Object(_.a)(Mt,"Binary outcome","0"),Object(_.a)(Mt,">>> expression","101"),Object(_.a)(Mt,">>> outcome","0"),Mt),(Dt={},Object(_.a)(Dt,Symbol("title"),">>"),Object(_.a)(Dt,"Expression","<code>5 >> -29</code>"),Object(_.a)(Dt,"Outcome","<code>0</code>"),Object(_.a)(Dt,"Binary expression","101"),Object(_.a)(Dt,"Binary outcome","0"),Object(_.a)(Dt,">>> expression","101"),Object(_.a)(Dt,">>> outcome","0"),Dt),(Rt={},Object(_.a)(Rt,Symbol("title"),">>"),Object(_.a)(Rt,"Expression","<code>5 >> -30</code>"),Object(_.a)(Rt,"Outcome","<code>1</code>"),Object(_.a)(Rt,"Binary expression","101"),Object(_.a)(Rt,"Binary outcome","1"),Object(_.a)(Rt,">>> expression","101"),Object(_.a)(Rt,">>> outcome","1"),Rt),(Ft={},Object(_.a)(Ft,Symbol("title"),">>"),Object(_.a)(Ft,"Expression","<code>5 >> -31</code>"),Object(_.a)(Ft,"Outcome","<code>2</code>"),Object(_.a)(Ft,"Binary expression","101"),Object(_.a)(Ft,"Binary outcome","10"),Object(_.a)(Ft,">>> expression","101"),Object(_.a)(Ft,">>> outcome","10"),Ft),(Ut={},Object(_.a)(Ut,Symbol("title"),">>"),Object(_.a)(Ut,"Expression","<code>-5 >> -1</code>"),Object(_.a)(Ut,"Outcome","<code>-1</code>"),Object(_.a)(Ut,"Binary expression","101"),Object(_.a)(Ut,"Binary outcome","-1"),Object(_.a)(Ut,">>> expression","101"),Object(_.a)(Ut,">>> outcome","11111111111111111111111111111111"),Ut),(Bt={},Object(_.a)(Bt,Symbol("title"),">>"),Object(_.a)(Bt,"Expression","<code>-5 >> -3</code>"),Object(_.a)(Bt,"Outcome","<code>-1</code>"),Object(_.a)(Bt,"Binary expression","101"),Object(_.a)(Bt,"Binary outcome","-1"),Object(_.a)(Bt,">>> expression","101"),Object(_.a)(Bt,">>> outcome","11111111111111111111111111111111"),Bt),(_t={},Object(_.a)(_t,Symbol("title"),">>"),Object(_.a)(_t,"Expression","<code>-5 >> -31</code>"),Object(_.a)(_t,"Outcome","<code>2</code>"),Object(_.a)(_t,"Binary expression","101"),Object(_.a)(_t,"Binary outcome","10"),Object(_.a)(_t,">>> expression","101"),Object(_.a)(_t,">>> outcome","10"),_t)]},{elementType:"Headline-3",content:"<code>>>></code>: a right shift zero-fill operator"},{elementType:"Paragraph",content:"\n                    This operator takes two arguments, and converts the left one to 32-bit integer if possible. \n                    The bits of the left operand will be shifted the number of positions indicated by the right \n                    operand % 32 to the right. Left most bits will be filled with zeros. <br>\n                    This is currently the only operator in JS allowing to see how the real bit representation of a \n                    negative number looks like: <code>(-5 >>> 0).toString(2)</code> will show all bits, including the\n                    sign bit. The bits that do not fit (are moved to the right of the bit with index 0) will be lost.\n                    "},{elementType:"Paragraph",content:"\n                    Conversion to the 32 bit integer (of course there is not such a primitive type in JS, but \n                    small enough integer numbers are stored in the memory in a slightly different way than other\n                    numbers)\n                    "},{elementType:"UnsignedList",content:["A number not small enough to be represented in 32 bits has its last 32 bits taken, the rest is\n                        lost","A fraction part is lost"]},{elementType:"Paragraph",content:"\n                    This operator may be described with the following function:\n<pre>\n<code>\nlet right = (a, b) => {\n    maskOfLeftMostZeros = b === 0?-1:2**(32-b%32)-1;\n    if (a < 0) {return (Math.floor(a / (2 ** b)) & maskOfLeftMostZeros)}\n    return (Math.floor(a >>> 0) / (2 ** (Math.floor(b>>>0) % 32))) & -1\n}\n</code>\n</pre>                    \n                Please find tests proving this function works in the operators article.\n                    "},{elementType:"ConditionalArray",headItems:["Expression","Outcome","Binary expression","Binary outcome",">>> expression",">>> outcome"],content:[(qt={},Object(_.a)(qt,Symbol("title"),">>>"),Object(_.a)(qt,"Expression","<code>1024 >>> 10</code>"),Object(_.a)(qt,"Outcome","<code>1</code>"),Object(_.a)(qt,"Binary expression","10000000000"),Object(_.a)(qt,"Binary outcome","1"),Object(_.a)(qt,">>> expression","10000000000"),Object(_.a)(qt,">>> outcome","1"),qt),(Wt={},Object(_.a)(Wt,Symbol("title"),">>>"),Object(_.a)(Wt,"Expression","<code>-5 >>> 2</code>"),Object(_.a)(Wt,"Outcome","<code>1073741822</code>"),Object(_.a)(Wt,"Binary expression","-101"),Object(_.a)(Wt,"Binary outcome","111111111111111111111111111110"),Object(_.a)(Wt,">>> expression","11111111111111111111111111111011"),Object(_.a)(Wt,">>> outcome","111111111111111111111111111110"),Wt),(zt={},Object(_.a)(zt,Symbol("title"),">>"),Object(_.a)(zt,"Expression","<code>5 >>> 32</code>"),Object(_.a)(zt,"Outcome","<code>5</code>"),Object(_.a)(zt,Symbol("code")," \n                            When moving the number n*32 bits, where n is a positive integer, \n                            the outcome is the same number\n                                                        "),Object(_.a)(zt,"Binary expression","101"),Object(_.a)(zt,"Binary outcome","101"),Object(_.a)(zt,">>> expression","101"),Object(_.a)(zt,">>> outcome","101"),zt)]},{elementType:"NoteWarning",content:"In practice operators <<, >>, >>> accept negative right side operand values, but\n                    it is better to avoid them, as they behaviour is not readable."},{elementType:"Headline-3",content:"Masking example"},{elementType:"Code",content:"\n<pre>\n    let ODD_FLAG = 1;\n    let EVEN_FLAG = 2;\n    let DIV_3_FLAG = 4;\n    let SORT_FLAG = 8;\n    let NOT_REPEAT_FLAG = 16;\n\n    // lets create a test array;\n    let items = Array(100);\n    items.fill(0);\n    items = items.map(\n        (item,index)=>{\n            if (index > 49) return index - 49\n            //let elements repeat\n            return index\n        }\n    );\n\n    function getFromArray(array, flags){\n        let filterFlags = (item, index, array) => {\n            if ((flags & NOT_REPEAT_FLAG) && (index > 0)){\n                let wasItemBefore = ~array.slice(0,index).indexOf(item);\n                if (wasItemBefore) return false;\n            }\n            if ((flags & ODD_FLAG) && (item & 1 === 1)) return true;\n            if ((flags & EVEN_FLAG) && (item & 1 === 0)) return true;\n            if ((flags & DIV_3_FLAG) && (item % 3 === 0)) return true;\n            \n        }\n        let outcome = array.filter(filterFlags);\n        if (flags & SORT_FLAG) return outcome.sort(\n            (a, b)=>{\n                if (a < b) return -1;\n                if (a === b) return 0;\n                return 1;\n            }\n        )\n        return outcome\n    }\n\n    console.log(getFromArray(items, EVEN_FLAG | DIV_3_FLAG));\n    console.log(getFromArray(items, EVEN_FLAG | DIV_3_FLAG | SORT_FLAG));\n    console.log(getFromArray(items, EVEN_FLAG | DIV_3_FLAG | NOT_REPEAT_FLAG));\n\n    //Now lets activate all features, except for odd numbers:\n    let FLAG_NO_ODD = 65536 & (65536 ^ ODD_FLAG);\n    console.log(getFromArray(items, FLAG_NO_ODD));\n</pre>                    \n                    "},{elementType:"Paragraph",content:"\n                    Above example implements a function, that accepts an <code>array</code>, and a \n                    <code>flags</code> argument. The flags argument gives options to activate or deactivate\n                    different features:\n                    "},{elementType:"UnsignedList",content:["return odd elements of the given array,","return even elements of the given array,","return the elements of the array that can be divided by 3 with no remainder,","return elements only once, even if they repeat,","sort returned array"]},{elementType:"Paragraph",content:"\n                    Due to the clean code principles, this should be a set of functions, each doing only one thing, but\n                    here we would have 5 separate functions. To accomplish a set of tasks an array should have been\n                    declared, and 5 functions should have been called on it. A lot more code, less readable,\n                    less encapsulation and more CPU operations.\n                    That is why the implementation of a single high level public function\n                    doing a set of things an already aggregating a few lower level functions is a better \n                    solution in this case. The function from the example\n                    would take 6 arguments altogether if not for the flag usage. We could make an array and \n                    an options argument, that would be an object, but this object would still have 5 properties,\n                    and setting these arguments would not be convenient. In this case the flag pattern comes \n                    handy. The solution is readable, and thanks to usage of bitwise OR passing flags argument\n                    is also readable. Bitwise operations make it clean to introduce an additional flags, like\n                    <code>FLAG_NO_ODD</code>.\n\n                    "},{elementType:"Headline-3",content:"Microcontrollers"},{elementType:"Paragraph",content:"\n                    Perhaps not very JS oriented example, but bitwise operations are very useful when \n                    programming a microcontroller. A uC has ports, each port consists of a few legs (pins),\n                    that are physically connected, soldered to some HW. This may be lets say an LED digit \n                    display, or an H-Bridge for DC motor control. Then telling uC to run a motor in a forward\n                    direction would be like this <code>portA = portA & MOTOR_A_FORWARD</code>. Thanks to this\n                    approach we do not accidentally toggle any of pins not related to the motor A, and we do not\n                    set a dangerous state, where an H-bridge would be damaged.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"ECMAScript",href:"https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-bitwise-shift-operators",description:"Root documentation"},{elementType:"Link",content:"blog.logrocket.com",href:"https://blog.logrocket.com/interesting-use-cases-for-javascript-bitwise-operators/",description:"Some interesting bitwise operations by Glad Chinda"},{elementType:"Link",content:"stackoverflow.com",href:"https://stackoverflow.com/questions/654057/where-would-i-use-a-bitwise-operator-in-javascript",description:"Examples"}]}]};var Gt,Jt,Xt,Yt,Qt,$t,Zt,en,tn,nn,on,an,rn,sn,cn,ln,dn,pn,mn,un,hn={summary:"number representation",title:"Number representation",searchKeywords:"float double floating point 32 53 64 number integer fraction negative number\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Number representation"},{elementType:"Paragraph",content:"\n                    There are two primitive number types in JS, and these are: <code>Number</code> and <code>\n                    BigInt</code>. More common in usage is a <code>Number</code> type, as it is safely represents positive \n                    integers,\n                    negative integers, and floating point positive and negative numbers in the range of -(2<sup>53</sup>-1) to\n                    2<sup>53</sup>-1. A <code>Number</code> type is capable of representing even bigger numbers (from\n                    <code>-Number.MAX_VALUE</code>, that is equal to -1.8<sup>308</sup>, to <code>Number.MAX_VALUE</code>, that\n                is equal to 1.8<sup>308</sup>, but these numbers are only an approximation of a precise value). BigInts are\n                capable of representing much bigger numbers than 2<sup>53</sup>-1, but they are less efficient and not fully \n                compatible with a <code>Number</code> type, so in most usages should be avoided. In this article we will concentrate\n                on a <code>Number</code> type only.\n                    "},{elementType:"Paragraph",content:"\n                    A <code>Number</code> type is always the <code>Number</code> type, but it may be represented internally\n                    in two different ways. The <code>Number</code> type should be represented as a double precision floating\n                    point, but if it is small enough (in range -2<sup>31</sup> to 2<sup>31</sup>) and is an\n                    integer, it will be represented only in 32 bites.\n                    "},{elementType:"Headline-2",content:'<span id = "internalIntegerRepresentation">Internal integer representation</span>'},{elementType:"UnsignedList",content:["If a number is between -2<sup>31</sup> and 2<sup>31</sup>, and","If a number is an integer, then"]},{elementType:"Paragraph",content:"it will be represented in a single precision (32 bit) plain binary format, where the most \n                    significant bit will be a sign bit. 1 is for a negative number, and a 0 is for a positive one.\n                    The number will be represented as 32 bit plain integer as long as it is possible. And there is no \n                    problem with that, as every primitive type in JS (including a <code>Number</code>) is not mutable.\n                    So if a new, bigger value is assigned under a variable, this bigger value is created from scratches\n                    anyway.\n                    "},{elementType:"Paragraph",content:"\n                    32 bit sized numbers have some features, bigger numbers do not have:\n                    "},{elementType:"UnsignedList",content:["bitwise operations may be done on these numbers,","these numbers may be an index of an array. If there is an attempt to create a bigger\n                        array, an error will occur or added values will be indexed with a string, creating key-value\n                        pairs"]},{elementType:"Paragraph",content:"\n                    But how are negative numbers represented in this plain binary notation? Simple sign will not be enough.\n                    Lets considere negative representation on a simpler - 8-bit representation example:\n                    "},{elementType:"Headline-3",content:'<span id="negativeRepresentation">Negative number representation<span>'},{elementType:"Paragraph",content:"\n                    In computer science, there is no natural way to represent a negative number \n                    , as there can be only <code>0</code> or <code>1</code>,\n                    no plus or minus sign is present. The sum of the positive and the negative numbers should always give a\n                    <code>0</code>, so even if there would be only a sign bit introduced, the solution would not be good enough:\n                    "},{elementType:"Code",content:'\n<pre>\n5 - 5 == 0; but\n   <span style="color: red">0</span>0000101\n + <span style="color: red">1</span>0000101\n----------------\n   <span style="color: red">1</span>0001010   and this is <span style="color: red">-10</span> in representation, with most significant bit being <span style="color: red">0</span>;\n</pre>                    \n                    '},{elementType:"Paragraph",content:'\n                    To solve this problem of non negative sum, there is a need to keep this most significant bit \n                    indicating the negative number, and search for the other number, that if was added to a positive\n                    equivalent, would give 0. In this case number of bits that will represent the number is important.\n                    Let us suppose, that the number of bits that will represent the number is 8. There is a pattern:\n                    <strong>2<sup>n</sup> + negativeNumber</strong>, where <strong>n</strong> is the number of bits \n                    representing the number, and the <code>negativeNumber</code> is number that needs to be converted\n                    with its minus sign, so as an example conversion of <strong>-5</strong> represented with\n                    <strong>8</strong> bits\n                    bits would be:<br>\n                    <strong>2<sup>8</sup> + (-5) = 256 - 5 = 251</strong>, and 251 converted to binary is \n                    <strong><span style="color:red">1</span>1111011</strong>. This red bit is the most significant bit \n                    meaning that this number is negative if set to 1, and positive if set to 0. Now:\n                    '},{elementType:"Code",content:'\n<pre>\n    <span style="color: red">0</span>0000101\n +  <span style="color: red">1</span>1111011\n----------------\n (<span style="color: red">1</span>)00000000\n</pre>                    \n                    '},{elementType:"Paragraph",content:"\n                    There is an overflow, one bit is out of this representation, as it becomes a 9-th\n                    bit, and number representation has only 8 bits, so it will be ignored. And if this bit is\n                    ignored, then the remaining bits are <code>00000000</code>, so equal to 0.\n                    "},{elementType:"SmallHeadline",content:"What if someone would like to represent 257 on 8 bits then?"},{elementType:"Paragraph",content:"\n                    The answer is simple. There is no 257 number in this representation. To have this number, there is a \n                    need to take more bits into account, lets say 16 to represent a single number. 8 bits represent\n                    256 possibilities with a 0 included, so from 255 to 0 or from -128 to 127. With 16 bits this would \n                    be 65536 possibilities, including 0, so 65535 to 0, or 32767 to -32768 with negative numbers. \n                    An elephant will not fit into a backpack &#128578;<br>\n                    Even in JS there is a limit to the numbers. Each number larger than the \n                    <code>Number.MAX_SAFE_INTEGER</code> or smaller than <code>-Number.MAX_SAFE_INTEGER</code> is\n                    approximated, and a number larger than <code>number.MAX_VALUE</code> or smaller then \n                    <code>Number.MIN_VALUE</code> is <code>Infinity</code> or </code>-Infinity</code>\n                    "},{elementType:"Headline-3",content:'<span id="fractionRepresentation">Fractions in binary codding<span>'},{elementType:"Paragraph",content:'\n                    <table class = "table">\n                    <thead>\n                        <tr>\n                            <th>number:</th>\n                            <th>0.1 (2<sup>-1</sup>) 0.5</th>\n                            <th>0.01 (2<sup>-2</sup>) 0.25(</th>\n                            <th>0.001 (2<sup>-3</sup>) 0.125</th>\n                            <th>0.0001 (2<sup>-4</sup>) 0.0625</th>\n                            <th>Equals 0.0625</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>0.6875</td>\n                            <td>1</td>\n                            <td>0</td>\n                            <td>1</td>\n                            <td>1</td>\n                            <td>0.1011</td>\n                        </tr>\n                        <tr>\n                            <td>0.375</td>\n                            <td>0</td>\n                            <td>1</td>\n                            <td>0</td>\n                            <td>1</td>\n                            <td>0.0101</td>\n                        </tr>\n                        <tr>\n                            <td>0.5625</td>\n                            <td>1</td>\n                            <td>0</td>\n                            <td>0</td>\n                            <td>1</td>\n                            <td>0.1001</td>\n                        </tr>\n                    </tbody>\n                </table>\n                    '},{elementType:"SmallHeadline",content:"The problem with the binary fractions"},{elementType:"Paragraph",content:"If we take a decimal fraction into consideration, it always has some power of \n                    10 in the denominaror. 1/10 is 0.1, 1/5 = 2/10 is 0.2, 1/100 is 0.01. If we want to represent a\n                    fraction that's denominator is not the power of 10, then there is a problem: 1/3 = 0.333(3)\n                    This fraction will never be a precise number, it will always be an approximation with an error.\n                    "},{elementType:"Paragraph",content:"\n                    In case of binary fractions the same phenomenon appears. In this case however, it is not possible to\n                    represent a fraction, that has in denominator a number that is not a power of 2, so:\n                    1/2 = 0b0.1, 1/4 = 0b0.01, 1/8 = 0b.001, but 1/10 will be 0b0.00011(0011), so only an approximation.\n                    There is no possibility to represent some binary fractions precisely. <br>\n                    <code>0.1 + 0.2 == 0.30000000000000004</code><br>\n                    "},{elementType:"NoteWarning",content:"\n                    Fractions should not be compared. They should be rounded in some way for safety reasons\n                    "},{elementType:"Code",content:"\n<pre>                    \nfunction compareFractions(a, b){\n    let ep = 2**-53;\n    return Math.abs(a - b) < ep;\n}\n\n// This function should solve fraction comparation in JS\n</pre>\n                    "},{elementType:"Headline-2",content:"Double precision floating point representation"},{elementType:"Paragraph",content:"\n                    Number cannot be represented as a 32 bit integer if\n                    "},{elementType:"UnsignedList",content:["If is not an integer value, so if it has a fraction part","If it is out of range -(2<sup>31</sup>) to 2<sup>31</sup> (31 because one bit is reserved for \n                        a sign),"]},{elementType:"Paragraph",content:"\n                    In case a number cannot be internally represented in 32 bits, it will be stored as a <strong>\n                    double precision floating point</strong> number. It will take 2 x 32 bits (double precision) = 64 bits.\n                    In most situations a developer will not notice the difference, as this is still the same <code>Number</code>\n                    type. The difference will be noticeable when someone tries to do bitwise operations on these numbers.\n                    But how are these numbers stored in the memory?\n                    "},{elementType:"SmallHeadline",content:"Scientific notation"},{elementType:"Paragraph",content:"A number in decimal format may be represented as a:"},{elementType:"Code",content:"\n<pre>\nmantissa * 10<sup>exponent</sup>\n</pre>                    \n                    "},{elementType:"UnsignedList",content:["The <code>mantissa</code> is a significant integer. Significant means that it has no zeros on\n                        either left of right side. Only zeros in the middle are allowed. Other zeros may be cut off, and\n                        represented in the exponent part,","The <code>exponent</code> is an integer exponent. If negative, it will move the point to the left\n                        creating a fraction part of the number, and if positive it will add zeros to the end"]},{elementType:"Paragraph",content:'\n                    <table class="table">\n                        <thead>\n                        <tr><th>Decimal notation</th><th>Scientific decimal notation</th></tr>\n                        </thead>\n                        <tbody>\n                            <tr><td>0.234</td><td>234 * 10<sup>-3</sup></td></tr>\n                            <tr><td>234000</td><td>234 * 10<sup>3</sup></td></tr>\n                            <tr><td>234.567</td><td>234567 * 10<sup>3</sup></td></tr>\n                        </tbody>\n                    </table>\n                    '},{elementType:"SmallHeadline",content:"Normalized notation"},{elementType:"Paragraph",content:"A number in decimal format may be represented as a:"},{elementType:"Code",content:"\n<pre>\nmantissa * 10<sup>exponent</sup>\n</pre>                    \n                    "},{elementType:"UnsignedList",content:["The <code>mantissa</code> is a number with a fraction part, in this notation there is only a \n                        <strong>single digit</strong> on the left side of the point. The rest of the number is the \n                        fraction part,","The <code>exponent</code> is an integer exponent. If negative, it will move the point to the left\n                        creating a fraction part of the number, and if positive it will add zeros to the end"]},{elementType:"Paragraph",content:'\n                    <table class="table">\n                        <thead>\n                        <tr><th>Decimal notation</th><th>Normalized decimal notation</th></tr>\n                        </thead>\n                        <tbody>\n                            <tr><td>0.234</td><td>2.34 * 10<sup>-1</sup></td></tr>\n                            <tr><td>234000</td><td>2.34 * 10<sup>5</sup></td></tr>\n                            <tr><td>234.567</td><td>2.34567 * 10<sup>2</sup></td></tr>\n                        </tbody>\n                    </table>\n                    '},{elementType:"Paragraph",content:"Of course, this notation is more generic, as it may be applied not only to the \n                    decimal format:"},{elementType:"Code",content:"\n<pre>\nmantissa * base<sup>exponent</sup>\n</pre>                    \n                    "},{elementType:"UnsignedList",content:["The <code>mantissa</code> is a number with a fraction part, in this notation there is only a \n                        <strong>single digit</strong> on the left side of the point. The rest of the number is the \n                        fraction part.,","\n                        <code>base</code> is a base of the calculation system. In binary it will be 2, in the hexadecimal\n                        it will be 16 (f)\n                        ","<code>exponent</code> is an integer exponent. If negative it will move the point to the left\n                        , and if positive it will move the point to the right, and finally it will add zeros to the \n                        right of the created number,"]},{elementType:"Paragraph",content:"In case of binary numbers this will look like the below example"},{elementType:"Code",content:"\n<pre>\n(-1)<sup>sign</sup> * 1.fraction * 2<sup>exponent</sup>\n</pre>                    \n                    "},{elementType:"UnsignedList",content:["<code>fraction</code> in binary number's mantissa will always start with 1, so there is only\n                        a fraction element that will change,\n                        ","<code>sign</code> is a 0 or 1 value indicating if the result will be positive or negative,\n                        ","The <code>exponent</code>  is an integer exponent. If negative, it will move the point to the left\n                        , and if positive it will move the point to the right, and finally it will add zeros to the \n                        right of the created number,"]},{elementType:"Paragraph",content:'\n                    <table class="table">\n                        <thead>\n                        <tr><th>Decimal notation</th><th>Binary</th><th>Normalized binary notation</th></tr>\n                        </thead>\n                        <tbody>\n                            <tr><td>0</td><td>0</td><td>(-1)<sup>0</sup>*1.0 * 2<sup>0</sup></td></tr>\n                            <tr><td>1</td><td>1</td><td>(-1)<sup>0</sup>*1.0 * 2<sup>1</sup></td></tr>\n                            <tr><td>5</td><td>101</td><td>(-1)<sup>0</sup>*1.01 * 2<sup>2</sup></td></tr>\n                            <tr><td>100.75</td><td>1100100.11</td><td>(-1)*<sup>0</sup> 1.10010011 * 2<sup>6</sup></td></tr>\n                            <tr><td>-5.25</td><td>-101.01</td><td>(-1)<sup>1</sup>*1.0101 * 2<sup>2</sup></td></tr>\n                        </tbody>\n                    </table>\n                    '},{elementType:"SmallHeadline",content:"Back to JS and double precision floating point representation"},{elementType:"Paragraph",content:"The number is represented with 64 bits, but only 52 of them are used for the <code>\n                    fraction</code>part:"},{elementType:"UnsignedList",content:["<code>1 bit</code> is for the sign encoding. 0 is a positive number, 1 is for the negative number,","<code>52 bits</code> are for the fraction part of the mantissa</code>,",'<code>11 bits</code> are for the exponent encoding. Exponent has one of its 11 bits reserved for the\n                        sigh notation (1 == -, 0 == +) and the rest is for encoding the exponent it self. Exponent is \n                        stored in the similar way to the <a href="#internalIntegerRepresentation">internal integer representation\n                        </a>, and negative exponent representation is similar to the <a href="#negativeRepresentation">\n                        negative number representation',"Exponent has special values: 1024 is used for an error such as NaN or Infinity, and -1023 is used for a zero\n                        (0)."]},{elementType:"Code",content:'\n<pre>\n(-1)<sup>sign</sup> x <span style="color:green">%1.</span>fraction x 2<sup>exponent</sup>\n</pre>                    \n                    '},{elementType:"UnsignedList",content:["<code>sign</code> is a single bit indicating if the number is a positive or a negative value,","<code>%</code> is just a prefix indicating that the number will be in binary</code>","<code>1.</code> is an untouchable value. All binary values in normalized notation will start with 1.","The <code>exponent</code> is indicating how many places a point will have to be moved to\n                        the left (if the exponent is negative) or to the right (if it is a positive value)"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"speakingjs.com",href:"http://speakingjs.com/es5/ch11.html",description:"Great detailed article explaining how numbers are represented in JS"},{elementType:"Link",content:"indepth.dev.com",href:"https://indepth.dev/posts/1139/here-is-what-you-need-to-know-about-javascripts-number-type",description:"Representation of numbers in JS explained"},{elementType:"Link",content:"electronics-tutorials.ws",href:"https://www.electronics-tutorials.ws/binary/binary-fractions.html",description:"Fraction representation in IT"}]}]};var bn={summary:"destructing assignment2",title:"Destructing assignment",searchKeywords:"\n\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Destructive assignments"},{elementType:"Paragraph",content:"\n                    The destruction assignment makes it possible to unpack values from arrays and properties \n                    of objects into distinct variables. The important fact is, that both, destructive object and\n                    destructive array assignments, create copies of properties only if we do not take out the nested \n                    property\n                    "},{elementType:"Paragraph",content:"\n                    Click a table row for an example,\n                    "},{elementType:"ConditionalArray",headItems:["Target","Use case","Description"],content:[(Gt={},Object(_.a)(Gt,Symbol("title"),"Unpacking variables from an array"),Object(_.a)(Gt,Symbol("code"),"                            \n<pre>\nlet [a, b] = [0, 1];\nconsole.log(a); // 0;\nconsole.log(b); // 1\n</pre>                                                        \n                            "),Object(_.a)(Gt,"Target","Array"),Object(_.a)(Gt,"Name","Unpacking variables from an array,"),Object(_.a)(Gt,"Use case","Basic syntax"),Object(_.a)(Gt,"Description","<code>let [a, b] = [0, 1];</code>"),Gt),(Jt={},Object(_.a)(Jt,Symbol("title"),"Unpacking variables from an array"),Object(_.a)(Jt,Symbol("code"),"                            \n<pre>\nlet c, d, rest; // previous declaration;\n[c, d, ...rest] = [1, 2, 3, 4, 5, 6];\nconsole.log(c); // 1;\nconsole.log(d); // 2;\nconsole.log(rest); // [3, 4, 5, 6];</pre>    \n\n\nlet [e, f, g] = [1, 2, 3, 4, 5, 6];\n//e is 1, f is 2, g is 3. Values 4, 5, 6 are not assigned\n                            "),Object(_.a)(Jt,"Target","Array"),Object(_.a)(Jt,"Name","Unpacking variables from an array,"),Object(_.a)(Jt,"Use case","Rest"),Object(_.a)(Jt,"Description","<code>let [a, b, ...rest] = [0, 1, 2, 3];</code>"),Jt),(Xt={},Object(_.a)(Xt,Symbol("title"),"Unpacking variables from an array"),Object(_.a)(Xt,Symbol("code"),"                            \n<pre>\nlet [h, , i] = [1, 2, 3, 4];\nconsole.log(h); //1;\nconsole.log(i);// 3; \n// 2 is omitted, as there is an empty space between h, ,i\n// 4 is omitted\n\n</pre>\n                            "),Object(_.a)(Xt,"Target","Array"),Object(_.a)(Xt,"Name","Unpacking variables from an array,"),Object(_.a)(Xt,"Use case","Omitting array values"),Object(_.a)(Xt,"Description","<code>let [a, , , c] = [0, 1, 2, 3];</code>"),Xt),(Yt={},Object(_.a)(Yt,Symbol("title"),"Unpacking variables from an array"),Object(_.a)(Yt,Symbol("code"),"                            \n<pre>\nlet arr = [1, 2]\nlet [j, k, l, m] = arr;\nconsole.log(j); // 1;\nconsole.log(k); // 2;\nconsole.log(l); // undefined;\nconsole.log(m); // undefined;\n\n</pre>\n                            "),Object(_.a)(Yt,"Target","Array"),Object(_.a)(Yt,"Name","Unpacking variables from an arrays,"),Object(_.a)(Yt,"Use case","Too many variables in the left side operator,"),Object(_.a)(Yt,"Description","<code>let let [a, b, c, d] = [0, 1];\n                            </code>"),Yt),(Qt={},Object(_.a)(Qt,Symbol("title"),"Unpacking variables from an array"),Object(_.a)(Qt,Symbol("code"),"                            \n<pre>\nlet [n=5, m=7] = [1];\n// n is 1\n// m is 7, as it was not in assigned array, \n// but had a default value\n</pre>\n                            "),Object(_.a)(Qt,"Target","Array"),Object(_.a)(Qt,"Name","Unpacking an array variables,"),Object(_.a)(Qt,"Use case","Default values"),Object(_.a)(Qt,"Description","<code>let [a = 0, b = 0] = [0, 1]</code>"),Qt),($t={},Object(_.a)($t,Symbol("title"),"Unpacking variables from an array"),Object(_.a)($t,Symbol("code"),"                            \n<pre>\nlet o = 1; let p = 2;\n[p, o] = [o, p];\nconsole.log(o); // 2;\nconsole.log(p); // 1;\n</pre>\n                            "),Object(_.a)($t,"Target","Array"),Object(_.a)($t,"Name","Unpacking an array variables,"),Object(_.a)($t,"Use case","Swapping variables"),Object(_.a)($t,"Description","<code>[p, o] = [o, p];</code>"),$t),(Zt={},Object(_.a)(Zt,Symbol("title"),"Unpacking variables from an object"),Object(_.a)(Zt,Symbol("code"),"                            \n<pre>\nconst obj = {a: 1, b: 2, c: {e:3, f:4}};\nconst {a, b, c} = obj;\n// a === 1; b === 2; c === {e: 3, f: 4};\n</pre>\n                            "),Object(_.a)(Zt,"Target","Object"),Object(_.a)(Zt,"Name","Unpacking variables from an object,"),Object(_.a)(Zt,"Use case","Basic case"),Object(_.a)(Zt,"Description","<code>const {a, b} = {a:0, b:1};</code>"),Zt),(en={},Object(_.a)(en,Symbol("title"),"Unpacking variables from an object"),Object(_.a)(en,Symbol("code"),"                            \nInstead of writing <code>let c = 4</code> there is a possiblity to write <code>(c = 4)</code> and <code>c</code> \nvariable will be defined\n<pre>\nlet o = {a: 1, b: 2, c: 3};\n({a, b, c} = o);\nconsole.log(a); // 1;\nconsole.log(b); // 2;\nconsole.log(c); // 3;\n</pre>\n                            "),Object(_.a)(en,"Target","Object"),Object(_.a)(en,"Name","Unpacking variables from an object,"),Object(_.a)(en,"Use case","Basic case with () instead of <code>let</code> or <code>const</code>)"),Object(_.a)(en,"Description","<code>({a, b, c} = obj);</code>"),en),(tn={},Object(_.a)(tn,Symbol("title"),"Unpacking variables from an object"),Object(_.a)(tn,Symbol("code"),"                            \n<pre>\nconst obj = {a: 1, b: 2, c: {d: 3, e: 4}};\nconst {a: newA, b: newB, c:newC} = obj;\nconsole.log(newA); // 1;\nconsole.log(newB); // 2;\nconsole.log(newC); // {d:3, e:4};\n</pre>\n                            "),Object(_.a)(tn,"Target","Object"),Object(_.a)(tn,"Name","Unpacking variables from an object,"),Object(_.a)(tn,"Use case","Object with aliases"),Object(_.a)(tn,"Description","<code>({a: aliasA, b: aliasB, c: aliasC} = obj);</code>"),tn),(nn={},Object(_.a)(nn,Symbol("title"),"Unpacking variables from an object"),Object(_.a)(nn,Symbol("code"),"                            \n<pre>\nlet obj = {\n    a: 0, b: 1, c: 3\n}\nlet key = 'c';\nlet {[key]: alias, a, b} = obj;\nconsole.log(alias); // 3;\nconsole.log(a); // 0;\n</pre>\n                            "),Object(_.a)(nn,"Target","Object"),Object(_.a)(nn,"Name","Unpacking variables from an object,"),Object(_.a)(nn,"Use case","Computed values"),Object(_.a)(nn,"Description","<code>({[key]: aliasA} = obj);</code>"),nn),(on={},Object(_.a)(on,Symbol("title"),"Unpacking variables from an object"),Object(_.a)(on,Symbol("code"),"                            \n<pre>\n// Default values\nconst obj = {a: 1, b: 2};\nconst {a = 0, b = 0, c = 0, d} = obj;\nconsole.log(a); // 1;\nconsole.log(b); // 2;\nconsole.log(c); // 0; this is the default value\n// used if we want to avoid the undefined value\nconsole.log(d); // undefined; no default value\n// was provided;\n</pre>\n                            "),Object(_.a)(on,"Target","Object"),Object(_.a)(on,"Name","Unpacking variables from an object,"),Object(_.a)(on,"Use case","Object with default values"),Object(_.a)(on,"Description","<code>({a = 0, b = 1} = obj);</code>"),on),(an={},Object(_.a)(an,Symbol("title"),"Unpacking variables from an object"),Object(_.a)(an,Symbol("code"),"                            \n<pre>\n// Default values\nconst obj = {a: 1, b: 2};\nconst {a: newA = 0, b: newB = 0, c: newC = 0} = obj;\nconsole.log(a); // error, a not defined;\nconsole.log(b); // error, b not defined;\nconsole.log(newA); // 1;\nconsole.log(newC); // 0\n</pre>\n                            "),Object(_.a)(an,"Target","Object"),Object(_.a)(an,"Name","Unpacking variables from an object,"),Object(_.a)(an,"Use case","Object with aliases and default values"),Object(_.a)(an,"Description","<code>({a: aliasA = 0, b: aliasB = 1} = obj);</code>"),an),(rn={},Object(_.a)(rn,Symbol("title"),"Unpacking variables from an object"),Object(_.a)(rn,Symbol("code"),"                            \n<pre>\nconst obj = {a: 1, b: 2, c: 3, d: 4, e: 5};\nlet  {a: aliasA, b, ...rest} = obj;\nconsole.log(aliasA); // 1\nconsole.log(rest); // {c: 3, d: 4, e: 5}\nrest.c += 30;\nconsole.log(rest.c) // 33;\nconsole.log(obj.c); // 3; this is just a copy;\n</pre>\n                            "),Object(_.a)(rn,"Target","Object"),Object(_.a)(rn,"Name","Unpacking variables from an object,"),Object(_.a)(rn,"Use case","Object with rest"),Object(_.a)(rn,"Description","<code>({a: aliasA = 0, ...rest} = obj);</code>"),rn),(sn={},Object(_.a)(sn,Symbol("title"),"Unpacking variables from an object"),Object(_.a)(sn,Symbol("code"),"                            \n<pre>\n// Getting into nested objects\nconst obj = {a: 1, b: 2, c: {d: 3, e: 4}};\nconst {a, b, c: {d, e}} = obj;\nconsole.log(a); // 1\nconsole.log(b); // 2\n//console.log(c); !!! ERROR c, it is not defined at all !!!\nconsole.log(d); // 3;\nconsole.log(e); // 4\n\n\n\n</pre>\n                            "),Object(_.a)(sn,"Target","Object"),Object(_.a)(sn,"Name","Unpacking variables from an object,"),Object(_.a)(sn,"Use case","Getting into nested objects"),Object(_.a)(sn,"Description","<code>({a: aliasA = 0, b: aliasB = 1} = obj);</code>"),sn),(cn={},Object(_.a)(cn,Symbol("title"),"Unpacking variables from an object"),Object(_.a)(cn,Symbol("code"),"                            \n<pre>\nlet person = {\n    id: 0,\n    credentials:{\n        login: 'j_doe',\n        password: 'start_123'\n    }\n}\n\nasync function checkIfCredentialsValid({id, credentials: {login, password}}){\n    return await askServerIfLoginSuccess(id, login, password)\n}\n\nconsole.log(checkIfCredentialsValid(person))\n</pre>\n                            "),Object(_.a)(cn,"Target","Object"),Object(_.a)(cn,"Name","Unpacking variables from an object,"),Object(_.a)(cn,"Use case","Passing object parameters to a function"),Object(_.a)(cn,"Description","<code>f({a, nested:{b, c}}</code>"),cn),(ln={},Object(_.a)(ln,Symbol("title"),"Unpacking variables from an object"),Object(_.a)(ln,Symbol("code"),"                            \n<pre>\nlet drawing = {\n    shape: 'circle',\n    stroke: {\n        sColor: '#aaa',\n        sStyle: 'solid'\n    },\n    fill: {\n        fColor: '#aaa',\n        fStyle: 'solid'\n    }\n}\n\nfunction draw(\n    {\n        shape = 'rectangle', \n        stroke: {sColor = 'red', sStyle = 'solid'}, \n        fill: {fColor:'green', fStyle:'solid}\n    }){\n        if (mode === 'svg) drawSvgShape(shape, sColor, sStyle, fColor, fStyle)\n        ...\n    }\n</pre>\n                            "),Object(_.a)(ln,"Target","Object"),Object(_.a)(ln,"Name","Unpacking variables from an object,"),Object(_.a)(ln,"Use case","Passing object parameters with default values to a function"),Object(_.a)(ln,"Description","<code>f({a=1, nested={b=0, c=0}}</code>"),ln),(dn={},Object(_.a)(dn,Symbol("title"),"Unpacking variables from an object and array"),Object(_.a)(dn,Symbol("code"),"                            \n<pre>\nconst schoolClass = {\n    id: '2b',\n    superviser:'John Doe',\n    members:[\n        {firstName: 'Alfred', familyName: 'Smith'},\n        {firstName: 'Margaret', familyName: 'Willson'},\n        {firstName: 'Edgar', familyName: 'Brown'},\n        {firstName: 'Anna', familyName: 'Windsor'},\n    ]\n\n}\n\nlet {\n    id: classId,\n    members: [\n        {firstName: fName1, familyName: famName1},\n        {firstName: fName2, familyName: famName2},\n        {firstName: fName3, familyName: famName3},\n        {firstName: fName4, familyName: famName4},\n    ]\n} = schoolClass;\nconsole.log(classId); // '2b';\n// console.log(supervisor); // error, not defined\nconsole.log(fName1); // 'Alfred'\nconsole.log(fName3); // 'Edgar'\n\n</pre>\n                            "),Object(_.a)(dn,"Target","Object and Array"),Object(_.a)(dn,"Name","Unpacking an array and object variables,"),Object(_.a)(dn,"Use case","Nested object and array destructuring"),Object(_.a)(dn,"Description","Click this row to see"),dn),(pn={},Object(_.a)(pn,Symbol("title"),"Unpacking variables from an object and array"),Object(_.a)(pn,Symbol("code"),"                            \n<pre>\nconst schoolClass = {\n    id: '2b',\n    superviser:'John Doe',\n    members:[\n        {firstName: 'Alfred', familyName: 'Smith'},\n        {firstName: 'Margaret', familyName: 'Willson'},\n        {firstName: 'Edgar', familyName: 'Brown'},\n        {firstName: 'Anna', familyName: 'Windsor'},\n    ]\n\n}\n\nfor (const {firstName: fName, familyName: famName} of schoolClass.members){\n    console.log('Frist name: ' + fName);\n    console.log('Family name: ' + famName);\n}\n// prints properly\n\n</pre>\n                            "),Object(_.a)(pn,"Target","Object and Array"),Object(_.a)(pn,"Name","Unpacking an array and object variables,"),Object(_.a)(pn,"Use case","For loop decomposition"),Object(_.a)(pn,"Description","Click this row to see"),pn),(mn={},Object(_.a)(mn,Symbol("title"),"Unpacking variables from an object and array"),Object(_.a)(mn,Symbol("code"),"                            \n<pre>\nfunction getSymbolByKey(obj, key){\n    let symbols = Object.getOwnPropertySymbols(obj);\n    function finder(item){\n        if (item.toString() === 'Symbol('+key+')') return true;\n        return false;\n    }\n    return symbols.find(finder);\n}\n\nlet obj = {\n    a: 0, b: 2, [Symbol('ex')]: 3\n}\n\nlet exSymbol = getSymbolByKey(obj, 'ex');\n// this is the tricky part, as simple\n// obj[Symbol.for('ex')] will not work, \n// Symbol.for('ex') returns a typeof symbol, but\n// when searched in obj, there is an undefined,\n// so working with symbols is not that easy, they have to be \n// remembered somewhere, as if there were more symbols with \n// 'ex' key under obj, there would be no possibility to tell them\n// apart without keeping a registry\n\nconst {a, b, [exSymbol]: ex} = obj;\nconsole.log(a); //0\nconsole.log(b); //2\nconsole.log(ex);//3\n\n</pre>\n                            "),Object(_.a)(mn,"Target","Object"),Object(_.a)(mn,"Name","Unpacking variables from an object,"),Object(_.a)(mn,"Use case","Symbol decomposition"),Object(_.a)(mn,"Description","Click this row to see"),mn),(un={},Object(_.a)(un,Symbol("title"),"Unpacking variables from an object and array"),Object(_.a)(un,Symbol("code"),"                            \nProperties and methods are searched for in the object's prototype chain \nas illustrated below:                            \n<pre>\n\nfunction ObjConstructor(a, b, c){\n    this.a = a;\n    this.b = b;\n    this.c = c;\n}\nObjConstructor.prototype.z = 'inherited';\nfunction NextObjConstructor(a, b, c, d, e){\n    ObjConstructor.call(this,a,b,c);\n    this.d = d;\n    this.e = e;\n}\nNextObjConstructor.prototype = Object.create(ObjConstructor.prototype);\nNextObjConstructor.prototype.constructor = NextObjConstructor\n\nlet nextInstance = new NextObjConstructor(1, 2, 3, 4, 5);\nconsole.log(nextInstance); // {a:1, b:2, c:3, d:4, e:5};\nconsole.log(nextInstance.z); // 'inherited'\n\nlet {a, z, ...rest} = nextInstance;\nconsole.log(z); // 'inherited'\n\n\n</pre>\n                            "),Object(_.a)(un,"Target","Object"),Object(_.a)(un,"Name","Unpacking variables from an object,"),Object(_.a)(un,"Use case","Searching the prototype"),Object(_.a)(un,"Description","Click this row to see"),un)]},{elementType:"NoteWarning",content:"When using object destructing, if a property \n                is not the own property of the object, the prototype \n                chain is searched for the desired property,"},{elementType:"SmallHeadline",content:"Mutations"},{elementType:"Paragraph",content:"In JS if we copy an object or an array, primitive values are copied, but nested objects\n                are passed as a reference to the place in memory, where the nested object is situated, that is why\n                in destruction assignment nested objects and arrays are passed by the reference. Modification of \n                such a property will cause a change in the original object."},{elementType:"Paragraph",content:"An array"},{elementType:"Code",content:"\n<pre>\nlet arr = [1, 2, 3, 4, 5, [6, 7]];\nlet [a, b, c, d, e, f] = arr;\nconsole.log(a); // 1;\na += 10;\nconsole.log(a); // 11;\nconsole.log(arr[0]); // still 1, \n//was not mutated, as a is a copy of arr[0];\n\nconsole.log(f); // [6, 7];\nf[0] += 10;\nconsole.log(f); // [16, 7];\nconsole.log(arr[arr.length - 1]); // [16, 7];\n// Changed, as last element of arr is a nested array, and\n// nested objects are not copied in JS, they are passed by \n// a reference instead.\n</pre> \n                "},{elementType:"Paragraph",content:"An object"},{elementType:"Code",content:"\n<pre>\nlet obj = {a: 1, b: 2, c:{d:3, e:4}};\nlet a, b, c, d, e;\n({a, b, c} = obj);\n({d, e} = obj.c);\nconsole.log(a); // 1;\na += 10; // a === 11;\nconsole.log(obj.a); // 1;\n// A copy, as this is a primitive, not a nested object;\nconsole.log(d); // 3;\nd += 10; // d === 13;\nconsole.log(obj.c); // {d: 3, e: 4};\n// Here still no change to the original nested object,\n// as d was assigned as a primitive, obj.c.d is a primitive,\n// not a nested object,\n\nc.d += 20; // c.d === 23;\nconsole.log(obj.c); // 23;\n// c is a reference pointing to the original\n// nested object being the property of obj,\n// that is why the change on c.d is visible in obj.\n\nconsole.log(d); // 13;\n// This is still 13, as mentioned before, \n// this is a copy, so no changes were made.\n\n</pre> \n                "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",description:"Tutorial"}]}]};var fn,yn,gn,vn,wn,jn,On,Tn,xn,Sn={summary:"Iterators and generators",title:"Iterators and generators",searchKeywords:"Iterator generator yield Symbol.iterator @@iterator next'\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Iterators and generators"},{elementType:"Paragraph",content:"\n                    \n                    "},{elementType:"Headline-3",content:"Iterators"},{elementType:"Paragraph",content:"\n                    An iterator is an object, that:\n                    "},{elementType:"UnsignedList",content:["has a <code>next</code> property, that's value is a function","<code>next(singleArg)</code> takes no arguments, or a single argument, \n                        and returns an object with properties <code>done</code>\n                        and <code>value</code>","<code>value</code> property is the value of the current iteration","<code>done</code> is false if there are still elements that may be returned, and done if there\n                        are no more elements left","<code>singleArg</code>, a single optional argument of the next function is an argument that \n                        does nothing, unless it is implemented. It is just available inside the next function."]},{elementType:"Code",content:"\n<pre>\nlet iterator = {\n    current: 0,\n    next: function(startFrom){\n        if(startFrom) this.current = startFrom;\n        this.current += 1;\n        let isDone = this.current>15?true:false\n        if(isDone) {\n            return {done: isDone}\n        }\n        return {\n            value: this.current,\n            done: isDone\n        }\n    },\n}\n\n\nlet it = iterator;\nconsole.log(it.next(2)); // {value: 3, done: false}\nconsole.log(it.next()); // {value: 4, done: false}\nconsole.log(it.next(20)); // {done: true} value would be undefined;\n\nconsole.log([...it]); // Error, it is not iterable\n</pre>\n                    "},{elementType:"Headline-3",content:"Iterable"},{elementType:"Paragraph",content:"\n                    An object is iterable when it has a function under its property <code>[Symbol.iterator]</code>, \n                    that returns an <i>iterator interface</i>, in other words this function must return an object having \n                    a <code>next</code>\n                    property, that is a function that returns an object with properties <code>value</code> and <code>done</code>\n                    <code>value</code> is the next value of the collection, <code>done</code> is the boolean indicating if the \n                    collection is finished or not.\n                    "},{elementType:"Paragraph",content:"\n                    <code>[Symbol.iterator]</code> is often described as <code>@@Iterator</code>, a well known symbol.\n                    "},{elementType:"Paragraph",content:"\n                    Lets make an iterable from previous example:\n                    "},{elementType:"Code",content:"\n<pre>\nlet iterable = {\n    current: 0,\n    next: function(startFrom){\n        if(startFrom) this.current = startFrom;\n        this.current += 1;\n        let isDone = this.current>5?true:false\n        if(isDone) {\n            return {done: isDone}\n        }\n        return {\n            value: this.current,\n            done: isDone\n        }\n    },\n    [Symbol.iterator]: function(){\n        return this\n    }\n}\nlet it = iterable;\nfor(let i of it){\n    console.log(i)\n} // will list 1 to 5\nconsole.log(it.next(2)); // {value: 3, done: false}\n// this works only thanks to the startValue definition\nconsole.log(it.next(20)); // {done:true}\nconsole.log([...it]); // [], as iterator was already used in\n// The second console.log(([...it]) would not be empty if the function\nunder [Symbol.iterator] was wrapped in additional function) like below:\n\nlet iterableWrapped = {\n    current: 0,\n    iterator: function() {\n        let current = 0;\n        return {\n            next: function(startFrom){\n            if(startFrom) current = startFrom;\n            current += 1;\n            let isDone = current>5?true:false\n            if(isDone) {\n                return {done: isDone}\n            }\n            return {\n                value: current,\n                done: isDone\n            }\n        }\n    }\n    },\n    [Symbol.iterator]: function(){\n        return this.iterator()\n    }\n}\n\n</pre>                    \n                    "},{elementType:"Paragraph",content:"\n                    The difference is that now <code>for..of</code> syntax and the destructive operator may be used.\n                    "},{elementType:"NoteWarning",content:"\n                    Once used iterator is not automatically rewound ???\n                    "},{elementType:"SmallHeadline",content:"\n                    Example with primary numbers\n                    "},{elementType:"Code",content:"\n<pre>\nlet primaryIterator = function(){\n    let lastReturnedPrimaryNumber = 0;\n    let iterationLimit = 100;\n    let getFirstDivisor = function(nr){\n        for (let i = 2; i <= nr; i+=1){\n            if (nr % i === 0) return i;\n        }\n        return nr;\n    }\n    let isPrimary = function(nr){\n        let firstDivisor = getFirstDivisor(nr);\n        return firstDivisor === nr;\n    }\n    let getNextPrimary = function(startFrom){\n        let current = startFrom;\n        let isPrimeryFound = false;\n        while (!isPrimeryFound) {\n            current += 1;\n            isPrimeryFound = isPrimary(current);\n            if (isPrimeryFound) return current;\n        }\n    }\n    let currentIndex = -1;\n    return {\n        next: function(startFrom){\n            if (startFrom) {\n                currentIndex = 0; lastReturnedPrimaryNumber = startFrom;\n            }\n            currentIndex += 1;\n            lastReturnedPrimaryNumber = getNextPrimary(lastReturnedPrimaryNumber);\n            return currentIndex < iterationLimit ? {\n                done: false,\n                value: lastReturnedPrimaryNumber\n            } : {\n                done: true\n            }\n        }\n    }\n}\n\n// **** usage of primary interator\n\nlet primaryI =  primaryIterator();\nconsole.dir(primaryI);\nfor (let i = 0; i < 20; i++){\n    console.log(primaryI.next().value); //prints values from 1 to 67\n}\nconsole.log(primaryI.next(1000));\nfor (let i = 0; i < 20; i++){\n    console.log(primaryI.next().value); // from 1013 to 1129\n    //thanks to startFrom parameter\n}\n\n\n// **** iterable out of primary iterator\n\nlet primaryIterable = {\n    [Symbol.iterator] : primaryIterator\n}\n\nconsole.log([...primaryIterable]);\nconsole.log([...primaryIterable]); // works fine as object is iterable, not only an iterator\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// ? With previous example this does not work\nconsole.log(primaryIterable[Symbol.iterator]().next(300));\n// This prints the next primary number after 300;\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"Iterator with classes"},{elementType:"Paragraph",content:"\n                    An iterable may be created with the class syntax. <code>[Symbol.iterator]</code> property is\n                    inherited, so a class extending an iterable class is also iterable\n                    "},{elementType:"Code",content:"\n<pre>\nclass IterableClass{\n    constructor(){\n        this.current = 0;\n        this.limit = 10;\n    }\n\n    [Symbol.iterator]() {\n        return {\n            next: () => {\n            // an arrow used, so this is binded\n                this.current += 1;\n                return {\n                    done: this.current > this.limit ? true : false,\n                    value: this.current\n                }\n            }\n        }\n    }\n}\n\nlet iterInstance = new IterableClass();\nconsole.log([...iterInstance]);\n\nclass ExtendsIterableClass extends IterableClass{\n    constructor(){\n        super();\n    }\n}\n\nlet extendedIterInstance = new ExtendsIterableClass();\nconsole.log([...extendedIterInstance]);\n// [Symbol.iterator] property is inherited\n</pre>                    \n                    "},{elementType:"Headline-3",content:"Generators"},{elementType:"UnsignedList",content:["A generator is a function is marked with a <code>*</code>. For example: <code>function* f()</code>","A generator is a function, but its prototype.name is Generator, so inherits a function prototype.","A generator is not the constructor, so cannot be used by the <code>new</code> operator","A generators body is not executed instantly. When it encounters a <code>yield</code> operator,\n                    it returns the right hand value and pauses,","In case a return statement is encountered, the generator is finalized, the right hand value of the \n                    return is returned and the generator will not produce any new values,","A generator returns an iterable and iterator at the same time, so the next method may be called \n                    and the <code>for..of</code> statement may be used,","<code>function* generator([par[, par...]])</code>, parameters may be passed to a generator \n                    in purpose to parameterize returned iterator/iterable"]},{elementType:"Code",content:"\n<pre>\nfunction* generator(){\n    yield 1; yield 2; yield 3; yield 4;\n}\n\nconsole.dir(generator)\n\nlet gen = generator();\nconsole.dir(gen);\nconsole.log([...gen]); // [1,2,3]\nconsole.log([...gen]); // [] as generator was finished in the previous line\nconsole.log(gen.next().value); // undefined, as generator is finished\n\nlet gen2 = generator();\nconsole.log(gen2.next().value);\nconsole.log(gen2.return(20)); // will return {value: 20, done: true};\nconsole.log(gen2.next().value); // undefined, as return finishes a generator\n\nlet gen3 = generator();\nconsole.log(gen3.next().value);\nconsole.log(gen3.return(2)); // will return {value: 2, done: true};\nconsole.log(gen3.next().value); // undefined, as return finishes a generator\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"\n                    Example with classes\n                    "},{elementType:"Code",content:"\n<pre>\nclass GeneratorEx{\n    constructor(){\n        this.current = 0;\n    }\n\n    *generator(){\n        this.current += 1;\n        for (let i = 0; i < 10; i++){\n            yield this.current;\n        }\n        this.current = 0; // after execution rewind\n    }\n}\n</pre>                    \n                    "},{elementType:"Paragraph",content:"\n                    Or with the computed value\n                    "},{elementType:"Code",content:"\n<pre>\nclass GeneratorEx{\n    constructor(){\n        this.current = 0;\n    }\n\n    *[Symbol.iterator](){\n        this.current += 1;\n        for (let i = 0; i < 10; i++){\n            yield this.current;\n        }\n        this.current = 0; // after execution rewind\n    }\n}\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"\n                    Example with primary numbers\n                    "},{elementType:"Code",content:"\n<pre>\nfunction* primaryGenerator(){\n    let lastReturnedPrimaryNumber = 0;\n    let indexLimit = 100;\n    let getFirstDivisor = function(nr){\n        for (let i = 2; i <= nr; i+=1){\n            if (nr % i === 0) return i;\n        }\n        return nr;\n    }\n    let isPrimary = function(nr){\n        let firstDivisor = getFirstDivisor(nr);\n        return firstDivisor === nr;\n    }\n    let getNextPrimary = function(startFrom){\n        let current = startFrom;\n        let isPrimeryFound = false;\n        while (!isPrimeryFound) {\n            current += 1;\n            isPrimeryFound = isPrimary(current);\n            if (isPrimeryFound) return current;\n        }\n    }\n    for (let index = 0; index < indexLimit; index++){\n        lastReturnedPrimaryNumber = getNextPrimary(lastReturnedPrimaryNumber);\n        yield lastReturnedPrimaryNumber;\n    }\n}\n\nlet primaryGen = primaryGenerator();\nconsole.log([...primaryGen]);\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"\n                    Example with class and primary numbers\n                    "},{elementType:"Code",content:"\n<pre>\nclass PrimaryGeneratorClass {\n    constructor(){\n        this.lastReturnedPrimaryNumber = 0;\n        this.indexLimit = 100;\n    }\n    getFirstDivisor(nr){\n        for (let i = 2; i <= nr; i+=1){\n            if (nr % i === 0) return i;\n        }\n        return nr;\n    }\n    isPrimary(nr){\n        let firstDivisor = this.getFirstDivisor(nr);\n        return firstDivisor === nr;\n    }\n    getNextPrimary(startFrom){\n        let current = startFrom;\n        let isPrimeryFound = false;\n        while (!isPrimeryFound) {\n            current += 1;\n            isPrimeryFound = this.isPrimary(current);\n            if (isPrimeryFound) return current;\n        }\n    }\n    *[Symbol.iterator](startFrom){\n            let lastPrim = startFrom ?? this.lastReturnedPrimaryNumber;\n            this.lastReturnedPrimaryNumber = lastPrim;\n            for (let index = 0; index < this.indexLimit; index++){\n                this.lastReturnedPrimaryNumber = this.getNextPrimary(this.lastReturnedPrimaryNumber);\n                yield this.lastReturnedPrimaryNumber;\n            }\n            this.lastReturnedPrimaryNumber = 0;\n    }\n\n    nextTo(num){\n        return this[Symbol.iterator](num).next().value;\n    }\n    nextVal(){\n        return this[Symbol.iterator]().value;\n    }\n}\n\nlet primGenClass = new PrimaryGeneratorClass();\nconsole.log([...primGenClass]); // primary numbers from 1 to 523\nconsole.log([...primGenClass]); // primary numbers from 1 to 523\nconsole.log(primGenClass.nextTo(300)); // 307\nconsole.log([...primGenClass]); // primary numbers from 311 to 967\n// because lastReturnedNumber was set to 307 with primGenClass.nextTo(300)\n\n</pre>                    \n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol",description:"Tutorial"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*",description:"A generator function"}]}]};var kn={summary:"async",title:"Async",searchKeywords:"async asynchronous functions promise race resolve reject handler then finally catch await then\n    all\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Asynchronous functions"},{elementType:"Paragraph",content:"\n                 Not every value is known, due to communication with the server. Some data will be delivered after a time\n                 is passed, and some will not be delivered at all. When a button is clicked and data has to be \n                 downloaded from the server, the whole page and the browser should not be blocked by the fact that \n                 the application is waiting for the data, especially, that it is not guaranteed that data will be \n                 delivered at all. That is why asynchronous\n                 functions are useful. Such a function runs in the same thread the rest of the code does (as JS\n                is mainly a single thread language, one exception is for the web workers) and returns a promise \n                immediately, but the promise is in pending state. After it is known that the promise will be resolved\n                or rejected, the promise state is changed to settled: resolved or rejected.\n                    "},{elementType:"SmallHeadline",content:"The promise"},{elementType:"Paragraph",content:"\n                    The promise is an object, that may be returned instantly, when some assignment with an asynchronous\n                    value takes place. However, this object holds no value at the time it is returned. Instead, it is in\n                    <strong>pending</strong> state. Finally, it will <strong>settle</strong> \n                    changing its state to <strong>fulfilled</strong>\n                    or <strong>rejected</strong>. Meanwhile the whole application code is not blocked, so the user may scroll, interact\n                    with the page until the promise is finalized. A promise may depend on other asynchronous functions,\n                    so it may not be <strong>settled</code> until other promises are finalized. In this case there is a promise\n                    chain.\n                    "},{elementType:"Paragraph",content:"\n                    When an asynchronus function is run, and its promises are in the pending state, \n                    the non asynchronus functions are not blocked and will execute.\n                    "},{elementType:"Headline-3",content:"A async function"},{elementType:"UnsignedList",content:["Asynchronous functions cannot be constructors","Asynchronous functions always return a promise. Even if someone attempts to return a concrete value,\n                        or there is no return statement, always a promise is returned","The <code>await</code> keyword may be used to pause the function until some promise is resolved,\n                        and the concrete value is returned, or the promise is rejected,","The <code>await</code> keyword may be used only in the asynchronous function,","Asynchronous functions may be run in parallel, sequence,","In case in an <code>async</code> function nothing is returned, the function will return a\n                        pending promise, that will resolve with undefined. In case there is a value returned in the \n                        <code>async function</code>, the function will return a promise resolving to that value. In case\n                        there is a promise returned by a <code>async function</code>, this promise will be returned by\n                        the function."]},{elementType:"SmallHeadline",content:"Time measurement"},{elementType:"Paragraph",content:"\n                       Let's define a simple class for time measurements\n                    "},{elementType:"Code",content:"\n<pre>\nclass Timer{\n    constructor(){\n        this.currentTime = 0;\n        this.timer = null;\n    }\n    startTimer(){\n        this.timer = setInterval(()=>{\n            this.currentTime += 10;\n        },10)\n    }\n    stopTimer(){\n        clearInterval(this.timer);\n    }\n    resetTimer(){\n        this.currentTime = 0;\n    }\n    getCurrentTime(){\n        return this.currentTime;\n    }\n}\n</pre>\n                    "},{elementType:"SmallHeadline",content:"Async functions examples"},{elementType:"Paragraph",content:"\n                       Lets create a factory of functions returning a promise that resolves after the given time:\n                    "},{elementType:"Code",content:"\n<pre>\nlet resolveFunctionFactory = function(timeout){\n    return function(msgStart, msgEnd, msgResolve){\n        console.log(msgStart);\n        return new Promise(resolve => {\n            setTimeout(function() {\n                resolve(msgResolve);\n                console.log(msgEnd)\n            }, timeout)\n        })\n    }\n}\n</pre>                       \n                    "},{elementType:"Paragraph",content:"\n                       Now lets create two functions returning promises, that resolve after 100ms and after 150ms:\n                    "},{elementType:"Code",content:"\n<pre>\nlet resolve100Creator = resolveFunctionFactory(100);\nlet resolve150Creator = resolveFunctionFactory(150);\n</pre>                       \n                    "},{elementType:"Paragraph",content:"\n                       Async function always returns a promise: \n                    "},{elementType:"Code",content:"\n<pre>\nasync function iAlwaysReturnAPromise(){\n    return 1;\n}\nconsole.log(iAlwaysReturnAPromise()); // [Object promise]\n\nasync function iReturnPromiseEvenIfIReturnUndefined(){\n    console.log('Functions without return statement return undefined, but I return a promise, because I am async');\n}\nconsole.log(iReturnPromiseEvenIfIReturnUndefined()); // [Object promise]\n</pre>                       \n                    "},{elementType:"Paragraph",content:"\n                       <strong>Starting async function in a sequence: second after the first is finished;</strong>\n                    "},{elementType:"Code",content:"\n<pre>\nlet timer = new Timer();\n\nasync function sequentialStartRace(){\n    timer.startTimer();\n    let f1 = await resolve100(' [started] ', ' [ended] ', ' [resolved] ')\n    console.log(timer.getCurrentTime());\n    let f2 = await resolve150(' [started] ', ' [ended] ', ' [resolved] ')\n    console.log(timer.getCurrentTime());\n    timer.stopTimer();\n    return f2;\n    return 'someValue'; // in this case the promise, that after awaiting f2 \n    // would resolve to f2;\n}\n(async function wrapSequentialStart(){\n    let outcome = await sequentialStartRace();\n    console.log(outcome); // the resolved outcome of f2\n})();\n\n</pre>                       \n                    "},{elementType:"UnsignedList",content:["In above example <code>f1</code> will be launched immediately,","After 100ms from the start time will be logged: 100ms,","After the first function is finished (100ms from the function start), the second function is \n                       run","After next 150ms (so after 250ms from the function end) the second function stope execution,","The time is logged after 250 from the function start,"]},{elementType:"Paragraph",content:"\n                       <strong>Starting functions in concurrent mode:</strong>\n                    "},{elementType:"Code",content:"\n<pre>\nasync function concurrentStartRace(){\n    let timer = newTimer();\n    timer.startTimer();\n    let f1 = resolve100(' [started] ', ' [ended] ', ' [resolved] ')\n    console.log(timer.getCurrentTime()); // (1)\n    let f2 = resolve150(' [started] ', ' [ended] ', ' [resolved] ');\n    console.log(timer.getCurrentTime()); // (2)\n}\n\nconcurrentStartRace();\n</pre>               \n\n                    "},{elementType:"UnsignedList",content:["As there is no await, both functions will start in the same time period,","Time logged. Both (1) and (2) console.logs will write 2,3","The execution of the first function finishes 100ms after it was called,","The execution of the second function finishes 150ms after it was called,","Both functions finish execution after 150ms from the start"]},{elementType:"Paragraph",content:"\n                       <strong>Running functions in the <code>Promise.all</code></strong>\n                    "},{elementType:"Code",content:"\n<pre>\nasync function promiseAllRace(){\n    timer3.startTimer();\n\n    await Promise.all([\n        (async()=>{\n            let resolved = await resolve100(' start ', ' end' ,' resolved ')\n            console.log(timer.getCurrentTime(); // (1)\n        })(),\n        (async()=>{\n            let resolved = await resolve150(' start ', ' end' ,' resolved ')\n            console.log(timer.getCurrentTime()); // (2)\n        })()\n    ])\n    console.log(timer3.getCurrentTime()); // (3)\n    timer.stopTimer();\n}\n\n\npromiseAllRace();\n</pre>               \n\n                    "},{elementType:"UnsignedList",content:["Both functions will be started at the same time,","(1) will be logged after 100ms from the functions start,","(2) will be logged after 150ms from the functions start,","(3) will be logged after both functions execute, so after 150ms\n                        from the function start"]},{elementType:"Paragraph",content:"\n                       <strong>Running functions in the <code>Promise.race</code></strong>\n                    "},{elementType:"Code",content:"\n<pre>\nasync function promiseRaceRace(){\n    timer3.startTimer();\n\n    await Promise.race([\n        (async()=>{\n            let resolved = await resolve100(' start ', ' end' ,' resolved ')\n            console.log(timer.getCurrentTime(); // (1)\n        })(),\n        (async()=>{\n            let resolved = await resolve150(' start ', ' end' ,' resolved ')\n            console.log(timer.getCurrentTime()); // (2)\n        })()\n    ])\n    console.log(timer3.getCurrentTime()); // (3)\n    timer.stopTimer();\n}\npromiseRaceRace();\n</pre>               \n\n                    "},{elementType:"UnsignedList",content:["Both functions will be started at the same time,","(1) will be logged after 100ms from the functions start,","(2) will be logged after 150ms from the functions start, promise race will already be \n                       resolved by this time, so this will have no effect, but despite this, all promises given\n                       to the promise.race function are evaluated,","(3) will be logged after the first of promises finishes execution, so after 100ms\n                        from the function start"]},{elementType:"Headline-3",content:"Promise"},{elementType:"Code",content:"\n<pre>\nconst p = new Promise((resolve, reject)=>{\n    setTimeout(()=>{resolve('I am resolved')}, 20 * Math.random());\n    setTimeout(()=>{reject('I am rejected')}, 20 * Math.random());\n})\n\nPromise(executor); // in general\n\nexecutor is a function taking the resolve(someValue), and reject(reason) functions\n</pre>                    \n                    "},{elementType:"UnsignedList",content:["The <code>Promise</code> constructor takes a single function as an argument,","The <code>executor</code> (function taken as an argument of the promise constructor)\n                        takes 2 callback functions as an argument, the first is the <code>resolve</code> function, \n                        and the second is <code>rejcet function</code>","The return value of the executor is ignored","<code>resolve(msg);</code> is a function, that will be called when the promise is resolved,\n                        this function may be named in any way","<code>reject(reason);</code>: a callback that will be called in case promise is not resolved and\n                        is rejected, this function does not have to be named in this way","If the executor throws an error, then the function that awaits this promise will not be interrupted, and\n                        will not execute till the end. That is why it is important to handle errors."]},{elementType:"SmallHeadline",content:"Promise API"},{elementType:"SmallHeadline",content:"Promise states"},{elementType:"Paragraph",content:"The newly created promise is in <i>pending</i> state. Its result is <code>undefined</code>.\n                    It is said to be not settled, not fulfilled. Once the promise is resolved, its state is switched to <i>fulfilled</i>\n                    and result changes to <code>resolved</code>. If the promise is rejected, its state changes to <i>fulfilled</i>, and\n                    result to <code>rejected</code>. The promise in fulfilled state is said to be settled. A fulfilled promise can be\n                    either resolved or rejected. Once settled (fulfilled) promise cannot change its state or result."},{elementType:"Image",name:"promiseStates.png",alt:"Promise states"},{elementType:"SmallHeadline",content:"Promise chains"},{elementType:"Paragraph",content:"The promises may be chained thanks to the <code>then</code>, <code>catch</code> and <code>finally</code>\n                    methods. Each of those methods returns a promise, so even <code>finally</code> does not have to be at the \n                    end of the promise chain. The important thing is, that if the last chain link rejects, or throws an error, \n                    there will be an uncaught error. Please examine promise methods for more details."},{elementType:"ConditionalArray",headItems:["Method","Arguments","Returns","Description"],content:[(fn={},Object(_.a)(fn,Symbol("title"),"then"),Object(_.a)(fn,Symbol("code"),"\n                         <ul>\n                            <li>It is important to remember, that a function that has no return, returns undefined, so in case\n                            callbacks do not return a promise, that would take time to resolve, it is immediately resolved with the \n                            <code>undefined</code> value, causing the next <code>then</code> in the chain to be launched imediatley</li>\n                         </ul>\n                         <b>Execution order: in case of resolving, first callback is executed,\nin case of rejection of the preceding function, the second callback will be executed,</b>\n\n            <pre>\n(async function executionOrder(){\n    let pOK = () => { return new Promise((resolve)=>{resolve('Resolved')}) };\n    let pNOK = () => { return new Promise((reject)=>{reject('Rejected')}) };\n\n    let resolved = pOK().then(pOK, pNOK); // resolved, as pOK is the first arg\n    let rejected = pOK().then(pNOK, pOK); // rejected, as pNOK is the first arg\n})()\n</pre>\n<b>when with values instead of functions</b>\n<pre>\n(async function valuesInsteadOfFunctions(){\n    let pOK = () => { return new Promise((resolve)=>{resolve('Resolved')}) };\n    let pNOK = () => { return new Promise((reject)=>{reject('Rejected')}) };\n\n    let resolved = pOK().then('val1', 'val2'); // \n    //will return a promise resolving to 'Resolved', as pOK returns such a promise\n    // 'val1' is not a function so will be replaced with and identity function\n    console.log(resolved)\n    let rejected = pNOK().then('val1', 'val2'); // \n    console.log(rejected)\n    //will return a promise that result will fulfill to 'Rejected', as pNOK \n    // fulfills to this value\n})()\n</pre>\n<b>Can resolve after rejection</b>\n<pre>\n(async function canResolveAfterRejection(){\n\n    let pOK = () => { \n        console.log('%cresolved', 'color:green')\n        return new Promise((resolve)=>{resolve('Resolved')}) \n    };\n    let pNOK = () => { \n        console.log('%crejected', 'color:red')\n        return new Promise((reject)=>{reject('Rejected')}) \n    };\n\n    canResolve = pOK().then(pOK,pNOK).then(pNOK,pOK).then(pOK, pNOK)\n    newLogRow(SECTION_7);\n    console.log(canResolve);\n})();\n// resolved | resolved | rejected | resolved | and the outcome is 'Resolved'\n// YES, then may be resolved event if previous outcomes were rejected.\n            </pre>                    \n                            "),Object(_.a)(fn,"Method","<code><span>Promise.prototype</span><span>.then(onResolved[, onRejected])</span></code>"),Object(_.a)(fn,"Arguments","\n                                <ul>\n                                    <li><code>onResolved(value)</code>: callback function to be run if the promise succeeded</li>\n                                    <li><code>onRejected(reason)</code>: callback function to be run if the promise failed</li>\n                                    <li>If <code>onResolved</code> function is replaced with a value,\n                                    then this value is replaced with an <i>identity</i> function, returning\n                                    the value that the promise that <code>then</code> was attached to resolved to</li>\n                                    <li>If an <code>onRejected</code> function is replaced with a value,\n                                    then this value is replaced with a <i>thrower</i> function, throwing an error it\n                                    received as an argument</li>\n                                    \n                                </ul>\n                            "),Object(_.a)(fn,"Returns","\n                            Returns a <b>promise</b> resolving to the value that the <code>onResolved</code>, \n                            or to the <code>onReject</code> callback returns\n                             In particular, if \n                            the function does not return a thing, the promise resolving to undefined is returned.\n                            "),Object(_.a)(fn,"Description","\n                             The function runs a <code>onResolved</code> or <code>onRejected</code> callback, depending on the \n                             outcome of the preceding promise. The returned value is the outcome of the executed callback.\n                            "),fn),(yn={},Object(_.a)(yn,Symbol("title"),"catch"),Object(_.a)(yn,Symbol("code"),"\n                            promise1 | catch          | final result\n                            resolved | not executed D | resolved\n                            error    | resolved       | resolved\n                            error    | rejected       | Error\n<ul>\n    <li>May be described as <code>promise1.then(undefined, onRejection)</code></li>\n   <li><code>catch</code> may be in the middle of the promise chain</li>\n   <li>If <code>catch</code> callback rejects (or throws an error) all chained <code>then</code>\n   functions will run their rejection scenario, until one of them <b>resolves</b></li>\n   <li><code>catch</code> should end the promise chain, because if the last promise rejects, there will be an\n   uncaught error</li>\n   <li>Last <code>catch</code> should end with resolve to avoid an error. Last catch should handle all possible \n   errors</li>\n   <li>If an error is thrown by one of promise callback functions, this promise will be rejected</li>\n</ul>                                                        \n                        \n<b>Catch with preceding promise resolved</b>\n            <pre>\n(async function evaluate(){\n    let pOK = function(val){ \n        return function() {console.log('Resolved'+val);return Promise.resolve(val)}\n    }\n    let pNOK = function(val){ \n        return function(){console.log('Rejected'+val);return Promise.reject(val)}\n    }\n    let outcome = pOK(0)().then(pOK(1),pNOK(1)).then(pOK(2),pNOK(2)).catch(pOK(3))\n    console.log(await outcome)\n})();\n// Resolved0 \n// Resolved1 \n// Resolved2 \n// Resolved4\n// This will execute no matter the predecessor outcome\n// 4\n// Catch not executed, as everything before passed\n            </pre>          \n            \n            \n            <b>Catch with preceding promise rejected</b>\n            <pre>\n(async function evaluate(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n        let outcome = pOK(0)()\n            .then(pNOK(1),pNOK(1))\n            .catch(pOK(2))\n            .then(pOK(3),pNOK(3))\n            .then(pOK(4),pNOK(4))\n            .finally(()=>{console.log('This will execute no matter the precedor outcome')})\n            console.log(await outcome)\n    })();   \n//Resolved0\n//Rejected1\n//Resolved2\n//Resolved3\n//Resolved4\n// This will execute no matter the predecessor outcome\n//4\n            </pre>    \n            \n            \n            <b>Catch with preceding promise rejected and catch rejected, no final catch</b>\n            There will an uncaught error occur, as it is needed to set <code>catch</code>\n            always at the end of the chain.\n            <pre>\n(async function evaluate(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n        let outcome = pOK(0)()\n            .then(pNOK(1),pNOK(1))\n            .catch(pNOK(2))\n            .then(pOK(3),pNOK(3))\n            .then(pOK(4),pNOK(4))\n            // no catch here, error will appear\n            .finally(()=>{console.log('This will execute no matter the precedor outcome')})\n            console.log(await outcome)\n})();\n//Resolved0\n//Rejected1\n//Rejected2\n//Rejected3\n//Rejected4\n// This will execute no matter the predecessor outcome\n// Uncaught (in promise) 4\n            </pre>     \n\n            <b>A Rejecting catch with preceding promise throwing error</b>\n            <pre>\n(async function evaluate(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n    let err = function(val){return function(){throw new Error(val); return Promise.resolve(val)}}\n        let outcome = pOK(0)()\n            .then(pOK(1),pNOK(1))\n            .then(err(3),pNOK(3))\n            .catch(pNOK(2))\n            .then(pOK(3),pNOK(3))\n            .then(pOK(4),pNOK(4))\n            // .catch(()=>{console.log('Catching')})\n            .finally(()=>{console.log('This will execute no matter the precedor outcome')})\n            console.log(await outcome)\n})();\n//Resolved0\n//Rejected1\n//Rejected2\n//Rejected3\n//Rejected4\n// This will execute no matter the predecessor outcome\n// Uncaught (in promise) 4\n\n\n\n            </pre>    \n                            "),Object(_.a)(yn,"Method","<code><span>Promise.prototype</span><span>.catch(onRejected)</span></code>"),Object(_.a)(yn,"Arguments","\n                            <code>onRejected(reason)</code> is a callback returning a promise. If this promise \n                            fulfilles to the resolved value, then whole catch is concidered resolved, if the \n                            callback throws an error, or the result promise fulfills to rejected, the whole \n                            catch is concidered rejected. If the argument of the <code>catch</code> is a value, not a\n                            function, then catch passes preceding promise result to the next function in the\n                            chain, if available.\n                            "),Object(_.a)(yn,"Returns","\n                            Returns a <b>promise</b> fulfilling to the value that the <code>onReject</code> callback \n                            returns. In particular if \n                            the funcion does not return a thing, the promise resolving to undefined is returned.\n                            "),Object(_.a)(yn,"Description","\n                             The function runs a <code>onRejected</code> callback, if the preceding promise fulfilled to\n                             the rejected value, and returnes a promise fulfilling with the value returned by the \n                             callback.\n                            If the preceding promise was resolved then <code>catch</code> has no \n                             effect, and the stearing is passed to the next functions in the chain\n                            "),yn),(gn={},Object(_.a)(gn,Symbol("title"),"finally"),Object(_.a)(gn,Symbol("code"),"\n            <pre>\n<b>finally in theory does not to be the last in the chain</b>\n<pre>\n(async function evaluate(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n    let err = function(val){return function(){throw new Error(val); return Promise.resolve(val)}}\n        let outcome = pOK(0)()\n            .then(pOK(1),pNOK(1))\n            .then(pOK(3),pNOK(3))\n            .catch(pNOK(2))\n            .then(pOK(3),pNOK(3))\n            .finally(pNOK('fin'))\n            .then(pOK(4),pNOK(4))\n            console.log(await outcome)\n    })();\n</pre>            \n<b>Will execute no matter the outcome of preceding promise result</b>\n<pre>\n(async function evaluate(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n    let err = function(val){return function(){throw new Error(val); return Promise.resolve(val)}}\n    \n        let outcome0 = pOK(0)()\n            .then(pOK(0),pNOK(0))\n            .finally(pOK('fin0'))\n            // Resolved1\n            // Resolvedfin1\n    \n        let outcome1 = pOK(0)()\n            .then(pOK(1),pNOK(1))\n            .finally(pNOK('fin1'))\n            // Resolved1\n            // Uncaught error -> finally failed\n    \n        let outcome2 = pOK(0)()\n            .then(pNOK(2),pNOK(2))\n            .finally(pOK('fin2'))\n            // Rejected2\n            // Resolvedfin2\n            // Uncaught error -> no catch, rejection before finally,\n            // but finally is not for catching errors\n    \n        let outcome3 = pOK(0)()\n            .then(err(3),pNOK(3))\n            .finally(pOK('fin3'))\n            // Rejected3\n            // Resolvedfin3\n            // Uncaught error -> no catch, rejection (error thrown) before finally,\n            // but finally is not for catching errors\n    \n        console.log(await outcome1); // fin1\n        console.log(await outcome2); // fin2\n        console.log(await outcome3); // fin3\n            \n    })();\n</pre>\n                            "),Object(_.a)(gn,"Method","<code><span>Promise.prototype</span><span>.finally(onFinally)</span></code>"),Object(_.a)(gn,"Arguments","\n                            <code>onFinally()</code> will be run no matter the predecessor rejects or resolves. The \n                            only condition for this callback to be executed is the predecessor promise finalization.\n                            "),Object(_.a)(gn,"Returns","\n                            Returns a <b>promise</b> fulfilling to the value that the <code>onFinally</code> callback \n                            returns. In particular, if \n                            the function does not return a thing, the promise resolving to undefined is returned.\n                            "),Object(_.a)(gn,"Description","\n                             The function runs a <code>onFinally</code> callback as soon as the preceding promise fulfills\n                             (settles). This method returns a promise, so does not have to be at the end of the promise chain.\n                             <b>This function is not for handling errors!</b>. In case there is an uncaught rejected promise,\n                             <code>finally</code> will not prevent an error.\n                            "),gn),(vn={},Object(_.a)(vn,Symbol("title"),"allSettled"),Object(_.a)(vn,Symbol("code"),"\n    <b>An error thrown by one of promise callbacks</b> rejection\n            <pre>\n(async function allSettled(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n    let err = function(val){return function(){throw new Error(val); return Promise.resolve(val)}}\n        let iterable = function*(){\n            yield pOK(1)(); yield pNOK(2)(); yield err(3)(); yield pOK(4)();\n        }\n        console.log(Promise.allSettled(iterable()));\n    })(); // This returns a rejected promise, as there is an error thrown\n</pre>\n\n<b>Resolved</b>\n<pre>\n(async function allSettled(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n        let iterable = [pOK(1)(), pNOK(2)(), pOK(3)()]\n    console.log(Promise.allSettled(iterable);\n})(); \n// [[PromiseResult]]: Array(3): \n// [{status: 'fulfilled', value:1}, {status:'rejection', reason: 2}, {status: 'fulfilled', value: 3}]\n\n            </pre>\n                            "),Object(_.a)(vn,"Method","<code>Promise.allSettled(iterable))</code>"),Object(_.a)(vn,"Arguments","\n                            An iterable is an object having its [Symbol.iterable] well known symbol set to an iterator.\n                            For example an array, or Map object.\n                            "),Object(_.a)(vn,"Returns","\n                            The promise with its value settled to the array of results of promises included in the iterable\n                            given as an argument.\n                            "),Object(_.a)(vn,"Description","\n                             The method returns a promise, that resolves with an array of promise results of promises\n                             given in the iterable function argument.\n                            "),vn),(wn={},Object(_.a)(wn,Symbol("title"),"all"),Object(_.a)(wn,Symbol("code"),"\n<b>An error thrown by one of promise callbacks</b> rejection\n    <pre>\n(async function allReject(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let err = function(val){return function(){throw new Error(val); return Promise.resolve(val)}}\n        let iterable = function*(){\n            yield pOK(1)(); yield err(2)(); yield pOK(3)();\n        }\n        console.log(Promise.all(iterable()));\n})(); // Rejected due to the err; result: error..\n</pre>\n\n<b>Rejection</b> due to promise rejection\n<pre>\n(async function allReject(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n        let iterable = function*(){\n            yield pOK(1)(); yield pNOK(2)(); yield pOK(3)();\n        }\n        console.log(Promise.all(iterable()));\n})(); // Rejected due to the pNOK, promise result 2\n</pre>\n\n<b>Resolved</b>\n<pre>\n(async function allResolve(){\n    let pOK = function(val){ return function() {console.log('Resolved'+val);return Promise.resolve(val)}}\n    let pNOK = function(val){ return function(){console.log('Rejected'+val);return Promise.reject(val)}}\n        let iterable = function*(){\n            yield pOK(1)(); yield pOK(2)(); yield pOK(3)();\n        }\n        console.log(Promise.all(iterable()));\n    })(); //  Resolved; [1,2,3]\n</pre>\n<b>All passed values are not promisses</b>\n<pre>\n(async function allResolve(){\n    console.log(Promise.all([1,2,3]));\n})(); //  Resolved; [1,2,3]\n</pre>\n                    "),Object(_.a)(wn,"Method","<code>Promise.all(iterable))</code>"),Object(_.a)(wn,"Arguments","\n                    An iterable is an object having its [Symbol.iterable] well known symbol set to an iterator.\n                    For example an array, or Map object.\n                    "),Object(_.a)(wn,"Returns","\n                    A promise that:\n                    <ul>\n                    <li>In case all promises given in the input iterable resolve: returns the promise with its value \n                    settled \n                    to the array of results of promises included in the iterable given as an argument.</li>\n                    <li>In case <b>at least one promise from the input iterable rejects</b> the returned promise will \n                    reject <b>not waiting for other promisses to resolve</b></li>\n                    <li>In case of error in one of promises passed as an argument, the returned promise will\n                    reject with the error description as the value</li>\n                    <li>A resolved promise if the iterable passed as an argument is empty</li>\n                    <li>An asynchronously resolved Promise if the iterable passed as an argument has no promises</li>\n                    </ul>\n                    "),Object(_.a)(wn,"Description","\n                     Takes an iterable of promises, and returns a promise, that will resolve to an array of \n                     results if each promise from the iterable resolves, or reject in case at least one \n                     promise from the iterable rejects.\n                    "),wn),(jn={},Object(_.a)(jn,Symbol("title"),"any"),Object(_.a)(jn,Symbol("code"),"\n\n<b>rejectFunctionFactory, resolveFunctionFactory, errorFactory, asyncErrorFacotry</b>\n<pre>\nfunction rejectFunctionFactory(timeout){\n    return function(reason){\n        let rejectedPromise = new Promise((resolve, reject)=>{\n            setTimeout(()=>{\n                reject(reason)\n            }, timeout)\n        })\n        return rejectedPromise;\n    }\n}\nfunction resolveFunctionFactory2(timeout){\n    return function(value){\n        let resolvedPromise = new Promise((resolve, reject)=>{\n            setTimeout(()=>{\n                resolve(value);\n            },timeout)\n        })\n        return resolvedPromise;\n    }\n}\nfunction errorFactory(){\n    return function(errorAsString){\n        throw new Error(errorAsString);\n    }\n}\nfunction asyncErrorFactory(timeout){\n    return function(reason){\n        return new Promise((resolve, reject)=>{\n            setTimeout(() => {\n                throw new Error(timeout);\n            }, timeout);\n        })\n    }\n}\n</pre>\n\n<b>An empty iterable given</b> rejection synchronously\n<pre>\n(async function emptyArrayAny(){\n    let result = await Promise.any([]).catch((reason)=>{\n        return Promise.resolve(reason);\n    });\n    console.log(result);\n    // AggregateError, all promises were rejected\n})();\n</pre>\n\n<b>An iterable containing some no promise values</b>\n<pre>\n(async function someNoPromisesAny(){\n    let failPromise50 = rejectFunctionFactory(50, SECTION_8_4);\n    let failPromise100 = rejectFunctionFactory(100, SECTION_8_4);\n    let resolvePromise150 = resolveFunctionFactory2(150, SECTION_8_4);\n    let resolvePromise170 = resolveFunctionFactory2(170, SECTION_8_4);\n    let failPromise200 = rejectFunctionFactory(200, SECTION_8_4);\n    let promises = function* (){\n        yield failPromise100(100); yield failPromise50(50); \n        yield resolvePromise150(150); yield failPromise200(200);\n        yield resolvePromise170(170); yield 5;\n    }\n    let result = await Promise.any(promises());\n    console.log(result);\n    // resolves: with '5' value after 0ms, as this is not a promise and its value was available immediately\n})();\n</pre>\n\n<b>An iterable containing only promise values</b> resolves as soon as the first promise resolve\n<pre>\n(async function allResolveAny(){\n    let failPromise50 = rejectFunctionFactory(50, SECTION_8_3);\n    let failPromise100 = rejectFunctionFactory(100, SECTION_8_3);\n    let resolvePromise150 = resolveFunctionFactory2(150, SECTION_8_3);\n    let resolvePromise170 = resolveFunctionFactory2(170, SECTION_8_3);\n    let failPromise200 = rejectFunctionFactory(200, SECTION_8_3);\n    let promises = function* (){\n        yield failPromise100(100); yield failPromise50(50); \n        yield resolvePromise150(150); yield failPromise200(200);\n        yield resolvePromise170(170)\n    }\n    let result = await Promise.any(promises());\n    console.log(result);\n    // resolves: with resolvePromise150 value that is 150 after 150ms\n})();\n</pre>\n\n<b>An iterable containing only rejecting promises</b> an aggregated error is returned\n<pre>\n(async function allRejectAny(){\n    let failPromise50 = rejectFunctionFactory(50, SECTION_8_3);\n    let failPromise100 = rejectFunctionFactory(100, SECTION_8_3);\n    let failPromise150 = rejectFunctionFactory(150, SECTION_8_3);\n    let failPromise200 = rejectFunctionFactory(200, SECTION_8_3);\n    let promises = function* (){\n        yield failPromise100(100); yield failPromise50(50); \n        yield failPromise150(150); yield failPromise200(200)\n    }\n    let result = await Promise.any(promises()).catch((reason)=>{\n        return Promise.resolve(reason);\n    });\n    console.log(result);\n})();\n</pre>\n\n<b>An error is thrown instantly</b>, before the promise is returned\n<pre>\n(async function errorWithAny(){  \n    let asyncErr = asyncErrorFactory(120);\n    let syncErr = errorFactory()\n    let failPromise100 = rejectFunctionFactory(100);\n    let resolvePromise150 = resolveFunctionFactory2(150);\n    let resolvePromise170 = resolveFunctionFactory2(170);\n    let failPromise200 = rejectFunctionFactory(200);\n    let promises = function* (){\n        yield failPromise100(100); yield asyncErr('FailingAsyncErr'); \n        yield resolvePromise150(150); yield failPromise200(200);\n        yield resolvePromise170(170); yield syncErr('FailingSyncErr')\n    }\n    let result = await Promise.any(promises());\n    console.log(result);\n    // rejects: the sync error, as it is not a promise, it is a value and is available instatnly\n})();\n</pre>\n\n<b>An error is thrown in the promise callback</b>,\n<pre>\n(async function errorWithAny(){  \n    let asyncErr = asyncErrorFactory(120);\n    let failPromise100 = rejectFunctionFactory(100);\n    let resolvePromise150 = resolveFunctionFactory2(150);\n    let resolvePromise170 = resolveFunctionFactory2(170);\n    let failPromise200 = rejectFunctionFactory(200);\n    let promises = function* (){\n        yield failPromise100(100); yield asyncErr('FailingAsyncErr'); \n        yield resolvePromise150(150); yield failPromise200(200);\n        yield resolvePromise170(170);\n    }\n    let result = await Promise.any(promises());\n    console.log(result);\n    // resolves: resolvePromise150. The error is thrown earlier (after 120ms)\n    // but this is an error, that rejects, not resolves, so it is treated as \n    // the promise rejection.\n})();\n</pre>\n\n                    "),Object(_.a)(jn,"Method","<code>Promise.any(iterable))</code>"),Object(_.a)(jn,"Arguments","\n                    An <code>iterable</code>: an object having its well known symbol <code>@@Iterator</code>\n                    set to the iterator function.\n                    "),Object(_.a)(jn,"Returns","\n                    A promise that:\n                    <ul>\n                        <li>Is rejected synchronously to rejected in case an empty array is the argument</li>\n                        <li>Is pending, but gets resolved to the value of the first resolved promise, if at least one promise from the\n                        iterable is resolved\n                        </li>\n                        <li>Asynchronously resolved promise if the iterable passed as an argument has no promises</li>\n                    </ul>\n                    "),Object(_.a)(jn,"Description","\n                    Returns a pending promise, that resolves to the value of the first promise from the given iterable, \n                    that resolves. In case none promise resolve (all are rejected), the returned promise rejcets to the\n                    aggregated error. In case an empty array is given as an argument, returns already rejected promise.\n                    "),jn),(On={},Object(_.a)(On,Symbol("title"),"race"),Object(_.a)(On,Symbol("code"),"\n\n    <b>rejectFunctionFactory, resolveFunctionFactory, errorFactory, asyncErrorFacotry</b>\n<pre>\nfunction rejectFunctionFactory(timeout){\n    return function(reason){\n        let rejectedPromise = new Promise((resolve, reject)=>{\n            setTimeout(()=>{\n                reject(reason)\n            }, timeout)\n        })\n        return rejectedPromise;\n    }\n}\nfunction resolveFunctionFactory2(timeout){\n    return function(value){\n        let resolvedPromise = new Promise((resolve, reject)=>{\n            setTimeout(()=>{\n                resolve(value);\n            },timeout)\n        })\n        return resolvedPromise;\n    }\n}\nfunction errorFactory(){\n    return function(errorAsString){\n        throw new Error(errorAsString);\n    }\n}\n\n\n    <b>Mixed resolves and rejectes</b>\n<pre>\n(async function promiseRaceMixed(){ \n    let failPromise100 = rejectFunctionFactory(100);\n    let resolvePromise150 = resolveFunctionFactory2(150);\n    let resolvePromise170 = resolveFunctionFactory2(170);\n    let failPromise200 = rejectFunctionFactory(200);\n    let promises = function* (){\n        yield failPromise100(100); yield resolvePromise150(150); \n        yield failPromise200(200); yield resolvePromise170(170);\n    }\n    let result = await Promise.race(promises())\n        .then(\n            (value)=>{return Promise.resolve('resolved '+value)},\n            (reason)=>{return Promise.resolve('rejected'+reason)}\n        );\n    console.log(result);\n    // rejects with value 100 in 100ms\n    // Handing the promise rejection is importante, as if an error is thrown, \n    // there may be no value passed\n})();\n</pre>\n\n<b>Mixed promises with no promise values</b>\n<pre>\n(async function promiseRaceMixed(){ \n    let failPromise100 = rejectFunctionFactory(100);\n    let resolvePromise150 = resolveFunctionFactory2(150);\n    let resolvePromise170 = resolveFunctionFactory2(170);\n    let failPromise200 = rejectFunctionFactory(200);\n    let promises = function* (){\n        yield failPromise100(100); yield resolvePromise150(150); \n        yield failPromise200(200); yield resolvePromise170(170);\n        yield 9;\n    }\n    let result = await Promise.race(promises())\n        .then(\n            (value)=>{return Promise.resolve('resolved '+value)},\n            (reason)=>{return Promise.resolve('rejected'+reason)}\n        );\n    console.log(result);\n    // resolves with the value 9, as this is not a promise and this value\n    // is available instantly\n})();\n</pre>\n\n<b>An error thrown before the promise is returned</b>\n<pre>\n(async function syncErrorWithRace(){\n    let asyncErr = asyncErrorFactory(120);\n    let syncErr = errorFactory()\n    let failPromise100 = rejectFunctionFactory(100);\n    let resolvePromise150 = resolveFunctionFactory2(150);\n    let resolvePromise170 = resolveFunctionFactory2(170);\n    let failPromise200 = rejectFunctionFactory(200);\n    let promises = function* (){\n        yield failPromise100(100); yield syncErr('syncErrFailing'); \n        yield resolvePromise150(150); yield failPromise200(200);\n        yield resolvePromise170(170); yield asyncErr('asyncErrFailing')\n    }\n    let result = await Promise.race(promises()).then(\n        (value)=>{return Promise.resolve('resolved '+value)},\n        (reason)=>{return Promise.resolve('rejected'+reason)}\n    );\n    console.log(result);\n    // rejecting with the syncErrFailing after 0ms\n    // as the error thrown before the promise is returned, \n    // is an instantly available value\n})();\n</pre>\n\n<b>An error that is the result of the promise</b>\n<pre>\n(async function asyncErrorWithRace(){\n    let asyncErr = asyncErrorFactory(20);\n    let failPromise100 = rejectFunctionFactory(100);\n    let resolvePromise150 = resolveFunctionFactory2(150);\n    let resolvePromise170 = resolveFunctionFactory2(170);\n    let failPromise200 = rejectFunctionFactory(200);\n    let promises = function* (){\n        yield failPromise100(100);\n        yield resolvePromise150(150); yield failPromise200(200);\n        yield resolvePromise170(170); yield asyncErr('asyncErrFailing')\n    }\n    let result = await Promise.race(promises()).then(\n        (value)=>{return Promise.resolve('resolved '+value)},\n        (reason)=>{return Promise.resolve('rejected'+reason)}\n    );\n    console.log(result);\n    // rejecting with the asyncErrFailing after 20ms\n    // This is important to handle errors\n})();\n</pre>\n\n<b>An empty array as an argument</b>\n<pre>\n(async function foreverPending(){\n    let pending = await Promise.race([]);\n    console.log('This should not be written')\n})()\n</pre>\n\n\n\n\n    "),Object(_.a)(On,"Method","<code>Promise.race(iterable))</code>"),Object(_.a)(On,"Arguments","\n    An <code>iterable</code>.\n    "),Object(_.a)(On,"Returns","\n    A promise that:\n    <ul>\n        <li>A pending promise that yields to the first promise from the given iterable, that gets \n        settled (resolves or rejects)</li>\n        <li>In case there is a non promise value in the iterable, then the result would yield to \n        the first non promise value in the iterable</li>\n        <li>In case of an empty array, the promise will be pending forever</li>\n    </ul>\n    "),Object(_.a)(On,"Description","\n    Returns a pending promise, that yields to the value of the first promise from the given iterable, \n    that settles (gets either resolved or rejected). In case there is a non promise value in the iterable, \n    then the promise will resolve to the first non promise value encountered in the interable\n    "),On),(Tn={},Object(_.a)(Tn,Symbol("title"),"resolve"),Object(_.a)(Tn,Symbol("code"),"\n    (async function(){\n        let res = Promise.resolve('someVal');\n        console.log(res); // still not settled\n        let awaited = await res;\n        console.log(awaited)\n        // Both awaited and res turn out after 0ms\n    })()\n    "),Object(_.a)(Tn,"Method","<code>Promise.resolve(value))</code>"),Object(_.a)(Tn,"Arguments","\n    A <code>value</code> of any type\n    "),Object(_.a)(Tn,"Returns","\n    A promise that is resolved with the given value\n    "),Object(_.a)(Tn,"Description","\n    Returns a promise resolved with the given value\n    "),Tn),(xn={},Object(_.a)(xn,Symbol("title"),"reject"),Object(_.a)(xn,Symbol("code"),"\n    (async function(){\n        let res = Promise.reject('someReason');\n        console.log(res); // not settled without an await\n        let awaited = await res;\n        console.log(awaited)\n        // Both awaited and res turn out after 0ms,\n    })()\n    "),Object(_.a)(xn,"Method","<code>Promise.reject(reason))</code>"),Object(_.a)(xn,"Arguments","\n    A <code>reason</code> of any type\n    "),Object(_.a)(xn,"Returns","\n    A promise that is rejected with the given reason\n    "),Object(_.a)(xn,"Description","\n    Returns a rejected promise with the given reason\n    "),xn)]},{elementType:"Article",content:[{elementType:"Headline-3",content:"Use cases"},{elementType:"UnsignedList",content:["Server side communication,","JS chained animations","Actions on timer expire","Could be used to control the steaering of a state based game like implementation of \n                            Magic the Gathering or Monopoly. In this case turns would be devided to phases, and\n                            phases to subphases, and subphases can be represented with an iterable of functions,\n                            each of those functions may be asynchronous, and awaited in the loop. In this design pattern\n                            the next function (phase) would not start before the previous ended, promises could await\n                            user interaction with some elements on the page (here mediator pattern could be useful). \n                            This concept needs prove. But if it works, then the solution would be extendable, what\n                            is important in games like MTG. This framework would allow to change the whole implementation\n                            to some other similar game.","Workaround in Angular. There is an error <i>Expression has changed after it was checked</i>.\n                            If the expression is put into <code>setTimeout(()=>{expression})</code>, without the \n                            actual time delay value, then this expression is evaluated asynchronously and the change\n                            check is forced one more time,","Excellent for communication with web-workers (see the article)"]},{elementType:"SmallHeadline",content:"Animation with promise chain example"},{elementType:"Paragraph",content:"This code selects an absolutely positioned element and moves it to specified points \n                        on the screen, waits for some time, and moves it again. This pattern is good for \n                        making sequence animations in case pure CSS or even SCSS cannot be used."},{elementType:"NoteWarning",content:"If only pure CSS or some precompiler can be used instead of JS, they should be \n                        used. JS is the last resource."},{elementType:"Paragraph",content:"CSS and HTML for the example:"},{elementType:"Code",content:'\n<pre>\n&lt;style>\nbody{background-color: #444;color:#ddd;font-family: Arial, Helvetica, sans-serif;}\n#animationTarget{\n    position: absolute;\n    width:50px;height: 50px;border-radius: 50%;background-color:red;\n    top: 100px;left:100px;}\n&lt;/style>\n&lt;div id="animationTarget">&lt;/div>\n</pre>                        \n                        '},{elementType:"Paragraph",content:"Functions for moving the object"},{elementType:"Code",content:"\n<pre>\nfunction move(animationTargetId, destination, timeInMiliseconds){\n    let framesPerSecond = 24;\n    let msInSecond = 1000;\n    let framesInterval = Math.floor(framesPerSecond / msInSecond);\n    let nrOfFrames = timeInMiliseconds * framesPerSecond / msInSecond;\n    let animationTarget = document.getElementById(animationTargetId);\n    let {x:xEnd, y:yEnd} = destination;\n    let {left: xStart, top: yStart} = animationTarget.getBoundingClientRect();\n    let xMovePerFrame = (xEnd - xStart)/nrOfFrames;\n    let yMovePerFrame = (yEnd - yStart)/nrOfFrames;\n    let {currentX, currentY} = {currentX: xStart, currentY: yStart};\n    let currentFrame = 0;\n    console.log('move Started')\n    let moveEnded = new Promise((resolve) => {\n            let interval = setInterval(()=>{\n            currentX += xMovePerFrame;\n            currentY += yMovePerFrame;\n            currentFrame += 1;\n            animationTarget.style.left = currentX + 'px';\n            animationTarget.style.top = currentY + 'px';\n            if (currentFrame >= nrOfFrames) {\n                clearInterval(interval);\n                console.log('move resolved')\n                resolve();\n            }\n        },framesInterval);\n    })\n    return moveEnded;\n}\n\nfunction wait(timeInMiliseconds){\nlet waitingEnded = new Promise((resolve) => {\n    let timeout = setTimeout(()=>{\n        console.log('waiting ended')\n        resolve();\n    }, timeInMiliseconds)\n})\nconsole.log('waiting')\nreturn waitingEnded;\n}\n</pre>                        \n                        "},{elementType:"Paragraph",content:"Now for the implementation with the await operator"},{elementType:"Code",content:"\n<pre>\nasync function animateAwait(){\n    await move('animationTarget', {x: 500, y:500}, 2000)\n    await wait(1000)\n    await move('animationTarget', {x: 500, y: 100}, 1000);\n    await move('animationTarget', {x: 550, y: 1000}, 1000);\n    await wait(1000);\n    await move('animationTarget', {x: 100, y: 100}, 3000);\n\n}\n</pre>                        \n                        "},{elementType:"Paragraph",content:"Implementation with the <code>then</code> method. <strong>Note, that all callbacks\n                        have to return a promise</strong>, or undefined will be returned, and all promises will resolve \n                        instatnly causing animation times to mix."},{elementType:"Code",content:"\n<pre>\nasync function animateThen(){\n    // Here it is important to wrap handlers, so they return functions not taking any arguments:\n    move('animationTarget', {x:1000, y: 1000}, 3000)\n        .then(()=>{return wait(1000)})\n        .then(()=>{return move('animationTarget', {x:500,y:500}, 2000)})\n        .then(()=>{return wait(3000)})\n        .then(()=>{return move('animationTarget', {x:-500,y:-500}, 5000)})\n}\n</pre>                        \n                        "},{elementType:"Paragraph",content:"Lets launch one animation after another"},{elementType:"Code",content:"\n<pre>\n(async function animateAll(){\n    await animateAwait();\n    await animateThen();\n})();\n</pre>                        \n                        "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Async functions, await",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",description:"Async functions"},{elementType:"Link",content:"Promise",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise",description:"Constructor"}]}]}]};var Nn=[{summary:"strict mode",title:"About strict mode",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"About strict mode"},{elementType:"Paragraph",content:"\n                            <b>Lorem ipsum</b> dolor sit amet, consectetur adipiscing elit. \n                            Vestibulum et lacinia arcu, ut tempor lacus. Integer euismod, est et pharetra eleifend, \n                            magna nibh congue nulla, eu ornare lacus sem eu leo. Sed aliquet tincidunt neque non tempor. \n                            Sed feugiat, massa at tempus tincidunt, tortor turpis rhoncus orci, nec cursus purus dui vel ipsum. \n                            Sed pellentesque sem nec dictum auctor. Morbi tempus lectus vitae ultrices volutpat. \n                            Vivamus convallis mauris urna. Phasellus rhoncus felis eget mi tincidunt malesuada. \n                            Pellentesque in velit viverra nunc ultrices maximus. Duis in leo dolor.             \n                        "}]}]},u,{summary:"cloasures",title:"About cloasures",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"About cloasures"},{elementType:"Paragraph",content:"\n                            <b>Lorem ipsum</b> dolor sit amet, consectetur adipiscing elit. \n                            Vestibulum et lacinia arcu, ut tempor lacus. Integer euismod, est et pharetra eleifend, \n                            magna nibh congue nulla, eu ornare lacus sem eu leo. Sed aliquet tincidunt neque non tempor. \n                            Sed feugiat, massa at tempus tincidunt, tortor turpis rhoncus orci, nec cursus purus dui vel ipsum. \n                            Sed pellentesque sem nec dictum auctor. Morbi tempus lectus vitae ultrices volutpat. \n                            Vivamus convallis mauris urna. Phasellus rhoncus felis eget mi tincidunt malesuada. \n                            Pellentesque in velit viverra nunc ultrices maximus. Duis in leo dolor.             \n                        "}]}]},{summary:"modules",title:"About Modules",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"About modules"},{elementType:"Paragraph",content:"\n                            <b>Lorem ipsum</b> dolor sit amet, consectetur adipiscing elit. \n                            Vestibulum et lacinia arcu, ut tempor lacus. Integer euismod, est et pharetra eleifend, \n                            magna nibh congue nulla, eu ornare lacus sem eu leo. Sed aliquet tincidunt neque non tempor. \n                            Sed feugiat, massa at tempus tincidunt, tortor turpis rhoncus orci, nec cursus purus dui vel ipsum. \n                            Sed pellentesque sem nec dictum auctor. Morbi tempus lectus vitae ultrices volutpat. \n                            Vivamus convallis mauris urna. Phasellus rhoncus felis eget mi tincidunt malesuada. \n                            Pellentesque in velit viverra nunc ultrices maximus. Duis in leo dolor.             \n                        "}]}]},{summary:"object descriptors",title:"Object descriptors",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Object descriptors"},{elementType:"Paragraph",content:"\n                            <b>Lorem ipsum</b> dolor sit amet, consectetur adipiscing elit. \n                            Vestibulum et lacinia arcu, ut tempor lacus. Integer euismod, est et pharetra eleifend, \n                            magna nibh congue nulla, eu ornare lacus sem eu leo. Sed aliquet tincidunt neque non tempor. \n                            Sed feugiat, massa at tempus tincidunt, tortor turpis rhoncus orci, nec cursus purus dui vel ipsum. \n                            Sed pellentesque sem nec dictum auctor. Morbi tempus lectus vitae ultrices volutpat. \n                            Vivamus convallis mauris urna. Phasellus rhoncus felis eget mi tincidunt malesuada. \n                            Pellentesque in velit viverra nunc ultrices maximus. Duis in leo dolor.             \n                        "}]}]},m,h,q,W,$e,Ze,tt,nt,at,ot,Kt,Vt,hn,bn,Sn,kn,{summary:"Web worker",title:"Web worker",searchKeywords:"web worker\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Web workers"},{elementType:"NoteWarning",content:"\n                    For security reasons web workers stick to the same origin policy. So for practicing with a web \n                    worker, the server is needed. The simple http one will do, but it is important, that the local\n                    file system is not good enough.\n                    "},{elementType:"NoteWarning",content:"\n                    The web worker is a separate file that has to be imported to the main html file.\n                    "},{elementType:"Paragraph",content:"\n                    JS is mainly a single threaded runtime language. If there is a server request, there is an asynchronous\n                    mechanism launched. Not a new thread started to resolve the request. However, there is one feature letting\n                    it possible to launch an additional script in the next thread. This additional script, that is launched \n                    in a next thread is called a <i>web worker</i>. It has no access to the DOM, and its scope is different, but\n                    it has access to some APIs like:\n                    "},{elementType:"UnsignedList",content:["Crypto","Cache API","Console API","CustomEvent","Encoding API (TextEncoder, TextDecoder)","Fetch API","FileReader","IndexedDB","Promise","Server-sent events","URL API","WebSocket","XMLHttpRequest"]},{elementType:"Paragraph",content:"\n                    Web workers are good for time consuming computations, that would block the main browser thread, or \n                    for serving the web content from the cache, when user is offline, and updating cache if the user is online.\n                    There are three types of web-workers:\n                    "},{elementType:"UnsignedList",content:["Dedicated worker","Shared worker","Service Worker"]},{elementType:"SmallHeadline",content:"Communicatoin"},{elementType:"Paragraph",content:"Communication between the main thread and a worker is implemented with:"},{elementType:"UnsignedList",content:["<code>workerInstance.postMessage(messageContent)</code>: from the main thread","<code>postMessage(messageContent)</code>: from the worker","<code>workerInstance.onmessage = callback()</code>: from the main thread,","<code>onmessage = function(){}</code> from the worker thread"]},{elementType:"SmallHeadline",content:"Types"},{elementType:"UnsignedList",content:["<code>WorkerGlobalSocpe</code>: an abstract scope, is used for inheritance purposes,","<code>DedicatedWorkerGlobalScope</code>: a dedicated type, used only once and utilized, \n                            if usages of this worker overlap, then the last request will shadow previous ones,","<code>ServiceWorkerGlobalSocpe</code>: this worker is dedicated to the native application\n                            user exerience. When a user is online the service worker downloads data, sends them to be displayed\n                            on the screen, and stores them in cache. If user is offline, data is displayed from the cache by\n                            service worker."]},{elementType:"SmallHeadline",content:"Properties"},{elementType:"UnsignedList",content:["<strong><code>WorkerGlobalSocpe.self</code></strong>: This is the <code>this</code> sort of\n                            keyword. <code>self</code> refers to the global scope of the worker,","<code>WorkerGlobalSocpe.navigator</code>: This is the navigator data, related to data about \n                            the installed browser, operating system, etc...","<code>WorkerGlobalSocpe.location</code>: this is for the URL parsing purposes. Knows properties like\n                            <code>host</code>, <code>href</code>: direct link, <code>origin</code>: the same as the host,\n                            <code>pathname</code>: the path to the current resource, <code>port</code>, <code>protocol</code>"]},{elementType:"SmallHeadline",content:"Events"},{elementType:"UnsignedList",content:["<code>onmessage</code>: the event launched in case there is a message passed from/to the\n                            worker,","<code>onerror</code>: the event triggered when there is an error","<code>offline</code>: the event triggered when the device becomes offline,","<code>online</code>: the event triggered when the device becomes online,"]},{elementType:"Headline-3",content:"Dedicated worker"}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"Developer mozilla",href:"https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Proxy",description:"Tutorial"}]}]},{summary:"custom web components",title:"Custom web components",searchKeywords:"\n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Custom web components"},{elementType:"Paragraph",content:"\n                    Encapsulation: closing some functionalities in one class or function. Test this class, and be\n                    sure it works as expected. This is a powerful tool for keeping the code clean. \n                    One of the approaches to encapsulation is building web components. They are pieces of code \n                    having their view representation bound to some logic. This could be compared to html\n                    <code>input</code> button. We cannot access its internal, but it works good, its behavior \n                    may be changed with properties.\n                    "},{elementType:"Paragraph",content:"\n                    Pure JS makes it possible to close a component in a single class. It not only has an HTML\n                    structure and logic bound. It closes its CSS so it will not interfere with the rest pages \n                    CSS. It may use something called a <strong>shadow DOM</code>, a part of the DOM that is closed\n                    for the outsie word. Its internals can not be found with simple DOM searching methods, and\n                    its CSS is separated from the outside world. \n                    "},{elementType:"Paragraph",content:"\n                    The developer just selects a custom HTML tag (having at least 2 words separated with a dash), and\n                    may use this tag in HTML to insert a custom web component.\n                    "},{elementType:"SmallHeadline",content:"A glosary\n                    "},{elementType:"UnsignedList",content:["<code>CWC</code>: a Custom Web Component, technology allowing the definition of such a component,","<code>host</code> or <code>CWC host</code>: an element that is registered with \n                        the <code>window.customElements.define</code> method, and is the host of the shadow-DOM,","<code>shadow-DOM</code> the part of the DOM that is separated from the <q>light</q> DOM\n                        and cannot be easily accessed with the document.getElementById or document.querySelector methods.\n                        CSS inside the shadow root does not impact outside world, and this CSS from the outside world does\n                        not infuence the shadow DOM CSS,"]},{elementType:"Headline-2",content:"Structure"},{elementType:"UnsignedList",content:["Is a class that extends an <code>HTMLElement{}</code> or any build-in element like \n                        <code>HTMLParagraphElement</code>, <code>HTMLDivElement</code>, \n                        <code>HTMLCanvasElement</code>, <code>HTMLBodyElement</code>, <code>HTMLFormElement</code>","The custom web component needs to be registered in the <code>window.customElements</code> register\n                        with the <code>window.customElements.define('element-tag', className[, {extends: 'p'}], where \n                        the extends takes the tag name of the element that is extended, if the web component does \n                        extend a concrete element, not an <code>HTMLElement</code>","Has lifecycle methods, like the <code>constructor</code>, <code>connectedCallback</code>,\n                        <code>attributeChangedCallback(attrName, oldVal, newVal)</code>, <code>disconnectedCallback</code>,\n                        <code>adoptedCallback</code>","Can use a template with styling and HTML structure to describe the view of the component","Can use <code>&lt;slot></code> elements to input some content from the outside world,"]},{elementType:"Headline-3",content:"Lifecycle methods"},{elementType:"SmallHeadline",content:"constructor()"},{elementType:"UnsignedList",content:["An instance is upgraded or created","use <code>super()</code>","Initializing state,","setting up event listeners","Creating a shadow DOM","The <code>return</code> should not be used except for an early return of <code>this</code>","Actual work should be placed in the <code>connedtedCallback</code>","<code>document.open()</code> or <code>document.write()</code> should not be called here"]},{elementType:"SmallHeadline",content:"connectedCallback"},{elementType:"UnsignedList",content:["Invoked every time the component is added to the DOM,","It is called if an element is moved to another parent with an <code>element.appendChild(newParent)</code>\n                        method,","Communication with server or web workers here,","Computations and work here,","Rendering,","attributes and children should not be used here, to match <code>createElement()</code> or\n                        <code>createElementNS()</code>","The best place for accessing attributes to passed in the HTML tag,","All operations referring to the DOM structure of creating web element here, as DOM becomes\n                        available here,"]},{elementType:"SmallHeadline",content:"disconnectedCallback"},{elementType:"UnsignedList",content:["Called each time an element is removed from the DOM,","Notify all other parts of the application that the element is being removed,","Free resources that will not be cleared automatically,","Unsubscribe from the DOM events,","Stop interval timers,","Unsubscribe, unregistered callbacks for global application services,","This hook is not called if a user closes the tab"]},{elementType:"SmallHeadline",content:"attributeChangedCallback(attrName, oldVal, newVal)"},{elementType:"UnsignedList",content:["Will be invoked each time a registered attribute (for example passed in the HTML) changes,","Uses a <code>static get observed attributes</code> method to learn what attributes will be \n                        observed. This method returns an array of attributes: <code>return ['prop1, 'prop2']</code>","BEWARE :). This should not be used together with a proxy or a mutation observer \n                        APIS, as a reaction to the same change will appear multiple times,"]},{elementType:"SmallHeadline",content:"adoptedCallback"},{elementType:"UnsignedList",content:["This callback is triggered when the node is moved to another document object. This may \n                        take place when working with <code>iframe</code> objects,"]},{elementType:"Code",content:"\n<pre>\nconst iframe = document.querySelector('#someFrame');\nconst elementToBeMoved = iframe.contentDocument.querySelector('#elementToBeMoved');\ndocument.querySelector('#newParent').appendChild(document.adoptNode(elementToBeMoved))\n</pre>                    \n                    "},{elementType:"Headline-3",content:"Setting the HTML and CSS content"},{elementType:"Paragraph",content:"\n                    The content should be set in the <code>connectedCallback</code>. The best way is to use a \n                    <code>template</code> element. This element is rendered only once and is not visible when placed in the \n                    main HTML file. It may be a good practice to create a separate HTML file for the template,\n                    and separate from the logic, and place them in one (separate) folder, just like Angular does.\n                    The template may have a <code>style</code> element with the CSS.\n                    It is possible to add the template content in a <code>shadowRoot</code> element.\n                    The shadow root should be attached in the constructor.\n                    "},{elementType:"Paragraph",content:"\n                    Usage of the custom web elements host inner HTML for setting content can be done with <code>&lt;slot></code>\n                    elements. \n                    "},{elementType:"Paragraph",content:"\n                    Using the innerHTML of the custom web component host (like li elements inside ul) is not \n                    encouraged, because the custom web component API was not designed for that, but it is possible.\n                    To do this:\n                    "},{elementType:"UnsignedList",content:["A <code>MutationObserver</code> should be used to watch for the changes in the custom \n                        web component innerHTML,","<code>this.innerHTML</code> inside the custom web components class refers to the \n                        main element of the component (the registered HTML tag)"]},{elementType:"Code",content:"\n<pre>\nclass CustomElement extends HTMLElement {\n    constructor(){\n        const observer = new MutationObserver(this.onInnerHTMLChange.bind(this))\n        observer.observe(this, \n            {\n                subtree: false, // no nested elements are observed\n                childList: true // for inner HTML\n            }\n        )\n    }\n    onInnerHTMLChange() {\n        this.message = this.innerHTML;\n        try {\n            // here this.innerHTML is available\n        } catch (e) {\n            // expected - at this moment modalMessageHolder is null;\n        }\n    }\n}\n</pre>                    \n                    "},{elementType:"SmallHeadline",content:"HTML template example"},{elementType:"Code",content:'\n                    <b>HTML</b>\n<pre>\n&lt;template id="sectionTemplate">\n    &lt;style>\n       h3{font-family:arial;}\n       p{margin:5px;} \n    &lt;/style>\n    &lt;div class="section">\n        &lt;slot name="title">&lt;/slot>\n        &lt;slot name="content">&lt;/slot>\n    &lt;/div>\n&lt;/template>\n</pre>   \n\n<b>JS</b>\n<pre>\nclass SectionElement extends HTMLElement(){\n    constructor(){\n        super();\n        this.shadowRoot = this.attachShadoe({mode:\'open\'});\n    }\n    connectedCallback(){\n        let template = document.querySelector(\'#sectionTemplate\');\n        this.shadowRoot.appendChild(template.cloneNode(true)); // true for clonning with child elements;\n    }\n}\n\ncustomElements.define(\'section-element\', SectionElement)\n</pre>  \n\n\n<b>usage in HTML</b>\n<pre>\n&lt;section-element>\n  &lt;h3 slot="title">Article section title&lt;/h3>\n  &lt;p slot="title">Article section title&lt;/p>\n&lt;/section-element>\n</pre>   \n                    '},{elementType:"Headline-3",content:"Styling"},{elementType:"UnsignedList",content:["<code>:host</code> for selecting the CWC host,","<code>:host:hover</code> for selecting a hovered CWC host","<code>:host([disabled])</code> for selecting a hovered CWC host with the disabled attribute set to true","<code>:host-context(.dark-theme)</code> the <code>:host-context</code> makes it possible to select a \n                        host element of the shadow DOM only, if it is the descendant of the element matching a selector given in brackets,\n                        in this case if the ancestor of the host has class <code>dark-theme</code>. This is the right way to apply dark \n                        themes to the shadow DOM.","The shadow-DOM host elements may be styled from the outside (but no influence on the interiors of the shadow DOM),\n                        with a normal class or tag selectors: <code>my-custom-web-component{position...}</code>","<code>custom-web-component:defined</code> will select a custom-web-component element if it is registered with the\n                        <code>customElements.define</code> method. This element may appear in the HTML, but may be defined later with CSS,","<code>custom-web-component:not(:defined)</code> this selects a custom-web-component if it is not defined. This is \n                        a good solution for hiding elements until they are registered with the <code>customElements.define</code>"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Clean code"},{elementType:"Paragraph",content:"\n                        There are some antipattens and patterns. Here the proper usage of the lifecycle methods\n                        will not be repeated, but just some general rules regarding clean code will be reminded.\n                    "},{elementType:"UnsignedList",content:["CWC should not touch elements that are outside it, no DOM modifications outside the host, \n                        no CSS modifications to elements outside the host,","CWC should accept inputs <b>only<b> with the attributes, or optionaly with a mediator pattern, \n                        no other modifications to the CWC from the outside world,","A component should never modify its attributes, so CWC should not modify its attributes,","The proper way to communicate from CWC to the outside world is with the events dispatched on\n                        the host element. Optionally the mediator pattern may be used,","The CWC host CSS should not be manipulated from the outside, as it kills the encapsulation.\n                        The exceptions could be to hide the CWC,","Before using an attribute, check if it does not already exist, do not override,","Before using a method name check if a property with the same name does not exist, do not override,","A component should never apply classes to its self, so do not apply classes to a CWC element \n                        from the inside,","Methods and variable names should be descriptive,","Comments in the code should be newer used, code should speak of its self, comments get outdated and it\n                        is difficult to track if they are still up to date,","Methods short, doing one thing,","No <i>if</i> or <i>or</i> or <i>and</i> used in method naming, as those tell that a method does more \n                        than one thing,"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"GitHub",href:"https://github.com/mdn/web-components-examples/blob/master/element-details/index.html",description:"slot example"},{elementType:"Link",content:"html spec whatwg org",href:"https://html.spec.whatwg.org/multipage/custom-elements.html",description:"specification"},{elementType:"Link",content:"developers.google",href:"https://developers.google.com/web/fundamentals/web-components/customelements",description:"Like a home web page"},{elementType:"Link",content:"custom-web-component.net",href:"https://custom-web-component.net/",description:"Like a home web page"}]}]}];var In=[{summary:"types",title:"types",cathegory:"TS",searchKeywords:"boolean number string array tuple enum unknown any void null undefined never object array",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Validating a form with HTML"},{elementType:"Paragraph",content:"\n            \n                        "}]}]},{summary:"unions",title:"unions",cathegory:"TS",searchKeywords:"unions",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Unions"},{elementType:"Paragraph",content:"\n            \n                        "}]}]},{summary:"interfaces",title:"interfaces",cathegory:"TS",searchKeywords:"interfaces",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Interfaces"},{elementType:"Paragraph",content:"\n            \n                        "}]}]},{summary:"decorators",title:"decorators",cathegory:"TS",searchKeywords:"decorators",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Decorators"},{elementType:"Paragraph",content:"\n            \n                        "}]}]}];var Pn=[{summary:"react hooks",title:"React hooks",searchKeywords:"React lifecycle methods render \n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Hooks"},{elementType:"Paragraph",content:"\n                    Each component in react has its lifecycle. Firstly it is created, then it is rendered, after this \n                    there may be a necessity to fetch some data from the server, then the component has to be mounted \n                    (placed on the screen). During its life it has to be updated, and finally it has to be demolished.\n                    Between all those operations there is a necessity to place  some custom actions, like state updating,\n                    element updating, fetching data etc. These actions have to be done in precise moments. For \n                    placing all those actions in the lifecycle of the component, there were introduced the lifecycle methods.\n                    But lifecycle methods are for class components. And they may not be applied in case of the currently\n                    encouraged function components. That is why there are <strong>react hooks</strong>: functinos \n                    that are hooked somewhere in the lifecycle of the function component. It is possible to \n                    do exectly the same things with hooks and with lifecycle methods. Lets take a look at those hooks.\n                    "},{elementType:"Headline-3",content:"General rules regarding hooks and components"},{elementType:"UnsignedList",content:["No state changing code allowed in the body of the component. All should be in the hooks,","There can be a lot of hooks of the same type used in one component, each hook is used independantly,","Hooks may be used only in components main scope or in other, custom hook functions. Usege of hooks inside \n                        other functions than directly in components or in other hooks if forbidden, as may lead to bugs,","Hooks should be used in the function main scope, not in nested blocks of code or in loops, or conditional statements,"]},{elementType:"Headline-3",content:"Custom hooks"},{elementType:"UnsignedList",content:["Custom hooks are functions that should be used to separate the reusable logic, \n                            that may be used in other components,","It is allowed to use build in hooks inside custom hooks,","Custom hooks should be written in the separate files, so it is easy to import them,","Custom hooks names shuold start with the <b>use</b> word, so it is easy to tell hooks apart of the other functions,","If the custom hook is used in different components, and uses a build in hook to, then the build in hook (the hook \n                                that is nested in the custom hook) scope is unique, so it is not sheared between any other components"]},{elementType:"Code",content:'\n                    <pre>\nimport {useState, useEffect} from "react";\n\nexport default function useFetch(url){\n    const [data, setData] = useState(null);\n\n    useEffect(()=>{\n        fetch(url)\n            .then((response) => {return response.json();})\n            .then((data) => setData(data));\n    }, [url]);  // only if the url changes this will trigger,\n\n    return [data]; // data is a promisse \n}\n</pre>\n                    '},{elementType:"Headline-3",content:"Hooks"},{elementType:"SmallHeadline",content:"useState(initialState)"},{elementType:"Paragraph",content:"const [state, setState] = useState(initialState);"},{elementType:"Paragraph",content:"Could be compared to the <code>setState(updater[, callback])</code> from the class components,"},{elementType:"UnsignedList",content:["Returns a stateful value and a function to update it","During initial render the state becomes the same as <code>initialState</code>","setState is a setter that should be used to set new state values","Callbacks may be used as the arg of setState as \n                         <code>setState(prevState => prevState + 2)</code>","If a function is passed to the setState setter, \n                        then the states value will be set to the value this function returns.","In case the state is set to the same value, react will not update children of affected component."]},{elementType:"SmallHeadline",content:"useEffect(didUpdate)"},{elementType:"Paragraph",content:"Concatenates both: <code>componentDidMount</code> and <code>componentDidUpdate</code>\n                    lifecycle methods."},{elementType:"UnsignedList",content:["All side effects should be used in the useEffect callback.","Callback of <code>useEffect</code> will run every time, after render is commited to the screen.","<code>useEffect(()=>{})</code> launches <strong>after every completed render</strong> by default","<code>useEffect(()=>{}, [args])</code> now useEffect will trigger <strong>only</strong> when any of values in \n                        the <code>args</code> changes. Can be used for conditional rendering.","If the <code>useEffect</code> callback returns a function, this function will be treated as a <code>\n                        componentDidUmount</code> hook, so will be run on umount of the component.","<code>useEffect</code> is used after screen painting. If there is a need to run something before content is \n                        displayed, it would be better to use <code>useLayoutEffect</code> instead"]},{elementType:"SmallHeadline",content:"useLayoutEffect(didUpdate)"},{elementType:"Paragraph",content:"\n                Thre only difference between <code>useLayoutEffect</code> and <code>useEffect</code> is time the \n                callback is triggered. In case of the <code>useLayoutEffect</code> the callback will be triggered before \n                content is displayed on the screen."},{elementType:"Paragraph",content:"The useLayoutEffect function takes only synchronous callbacks!, effecte are visible on screen, so \n                bettern not to make user wait."},{elementType:"SmallHeadline",content:"useContext( )"},{elementType:"Paragraph",content:"\n                    The context is an object holding some data that needs to be passed to the components that are \n                    deeply nested inside the component passing the context. Normally there would be props passed \n                    from the component to the child component. But the problem known as the <q>props drilling</q>\n                    occures, when the props has to be passed deep.\n                    "},{elementType:"Paragraph",content:"\n                    Possible usages are passing the:\n                    "},{elementType:"UnsignedList",content:["global scope","application configurations,","user settings","preferred language","..."]},{elementType:"Paragraph",content:"\n                    How to use it?\n                    "},{elementType:"UnsignedList",content:["Create the context","Provide the context: every nested component has access to the context","Consume the context","When the context changes, all components using context will be rerendered,","<code>useContext</code> returns the context, that was set in the other place,"]},{elementType:"Code",content:"\n<b>Creating the context:</b>\n<pre>\nimport { createContext } from 'react';\ncons Context = createContext('some value');\n</pre>              \n\n<b>Providing the context</b>\nCan be done with the &lt;Context.Provider value={val}> wrapping component.\nEvery component nested in the &lt;Context.Provider> will have access to the context\n<pre>\nfunction Compon() {\n    cont val = 'initial context';\n    return (\n        &lt;Context.Provider value={val}>\n            <SomeComponent/>\n        &lt;Context.Provider>\n    )\n}\n\n<b>Consumint the contest</b>\nA):\nimport {useContext} from 'react';\n\nfunction SomeComponent(){\n    const val = useContext(Context);\n\n    return (\n        &lt;>\n            <span>first usage: {val}</span>\n            <span>Second usage: {val}</span>\n        &lt;/>\n    )\n}\n\nB):\nfunction SomeComponent(){\n    return (\n        &lt;Context.Consumer>\n            {value => &lt;span>{value}&lt;span>}\n        &lt;Context.Consumer>\n    )\n}\n\n</pre>\n                    "},{elementType:"SmallHeadline",content:"useRef(initialValue)"},{elementType:"UnsignedList",content:["Retunrs an object called a reference. Than object has a property 'current' thats initial value is set to the \n                            useRef <code>initialValue</code> argument.","The value hold in the current property is mutable and may be user by the developer as a normal variable would be.","The change in the reference object <b>does not cause component to renrender</b>, and state would. This is one of \n                            differences between the object state and the reference,","The change to the reference object is synchronous, and this makes it different from the state object, as \n                            state change is asynchronous. New value of the state is not available imediately after setting it.","useRef may be used to access DOM elements:\n                                <pre>\nfunction SomeComponent(){\n    let customRef = useRef();\n    useEffect(()=>{customRef.current.fosuc()})\n    // using customRef object to set focus on it\n    ...\n    return (\n        &lt;div ref={customRef}></div>\n    )\n}\n                                </pre>\n                            ","Changes to the reference value should not be made in the body of the component function. The same rules apply as\n                            with the component state. All changes made to those objects should be done in hooks. ","https://dmitripavlutin.com/react-useref-guide/"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:""},{elementType:"Paragraph",content:"\n\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"reactjs.org",href:"https://reactjs.org/docs/hooks-reference.html#useeffect",description:"Hooks reference"},{elementType:"Link",content:"projects.wojtekmaj.pl",href:"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/",description:"Lifecycle in react"},{elementType:"Link",content:"dmitripavlutin.com",href:"https://dmitripavlutin.com/react-context-and-usecontext/",description:"useContext"}]}]},{summary:"react lifecycle methods",title:"React lifecycle methods",searchKeywords:"React lifecycle methods render constructor componentDidMount componentDidUpdate componentWillUpdate\n    componentWillUnmount shouldComponentUpdate getDerivedStateFromProps getShapshotBeforeUpdate \n    getDerivedStateFromError componentDidCatch \n    ",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Lifecycle methods"},{elementType:"Paragraph",content:"\n                    Each component in react has its lifecycle, and its phases. Firlsty it is constructed, then rendered,\n                    then it lives, so may be modified, and at the end it is demolished. There is a necessity to \n                    do some operations like component modifications during this process. Some events should be directly\n                    timed: for example server communication should take place after the element is rendered, but\n                    before its view is changed. To support making some operations in direct moments of the component \n                    lifecycle, the <code>lifecycle methods</code> are introduced. Lifecycle methods are available only\n                    in the react class components. In case functions are used to implement components, react hooks should \n                    be used instead.\n                    "},{elementType:"SmallHeadline",content:"Call order"},{elementType:"Image",name:"reactLifecycle.png",alt:"lifecycle methods call order"},{elementType:"Headline-3",content:"render()"},{elementType:"Paragraph",content:"\n                    A pure function (not state changing), checks props and state and returns one of the following:\n                    "},{elementType:"UnsignedList",content:["<b>React elements</b>,","<b>React fragments</b>: a structure letting to avoid wrapping the list of parallel elements \n                        in not needed divs, for example a lot of <code>&lt;td></code> elements may be wrapped in a\n                        &ltReact.fragment> instead,","<b>Portals</b>: elements allowing to render a child node into another place in the DOM \n                            (for example,\n                            in case a button opens a modal, modal is in the root DOM element, and button opening it is \n                            nested somewhere),","Chains of chars or numbers, that will be rendered a text node,","A logical type, that if null or false will make component not to render,"]},{elementType:"Paragraph",content:"\n                    The render component is mandatory in class based components,\n                    "},{elementType:"Headline-3",content:"constructor(props)"},{elementType:"Paragraph",content:"\n                    Not mandatory, used to set initial state or handle events. Should not be used for subscriptions!\n                    "},{elementType:"UnsignedList",content:["The constructor is not mandatory,","<code>super(props)</code> is mandatory if constructor is present,","<code>setState()</code> should <b>not</b> be used in the constructor, the constructor is the\n                        only place where state should be assigned directly: <code>this.state = ...</code>","No subscriptions here,"]},{elementType:"Headline-3",content:"componentDidMount()"},{elementType:"Paragraph",content:"\n                    Mounting is the process of placing the element in the DOM, so this method is called directly after\n                    the element is rendered and inserted into the DOM. This is a good place for:\n                    "},{elementType:"UnsignedList",content:["Subscriptions, (remember to use <code>componentWillUmount</code> in this case)","Server requests,","Communication with web workers,","If <code>setState()</code> is used in <code>componentDidMount</code>, then there will be an \n                        extra rendering taking place, but this extra rendering will finish before browser updates \n                        the screen, so user will not see this. However, it is better to set state directly in the \n                        constructor if possible, as this may cause some performance issues,","This method will not be called after updates, only after initial render and mount"]},{elementType:"Headline-3",content:"componentDidUpdate()"},{elementType:"Paragraph",content:"\n                    Invoked after actualization, but <b>not</b> after initial rendering and mounting, in this case \n                    <code>componentDidMount</code> should be used. This method will not be invoked if <code>\n                    shouldComponentUpdate</code> returns false. Use <code>componentDidUpdate</code> to:\n                    "},{elementType:"UnsignedList",content:["DOM operations when the element was actualized,","Server requests,","<code>setState()</code> may be used here, will cause extra rendering, but before screen \n                        update, so not visible. However, this will cause performance issues,","<b>NOTE</b> <code>setState()</code> if used here, should be wrapped in a conditional statement,\n                        or will end up with the infinite loop,"]},{elementType:"Headline-3",content:"componentWillUnmount()"},{elementType:"Paragraph",content:"\n                    This is invoked just before the element is removed from the DOM, and the component is deleted.\n                    <code>setState()</code> should not be used here, as there is no point in modification of the state \n                    of the component that will be deleted in a while. Component once removed is lost forever and will\n                    never be mounted again. Instead a new instance will be created. Should be used for cleaning after the \n                    component:\n                    "},{elementType:"UnsignedList",content:["unsubscriptions,","cancelation of server requests,","clearing timers and intervals"]},{elementType:"Headline-3",content:"shouldComponentUpdate(nextProps, nextState)"},{elementType:"Paragraph",content:"\n                    Future state and props should be compared and in case the change in the component would not cause\n                    changes in the component view, this method might return false. In this case components view will not be \n                    updated. This is for improving performance. Deep comparation should not be used, child components\n                    may be updated anyway, in the future this method may be used only as a suggestion for react engine.\n                    Invoked just before the <code>componentDidUpdate</code>. This is not invoked before the initial \n                    component render. <b>Rare usage</b>\n                    "},{elementType:"Headline-3",content:"static getDerivedStateFromProps(props, state)"},{elementType:"Paragraph",content:"\n                    Called before <b>every</b> initial render and update renders. Should return an object updating the state, or\n                    null if no update needed. <b>Rare usage</b>. It should be considered to use:\n                    "},{elementType:"UnsignedList",content:["<code>componentDidUpdate</code>,","memoization techniques,","fully controlled component, or fully uncontrolled component with\n                        the key"]},{elementType:"Code",content:"\n<pre>\nclass SomeComponent extends Component {\n    state = ...\n\n    static getDerivedStateFromProps(props, state){\n        if (props.val !== state.prevPropsVal || state.prevOtherVal !== state.otherVal){\n            return {prevPropsVal ....}\n        }\n        return null;\n    }\n    render ....\n}\n</pre>                    \n                    "},{elementType:"Headline-3",content:"getShapshotBeforeUpdate()"},{elementType:"Paragraph",content:"\n                    Invoked just after render, and just before the element will be updated in the DOM, to be sure\n                    nothing needs to be adjusted. The value returned by this method will be sent to the <code>\n                    componentDidUpdate</code>. If this method returns null, then nothing will be passed to the \n                    <code>componentDidUpdate</code> and this method will have no effect. In case this \n                    method returns something additional render will take place, but this will not be\n                    visible on the screen. May be used with the\n                    <code>React.createRef()</code>. Can be used to handle, for example scrollbars positions \n                    in case it is needed. <b>Rare usage</b>\n                    "},{elementType:"Code",content:"\n<pre>\nclass MovableElement extends React.Component {\n    constructor(props){\n        super(props);\n        this.movableElRef = React.createRef();\n    }\n\n    getShapshotBeforeUpdate(prevProps, prevState){\n        if (prevProps.positionX &lt; props.positionX) {return 1}\n        if (prevProps.positionX === props.positionX) {return null}\n        return -1\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot){\n        if (snapshot === 1) {...}\n        if (snapshot === -1) {...}\n        ...\n    }\n\n    render(){\n        return(\n            &lt;div ref={this.movableElRef}>..&lt;/div>\n        )\n    }\n}\n</pre>\n"},{elementType:"Headline-3",content:"getDerivedStateFromError(error)"},{elementType:"Paragraph",content:"\n                    Invoked <b>in the render</b> phase, so should never have any side effects. Good for \n                    rendering an alternative component in case of an error. Not good for catching actual errors.\n                    Errors will make their way up to the window object if not caught by the <code>componentDidCatch()</code>\n                    method in the production environment. \n                    "},{elementType:"Code",content:"\n<pre>\nclass ErrorHandler extends React.component {\n    constructor(props){\n        super(props);\n        this.state = {hasError: false};\n    }\n    static getDerivedStateFromError(error){\n        return {hasError: true};\n    }\n\n    componentDidCatch(error, info){\n        // will catch error in the production environment\n        // can cause side effects like state change\n        // in commit phase\n        // error is the error tha was thrown,\n        // info is the component that thrown the error\n        log(info.componentStack)\n    }\n\n    render(){\n        if (this.state.hasError) {\n            ....  // NOK case\n        } \n        return ... // OK case\n    }\n}\n</pre>                    \n                    "},{elementType:"Headline-3",content:"componentDidCatch(error, info)"},{elementType:"Paragraph",content:"\n                    Invoked in the commit phase, so may be used with side effects. Good for logging errors.\n                    Catches an error not letting it travel up the tree (only in case of the production environment,\n                    as in the development all errors will make their way up to the <code>window</code> object\n                    anyway). <code>error</code> is the error that was thrown, and <code>info</code> is the\n                    object that is thrown the error.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Depraciated methods"},{elementType:"UnsignedList",content:["<code>componentWillMount()</code>: now changed to <code>UNSAFE_componentWillMount()</code>","<code>componentWillReceiveProps()</code>: now <code>UNSAFE_componentWillReceiveProps()</code>","<code>componentWillUpdate()</code>: now <code>UNSAFE_componentWillUpdate()</code>"]}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"Other methods"},{elementType:"SmallHeadline",content:"\n                    <code>setState(updater[, callback])</code>\n                    "},{elementType:"Paragraph",content:"\n                    The only place the state may be assigned directly is the constructor of the component. In any other \n                    place the <code>setState</code> method should be used, or bugs may occur. The <code>setState</code>\n                    method is asynchronous, and many calls of this method may be combined so that state is updated\n                    only once in the cycle. Each change to the state causes the component to update if <code>\n                    componentShouldUpdate()</code> lifecycle method does not return false.\n                    It should be avoided to use nested state, as in this case components will not update, as \n                    only the flat structure of the state object is compared.\n                    "},{elementType:"Paragraph",content:"\n                    The optional callback function is invoked after the state is changed. As there is a \n                    <code>componentDidUpdate</code> method, it is better to avoid setting this callback argument.\n                    "},{elementType:"SmallHeadline",content:"\n                    <code>forceUpdate(callback)</code>\n                    "},{elementType:"Paragraph",content:"\n                    This method forces the render method invocation, and component update, not taking into account the\n                    <code>shouldComponentUpdate()</code> method. This method just forces an additional render.\n                    It is better to avoid it and use natural state and props changes.\n                    "}]},{elementType:"Article",content:[{elementType:"Headline-2",content:"References"},{elementType:"Link",content:"projects.wojtekmaj.pl",href:"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/",description:"Lifecycle in react"},{elementType:"Link",content:"https://pl.reactjs.org",href:"https://pl.reactjs.org/docs/react-component.html#constructor",description:"Lifecycle in react"}]}]},{summary:"position",title:"position",searchKeywords:"react hooks lifecycle",cathegory:"React",content:[{elementType:"Article",content:[{elementType:"Headline",content:"About position"},{elementType:"Paragraph",content:"\n                            React is ...          \n                        "}]}]},{summary:"tables",title:"tables",cathegory:"js",content:[{elementType:"Article",content:[{elementType:"Headline",content:"Tables"},{elementType:"Paragraph",content:"\n                            <b>Lorem ipsum</b> dolor sit amet, consectetur adipiscing elit. \n                            Vestibulum et lacinia arcu, ut tempor lacus. Integer euismod, est et pharetra eleifend, \n                            magna nibh congue nulla, eu ornare lacus sem eu leo. Sed aliquet tincidunt neque non tempor. \n                            Sed feugiat, massa at tempus tincidunt, tortor turpis rhoncus orci, nec cursus purus dui vel ipsum. \n                            Sed pellentesque sem nec dictum auctor. Morbi tempus lectus vitae ultrices volutpat. \n                            Vivamus convallis mauris urna. Phasellus rhoncus felis eget mi tincidunt malesuada. \n                            Pellentesque in velit viverra nunc ultrices maximus. Duis in leo dolor.             \n                        "}]}]}];function An(){return[{category:"Css",content:d},{category:"Html",content:p},{category:"Js",content:Nn},{category:"Ts",content:In},{category:"React",content:Pn}]}var En=[{elementType:"Article",content:[{elementType:"Headline",content:"Welcome to theory corner"},{elementType:"Title",content:"By Marek Gudalewicz"},{elementType:"Paragraph",content:"\n                    This is a set of articles I prepared as a repetition during my interview preparation. This is also my first\n                    react project. You may read a short description of a few topics related to frontend, and take a test in quiz \n                    section. Enjoy.\n                "}]}];var Cn=n(3),Ln=n(9),Hn=n(1);function Mn(e,t){return""===e.trim()?t:t.filter((function(t){return function(e){return"".concat(function(e){return e.summary}(e)," ").concat(function(e){return void 0===e.searchKeywords?"":e.searchKeywords}(e))}(t).includes(e)}))}function Dn(e){function t(e,t){return e.summary.localeCompare(t.summary)}return console.log(e.sort(t)),e.sort(t)}function Rn(e){var t=e.content,n=e.category,o=e.filter;return Object(Hn.jsxs)("div",{children:[Object(Hn.jsx)("button",{type:"button",className:"btn","data-bs-toggle":"collapse","data-bs-target":"#".concat(n),children:n}),Object(Hn.jsx)("div",{className:"collapse show",id:n,children:Object(Hn.jsx)("ul",{className:"nav flex-column",children:Dn(Mn(o,t)).map((function(e){return Object(Hn.jsx)(Fn,{summary:e.summary},e.summary)}))})})]})}function Fn(e){return Object(Hn.jsx)("li",{className:"nav-item",children:Object(Hn.jsx)(Ln.b,{to:"/theory/".concat(e.summary),children:e.summary})})}var Un=function(e){var t=Object(o.useState)(""),n=Object(Cn.a)(t,2),a=n[0],r=n[1],i=e.menuData;return Object(Hn.jsxs)(Hn.Fragment,{children:[Object(Hn.jsx)("form",{children:Object(Hn.jsxs)("div",{className:"input-group",children:[Object(Hn.jsx)("span",{className:"input-group-text",children:"\ud83d\udd0d"}),Object(Hn.jsx)("input",{className:"form-control",placeholder:"search...",onChange:function(e){r(e.target.value)}})]})}),Object(Hn.jsx)("ul",{className:"nav flex-column",children:i.map((function(e){return Object(Hn.jsx)("li",{children:Object(Hn.jsx)(Rn,{content:e.content,category:e.category,filter:a})},e.category)}))})]})};var Bn=function(e){function t(e){return e.headline}function n(e){return e.content}return e.listItem.map((function(e){return Object(Hn.jsxs)("div",{className:"row",children:[Object(Hn.jsx)("div",{className:"col-3",children:t(e)}),Object(Hn.jsx)("div",{className:"col-9",dangerouslySetInnerHTML:(o=n(e),{__html:o})})]},t(e));var o}))};var _n=function(e){var t=e.href,n=e.content;return console.log(e),Object(Hn.jsx)("div",{children:Object(Hn.jsx)("a",{href:t,target:"_blank",rel:"noreferrer",children:n})})};var qn=function(e){console.log(e);var t=e.items;return Object(Hn.jsx)("ul",{children:t.map((function(e){return Object(Hn.jsx)("li",{dangerouslySetInnerHTML:(t=e,{__html:t})},e);var t}))})};function Wn(e){var t=e.map((function(e){return"<li>"+e+"</li>"})).join("");return"<ul>".concat(t,"</ul>")}function zn(e){return{__html:e}}function Kn(e){var t=e.contentItem,n=e.orderArray,o=function(e,t){var n=[];if(void 0!==t){var o,a=Object(s.a)(t);try{for(a.s();!(o=a.n()).done;){var r=o.value;n.push(e[r])}}catch(c){a.e(c)}finally{a.f()}return n}for(var i in e)n.push(e[i]);return n}(t,n),a=Vn(t,"code"),r="id"+Math.floor(1e8*Math.random());return Object(Hn.jsxs)(Hn.Fragment,{children:[Object(Hn.jsx)("tr",{"data-bs-toggle":"collapse","data-bs-target":"#".concat(r),className:function(e){return void 0!==Vn(e,"code")}(t)?"cursor-pointer":"",children:o.map((function(e,t){return Object(Hn.jsx)("td",{dangerouslySetInnerHTML:zn(e)},t)}))}),function(e){var t=Object(Hn.jsx)(Hn.Fragment,{});return null!==a&&(t=Object(Hn.jsx)("tr",{id:r,className:"collapse show1",children:Object(Hn.jsx)("td",{colSpan:o.length,dangerouslySetInnerHTML:zn(a)})})),t}()]})}function Vn(e,t){var n=Object.getOwnPropertySymbols(e).find((function(e){return e.toString()==="Symbol(".concat(t,")")}));return void 0===n?void 0:e[n]}function Gn(e){var t=e.contentItem,n=function(e,t){var n,o=[],a=Object(s.a)(t);try{for(a.s();!(n=a.n()).done;){var r=n.value;o.push({headline:r,content:e[r]})}}catch(i){a.e(i)}finally{a.f()}return o}(t,e.orderArray),o=Vn(t,"title"),a=Vn(t,"code");return Object(Hn.jsxs)("div",{className:"car my-3 px-2 py-2",children:[Object(Hn.jsx)("h4",{dangerouslySetInnerHTML:zn(o)}),n.map((function(e,t){return Object(Hn.jsxs)("div",{className:"card-body",children:[Object(Hn.jsx)("h6",{dangerouslySetInnerHTML:zn(e.headline)}),Object(Hn.jsx)("p",{dangerouslySetInnerHTML:zn(e.content)})]},t)})),Object(Hn.jsx)("div",{className:"alert alert-dark",dangerouslySetInnerHTML:zn(a)})]})}function Jn(e){var t=e.headItems,n=e.content;return Object(Hn.jsxs)("table",{className:"table table-hover",children:[Object(Hn.jsx)("thead",{children:Object(Hn.jsx)("tr",{children:t.map((function(e){return Object(Hn.jsx)("th",{children:e},e)}))})}),Object(Hn.jsx)("tbody",{children:n.map((function(e,n){return Object(Hn.jsx)(Kn,{contentItem:e,orderArray:t},JSON.stringify(e))}))})]})}function Xn(e){var t=e.headItems,n=e.content;return Object(Hn.jsx)("div",{className:"container-fluid my-3",children:n.map((function(e,n){return Object(Hn.jsx)(Gn,{contentItem:e,orderArray:t},JSON.stringify(e))}))})}var Yn=function(e){function t(e){return e<1e3?"small":"big"}function n(e){var n=window.innerWidth;s(t(n))}var a=Object(o.useState)(t(window.innerWidth)),r=Object(Cn.a)(a,2),i=r[0],s=r[1];Object(o.useEffect)((function(){return window.addEventListener("resize",n),function(){console.log("ConditionalArray removed"),window.removeEventListener("resize",n)}}));var c=e.headlines,l=e.contentItems;return"small"===i?Object(Hn.jsx)(Xn,{headItems:c,content:l}):Object(Hn.jsx)(Jn,{headItems:c,content:l})};var Qn=function(e){var t="/".concat(e.name),n=e.alt;return"localhost"!==window.location.hostname&&(t="".concat(e.name)),Object(Hn.jsx)("img",{className:"mx-auto d-block",src:t,alt:n})};function $n(e){return{__html:e}}var Zn=function(e){e.severity;var t=e.content;return Object(Hn.jsx)("div",{className:"alert alert-warning",dangerouslySetInnerHTML:$n("<strong>Note! </strong>".concat(t))})};function eo(e){return{__html:e}}var to=function(e){var t=e.content;return Object(Hn.jsx)("div",{className:"alert alert-dark",dangerouslySetInnerHTML:eo(t)})};function no(e,t,n){return["Section","Article","ExplanationList"].includes(e)?function(e,t){if("Section"===e)return"";if("UnsignedList"===e)return Object(Hn.jsx)(qn,{items:t});if("ExplanationList"===e)return Object(Hn.jsx)(Bn,{listItem:t},t.headline);if("Article"===e)return Object(Hn.jsx)("article",{children:t.map((function(e,t){return Object(Hn.jsx)(oo,{content:e},t)}))})}(e,t):function(e){return["Paragraph","Headline","UnsignedList","Headline-2","Headline-3","Title","ListItem","Link","NoteWarning","Image","Code","SmallHeadline","ConditionalArray"].includes(e)}(e)?function(e,t,n){if("Paragraph"===e)return Object(Hn.jsx)("p",{dangerouslySetInnerHTML:ao(t)});if("Headline"===e)return Object(Hn.jsx)("h1",{className:"display-2",dangerouslySetInnerHTML:ao(t)});if("Headline-2"===e)return Object(Hn.jsx)("h3",{className:"display-4",dangerouslySetInnerHTML:ao(t)});if("Headline-3"===e)return Object(Hn.jsx)("h4",{className:"display-5",dangerouslySetInnerHTML:ao(t)});if("SmallHeadline"===e)return Object(Hn.jsx)("h4",{dangerouslySetInnerHTML:ao(t)});if("NoteWarning"===e)return Object(Hn.jsx)(Zn,{severity:"warning",content:t});if("Title"===e)return Object(Hn.jsx)("h1",{className:"display-6",children:t});if("ListItem"===e)return Object(Hn.jsx)("li",{children:t},t);if("UnsignedList"===e)return Object(Hn.jsx)(qn,{items:t});if("Link"===e)return Object(Hn.jsx)(_n,{href:n.href,content:t},t);if("Image"===e)return Object(Hn.jsx)(Qn,{name:n.name,alt:n.alt});if("Code"===e)return Object(Hn.jsx)(to,{content:t});if("ConditionalArray"===e)return Object(Hn.jsx)(Yn,{headlines:n.headItems,contentItems:t})}(e,t,n):(console.error("".concat(e," is not supported: contentRenderer.js")),"")}function oo(e){var t=e.content.elementType,n=e.content.content,o=void 0===t,a={href:e.content.href,name:e.content.name,alt:e.content.alt,headItems:e.content.headItems};return o?(console.log(o),console.log(e),n.map((function(e,t){return Object(Hn.jsx)(oo,{content:e},t)}))):no(t,n,a)}function ao(e){return{__html:e}}var ro=oo;function io(e){return{position:"relative",height:e}}var so=function(e){var t=e.size;return void 0===t&&(t="10rem"),Object(Hn.jsx)("div",{style:io(t)})};var co=function(e){return Object(Hn.jsxs)(Hn.Fragment,{children:[Object(Hn.jsx)(ro,{content:e}),Object(Hn.jsx)(so,{})]})},lo=n(4);function po(e,t){var n=function(e){return void 0===e||null===e||void 0===e.pathname?[]:e.pathname.split("/").slice(1)}(e);return 1===n.length&&n[0]===t}function mo(e){var t,n=function(e){var t=[];return e.forEach((function(e){t=t.concat(e.content)})),t}(An()),o=Object(s.a)(n);try{for(o.s();!(t=o.n()).done;){var a=t.value;if(a.summary===e&&console.log(a),a.summary===e)return a.content}}catch(r){o.e(r)}finally{o.f()}return{}}var uo=function(e){var t,n,o=An(),a=En,r=Object(lo.e)(),i=Object(lo.g)();return Object(Hn.jsxs)("div",{className:"container-fluid",children:[Object(Hn.jsx)("nav",{className:"navbar, navbar-expand-sm bg-danger navbar-danger text-center text-white sticky-top p-1",children:"This page is still under developement."}),Object(Hn.jsx)("div",{className:"row",children:Object(Hn.jsxs)("div",{className:"col-sm-12",children:[Object(Hn.jsx)("div",{className:"container-fluid mb-3",children:Object(Hn.jsx)("div",{className:"text-center",children:Object(Hn.jsx)("h1",{className:"display-1",children:"Theory corner: web bulding"})})}),Object(Hn.jsx)(Ln.b,{to:"../quiz",children:Object(Hn.jsx)("button",{type:"button",className:"btn btn-primary",children:"Quiz"})})]})}),Object(Hn.jsxs)("div",{className:"row",children:[Object(Hn.jsx)("div",{className:"col-sm-4 scrollable",children:Object(Hn.jsx)(Un,{menuData:o})}),Object(Hn.jsxs)("div",{className:"col-sm-8 scrollable",children:["/"===r.pathname?Object(Hn.jsx)(co,{content:a}):"",po(r,"about")?Object(Hn.jsx)(co,{content:a}):"",(t=i,n="topic",void 0!==t&&void 0!==t[n]?Object(Hn.jsx)(co,{content:mo(i.topic)}):"")]})]})]})},ho=[{category:"js",level:"easy",subcategory:"server communication",question:"\n            What statements about static server and a dynamic one are true:\n        ",answers:["In communication with a static server only the GET method should be used,","A static server is able to parse queries in routes,","A static server is able to authenticate user,","A dynamic server can reply with data that is not a file,","Both static and dynamic server are capable of responding to routes in URL"],points:1,correctAnswers:[0,3,4],type:"checkbox",explanation:"\n            ".concat(Wn(["A static server is not capable to process other responces that GET,","A static server is not cabaple of processing routes, however an application that is\n                served by it can be capable of responding to queries in routes,","A static server is not able to identify an user, as it can only provide files,","A dynamic server is designed to serve data other than files, so the answer is <i>Yes</i>","Both servers will respond to routes, but a static server only to find files that needed to be served,\n                and a dynamic one will resolve routes to know what resource needs to be send"])),links:["",""]},{category:"js",level:"easy",subcategory:"server communication",question:"\n        What communication technology is described in below statements?</br>\n        ".concat(Wn(["Provides a bi-directional client server communication,","Low latancy,","Event based communication,","Same origin policy enforcement,"])),answers:["WebSocket","SSE","XMLHttpRequest","JSONQuery"],points:1,correctAnswers:[0],type:"radio",explanation:"\n        WebSocket\n        ",links:["",""]},{category:"js",level:"easy",subcategory:"server communication",question:"\n        What communication technology is described in below statements?</br>\n        ".concat(Wn(["After an initial hand-shake communication in only one direction - from a server to client,","Event based communication,","Low latancy,","Automatic reconnection,","Used to constatnt update some data,","Easy to use in browser side, as only one event handler has to be used and work will be done,"])),answers:["WebSocket","SSE","XMLHttpRequest","JSONQuery"],points:1,correctAnswers:[1],type:"radio",explanation:"\n        SSE: Server Send Events\n        ",links:["",""]},{category:"js",level:"easy",subcategory:"server communication",question:"\n        What communication technology is described in below statements?</br>\n        ".concat(Wn(["Bi-directional communication,","Calls methods like GET, PUT, POST","Should be handled with an async function"])),answers:["WebSocket","SSE","XMLHttpRequest","JSONQuery"],points:1,correctAnswers:[2],type:"radio",explanation:"\n        XMLHttpRequest\n        ",links:["",""]},{category:"js",level:"easy",subcategory:"server communication",question:"\n        Check correct meaning of event handlers of XMLHttpRequest",answers:["<code>onload</code>: when request is successfully completed,","<code>onreadystatechange</code>: when readyState property changes,","<code>onprogress</code> can use event.position and event.totalSize,","<code>onupload</code>: when upload request ends,","<code>onheadersreceived</code>: when headers are ready."],points:3,correctAnswers:[0,1,2],type:"checkbox",explanation:"\n        There is no such event handlers as onupload or noheadersreceived. This may be handled with \n        the <code>onreadystatechange</code> by checking <code>readyState</code> property. <code>readyState == 2</code>\n        is for checking if headers are already received, and <code>readyState == 4</code> is for request finished, so \n        upload end would be handled here. There is also an <code>upload</code> property in XMLHttpRequest, and it returns a \n        <code>XMLHttpRequestUpload</code> object that is only for tracking upload operation progress.\n        ",links:["",""]},{category:"js",level:"easy",subcategory:"server communication",question:"Fill event handlers for web socket:",answers:["<code>ws.</code>{{{}}}<code>('data to send')</code> send data to a server,","<code>ws.</code>{{{}}}<code>()</code> when connection will no longer be needed,","<code>let dataLeft = ws.</code>{{{}}} to get number of bytes of queued data,","<code>ws.</code>{{{}}}<code>=function dataIncommint(event)</code> for handling incomming data."],correctAnswers:[["send"],["close"],["bufferedAmount"],["onmessage"]],type:"fill-in",points:4,explanation:"\n            ".concat(Wn(["<code>send</code> is for sending data when connection is ready,","<code>close</code> unwanted connection should always be closed, as connections are limited,\n                not closing connections may result in hard to debug memory leaks,","<code>bufferedAmmount</code> is for getting information on how much bytes are queued,","<code>onmessage</code> is an event handler for incomming message."]),"\n        "),links:["",""]}];var bo=[{category:"js",level:"easy",subcategory:"data types",question:"\n            Which are primitive data types in JS?\n        ",answers:["null","undefined","number","BigInt","string","boolean","symbol","object","Array","Date","Set","Map"],points:2,correctAnswers:[0,1,2,3,4,5,6],type:"checkbox",explanation:"\n            ".concat(Wn(["<code>null</code>, <code>undefined</code>, <code>number</code>, <code>BigInt</code>, <code>string</code>,\n                <code>boolean</code>, <code>symbol</code> are primitives","Object is not a primitive data type","<code>Date</code>, <code>Function</code>, <code>Array</code>, <code>Set</code>, <code>Map</code> are \n                not primitive data types."])),links:["",""]},{category:"js",level:"easy",subcategory:"data types",question:"\n            Which statements are correct?\n        ",answers:["<code>typeof null == 'object'</code>","<code>typeof undefined == 'undefined'</code>","<code>typeof null == undefined</code>","<code>typeof null === 'false'</code>","<code>isNaN(1 + null) == false</code>","<code>isNaN(1 + undefined) == false</code>","<code>let b = new Boolean(false)</code> and now <code>b === flase</code>"],points:1,correctAnswers:[0,1,2,4],type:"checkbox",explanation:"\n            ".concat(Wn(["<code>typeof null == 'object'</code> as every object derives from null,","<code>typeof undefined == 'undefined'</code>","<code>typeof null == undefined</code>","<code>typeof null == 'false'</code>, but <code>typeof null === 'false'</code> has a strict comparation \n                operator, and types do not match","<code>isNaN(1 + undefined) == true</code>, not false","<code>let b = new Boolean(false)</code> creates a new object with false value, so it is not empty.\n                This is different than <code>let b = Boolean(false)</code>, where b would equal to false."])),links:["",""]},{category:"js",level:"easy",subcategory:"data types",question:"\n            Which statements are correct?\n        ",answers:["<code>Number.isSafeInteger()</code> will indicate if a number will be precise or approximated","<code>-0</code> is the same as <code>0</code> and the same as <code>+0</code>,","<code>5n / 2n</code> will give <code>2.5n</code>,","<code>5n + 3</code> will give <code>8n</code>,","Any number bigger than <code>Number.MAX_SAFE_INTEGER</code> is <code>Infinity</code>,","Any number smaller than <code>Number.MIN_VALUE</code> is a <code>Number.NEGATIVE_INFINITY</code>,"],points:1,correctAnswers:[0,1,2,4],type:"checkbox",explanation:"\n            ".concat(Wn(["<code>Number.isSafeInteger()</code> indicates if a integer will be only an approximation or not. It \n                checks if it is in range <code>Number.MIN_SAFE_INTEGER</code> to <code>Number.MAX_SAFE_INTEGER</code>","-0 and +0 are not exactly the same, as <code>Infinity / +0 !== Infinity / -0</code>","In BigIng division fractional part is cut off,","BigInt and numbers cannot be added, substracted, divided, multiplied and so on. They may be only compared,","The number bigger than <code>Number.MAX_VALUE</code> is <code>Infinity</code>,","<code>Number.MIN_VALUE</code> is a closest to 0 number, not the smallest possible. Any number smaller than \n                <code>-Number.MAX_VALUE</code> would be <code>-Infinity</code>."])),links:["",""]},{category:"js",level:"easy",subcategory:"data types",question:"\n            Which statements are correct?\n        ",answers:["Symbol is globaly unique","<code>let a=Symbol('a');let b=Symbol('a')</code> in this case <code>a == b</code>","<code>for(let item in someObject)</code> will iterate through all object properties,","<code>Object.getOwnPropertySymbols(someObj)</code> will return only properties with symbol keys,","<code>let a = Symbol(); console.log(a.toString());</code> will print exact symbol content to the screen,"],points:1,correctAnswers:[0,3],type:"checkbox",explanation:"\n            ".concat(Wn(["Symbols are globaly unique,","<code>let a=Symbol('a');let b=Symbol('a')</code> produces two different symbols, as symbols are\n                unique,","<code>for(let item in someObject)</code> or <code>Object.getOwnPropertyKeys</code>, or \n                <code>Object.keys()</code> will not give an access to symbol key properties,","<code>Object.getOwnPropertySymbols(someObj)</code> lists only properties having symbols as keys","There is no possiblity to peep into a symbol internals. <code>a.toString()</code> will produce\n                'Symbol('a')' it this case."])),links:["",""]},{category:"js",level:"medium",subcategory:"server communication",question:"Fill in well-known symbols",answers:["@@{{{}}} is for setting a function returning a <code>next</code> function and making an object iterable,","@@{{{}}} is for enabling an object to be selected with  <code>instanceof</code>,","@@{{{}}} is for enabling an object to be an operand of +, -, / operations,"],correctAnswers:[["iterator"],["hasInstance"],["toPrimitive"]],type:"fill-in",points:3,explanation:"\n            ".concat(Wn(["<code>iterator</code>, or Symbol.iterator property is for making an object iterable,","hasInstance is for redefining an <code>instanceof</code>,","toPrimitive well-known symbol makes a primitive out of an object, and allows +, -, / operations"]),"\n        "),links:["",""]}];var fo=[{category:"js",level:"easy",subcategory:"data types",question:"\n            Which are the proper ways of creating a new object\n        ",answers:["<code>var obj = {prop: 'val'}</code>","<code>var obj = Object.create({})</code>","<code>\n<pre>\n    function SomeObject(property){\n        this.property = property;\n    }\n    let obj = new SomeObject(3);\n</pre>            \n            </code>\n            ","\n            <code>\n<pre>\n    class SomeObject{\n        constructor(property){this.someProperty = property}\n    }\n    let obj = new SomeObject(4)\n</pre>            \n            </code>\n            ","<code>var obj = {prop = 'val'}</code>","<code>\n<pre>\n    function SomeObject(property){\n        this.property = property;\n        return this.propery\n    }\n    let obj = new SomeObject(3);\n</pre>            \n            </code>\n            ","\n            <code>\n<pre>\n    class SomeObject() {\n        constructor(property){this.someProperty = property}\n    }\n    let obj = new SomeObject(4)\n</pre>            \n            </code>\n            "],points:1,correctAnswers:[0,1,2,3],type:"checkbox",explanation:"\n            Correct syntaxes:"+Wn(["<code>var obj = {prop: 'val'}</code>","<code>var obj = Object.create({})</code>","<code>\n    <pre>\n        function SomeObject(property){\n            this.property = property;\n        }\n        let obj = new SomeObject(3);\n    </pre>            \n                </code>\n                ","\n                <code>\n    <pre>\n        class SomeObject{\n            constructor(property){this.someProperty = property}\n        }\n        let obj = new SomeObject(4)\n    </pre>            \n                </code>\n                "]),links:["",""]},{category:"js",level:"easy",subcategory:"object",question:"\n            What is the right way to access a property descriptor?\n        ",answers:["<code>Object.getOwnPropertyDescriptor(someObject,'someProperty')</code>","<code>someObject.getOwnPropertyDescriptor('someProperty')</code>","<code>someObject['someProperty'].descriptor</code>","<code>someObject.getPropertyDescriptor('someProperty')</code>,","<code>Object.getPropertyDescriptro(someProperty)</code>"],points:1,correctAnswers:[0],type:"radio",explanation:"\n        <code>Object.getOwnPropertyDescriptor(someObject, 'someProperty')</code>, a static method of the Object\n        is used to retrieve the property descriptor.\n        ",links:["",""]},{category:"js",level:"easy",subcategory:"object",question:"\n            Which statements are true?\n        ",answers:["The right order of prototype search chain is: \n            <ol>\n                <li>Object own properties,</li>\n                <li>Object prototype,</li>\n                <li>Objects prototypes prototype,</li>\n                <li>null, as it is the value last prototype points to</li>\n            </ol>\n            ","<code>Object.getOwnPropertyNames()</code> does not search in prototypes","<code>__proto__</code> should be used to set and get an object prototype, it should be used for \n            inheritance,","<code>Object.setPrototypeOf()</code> may be used for setting an objects prototype to some object","Thanks to prototype each object has access to its ancestors properties"],points:1,correctAnswers:[0,1,3,4],type:"checkbox",explanation:"\n        The only incorrect answer is related to <code>__proto__</code>. <code>__proto__</code> is an object \n        that holds elements prototype setter and getter, and it may be used for inheritance (set the prototype to\n        another object), however it <strong>should not</strong> be used, as it is depreciated. <code>Object.setPrototypeOf()</code>\n        and <code>Object.getPrototypeOf()</code> should be used for above purposes.\n        ",links:["",""]},{category:"js",level:"medium",subcategory:"objects",question:"Fill correct attributes to their object descriptor definitions. Please use only small letters",answers:["{{{}}}: indicates if the property value will be allowed to be changed with an assignment operator,","{{{}}}: indicates if the property will be allowed to be listed with a <code>for..in</code> or with a \n            <code>Object.getOwnPropertyNames()</code> or <code>Object.getOwnPropertySymbols()</code>,","{{{}}}: indicates if the property descriptor will be allowed to be changed,","{{{}}}(){}: a method that will be called if there is an attempt to write a new value under property key,","{{{}}}(){}: a method that will be called each time a value is retrieved from the key,"],correctAnswers:[["writable"],["enumerable"],["configurable"],["set"],["get"]],type:"fill-in",points:5,explanation:"\n            ".concat(Wn(["<strong>writable</strong> attribute indicates if the value will be allowed to be set with an assignment operator,","<strong>enumerable</strong> attribute indicates if the property will be listed with a <code>for..in</code>,\n                <code>Object.getOwnPropertyNames()</code> or <code>Object.getOwnPropertySymboes()</code> methods,","<strong>configurable</code> is an attribute allowing reconfiguration of property descriptor. Note. Once set to \n                true it might be difficult to alter target property, as <code>configurable</code> will not be allowed to change,","<strong>get(), set()</strong> are a getter and a setter, so methods used to put a new value and retireve the \n                value from the key"]),"\n        "),links:["",""]}];function yo(e){return Object(Hn.jsx)("ul",{children:e.map((function(e){return Object(Hn.jsx)("li",{children:"element"},"element")}))})}var go=[{category:"js",level:"easy",subcategory:"variables",question:"Select all <b>correct</b> variable names for JS",answers:["$someVariable, _someOtherVariable","$32someVariable, _someOtherVariable","3circleInARow, some_variable","circle#, some_variable","some-variable, _someOtherVariable","some_variable, _some_Other_Variable"],correctAnswersIds:[0,1,5],type:"checkbox",explanation:"\n            Correct means in this question that there will be no error if a certain name is used, it does not mean that\n            this name should be used. Some variable names make code dirty.\n            Variables in JS must follow rules:<br>\n            ".concat(yo(["names contain of letters, digits, underscores and dolar signs","names cannot start with a letter, must start with a letter, $ or _","names are case sensitive (x != X)","names cannot be JS reserved keywords","names should be written in camel case (\n                    thisIsACamelCase, ThisIsPascalCase, this-is-kebab-case this_is_snake_case). This is not a must and \n                    there will be no error if not followed, however this is a good practice.","names should be meaningfull, so <q>asdf</q> is correct name, but means nothing and should not be used,\n                 where <q>isQuizModeActive</q> seems a better name, as it indicates what variable does, moreover it indicates\n                 that variable is a boolean."]),"\n        "),links:["https://www.w3schools.com/js/js_variables.asp","https://en.wikipedia.org/wiki/Naming_convention_(programming)"]},{category:"js",level:"easy",subcategory:"variables",question:'\n            What will below code produce?\n            <pre class="alert alert-dark">\n    console.log(a)\n    for(let i = 0; i < 10; i++){\n        if (a = 0) var a = 0;\n        a = i;\n    }\n    console.log(a)\n            </pre>\n        ',answers:["9","10","undefined","null","Uncaught ReferenceError: a is not defined"],correctAnswersIds:[2],type:"radio",explanation:"\n            As <q>a</q> is declaired with a <q>var</q> keyword, its definition will be hoisted: brought to the top of \n            this code. Definition means <code>var a;</code>, so it will automaticly be undefined from the begining of code.\n            If a <q>let</q> keyword would be used, then code would produce an error, as <q>a</q> variable definition\n            would not be konwn\n            ".concat(yo(["<code>var</code>, a keyword for defining variables, if used anywhere in a function makes this variable \n                known in whole function scope, as variable is hoisted.","<code>let</code>, a keyword for defining variables, but this variable would be known only in local block\n                scope, so inside {} where this variable was defined. Its scope is visible in child blocks, but not visible in parent scope","<code>const</code>, a keyword similar to <code>let</code>, with the difference that once asigned, cannot\n                be changed. Its scope is visible in child blocks, but not visible in parent scope"]),"\n        "),links:[]},{category:"js",level:"easy",subcategory:"variables",question:'\n            What will below code produce?\n            <pre class="alert alert-dark">\n    console.log(b)\n    {\n        let b = 2;\n        {\n            console.log(b)\n        }\n    }\n            </pre>\n        ',answers:["2","undefined","null","Uncaught ReferenceError: b is not defined"],correctAnswersIds:["3"],type:"radio",explanation:"\n            Let creates only a local, block scope. It is invisible in parent scope, will be visible in child, but \n            declaration is only for current block.\n            ".concat(yo(["<code>var</code>, a keyword for defining variables, if used anywhere in a function makes this variable \n                known in whole function scope, as variable is hoisted.","<code>let</code>, a keyword for defining variables, but this variable would be known only in local block\n                scope, so inside {} where this variable was defined. Its scope is visible in child blocks, but not visible in parent scope","<code>const</code>, a keyword similar to <code>let</code>, with the difference that once asigned, cannot\n                be changed. Its scope is visible in child blocks, but not visible in parent scope"]),"\n        "),links:[]},{category:"js",level:"easy",subcategory:"variables",question:'\n            What will below code produce?\n            <pre class="alert alert-dark">\n            console.log(b)\n    {\n        const b = 2;\n        {\n            console.log(b)\n        }\n    }\n            </pre>\n        ',answers:["2","undefined","null","Uncaught ReferenceError: b is not defined"],correctAnswersIds:["3"],type:"radio",explanation:"\n            Const creates only a local, block scope. It is invisible in parent scope, will be visible in child, but \n            declaration is only for current block.\n            ".concat(yo(["<code>var</code>, a keyword for defining variables, if used anywhere in a function makes this variable \n                known in whole function scope, as variable is hoisted.","<code>let</code>, a keyword for defining variables, but this variable would be known only in local block\n                scope, so inside {} where this variable was defined. Its scope is visible in child blocks, but not visible in parent scope","<code>const</code>, a keyword similar to <code>let</code>, with the difference that once asigned, cannot\n                be changed. Its scope is visible in child blocks, but not visible in parent scope"]),"\n        "),links:[]},{category:"js",level:"easy",subcategory:"form-validation",question:"Please complete below statements",answers:["<b>Prevent default form validation to implement custom one:</b> <br>\n            <code>&lt;form {{{}}}></code>\n            ","<b>Check if form is valid:</b> <br>\n            <code>if (document.querySelector('form').</code>{{{}}}<code>)...</code>","<b>Check if field has not too great value:</b> <br>\n            <code>if (document.querySelector('#someInput').</code>{{{}}}<code>)...</code>"],correctAnswers:[["nonvalidate"],["validity.valid"],["validity.rangeOverflow"]],type:"fill-in",explanation:"\n            ".concat(yo(["<code>&lt;form nonvalidate></code> prevents whole form from default validation, leaving css pseudoclasses\n                and Constraint Validation API to work with","<code>validity</code> is a property delivered with Constraint Validation API, that allows to check\n                &lt;rangeOverflow> for too great values, &lt;vlid> for checking if whole form is valid, and many more."]),"\n        "),links:["",""]},{category:"js",level:"easy",subcategory:"form-validation",question:"Please complete below statements",answers:["<b>Make validity error message: 'wrong input' appear on form</b> <br>\n            <code>document.querySelector('form').{{{}}}('wrong input')></code>\n            ","<b>Check if pattern in input box is not too long</b> <br>\n            <code>if (document.querySelector('#input').</code>{{{}}}<code>)...</code>","<b>Check if mandatory field is filled:</b> <br>\n            <code>if (document.querySelector('#someInput').</code>{{{}}}<code>)...</code>"],correctAnswers:[["setCustomValidity"],["validity.tooLong"],["validity.valueMissing"]],type:"fill-in",explanation:"\n            ".concat(yo(["<code>&lt;form nonvalidate></code> prevents whole form from default validation, leaving css pseudoclasses\n                and Constraint Validation API to work with","<code>validity</code> is a property delivered with Constraint Validation API, that allows to check\n                &lt;rangeOverflow> for too great values, &lt;vlid> for checking if whole form is valid, and many more."]),"\n        "),links:["",""]},{category:"js",level:"easy",subcategory:"DOM-access",question:"Please complete below statements",answers:["<b>Find element with specified Id</b> <br>\n            <code>let found = document.{{{}}}('someId')</code>\n            ","<b>Find all elements with class 'my-class'</b> <br>\n            <code>let found = document.{{{}}}('.my-class')</code>\n            ","<b>Find all 'p' elements in document</b> <br>\n            <code>let found = {{{}}}.('p')</code>\n            "],correctAnswers:[["getElementById"],["querySelectorAll"],["document.getElementsByTagName"]],type:"fill-in",explanation:"\n            ".concat(yo(["<code>getElementById</code> for accessing element by unique Id","<code>getElementsByTagName</code> for accessing NodeList of elements with specific tag,","<code>getElementsByClassName</code> can be used to access NodeList of elements with specified class name,\n                however in this case there is a dot before class name, and this is a css selector, so <code>querySelectorAll</code>\n                will be a right solution. "]),"\n        "),links:["",""]},{category:"js",level:"easy",subcategory:"DOM-access",question:"Please complete below statements",answers:["<b>get all forms from document</b> <br>\n            <code>let forms = document.{{{}}}</code>\n            ","<b>Set page title to 'my new title'</b> <br>\n            <code>{{{}}} = 'my new title</code>\n            ","<b>Find all elements in document with name 'someName'</b> <br>\n            <code>let found = {{{}}}.('someName')</code>\n            "],correctAnswers:[["forms"],["document.title"],["document.getElementsByName"]],type:"fill-in",explanation:"\n            ".concat(yo(["<code>getElementById</code> for accessing element by unique Id","<code>getElementsByTagName</code> for accessing NodeList of elements with specific tag,","<code>getElementsByClassName</code> can be used to access NodeList of elements with specified class name,\n                however in this case there is a dot before class name, and this is a css selector, so <code>querySelectorAll</code>\n                will be a right solution. "]),"\n        "),links:["",""]},{category:"js",level:"easy",subcategory:"DOM-access",question:"Please complete below statements",answers:["<b>get parent element</b> <br>\n            <code>let parent = element.{{{}}}</code>\n            ","<b>Clone node with its children</b> <br>\n            <code>let cloned = element.{{{}}}</code>\n            ","<b>Insert an element before element'</b> <br>\n            <code>element.{{{}}}()</code>\n            "],correctAnswers:[["parentNode"],["cloneNode(true)"],["insertBefore()"]],type:"fill-in",explanation:"\n            ".concat(yo(["<code>parentNode</code> will access a parent component","<code>element.cloneNode</code> makes exect copy of an element. Beware -> Ids that are supposed to be \n                unique will be cloned aswell","<code>insertBefore </code> inserts an element before given node. "]),"\n        "),links:["",""]},{category:"js",level:"easy",subcategory:"DOM-access",question:'\n            What will be the effect of below code\n            <pre class="alert alert-dark">\n&lt;div id="grand-parent">            \n    &lt;div id="parent">\n        &lt;div id="child-1">&lt;/div>\n        &lt;div id="child-2">&lt;/div>\n        &lt;div id="child-3">&lt;/div>\n    &lt;div>\n&lt;div>\n&lt;script>\n    let child1 = document.getElementById(\'child-1\');\n    let newElement = document.createElement(\'div\');\n    child1.parentNode.insertBefore(newElement);\n&lt;/script>\n            </pre>\n        ',answers:["<code>newElement</code> will be inserted before the <code>#parent</code> element, and will be a direct child\n            of <code>#grand-parent</code>","<code>newElement</code> will be inserted before the <code>#child-1</code> element as a direct child of \n            <code>#parent</code> element","<code>newElement</code> will be inserted as a sibling of the <code>#grandparent</code> node","Will not be inserted at all, as there is no possiblity to get to a parent element in css."],correctAnswersIds:["0"],type:"radio",explanation:"\n            Const creates only a local, block scope. It is invisible in parent scope, will be visible in child, but \n            declaration is only for current block.\n            ".concat(yo(["A <code>parentNode</code> property of <code>Node</code> reaches parent of element on the left","<code>someElement.insertBefore(element)</code> method of <code>Node</code> inserts a element as a sibling of \n                someElement, before <code>someElement</code>","There is no possiblity to reach a parent element in css, but that has nothing to do with this question","Correct answer will be that <code>newElement</code> will be inserted as a child of <code>grand-parent</code>\n                before <code>#parent</code> node"]),"\n        "),links:[]},{category:"js",level:"easy",subcategory:"DOM-access",question:"What are potential drawbacks of creating new elements with a <code>innerHTML</code>?",answers:["It is potentilay dangerous, someone may inject a different code","DOM operatoins are exepnsive, it is better to change only necessary elements in DOM, \n             and with <code>innerHTML</code> too many elements get recreated","No drawbacks, this solutions is easy for a developer","event listeners get lost if were attached to recreated elements","No drawbacks, recreation of more elements that intended is good, because it is good to restart some \n            elements, thanks to this they will not get frozen","<code>innerHTML</code> accepts a string, and string is not validated, so easy to commit a mistake"],correctAnswersIds:[0,1,3,5],type:"checkbox",explanation:"\n            DOM operations are slow, so frameworks like React or Angular are designed to change only necessary elements,\n            but in pure JS whole content under <code>innerHTML</code> gets recreated, so this is slow. As a string \n            is being injected it is possible to inject some dangerous code. Moreover this string will not be \n            validated, so it is possible to commit a mistake. Event listeners get lost if there were any attached\n            to recreated elements. Ofcourse someone may intend to clear event listeners, but this is not the proper\n            way to do so.\n            ".concat(yo([""]),"\n        "),links:["https://www.w3schools.com/js/js_variables.asp","https://en.wikipedia.org/wiki/Naming_convention_(programming)"]},{category:"js",level:"medium",subcategory:"DOM-access",question:'Please complete below statements\n<pre class="alert alert-dark">\n    &lt;div id="grand-parent">            \n        &lt;div id="parent">\n            &lt;div id="child-1">&lt;/div>\n            &lt;div id="child-2">&lt;/div>\n            &lt;div id="child-3">&lt;/div>\n        &lt;div>\n    &lt;div>\n    &lt;script>\n        var parent = document.getElementById(\'parent\');\n        var grandparent = document.querySelector(\'#grand-parent\');\n        var child1 = document.getElementById(\'child-1\');\n        var child2 = document.getElementById(\'child-2\');\n        var child3 = document.getElementById(\'child-3\');\n        ...\n</pre>\n        ',answers:["<b>To remove <code>#child-2</code> element</b> <br>\n            <code>parent.{{{}}}(child2)</code>\n            ","<b>To remove <code>#child-1</code> element'</b> <br>\n            <code>parent.{{{}}}(child2, child1)</code>\n            ","<b>Get <code>#child-2</code> node</b> <br>\n            <code>let ch2 = child1.{{{}}};</code>\n            "],correctAnswers:[["removeChildNode"],["replaceNode"],["nextSibling.nextSibling"]],type:"fill-in",explanation:"\n            ".concat(yo(["<code>parentElement.remove(targetChild)</code> removes a child element","<code>parentElement.replace(child2, child1)</code> replaces the <code>child1</code> element with \n                 the <code>child2</code> element, and as <code>child2</code> already exists in DOM it is remved from previous position,\n                 so final effect in this case is that <code>child1</code> is removed from DOM","This is tricky. As there is a new line symbol after a child 1 element, there will be an extra\n                text node generated after child 1 element, so to get from it to child 2 we need to put <code>nextSibling</code>\n                two times."]),"\n        "),links:["",""]},{category:"js",level:"easy",subcategory:"DOM-access",question:"What statements are ture about shadow DOM elements",answers:["Their great adventage is encapsulation","css rules from inside shadow-root will not effect elements outside shadow-root","css rules from outside shadow-root will influence elements inside shadow-root","When shadow root is created in <code>{mode:'open'}</code>, it is possible to acces its components with\n            <code>document.getElementById('someElementInsideShadowRootId')</code>","When shadow root mode is closed, it is not possible to access its content without some sophisticated hacks","It is not possible to inspect a shadow root element with dev tools"],correctAnswersIds:[0,1,4],type:"checkbox",explanation:"\n            ".concat(yo(["Shadow components are created to provide encapsulation, this is thei main purpose,","css from inside a shadow element will not affect rest of DOM, this is purpose of encapsulation","css from outside of a shadow element will not affect inside of a shadow element, because of encapsulation","To access inside of a shadow DOM component it is needed to find its host, and access it with a <code>shadowRoot</code>,\n                like this <code>someShadowHost.shadowRoot.getElementById('someId')</code>, accessing shadow root just with a document is \n                not possible","It is not possible to access closed mode shadow DOM without sophisticated hacking","It is possible to right-click on a shadow element and inspect it with dev tools. May be tested with an input element\n                as html input elements are shadow elements."]),"\n        "),links:["https://www.w3schools.com/js/js_variables.asp","https://en.wikipedia.org/wiki/Naming_convention_(programming)"]},{category:"js",level:"easy",subcategory:"DOM-access",question:"What statements are ture about document fragment",answers:["Document fragment is a minimal document object not attached to DOM tree","Document fragment is perfect for preparing a part of component before adding it as a whole to DOM","Thanks to preparing a document fragment before adding it to DOM, code is faster due to less DOM operations","Preparation of a document fragment instead of adding a lot of elements one by one to DOM improves user experience","Methods like <code>append(element)</code>, <code>prepend(element)</code>, <code>querySelectorAll</code>, \n            <code>getElementById(element)</code> work with a <code>DocumentFragment</code>"],correctAnswersIds:[0,1,2,3,4],type:"checkbox",explanation:"\n            All statements are true. Document fragment is a no DOM attached object, minimal document version with no parent.\n            Good usage of a document fragment is to prepare a part of a document before adding it to DOM, to speed up \n            operations, and improve user experience. Some DOM access methods work with a <code>DocumentFragment</code>\n            ".concat(yo([]),"\n        "),links:["https://www.w3schools.com/js/js_variables.asp","https://en.wikipedia.org/wiki/Naming_convention_(programming)"]},ho,bo,fo];var vo,wo=[{category:"css",level:"easy",subcategory:"",question:"",answers:[""],correctAnswers:[0],type:"checkbox",explanation:"\n            ".concat((vo=["",""],Object(Hn.jsx)("ul",{children:vo.map((function(e){return Object(Hn.jsx)("li",{children:"element"},"element")}))})),"\n        "),links:["",""]}];var jo=[{category:"css",level:"easy",subcategory:"specifity",question:"Calculate specifity for each selector:",answers:["<code>#body-section#nav.horizontal li:first-child</code> {{{}}}","<code>* body #header#navigation.horizontal li:not(.active)<code> {{{}}}","<code>body>html .container-fluid.col_8.alert.alert-success p b</code> {{{}}}"],correctAnswers:[["221"],["222"],["44"]],type:"fill-in",explanation:"\n            ".concat(Wn(["<code>#body-section#nav.horizontal li:first-child</code>: there are 2 id selectors, \n                1 class and one pseudo-class selector, and one tag selector. So 2*100 + 2*10 + 1 makes 221.","<code>*</code> adds no specifity, 2 id selectors, \n                2 class selectors: <code>.horizontal</code>, <code>.active</code> and a two tag selectors \n                <code>li</code> and <code>body</code>. A <code>not</code> pseudo-class adds no specifity. \n                So: 2*100 + 2*10 + 2*10 equals 222,\n                ","Class selectors: <code>.container-fluid</code>, <code>col_8</code>, <code>alert</code>,\n                <code>alert-success</code>, tag selectors: <code>body</code>, <code>html</code>, <code>p</code>,\n                <code>b</code>, so 4 class selectors and 4 tag selectors so 4*10 + 4 equals 44."]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"selectors",question:"<code>!important</code> keyword should be avoided, but in some circumstances it might be used. \n            Extract those circumstances from below answers.",answers:["<q>user stylesheets</q>","A complex project with a lot of complicated selectors","As a temporary work-around","For testing and debugging","Rule really important, for example in media queries,\n             an element must be hidden on smaller devices and no risk should be taken that something will interfere","Some complex html and css structure makes it really hard to find other solution","Customizing a third company element"],correctAnswers:[0,3,4,6],type:"checkbox",explanation:"\n            ".concat(Wn(["User stylesheets are always overwritten by page css, so to change anything without an important \n                keyword would be not possible in many use cases,","Can be used for testing and debugging, as test code is used only in a specific test set and is separated\n                from developement, in separate files,","If applied to some important rule in media queries, sometimes important usege might be justified","Can be justified for customizing third-party code","Never should be used as a temporary solution, as such solutions become permanent solutions,","Never should be used only because something is complex"]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"selectors",question:"Inline styling is not the best practice. However it is left in web developement for some reasons. Mark\n        situations where inline styling usage is justified:",answers:["A mouse-movable element on web page","Some animations","A temporary work-around","Overwrite just one rule, just change text background in a single place in a <code>setTimeout</code> function","When writing in a framework like <i>Angular</i>, because components are encapsulated anyway","In shadow DOM element, because a shadow DOM is only a small portion of encapsulated code, and it is easy to \n            change it anyway"],correctAnswers:[0,1],type:"checkbox",explanation:"\n            To understand when inline styling is justified it is a good idea to work with a css framework, to see \n            how classes an related HTML structure can be build. There is a set of small reusable and generic \n            classes changing only one behaviour. That is why it is better to write some small classes having lets say\n            a <i>background-color: red</i> and manipulate those classes. Then if a specific element needs to be changed, \n            it is done in one place. If the whole set of such elements needs changing, then it can also be done in only a\n            single place.\n            ".concat(Wn(["Inline is perfect for implementing a mouse-movable element, as while mouse moves with the element, its \n                location on the page is changed a great number of times and it is not possible to do this with classes","Some animations, for the same reason mosue moved elements are allowed, but in case of animations it is \n                better to considerate using keyframes and transitions, as transition functions may be applied. It is alwasy\n                better to use css based animations in the first place, and avoid JS as long as it can be avoided,","No temporary work-around solutions are allowed in programming ever, as they become permanent solutions, and\n                later it is impossible to maintain such code. Remember, that a lot of people work with code at the same time,","Overwriting a single rule in setTimeout can be done with an use of a class that changes only this small \n                behaviour. If such small behaviour is used in more places later it is easier to maintain it when it is \n                in a class","In case of encapsulation it is also a better idea to keep rules in classes, as it is easier to maintain."]),"\n        "),links:["",""]}];var Oo=[{category:"css",level:"easy",subcategory:"pseudo-classes",question:"Fill in pseudoclasses matching below definitions. Please use the \n            double quote if a quotation mark is needed.",answers:["<code>:</code>{{{}}} - select every single element on the page","<code>:</code>{{{}}} - select every descendant with attribute <code>data-attr</code> having value \n            'someValue' of any div in document",'<code>[attribute</code>{{{}}}<code>"value"]</code> select any element having the \'attribute\' containing \n            a "value" substring,','<code>[src</code>{{{}}}<code>".jpg"]</code> select any element having the \'src\' attribute ending with\n            ".jpg",'],correctAnswers:[["*"],['div [data-attr="someValue"]'],["*="],["$="]],type:"fill-in",points:4,explanation:"\n            ".concat(Wn(["<code>*</code>: selects each element,",'<code>div [data-attr="someValue"</code> a space selects all descendant elements, where the rest of \n                construction is porper attribute selection,',"<code>*=</code> will match substrings in the attribute value,","<code>$=</code> will match each element having attribute ending with specified value."]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"pseudo-classes",question:"Fill in pseudoclasses matching below definitions. Please use the \n            double quote if a quotation mark is needed.",answers:['<code>[data-content</code>{{{}}}<code>"telephone"]</code> select each element having the \'data-content\'\n            attribute value containing word "telephone" ','<code>[data-content</code>{{{}}}<code>"Time"]</code> select each element having the \'data-content\'\n            attribute value starting with the word "Time" ','<code>[data-lang</code>{{{}}}<code>"en"]</code> select each element having the \'data-lang\'\n            attribute value starting with the word "en" or "en-" '],correctAnswers:[["~="],["^="],["|="]],type:"fill-in",points:3,explanation:"\n            ".concat(Wn(["<code>~=</code>: is for selecting an attribute containing some specified word. Word has to be \n                separated with spaces,","<code>^=</code>: is for selecting an attirbute starting with a string","<code>|=</code> is for language specific matches, like 'pl' or 'en-br',"]),"\n        "),links:["",""]}];var To=[{category:"css",level:"easy",subcategory:"pseudo-classes",question:"Fill in pseudoclasses matching below definitions",answers:["<code>:</code>{{{}}} - select each element that has no children","<code>:</code>{{{}}} - select each second child of any parent","<code>:</code>{{{}}} - select each penultimate element of any parent"],correctAnswers:[["empty"],["nth-child(2)"],["nth-last-child(2)"]],type:"fill-in",points:3,explanation:"\n            ".concat(Wn(["<code>:empty</code>: selects all elements having no children,","<code>:nth-child(2)</code> selects each second child of each element,","<code>:nth-last-child(2)</code> selects each penultimate child"]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"selectors",question:'\n        Which element would be chosen with <code>#outlet div:nth-child(1)</code>\n<pre class="alert alert-dark">\n    &lt;div id="outlet">\n        &lt;p>Some elements&lt;/p>\n        &lt;div>1&lt;/div>\n        &lt;div>2&lt;/div>\n        &lt;div>3&lt;/div>\n    &lt;/div>\n</pre>',answers:["None of elements","The div with innerText '1'","The div with innerText '2'","Parent div element with id equal to outlet"],points:1,correctAnswers:[0],type:"radio",explanation:"\n            None element will be selected, as above selector selects a first child element if it is a 'div' element, and \n            in this case first child is a 'p' element. Interesting thing here is the fact, that in case of \n            <code>element.childNodes</code> in above case there would be listed empty text elements, that would appear \n            due to next-line signs after each html line. But if nth-child pseudo-class is used this empty text nodes\n            are not visible at all.\n        ",links:["",""]},{category:"css",level:"easy",subcategory:"pseudo-classes",question:"\n        Which of below would select all odd child elements?",answers:["<code>nth-child(odd)</code>","<code>nth-child(2n-1)</code>","<code>nth-child(2n+1)</code>","<code>nth-child(n+1)</code>","<code>odd-child</code>","<code>nth-last-child(2n-1)</code>"],points:2,correctAnswers:[0,1],type:"checkbox",explanation:"\n        ".concat(Wn(["<code>nth-child(odd)</code> and <code>nth-child(2n-1)</code>: are correct answers,","<code>:nth-child(2n+1)</code> would ommit the first element, so would list 3, 5, 7 ...","<code>:nth-child(n+1)</code> selects 2, 3, 4,.... so not correct at all","<code>:odd-child</code> this pseudo-class does not exist at all,","<code>:nth-last-child(2n-1)</code> this element will select either odd or event elements, depending on\n            number of children, so not correct."])),links:["",""]},{category:"css",level:"easy",subcategory:"pseudo-classes",question:"Fill in pseudoclasses matching below definitions",answers:["<code>:</code>{{{}}} - selects all mandatory fields","<code>:</code>{{{}}} - all elements that are not out or allowed range","<code>:</code>{{{}}} - all elements that have not valid input, but only if user interacted with it","<code>:</code>{{{}}} - all elements that have too great or too small value"],correctAnswers:[["required"],["in-range"],["user-invalid"],["out-of-range"]],type:"fill-in",points:4,explanation:"\n            ".concat(Wn(["<code>:required</code>: selects all mandatory fields,","<code>:in-range</code>: not outside required range, so in range,","<code>:user-invalid</code> selects all invalid inputs when user interacted with them","<code>:out-of-range</code> if value is too great or too small, than it is out of range"]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"pseudo-classes",question:"Fill in pseudoclasses matching below definitions",answers:["<code>:</code>{{{}}} - used on a parent element to style it if its descendant element has foucs","<code>:</code>{{{}}} - styles a selected element","<code>:</code>{{{}}} - user agent dependant focused element. \n                Different bahaviour when tab pressed and different when mouse selected,","<code>:</code>{{{}}} - for example button between mouse left button down and left button up"],correctAnswers:[["focus-within"],["selection"],["focus-visible"],["active"]],type:"fill-in",points:4,explanation:"\n            ".concat(Wn(["<code>:focus-whithin</code>: should be use on a parent to style it if descendent element is focused,","<code>:selection</code>: should be used to style a highlighted element,","<code>:focus-visible</code> to differ styling on mouse click and on tab key select","<code>:active</code> this styling will be applied for element that is activated, so between left mouse up and \n                left mouse down"]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"pseudo-classes",question:"Fill in pseudoclasses matching below definitions",answers:["<code>:</code>{{{}}} - selects all not visited links","<code>:</code>{{{}}} - styles an already seen link","<code>:</code>{{{}}} - an element that is a destination of the link"],correctAnswers:[["link"],["visited"],["target"]],type:"fill-in",points:3,explanation:"\n            ".concat(Wn(["<code>:link</code>: styles all not visited links,","<code>:visited</code>: styles all not visited links,",'<code>:target</code> styles an element that is the target of the link. May be used for example to \n                style a link destination that is on the same page, <code>&lt;a href="#samePageId"></code>',"Interesting thing is the fact, that there is no possiblity to get information of what links were \n                visited with js. This is due to security reasons."]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"pseudo-classes",question:"Fill in pseudoclasses matching below definitions",answers:["<code>:</code>{{{}}}<code>(.someClass)</code> - select all elements that do not have 'someClass' in their\n            classList","<code>:</code>{{{}}}(div, p, span):hover - short hand for <code>div:hover</code>, <code>p:hover</code>, <code>span:hover</code>, \n            adds extra class specifity.","<code>:</code>{{{}}} - select the element that has the shadow-root attached, from inside this shadow-root"],correctAnswers:[["not"],["is"],["host"]],type:"fill-in",points:3,explanation:"\n            ".concat(Wn(["<code>:not(selector)</code>: styles all elements not matched by the 'selector',","<code>:is(list-of-selectors)</code>: takes each selector from the list and applies styling on the right\n                . <code>is</code> also adds class specifity. There is a <code>with</code> pseudo-class, that works in\n                similar way, with the difference, that id does not add any specifity,","<code>:host</code> should be used to match shadow-root host from inside this shadow-root."]),"\n        "),links:["",""]}];var xo=[{category:"css",level:"easy",subcategory:"pseudo-elements",question:'\n        What will show up?\n<pre class="alert alert-dark">\n    &lt;style>\n        div{\n            position:relative;\n            width:0;\n            height:0;\n        }\n        div:before,div:after{\n            position:absolute;\n            width: 50px;\n            height: 50px;\n            background-color:black;\n            border-radius:50%;\n        }\n        div:before{\n            left: 100px;\n            top: 100px;\n        }\n        div:after{\n            left:250px;\n            top:100px;\n        }\n    &lt;/style>\n    &lt;div>\n    &lt;/div>\n</pre>',answers:["Nothing","Onle black circle","Two black circles","Circles and a dot div element"],points:1,correctAnswers:[0],type:"radio",explanation:"\n        Nothing will show up, as pseudo elements need any content property.\n        ",links:["",""]},{category:"css",level:"easy",subcategory:"pseudo-elements",question:"\n        Mark true statements\n        ",answers:["Pseudo elements are good for aligning elements,","Pseudo elements are good for creation of different shapes,","Pseudo elements are good for adding some content to web page,","Pseudo elements are good for creation of tool tips,","Pseudo elements are for example:nth-child, :active, :invalid","Pseudo element is for example a div element that has a <code>display:none</code> property, \n            it is pseudo, because it is in DOM but is not displayed"],points:4,correctAnswers:[0,1,2,3],type:"checkbox",explanation:"\n        Pseudo elements are <code>:before</code>, <code>:after</code>, and they are created only with css,\n        it is not possible to access them with js, except for checking their size, they are good for:\n        aligning elements, creation of shapes, adding content to page, creating tool-tips, and mutch more...\n        ",links:["",""]}];function So(e){return Object(Hn.jsx)("ul",{children:e.map((function(e){return Object(Hn.jsx)("li",{children:"element"},"element")}))})}var ko=[{category:"css",level:"medium",subcategory:"box-model",question:'What size (not including margins, so width and height returned by \n            document.querySelector(\'.test-div\').getBoundingClientRect()\n        ) will element described with below code have\n        <pre class="alert alert-dark">\n&lt;style>\n    *{box-sizing: padding-box;}\n    .test-div{\n        position: relative;\n        display: inline-block;\n        width: 100px;\n        height: 100px;\n        margin-top: 10px;\n        margin-bottom: 15px;\n        margin-left: 20px;\n        margin-right: 25px;\n        outline: solid transparent 5px;\n        border-top: solid transparent 10px;\n        border-bottom: solid transparent 15px;\n        border-left: solid transparent 20px;\n        border-right: solid transparent 25px;\n        padding: 10px;\n    }\n&lt;/style>\n&lt;div class="test-div">&lt;/div>\n        </pre>\n        ',answers:["width: 165px, height: 145px;","width: 185px, height: 165px;","width: 175px, height: 155px;","width: 195px, height: 175px;","width: 180px, height: 160px;","none, as element is transparent, and will not be visible at all"],correctAnswers:[0],type:"radio",explanation:"\n            ".concat(So(["<code>box-sizing: padding-box</code>, so padding already included in <code>width: 100px;</code> \n                and <code>height: 100px;</code>","As <b>not</b> <code>border-box</code> border size has to be added to width and height, so \n                <code>width = 100px + border-left + border-right = 145px;</code>, <code>height = 100px \n                + border-top + border-bottom = 165px</code>","Outline is never taken into account, moreover it will overlap marign so it never adds any extra space","Color transparency has nothing to do with element size on page. It will be invisible, but as position \n                is relative it will take space in layout and affect other elements position.",'This solution is based on <a hfer="https://developer.mozilla.org/pl/docs/Web/CSS/box-sizing" target="_blank"\n                developer mozilla</a>, however due to <a href="https://css-tricks.com/almanac/properties/b/box-sizing/">css-tricks</a>\n                padding-box works only on firefox. In my case every browser I have does not support this value, even firefox. However\n                default behaviour (content-box) in all browsers behave like padding box.']),"\n        "),links:["https://developer.mozilla.org/pl/docs/Web/CSS/box-sizing","https://css-tricks.com/almanac/properties/b/box-sizing/"]},{category:"css",level:"medium",subcategory:"",question:'What will be vertical distance between divs from below code:\n        <pre class="alert alert-dark">\n&lt;style>\n    .test-div{\n        position:relative;\n        height: 50px;\n        width: 30px;\n        margin-top: 30px;\n        margin-bottom: 150px;\n        margin-left: 40px;\n        margin-right: 50px;\n        padding-top: 40px;\n        padding-bottom: 50px;\n        border: 5px solid black;\n        outline: 10px solid transparent;\n    }        \n&lt;/style>\n&lt;div class = "test-div">&lt;/div>\n&lt;div class = "test-div">&lt;/div>\n        </pre>\n        ',answers:["150px","180px","270px","280px","300px"],correctAnswers:[0],type:"radio",explanation:"\n            ".concat(So(["Divs are block elements, so will be placed one below another","Margins will collapse, so biggest of vertical margins between elements will be taken, 150px","Div actual height will be 50px + paddings + borders so 150px, but spacing is created only by margins","No outline is taken into accunt in calculating spacing"]),"\n        "),links:["",""]},{category:"css",level:"medium",subcategory:"",question:'What will be .test-div actual height, returned by <code>document.querySelector(\'.test-div\').getBoundingClientRect().height?\n        <pre class="alert alert-dark">\n&lt;style>\n    .test-div{\n        position:relative;\n        height: 50px;\n        width: 30px;\n        margin-top: 30px;\n        margin-bottom: 150px;\n        margin-left: 40px;\n        margin-right: 50px;\n        padding-top: 40px;\n        padding-bottom: 50px;\n        border: 5px solid black;\n        outline: 10px solid transparent;\n    }        \n&lt;/style>\n&lt;div class = "test-div">&lt;/div>\n&lt;div class = "test-div">&lt;/div>\n        </pre>\n        ',answers:["150px","50px","140px","170px","260px","240px"],correctAnswers:[0],type:"radio",explanation:"\n            ".concat(So(["Div actual height will be 50px + paddings + borders so 150px, but spacing is created only by margins","No outline is taken into accunt in calculating element size","Margin is not element size, it is spacing between elements"]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"",question:"What paris: propery value are valid",answers:["margin-top: 30px;","outline-bottom: 20px;","outline-bottom: 20px solid white;","border-radius: 5px;","outline-radius: 4px;","padding-left: 4px;"],correctAnswers:[0,3,4],type:"checkbox",explanation:"\n            ".concat(So(["No possiblity to set outline-bottom, top, left or right sizes, outline size is constatn on all edges","No possiblity to set outline-radius"]),"\n        "),links:["",""]},{category:"css",level:"easy",subcategory:"form-validation",question:"Mandatory fields should have red outline, fields with correct value should have green background,\n            fields with not proper value should have red background. Use proper pseudo classes",answers:["<code>input:</code>{{{}}}<code>{background-color:red;}</code>","<code>input:</code>{{{}}}<code>{background-color:green;}</code>","<code>input:</code>{{{}}}<code>{outline: red solid thin;}</code>"],correctAnswers:[[":invalid"],[":valid"],[":required"]],type:"fill-in",explanation:"\n            ".concat(So(["<code>&lt;form nonvalidate></code> prevents whole form from default validation, leaving css pseudoclasses\n                and Constraint Validation API to work with","<code>validity</code> is a property delivered with Constraint Validation API, that allows to check\n                &lt;rangeOverflow> for too great values, &lt;vlid> for checking if whole form is valid, and many more."]),"\n        "),links:["",""]},Oo,To,xo];function No(){return ko.concat(jo)}var Io=[{category:"html",level:"easy",subcategory:"form-validation",question:"Please complete below statements",answers:['<b>This input is mandatory:</b> <br><code>&lt;input type="number" </code>{{{}}}<code>="</code>{{{}}}<code>" </code>','<b>This input should have value greater or equal to 6, but not greater then 10:</b> <br>\n            <code>&lt;input type="number" </code>{{{}}}<code>="6" </code>{{{}}}<code>="10"</code>'],correctAnswers:[["required","required"],["min","max"]],type:"fill-in",explanation:"\n            ".concat(function(e){return Object(Hn.jsx)("ul",{children:e.map((function(e){return Object(Hn.jsx)("li",{children:"element"},"element")}))})}(["<code>min</code>, <code>max</code> are properties for minimal and maximum value","<code>required</code> is a property for a mandatory field","<code>min-length</code>, <code>max-length</code> is a property for minimal and maximum length in characters","<code>pattern</code> is for validation against regular expression","<code>type</code> is for checking if data is of specified type, like email, address or telephone."]),"\n        "),links:["",""]}];function Po(e){for(var t=[],n=e.map((function(e,t){return{index:t,content:e}})),o=0;o<e.length;o++){var a=Eo(n.length);t.push({originalIndex:n[a].index,content:n[a].content}),n.splice(a,1)}return t}function Ao(e,t,n){var o=function(e,t){var n=Co(t);function o(t){return t.level===e}return console.log(n),n.filter(o)}(t,n),a=o.length;if(a<e)return[];if(a===e)return o;for(var r=[],i=0;i<e;i++){var s=Eo(a);r.push(o[s]),o.splice(s,1),a=o.length}return console.log(r),r}function Eo(e){var t=Math.floor(e);return Math.floor(Math.random()*t)}function Co(e){var t,n,o,a,r=[];return e.includes("js")&&(r=(t=r).concat.apply(t,Object(he.a)(go))),e.includes("ts")&&(r=(n=r).concat.apply(n,Object(he.a)(wo))),e.includes("css")&&(r=(o=r).concat.apply(o,Object(he.a)(No()))),e.includes("html")&&(r=(a=r).concat.apply(a,Object(he.a)(Io))),r}var Lo=function(e){var t=Object(Cn.a)(e.categoriesHandel,2),n=(t[0],t[1]),o=Object(Cn.a)(e.hardnessLevelHandel,2),a=(o[0],o[1]),r=Object(Cn.a)(e.nrOfQuestionsHandel,2),i=(r[0],r[1]),c=Object(Cn.a)(e.currentQuestionNrHandel,2),l=(c[0],c[1]),d=Object(Cn.a)(e.setOfQuestionsHandel,2),p=(d[0],d[1]),m=e.setCurrentAnswers;function u(e){return["radio","checkbox"].includes(e.type)}return e.answers,Object(Hn.jsx)("div",{className:"container",children:Object(Hn.jsxs)("form",{onSubmit:function(e){e.preventDefault();var t=function(e){var t=e.target.cat,n=[];return t.forEach((function(e){e.checked&&n.push(e.value)})),n}(e),o=e.target.hardness.value,r=parseInt(e.target.nrQuestions.value);n(t),a(o),i(r);var c=Ao(r,o,t);!function(e){var t,n=Object(s.a)(e);try{for(n.s();!(t=n.n()).done;){var o=t.value;if(u(o)){var a=Po(o.answers);o.answers=a}}}catch(r){n.e(r)}finally{n.f()}}(c),p(c),m(Object(he.a)(Array(r)).map((function(e){return[]}))),l(0)},children:[Object(Hn.jsxs)("div",{children:[Object(Hn.jsx)("h4",{children:"Select category"}),Object(Hn.jsxs)("div",{className:"form-check form-switch",children:[Object(Hn.jsx)("input",{className:"form-check-input",type:"checkbox",id:"jsCatSwitch",name:"cat",value:"js",defaultChecked:!0}),Object(Hn.jsx)("label",{className:"form-check-label",htmlFor:"jsCatSwitch",children:"JS"})]}),Object(Hn.jsxs)("div",{className:"form-check form-switch",children:[Object(Hn.jsx)("input",{className:"form-check-input",type:"checkbox",id:"jsCatSwitch",name:"cat",value:"ts"}),Object(Hn.jsx)("label",{className:"form-check-label",htmlFor:"jsCatSwitch",children:"TS"})]}),Object(Hn.jsxs)("div",{className:"form-check form-switch",children:[Object(Hn.jsx)("input",{className:"form-check-input",type:"checkbox",id:"jsCatSwitch",name:"cat",value:"css"}),Object(Hn.jsx)("label",{className:"form-check-label",htmlFor:"jsCatSwitch",children:"CSS"})]}),Object(Hn.jsxs)("div",{className:"form-check form-switch",children:[Object(Hn.jsx)("input",{className:"form-check-input",type:"checkbox",id:"jsCatSwitch",name:"cat",value:"html"}),Object(Hn.jsx)("label",{className:"form-check-label",htmlFor:"jsCatSwitch",children:"HTML"})]})]}),Object(Hn.jsxs)("div",{children:[Object(Hn.jsx)("h4",{children:"Select hardness level"}),Object(Hn.jsxs)("div",{className:"form-check",children:[Object(Hn.jsx)("input",{type:"radio",className:"form-check-input",id:"radioEasy",name:"hardness",value:"easy",defaultChecked:!0}),Object(Hn.jsx)("label",{className:"form-check-label",htmlFor:"radioEasy",children:"Easy"})]}),Object(Hn.jsxs)("div",{className:"form-check",children:[Object(Hn.jsx)("input",{type:"radio",className:"form-check-input",id:"radioMedium",name:"hardness",value:"medium"}),Object(Hn.jsx)("label",{className:"form-check-label",htmlFor:"radioMedium",children:"Medium"})]}),Object(Hn.jsxs)("div",{className:"form-check",children:[Object(Hn.jsx)("input",{type:"radio",className:"form-check-input",id:"radioHard",name:"hardness",value:"hard"}),Object(Hn.jsx)("label",{className:"form-check-label",htmlFor:"radioHard",children:"Hard"})]})]}),Object(Hn.jsxs)("div",{children:[Object(Hn.jsx)("h4",{children:"Select nr of questions"}),Object(Hn.jsxs)("div",{className:"form-check",children:[Object(Hn.jsx)("input",{type:"radio",className:"form-check-input",id:"nrQuestions1",name:"nrQuestions",value:"3",defaultChecked:!0}),Object(Hn.jsx)("label",{className:"form-check-label",htmlFor:"nrQuestions1",children:"3"})]}),Object(Hn.jsxs)("div",{className:"form-check",children:[Object(Hn.jsx)("input",{type:"radio",className:"form-check-input",id:"nrQuestions2",name:"nrQuestions",value:"10"}),Object(Hn.jsx)("label",{className:"form-check-label",htmlFor:"nrQuestions2",children:"10"})]}),Object(Hn.jsxs)("div",{className:"form-check",children:[Object(Hn.jsx)("input",{type:"radio",className:"form-check-input",id:"nrQuestions3",name:"nrQuestions",value:"20"}),Object(Hn.jsx)("label",{className:"form-check-label",htmlFor:"nrQuestions3",children:"20"})]}),Object(Hn.jsx)("button",{type:"submit",className:"btn btn-primary mt-3",children:"Submit"})]})]})})};function Ho(e,t){var n=zo(e),o=[];console.log(n),console.log(t),Bo(e,t)||console.error("quizAnswerEvaluator, getCorrectnessReport: userAnswers and allQuestionDescriptors are unequal in lehgth");for(var a=e.length,r=0;r<a;r++){var i=e[r].type;Uo(e[r].answers,t[r],i)?o.push(Mo(e[r])):o.push(Do(e[r],t[r]))}return o}function Mo(e){var t=e.type,n=(e.answers,e.correctAnswersIds),o=(e.correctAnswers,e.question),a=e.answers;return"fill-in"===t?{isCorrect:!0,question:o,allAnswers:a,correctAnswers:e.correctAnswers}:{isCorrect:!0,question:o,allAnswers:a,correctAnswers:Fo(e,n)}}function Do(e,t){return"fill-in"===e.type?function(e,t){e.correctAnswers}(e):function(e,t){e.answers;var n=Wo(e.correctAnswersIds),o=Wo(t),a=e.question,r=e.answers,i=function(e,t){var n,o=[],a=e.concat(t),r=Object(s.a)(a);try{for(r.s();!(n=r.n()).done;){var i=n.value,c=e.includes(i),l=t.includes(i);c&&l&&o.push(i)}}catch(d){r.e(d)}finally{r.f()}return o}(o,n),c=Ro(o,n),l=Ro(n,o),d=Fo(e,i),p=Fo(e,c),m=Fo(e,l);return{isCorrect:!1,question:a,allAnswers:r,correctAnswersContentGivenByUser:d,incorrectAnswersContentGivenByUser:p,correctAnswersOmmitedByUser:m}}(e,t)}function Ro(e,t){var n,o=[],a=Object(s.a)(e);try{for(a.s();!(n=a.n()).done;){var r=n.value;t.includes(r)||o.push(r)}}catch(i){a.e(i)}finally{a.f()}return o}function Fo(e,t){var n=Wo(t),o=[],a=e.answers;function r(e){return function(t){return t.originalIndex===e}}var i,c=Object(s.a)(n);try{for(c.s();!(i=c.n()).done;){var l=i.value;o=a.find(r(l)).content}}catch(d){c.e(d)}finally{c.f()}return o}function Uo(e,t,n){if(!Array.isArray(e)||!Array.isArray(e))return console.error("quizANswerEvaluator, isSingleAnswerCorrect: one of given arrays is not an array"),console.log(e),console.log(t),!1;if("radio"===n||"checkbox"===n)return function(e,t){var n=Object(he.a)(qo(e)),o=Object(he.a)(qo(t));if(e.length!==t.length)return!1;var a,r=Object(s.a)(n);try{for(r.s();!(a=r.n()).done;){var i=a.value,c=o.indexOf(i);if(-1===c)return!1;o.splice(c,1)}}catch(l){r.e(l)}finally{r.f()}return!0}(e,t);if("fill-in"===n){if(!Bo(e,t))return!1;for(var o=e.length,a=0;a<o;a++)if(!_o(e[a],t[a]))return!1;return!0}}function Bo(e,t){var n=[e.length,t.length];return n[0]===n[1]}function _o(e,t){if(!Bo(e,t))return!1;for(var n=e.length,o=0;o<n;o++)if(e[o]!==t[o])return!1;return!0}function qo(e){var t,n=Object(he.a)(e),o=Object(s.a)(n);try{for(o.s();!(t=o.n()).done;){var a=t.value;"string"!==typeof a&&(a=a.toString())}}catch(r){o.e(r)}finally{o.f()}return n}function Wo(e){var t,n=Object(he.a)(e),o=Object(s.a)(n);try{for(o.s();!(t=o.n()).done;){var a=t.value;"string"===typeof a&&(a=parseInt(a))}}catch(r){o.e(r)}finally{o.f()}return n}function zo(e){var t,n=[],o=Object(s.a)(e);try{for(o.s();!(t=o.n()).done;){var a=t.value,r=a.type,i=void 0===a.correctAnswers?a.correctAnswersIds:a.correctAnswers;n.push({type:r,answers:i})}}catch(c){o.e(c)}finally{o.f()}return n}var Ko=function(e){var t=e.allQuestionsDescriptors,n=e.userAnswers;return console.log(t),console.log(n),Object(Hn.jsxs)("div",{className:"container my-3",children:[Object(Hn.jsx)("a",{href:"../",children:Object(Hn.jsx)("button",{type:"button",className:"btn btn-primary",children:"Back to theory"})}),Object(Hn.jsx)("button",{type:"submit",className:"btn btn-primary mx-3",onClick:Ho.bind(this,t,n),children:"Submit answers"})]})};var Vo=function(e){var t=Object(Cn.a)(e.answersHandel,2),n=t[0],o=t[1],a=Object(Cn.a)(e.isQuizFinishedHandel,2),r=(a[0],a[1]),i=e.currentQuestionDescriptor,s=e.currentQuestionNr,c=e.nrOfQuestions,l=i.category,d=i.level,p=i.subcategory,m=i.question,u=i.answers,h=(i.correctAnswersIds,i.correctAnswers),b=i.type;function f(e,t){return function(e){var t=e.target.value,a=e.target.type;e.target.checked;"radio"===a?function(e){n[s]=[e],o(n)}(t):"checkbox"===a?function(e){if(!1===n[s].includes(e))n[s].push(e);else{var t=n[s].findIndex((function(t){return e===t}));n[s].splice(t,1)}o(n)}(t):console.warn("question.js: What? Target should be either radio or change and is ".concat(a))}}function y(e){return n[s].includes(e.toString())}function g(e){r(!0)}function v(){return"radio"===b?Object(Hn.jsx)("form",{onSubmit:g,children:u.map((function(e,t){return Object(Hn.jsxs)("div",{className:"form-check",children:[Object(Hn.jsx)("input",{type:"radio",className:"form-check-input",id:"radio".concat(t),name:"answers",value:e.originalIndex,onChange:f(),defaultChecked:y(e.originalIndex)}),Object(Hn.jsx)("label",{className:"fomr-check-label",htmlFor:"radio".concat(t),dangerouslySetInnerHTML:zn(e.content)})]},e.originalIndex)}))}):Object(Hn.jsx)(Hn.Fragment,{})}function w(){function e(e,t){var a=e,r=t;return function(e){var t=e.target.value.trim();!function(e,t,a){function r(e,t){var n=e.length;if(n<t)for(var o=0;o<t-n;o++)e.push([])}var i=n[s],c=u.map((function(e){return e.split("{{{}}}").length-1}));r(i,c.length),function(e,t){for(var n=0;n<e.length;n++){var o=t[n];r(e[n],o)}}(i,c),i[e][t]=a,n[s]=i,o(n),console.log(i)}(a,r,t)}}function t(e,t){var o=n[s];return Array.isArray(o)?void 0===o[e]||void 0===o[e][t]?"":o[e][t]:""}function a(e,t){var n=h[e][t];return Math.ceil(n.length/2)+2}function r(n,o){var r=n.trim().split("{{{}}}");return Object(Hn.jsx)("div",{children:r.map((function(n,i){return Object(Hn.jsxs)("span",{children:[Object(Hn.jsx)("span",{dangerouslySetInnerHTML:zn(n)}),i<r.length-1?Object(Hn.jsx)("input",{size:a(o,i).toString(),type:"text",onBlur:e(o,i),defaultValue:t(o,i)}):Object(Hn.jsx)(Hn.Fragment,{})]},i)}))},n)}return"fill-in"===b?u.map((function(e,t){return Object(Hn.jsxs)(Hn.Fragment,{children:[Object(Hn.jsx)("div",{className:"card bg-light text-dark",children:Object(Hn.jsx)("div",{className:"card-body",children:r(e,t)})},t),Object(Hn.jsx)("br",{})]})})):Object(Hn.jsx)(Hn.Fragment,{})}function j(){return"checkbox"===b?Object(Hn.jsx)("form",{onSubmit:g,children:u.map((function(e,t){return Object(Hn.jsxs)("div",{className:"form-check",children:[Object(Hn.jsx)("input",{type:"checkbox",className:"form-check-input",id:"checkbox".concat(t),name:"answers",value:e.originalIndex,onChange:f(),defaultChecked:y(e.originalIndex)}),Object(Hn.jsx)("label",{className:"form-check-label",htmlFor:"checkobox".concat(t),dangerouslySetInnerHTML:zn(e.content)})]},e.originalIndex)}))}):Object(Hn.jsx)(Hn.Fragment,{})}return Object(Hn.jsxs)("div",{className:"container",children:[Object(Hn.jsxs)("h3",{children:["Question ",s+1," of ",c]}),Object(Hn.jsx)("span",{className:"badge rounded-pill bg-primary",children:l}),Object(Hn.jsx)("span",{className:"badge rounded-pill bg-primary",children:p}),Object(Hn.jsx)("span",{className:"badge rounded-pill bg-primary",children:d}),Object(Hn.jsx)("div",{className:"alert alert-light",dangerouslySetInnerHTML:zn(m)}),Object(Hn.jsx)(v,{}),Object(Hn.jsx)(j,{}),Object(Hn.jsx)(w,{})]})};var Go=function(e){var t,n=e.maxNrOfItems,o=Object(Cn.a)(e.currentItemNrHandel,2),a=o[0],r=o[1],i=(t=n,Object(he.a)(Array(function(e){return"number"===typeof e?e:parseInt(e)}(t)).keys()));function s(e){return function(){e!==a&&r(e)}}return Object(Hn.jsx)("ul",{className:"pagination justify-content-center",children:i.map((function(e){return Object(Hn.jsx)("li",{className:"page-item ".concat((t=e,t===a?"active":"")),onClick:s(e),children:Object(Hn.jsx)("a",{className:"page-link",href:"#",children:e+1})},e);var t}))})};var Jo=function(e){var t=Object(o.useState)([]),n=Object(Cn.a)(t,2),a=n[0],r=n[1],i=Object(o.useState)("easy"),s=Object(Cn.a)(i,2),c=s[0],l=s[1],d=Object(o.useState)(4),p=Object(Cn.a)(d,2),m=p[0],u=p[1],h=Object(o.useState)(-1),b=Object(Cn.a)(h,2),f=b[0],y=b[1],g=Object(o.useState)([]),v=Object(Cn.a)(g,2),w=v[0],j=v[1],O=Object(o.useState)([]),T=Object(Cn.a)(O,2),x=T[0],S=T[1],k=Object(o.useState)(!1),N=Object(Cn.a)(k,2),I=N[0],P=N[1];function A(){return-1===f?Object(Hn.jsx)(Lo,{categoriesHandel:[a,r],hardnessLevelHandel:[c,l],nrOfQuestionsHandel:[m,u],currentQuestionNrHandel:[f,y],setOfQuestionsHandel:[x,S],currentQuestionDescriptor:x[f],setCurrentAnswers:j,answers:w}):Object(Hn.jsx)(Hn.Fragment,{})}function E(){return f>-1&&!I?Object(Hn.jsx)(Vo,{currentQuestionNrHandel:[f,y],answersHandel:[w,j],isQuizFinishedHandel:[I,P],currentQuestionDescriptor:x[f],currentQuestionNr:f,nrOfQuestions:m}):Object(Hn.jsx)(Hn.Fragment,{})}function C(){return f>-1&&!I?Object(Hn.jsx)(Go,{maxNrOfItems:m,currentItemNrHandel:[f,y]}):Object(Hn.jsx)(Hn.Fragment,{})}function L(){return f>-1&&!I?Object(Hn.jsx)(Ko,{allQuestionsDescriptors:x,userAnswers:w}):Object(Hn.jsx)(Hn.Fragment,{})}return Object(o.useEffect)((function(){console.log(w)})),Object(Hn.jsxs)(Hn.Fragment,{children:[Object(Hn.jsx)(A,{}),Object(Hn.jsx)(E,{}),Object(Hn.jsx)(L,{}),Object(Hn.jsx)(C,{})]})};var Xo=function(e){var t=Object(Cn.a)(e.categoriesHandel,2),n=(t[0],t[1],Object(Cn.a)(e.currentQuestionNrHandel,2)),o=(n[0],n[1]),a=Object(Cn.a)(e.setOfQuestionsHandel,2),r=(a[0],a[1]),i=e.setCurrentAnswers;function c(e){return["radio","checkbox"].includes(e.type)}return e.answers,Object(Hn.jsx)("div",{className:"container",children:Object(Hn.jsxs)("form",{onSubmit:function(e){e.preventDefault();var t=function(e){var t=e.target.cat,n=[];return t.forEach((function(e){e.checked&&n.push(e.value)})),n}(e),n=Co(t),a=n.length;!function(e){var t,n=Object(s.a)(e);try{for(n.s();!(t=n.n()).done;){var o=t.value;if(c(o)){var a=Po(o.answers);o.answers=a}}}catch(r){n.e(r)}finally{n.f()}}(n),r(n),i(Object(he.a)(Array(a)).map((function(e){return[]}))),o(0)},children:[Object(Hn.jsxs)("div",{children:[Object(Hn.jsx)("h4",{children:"Select category"}),Object(Hn.jsxs)("div",{className:"form-check form-switch",children:[Object(Hn.jsx)("input",{className:"form-check-input",type:"checkbox",id:"jsCatSwitch",name:"cat",value:"js",defaultChecked:!0}),Object(Hn.jsx)("label",{className:"form-check-label",htmlFor:"jsCatSwitch",children:"JS"})]}),Object(Hn.jsxs)("div",{className:"form-check form-switch",children:[Object(Hn.jsx)("input",{className:"form-check-input",type:"checkbox",id:"jsCatSwitch",name:"cat",value:"ts"}),Object(Hn.jsx)("label",{className:"form-check-label",htmlFor:"jsCatSwitch",children:"TS"})]}),Object(Hn.jsxs)("div",{className:"form-check form-switch",children:[Object(Hn.jsx)("input",{className:"form-check-input",type:"checkbox",id:"jsCatSwitch",name:"cat",value:"css"}),Object(Hn.jsx)("label",{className:"form-check-label",htmlFor:"jsCatSwitch",children:"CSS"})]}),Object(Hn.jsxs)("div",{className:"form-check form-switch",children:[Object(Hn.jsx)("input",{className:"form-check-input",type:"checkbox",id:"jsCatSwitch",name:"cat",value:"html"}),Object(Hn.jsx)("label",{className:"form-check-label",htmlFor:"jsCatSwitch",children:"HTML"})]})]}),Object(Hn.jsx)("button",{type:"submit",className:"btn btn-primary mt-3",children:"Submit"})]})})};var Yo=function(e){var t=Object(o.useState)([]),n=Object(Cn.a)(t,2),a=n[0],r=n[1],i=Object(o.useState)(-1),s=Object(Cn.a)(i,2),c=s[0],l=s[1],d=Object(o.useState)([]),p=Object(Cn.a)(d,2),m=p[0],u=p[1],h=Object(o.useState)([]),b=Object(Cn.a)(h,2),f=b[0],y=b[1],g=Object(o.useState)(!1),v=Object(Cn.a)(g,2),w=v[0],j=v[1];function O(){return-1===c?Object(Hn.jsx)(Xo,{categoriesHandel:[a,r],currentQuestionNrHandel:[c,l],setOfQuestionsHandel:[f,y],currentQuestionDescriptor:f[c],setCurrentAnswers:u,answers:m}):Object(Hn.jsx)(Hn.Fragment,{})}function T(){return c>-1&&!w?Object(Hn.jsx)(Vo,{currentQuestionNrHandel:[c,l],answersHandel:[m,u],isQuizFinishedHandel:[w,j],currentQuestionDescriptor:f[c],currentQuestionNr:c,nrOfQuestions:f.length}):Object(Hn.jsx)(Hn.Fragment,{})}function x(){var e=f.length;return c>-1&&!w?Object(Hn.jsx)(Go,{maxNrOfItems:e,currentItemNrHandel:[c,l]}):Object(Hn.jsx)(Hn.Fragment,{})}function S(){return c>-1&&!w?Object(Hn.jsx)(Ko,{allQuestionsDescriptors:f,userAnswers:m}):Object(Hn.jsx)(Hn.Fragment,{})}return Object(o.useEffect)((function(){console.log(m)})),Object(Hn.jsxs)(Hn.Fragment,{children:[Object(Hn.jsx)(O,{}),Object(Hn.jsx)(T,{}),Object(Hn.jsx)(S,{}),Object(Hn.jsx)(x,{})]})},Qo=function(e){e&&e instanceof Function&&n.e(3).then(n.bind(null,62)).then((function(t){var n=t.getCLS,o=t.getFID,a=t.getFCP,r=t.getLCP,i=t.getTTFB;n(e),o(e),a(e),r(e),i(e)}))},$o=(n(34),n(35),n(14)),Zo=n.n($o),ea=n(22),ta=function(){onmessage=function(e){var t=e.data.request,n=t.request,o=t.operation,a=t.data,r=t.expectedResult,i=function(e,t){return"strong"===e?function(e){for(var t=1,n=1;n<=e;n++)t*=n;return[t]}(t[0]):null}(o,a),s=function(e,t,n){if("test"===e)return o=t,a=n,JSON.stringify(o)===JSON.stringify(a);var o,a}(n,i,r);postMessage(s)}},na=n(15),oa=n(11),aa=n(16),ra=n(17),ia=n(19),sa=function(e){Object(aa.a)(t,e);Object(ra.a)(t);function t(e){Object(na.a)(this,t);var n=e.toString(),o=new Blob(["(".concat(n,")()")]);return Object(oa.a)(undefined,new Worker(URL.createObjectURL(o)))}return t}(Object(ia.a)(Worker));function ca(e){var t=Object(o.useState)(e.data),n=Object(Cn.a)(t,2),a=n[0],r=(n[1],Object(o.useState)([])),i=Object(Cn.a)(r,2),s=(i[0],i[1],Object(o.useState)(a.request)),c=Object(Cn.a)(s,2),l=c[0],d=(c[1],Object(o.useState)(a.response)),p=Object(Cn.a)(d,2),m=p[0],u=p[1],h=Object(o.useState)(a.expectedResult),b=Object(Cn.a)(h,2),f=b[0],y=(b[1],Object(o.useState)(!1)),g=Object(Cn.a)(y,2);g[0],g[1];return Object(o.useEffect)((function(){la(a).then((function(e){return console.log("RESOLVED "+e),u(e+""),Promise.resolve()})).catch((function(e){console.log(e)}))}),[m]),Object(Hn.jsx)(Hn.Fragment,{children:Object(Hn.jsxs)("div",{className:"nextLine container mt-3",children:[Object(Hn.jsx)("span",{className:"badge bg-primary m-1",children:l}),Object(Hn.jsxs)("span",{className:"badge bg-success m-1",children:[m," "]}),Object(Hn.jsx)("span",{className:"badge bg-warning m-1",children:f})]})})}function la(e,t,n,o){return da.apply(this,arguments)}function da(){return(da=Object(ea.a)(Zo.a.mark((function e(t,n,o,a){var r;return Zo.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(r=new sa(ta)).postMessage({request:t,operation:n,data:o,expectedResult:a}),e.abrupt("return",new Promise((function(e){r.onmessage=function(t){e(t.data)}})));case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var pa=function(e){var t=Object(o.useState)([{request:"test",operation:"strong",data:[6],expectedResult:[720]},{request:"test",operation:"strong",data:[8],expectedResult:[40320]},{request:"test",operation:"strong",data:[10],expectedResult:[3628800]}]),n=Object(Cn.a)(t,2),a=n[0],r=(n[1],Object(o.useState)([])),i=Object(Cn.a)(r,2),s=i[0];return i[1],Object(Hn.jsxs)(Hn.Fragment,{children:[a.map((function(e,t,n){console.log(e);var o=n[t];return o.request,o.result,o.expectedResult,Object(Hn.jsx)(ca,{data:e},t)})),Object(Hn.jsx)("span",{children:JSON.stringify(s[0])})]})},ma=function(){onmessage=function(e){console.log(e);var t=e.ports[0];t.postMessage("connected"),console.log("connected"),t.onmessage=function(e){t.postMessage("Shared message"),t.postMessage(e)}}};SharedWorker;function ua(e){return console.log(ma),'\n<body>\n    <style>body{background-color:#ddd;}</style>\n    <div id ="outlet"></div>\n    <script>\n        '.concat("\n    let worker = (SharedWorkerBuilder(onmessage));\n    let outlet = document.getElementById('outlet');\n    console.log(worker)\n    worker.port.start(); \n    worker.port.addEventListener('message', function(e){console.log(e);outlet.innerText += e.data;});\n    worker.port.onmessage = function(e){console.log(e);outlet.innerText += e.data;};\n    worker.port.start(); \n    worker.port.postMessage(JSON.stringify({type: 'introduction'}));\n    worker.port.postMessage(JSON.stringify({name:'".concat(e,"', type:'frameData'}));\n    console.log(worker)\n    "),"\n    <\/script>\n</body>\n    ")}var ha=function(e){return Object(Hn.jsxs)(Hn.Fragment,{children:[Object(Hn.jsx)("iframe",{className:"m-2",title:"alias",srcDoc:ua(1)}),Object(Hn.jsx)("iframe",{className:"m-2",title:"alias",srcDoc:ua(2)})]})};i.a.render(Object(Hn.jsx)(a.a.StrictMode,{children:Object(Hn.jsx)(Ln.a,{children:Object(Hn.jsxs)(lo.c,{children:[Object(Hn.jsx)(lo.a,{path:"/",element:Object(Hn.jsx)(uo,{})}),Object(Hn.jsx)(lo.a,{path:"about",element:Object(Hn.jsx)(uo,{})}),Object(Hn.jsx)(lo.a,{path:"/theory/:topic",element:Object(Hn.jsx)(uo,{})}),Object(Hn.jsx)(lo.a,{path:"quiz",element:Object(Hn.jsx)(Jo,{})}),Object(Hn.jsx)(lo.a,{path:"quizTestMode",element:Object(Hn.jsx)(Yo,{})}),Object(Hn.jsx)(lo.a,{path:"dedicatedWobWorker",element:Object(Hn.jsx)(pa,{})}),Object(Hn.jsx)(lo.a,{path:"sharedWebWorker",element:Object(Hn.jsx)(ha,{})})]})})}),document.getElementById("root")),Qo()}},[[58,1,2]]]);
//# sourceMappingURL=main.b3ff77e9.chunk.js.map